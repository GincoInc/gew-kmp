syntax = "proto3";

package adamant.teller.v1;

import "gincoinc/adamant/global/v1/adamantglobalv1/enum.proto";
import "gincoinc/adamant/global/v1/adamantglobalv1/global_api.proto";
import "gincoinc/adamant/global/v1/adamantglobalv1/model.proto";
import "gincoinc/global/v1/gincoincglobalv1/enum.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

option go_package = "github.com/GincoInc/gew-kmp/gen/gincoinc/adamant/teller/v1/adamanttellerv1";
option java_multiple_files = true;
option java_outer_classname = "TellerAPIProto";

// =============================================================================
//  Service
// =============================================================================

service TellerAPI {
  rpc CreateWallet(CreateWalletRequest) returns (adamant.global.v1.CreateWalletResponse) {}
  // Get wallet information. the wallet model includes balance, address etc.
  rpc GetWallet(adamant.global.v1.GetWalletRequest) returns (adamant.global.v1.Wallet) {}
  rpc ListWallets(adamant.global.v1.ListWalletsRequest) returns (adamant.global.v1.ListWalletsResponse) {}
  rpc ListWalletsByFilter(adamant.global.v1.ListWalletsByFilterRequest) returns (adamant.global.v1.ListWalletsResponse) {}
  rpc ListStakingWalletsByFilter(adamant.global.v1.ListStakingWalletsByFilterRequest) returns (adamant.global.v1.ListStakingWalletsResponse) {}
  rpc ListBaseWallets(adamant.global.v1.ListBaseWalletsRequest) returns (adamant.global.v1.ListBaseWalletsResponse) {}
  rpc GetSpendableBalance(adamant.global.v1.GetSpendableBalanceRequest) returns (adamant.global.v1.GetSpendableBalanceResponse) {}
  rpc InitializeXRPWallet(InitializeXRPWalletRequest) returns (google.protobuf.Empty) {}
  rpc InitializeWallet(InitializeWalletRequest) returns (google.protobuf.Empty) {}
  rpc UpdateDestinationWalletID(adamant.global.v1.UpdateDestinationWalletIDRequest) returns (google.protobuf.Empty) {}
  rpc GetCosmosBalance(adamant.global.v1.GetCosmosBalanceRequest) returns (adamant.global.v1.GetCosmosBalanceResponse) {}
  rpc ListCosmosDelegateHistories(adamant.global.v1.ListCosmosDelegateHistoriesRequest) returns (adamant.global.v1.ListCosmosDelegateHistoriesResponse) {}

  // Create a new address for an existing wallet
  rpc CreateAddress(adamant.global.v1.CreateAddressRequest) returns (adamant.global.v1.CreateAddressResponse) {}
  rpc CreateIOSTAccount(adamant.global.v1.CreateIOSTAccountRequest) returns (adamant.global.v1.CreateIOSTAccountResponse) {}
  rpc ListSymbolChildAddresses(adamant.global.v1.ListSymbolChildAddressesRequest) returns (adamant.global.v1.ListSymbolChildAddressesResponse) {}
  rpc GetAddress(adamant.global.v1.GetAddressRequest) returns (adamant.global.v1.Address) {}
  rpc GetAddressByAddress(adamant.global.v1.GetAddressByAddressRequest) returns (adamant.global.v1.Address) {}
  rpc GetAddressByAddressCoin(adamant.global.v1.GetAddressByAddressCoinRequest) returns (adamant.global.v1.Address) {}
  rpc GetAddressByIndex(adamant.global.v1.GetAddressByIndexRequest) returns (adamant.global.v1.Address) {}
  rpc ListAddresses(adamant.global.v1.ListAddressesRequest) returns (adamant.global.v1.ListAddressesResponse) {}
  rpc ImportAddress(adamant.global.v1.ImportAddressRequest) returns (google.protobuf.Empty) {}
  // Get an address which hold ETH for ethereum wallet/address creation etc
  rpc GetEthereumFeeAddress(adamant.global.v1.GetEthereumFeeAddressRequest) returns (adamant.global.v1.EthereumFeeAddress) {}

  rpc UpdateAddressBalance(adamant.global.v1.UpdateAddressBalanceRequest) returns (google.protobuf.Empty) {}

  rpc ListColdFeeDepositAddresses(ListColdFeeDepositAddressesRequest) returns (ListColdFeeDepositAddressesResponse) {}
  rpc ListHotFeeDepositAddresses(ListHotFeeDepositAddressesRequest) returns (ListHotFeeDepositAddressesResponse) {}

  rpc CreateTransaction(adamant.global.v1.CreateTransactionRequest) returns (adamant.global.v1.CreateTransactionResponse) {}
  rpc SignTransaction(SignTransactionRequest) returns (google.protobuf.Empty) {}
  rpc SendTransaction(SendTransactionRequest) returns (adamant.global.v1.SendTransactionResponse) {}
  rpc ResendTransaction(ResendTransactionRequest) returns (adamant.global.v1.ResendTransactionResponse) {}
  rpc CancelTransaction(adamant.global.v1.CancelTransactionRequest) returns (google.protobuf.Empty) {}
  rpc ReplaceTransaction(adamant.global.v1.ReplaceTransactionRequest) returns (adamant.global.v1.ReplaceTransactionResponse) {}
  rpc IsTransactionReplaceable(adamant.global.v1.IsTransactionReplaceableRequest) returns (adamant.global.v1.IsTransactionReplaceableResponse) {}
  rpc GetTransaction(adamant.global.v1.GetTransactionRequest) returns (adamant.global.v1.Transaction) {}
  rpc GetTransactionByTxID(adamant.global.v1.GetTransactionByTxIDRequest) returns (adamant.global.v1.Transaction) {}
  rpc ListTransactions(adamant.global.v1.ListTransactionsRequest) returns (adamant.global.v1.ListTransactionsResponse) {}
  rpc ListTransactionsByFilter(adamant.global.v1.ListTransactionsByFilterRequest) returns (adamant.global.v1.ListTransactionsResponse) {}

  // Exit ethereum validators
  rpc ExitEthereumStakingValidators(adamant.global.v1.ExitEthereumStakingValidatorsRequest) returns (adamant.global.v1.ExitEthereumStakingValidatorsResponse) {}

  // List transfers for a given wallet. Ordered by update time desc
  rpc ListTransfers(adamant.global.v1.ListTransfersRequest) returns (adamant.global.v1.ListTransfersResponse) {}
  rpc ListTransfersByFilter(adamant.global.v1.ListTransfersByFilterRequest) returns (adamant.global.v1.ListTransfersResponse) {}

  // Get rates by snapshot id
  rpc GetRateSnapshot(adamant.global.v1.GetRateSnapshotRequest) returns (adamant.global.v1.RateSnapshot) {}
  // Get latest rates set to your organization
  rpc GetLatestRateSnapshot(adamant.global.v1.GetLatestRateSnapshotRequest) returns (adamant.global.v1.RateSnapshot) {}
  // Set rates to your organization
  rpc SetRates(adamant.global.v1.SetRatesRequest) returns (adamant.global.v1.SetRatesResponse) {}

  rpc CalculateFee(adamant.global.v1.CalculateFeeRequest) returns (adamant.global.v1.CalculateFeeResponse) {}
  rpc GetRecommendedFeeRate(adamant.global.v1.GetRecommendedFeeRateRequest) returns (adamant.global.v1.GetRecommendedFeeRateResponse) {}
  // Validate format of given address
  rpc ValidateAddress(adamant.global.v1.ValidateAddressRequest) returns (adamant.global.v1.ValidateAddressResponse) {}
  rpc FlushBalance(adamant.global.v1.FlushBalanceRequest) returns (adamant.global.v1.FlushBalanceResponse) {}

  rpc ListAuditLogs(adamant.global.v1.ListAuditLogsRequest) returns (adamant.global.v1.ListAuditLogsResponse) {}

  rpc ListStakingHistoriesByFilter(adamant.global.v1.ListStakingHistoriesByFilterRequest) returns (adamant.global.v1.ListStakingHistoriesResponse) {}

  rpc ListStakingValidatorsByFilter(adamant.global.v1.ListStakingValidatorsByFilterRequest) returns (adamant.global.v1.ListStakingValidatorsResponse) {}

  rpc SignMessage(SignMessageRequest) returns (SignMessageResponse) {}

  // ProgmatCoin
  rpc ProgmatCoinInitialize(ProgmatCoinInitializeRequest) returns (adamant.global.v1.CreateTransactionResponse) {}
  rpc ProgmatCoinConfigureMinter(ProgmatCoinConfigureMinterRequest) returns (adamant.global.v1.CreateTransactionResponse) {}
  rpc ProgmatCoinMintAndTransfer(ProgmatCoinMintAndTransferRequest) returns (adamant.global.v1.CreateTransactionResponse) {}
  rpc ProgmatCoinMint(ProgmatCoinMintRequest) returns (adamant.global.v1.CreateTransactionResponse) {}
  rpc ProgmatCoinBurn(ProgmatCoinBurnRequest) returns (adamant.global.v1.CreateTransactionResponse) {}
  rpc ProgmatCoinAddToWhitelist(ProgmatCoinAddToWhitelistRequest) returns (adamant.global.v1.CreateTransactionResponse) {}
  rpc ProgmatCoinRemoveFromWhitelist(ProgmatCoinRemoveFromWhitelistRequest) returns (adamant.global.v1.CreateTransactionResponse) {}
  rpc ProgmatCoinAddToBlacklist(ProgmatCoinAddToBlacklistRequest) returns (adamant.global.v1.CreateTransactionResponse) {}
  rpc ProgmatCoinRemoveFromBlacklist(ProgmatCoinRemoveFromBlacklistRequest) returns (adamant.global.v1.CreateTransactionResponse) {}
  rpc ProgmatCoinConfiscate(ProgmatCoinConfiscateRequest) returns (adamant.global.v1.CreateTransactionResponse) {}
  rpc ProgmatCoinPause(ProgmatCoinPauseRequest) returns (adamant.global.v1.CreateTransactionResponse) {}
  rpc ProgmatCoinUnpause(ProgmatCoinUnpauseRequest) returns (adamant.global.v1.CreateTransactionResponse) {}
}

message CreateWalletRequest {
  string wallet_name = 1 [(validate.rules).string = {
    min_len: 1,
    max_len: 40
  }];
  gincoinc.global.v1.Coin coin = 2 [(validate.rules).enum = {
    defined_only: true,
    not_in: [
      0
    ]
  }];
  optional gincoinc.global.v1.Network network = 7 [(validate.rules).enum = {
    defined_only: true
  }];
  adamant.global.v1.WalletType wallet_type = 3 [(validate.rules).enum = {
    defined_only: true,
    not_in: [
      0,
      2
    ]
  }];
  gincoinc.global.v1.AddressType address_type = 4 [(validate.rules).enum = {
    defined_only: true,
    not_in: [
      0
    ]
  }];
  // required when create receive only wallet
  string destination_wallet_id = 5 [(validate.rules).string = {
    pattern: "^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
  // optional
  string inherit_wallet_id = 6 [(validate.rules).string = {
    pattern: "^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
}

message InitializeXRPWalletRequest {
  string wallet_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
}

message InitializeWalletRequest {
  string wallet_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
}

message SignTransactionRequest {
  string wallet_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
  string transaction_id = 2 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
}

message SignMessageRequest {
  string wallet_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
  optional string address_id = 2 [(validate.rules).string = {
    pattern: "^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
  optional string address = 4;
  string message = 3;
}

message SignMessageResponse {
  string signature = 1;
}

message SendTransactionRequest {
  string wallet_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
  string transaction_id = 2 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
}

message ResendTransactionRequest {
  string wallet_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
  string transaction_id = 2 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
}

// ProgmatCoin
message ProgmatCoinInitializeRequest {
  string wallet_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
  uint64 fee_rate = 2;
  string contract_address = 3 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string token_name = 4 [(validate.rules).string = {
    min_len: 1,
    max_len: 40
  }];
  string token_symbol = 5 [(validate.rules).string = {
    min_len: 1,
    max_len: 10
  }];
  string token_currency = 6 [(validate.rules).string = {
    min_len: 1,
    max_len: 3
  }];
  uint32 token_decimals = 7 [(validate.rules).uint32.lt = 100];
  string new_master_minter = 8 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string new_pauser = 9 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string new_white_and_black_lister = 10 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string new_confiscator = 11 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string new_owner = 12 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
}

message ProgmatCoinConfigureMinterRequest {
  string wallet_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
  uint64 fee_rate = 2;
  string contract_address = 3 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string address = 4 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string minter_allowed_amount = 5;
}

message ProgmatCoinMintAndTransferRequest {
  string wallet_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
  uint64 fee_rate = 2;
  string contract_address = 3 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string mint_address = 4 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string transfer_address = 5 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string amount = 6;
}

message ProgmatCoinMintRequest {
  string wallet_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
  uint64 fee_rate = 2;
  string contract_address = 3 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string address = 4 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string amount = 5;
}

message ProgmatCoinBurnRequest {
  string wallet_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
  uint64 fee_rate = 2;
  string contract_address = 3 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string amount = 4;
}

message ProgmatCoinAddToWhitelistRequest {
  string wallet_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
  uint64 fee_rate = 2;
  string contract_address = 3 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string address = 4 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
}

message ProgmatCoinRemoveFromWhitelistRequest {
  string wallet_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
  uint64 fee_rate = 2;
  string contract_address = 3 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string address = 4 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
}

message ProgmatCoinAddToBlacklistRequest {
  string wallet_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
  uint64 fee_rate = 2;
  string contract_address = 3 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string address = 4 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
}

message ProgmatCoinRemoveFromBlacklistRequest {
  string wallet_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
  uint64 fee_rate = 2;
  string contract_address = 3 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string address = 4 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
}

message ProgmatCoinConfiscateRequest {
  string wallet_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
  uint64 fee_rate = 2;
  string contract_address = 3 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string black_listed_account = 4 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string to_account = 5 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
  string amount = 6;
}

message ProgmatCoinPauseRequest {
  string wallet_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
  uint64 fee_rate = 2;
  string contract_address = 3 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
}

message ProgmatCoinUnpauseRequest {
  string wallet_id = 1 [(validate.rules).string = {
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
  uint64 fee_rate = 2;
  string contract_address = 3 [(validate.rules).string = {
    pattern: "^(0x)?[0-9a-fA-F]{40}$"
  }];
}

message ListColdFeeDepositAddressesRequest {}

message ListColdFeeDepositAddressesResponse {
  repeated adamant.global.v1.CallerAddress caller_addresses = 1;
}

message ListHotFeeDepositAddressesRequest {}

message ListHotFeeDepositAddressesResponse {
  repeated adamant.global.v1.FeeDepositAddress fee_deposit_addresses = 1;
}
