syntax = "proto3";

package adamant.global.v1;

import "gincoinc/adamant/global/v1/adamantglobalv1/enum.proto";
import "gincoinc/global/v1/gincoincglobalv1/enum.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

option go_package = "github.com/GincoInc/gew-kmp/gen/gincoinc/adamant/global/v1/adamantglobalv1";

// =============================================================================
//  Model
// =============================================================================

// The wallet model
message Wallet {
  string owner_id = 23; // organization id
  string wallet_id = 1; // id
  string name = 2; // name
  gincoinc.global.v1.Coin coin = 3; // The type of asset
  gincoinc.global.v1.Network network = 27; // The type of network
  uint32 hd_account = 17; // The number indicating what order the wallet is created
  WalletType wallet_type = 4; // type
  gincoinc.global.v1.AddressType address_type = 5; // type of address
  uint32 m = 6; // The number of signitures which is required to transfer asset
  uint32 n = 7; // The number of keys
  WalletState state = 8; // state
  repeated Key keys = 9; // keys
  repeated WalletMember members = 10; // members
  uint32 required_approval_count = 20; // The number of approvals by validator which is required to transfer
  // asset, update wallet info etc.
  double balance = 11; // number-typed balance
  string string_balance = 12; // string-typed balance
  string address = 13; // address
  string policy_id = 14; // The id of the policy which is adopted the wallet
  WalletProposal proposal = 18; // The proposal about updating the policy
  string destination_wallet_id = 19; // The id of wallet to which the tx is send (only wallet type is
  // WALLET_TYPE_SELF_CUSTODY_HOT_ETHEREUM_EOA_RECEIVE_ONLY)
  bool watch_only = 21; // The flag indicating the
  uint32 address_number = 22; // number of address (only watch_only is true)
  bool should_check_remittance = 24; // should check remittance
  string inherit_wallet_id = 25; // The wallet id of the inherited ethereum (only for ERC20 token)
  bool is_staking_available = 26; // The flag indicating the wallet is available for staking
  google.protobuf.Timestamp create_time = 15; // the time at which the wallet was created
  google.protobuf.Timestamp update_time = 16; // the time at which the wallet was updated
}

message WalletWithoutBalance {
  string owner_id = 20;
  string wallet_id = 1;
  string name = 2;
  gincoinc.global.v1.Coin coin = 3;
  gincoinc.global.v1.Network network = 23;
  uint32 hd_account = 4;
  WalletType wallet_type = 5;
  gincoinc.global.v1.AddressType address_type = 6;
  uint32 m = 7;
  uint32 n = 8;
  WalletState state = 9;
  repeated Key keys = 10;
  repeated WalletMember members = 11;
  uint32 required_approval_count = 12;
  string address = 13;
  string policy_id = 14;
  WalletProposal proposal = 15;
  string destination_wallet_id = 16;
  bool watch_only = 19;
  bool should_check_remittance = 21;
  string inherit_wallet_id = 22;
  google.protobuf.Timestamp create_time = 17;
  google.protobuf.Timestamp update_time = 18;
}

// The staking wallet model
message StakingWallet {
  string owner_id = 1; // organization id
  string wallet_id = 2; // id
  string name = 3; // name
  gincoinc.global.v1.Coin coin = 4; // The type of asset
  WalletType wallet_type = 5; // type
  gincoinc.global.v1.AddressType address_type = 6; // type of address
  WalletState state = 7; // state
  double balance = 8; // number-typed balance
  string string_balance = 9; // string-typed balance
  double spendable_balance = 10; // number-typed spendable balance
  string string_spendable_balance = 11; // string-typed spendable balance
  double staking_balance = 12; // number-typed staking balance
  string string_staking_balance = 13; // string-typed staking balance
  double claimable_reward_balance = 14; // number-typed claimable reward balance
  string string_claimable_reward_balance = 15; // string-typed claimable reward balance
  double withdrawable_unstaked_balance = 20; // number-typed withdrawable unstaked balance
  string string_withdrawable_unstaked_balance = 21; // string-typed withdrawable unstaked balance
  double frozen_unstaked_balance = 22; // number-typed frozen unstaked balance
  string string_frozen_unstaked_balance = 23; // string-typed frozen unstaked balance
  string address = 16; // address
  uint32 active_validators_count = 19; // number of active validators
  google.protobuf.Timestamp create_time = 17; // the time at which the wallet was created
  google.protobuf.Timestamp update_time = 18; // the time at which the wallet was updated
}

// The model of proposal to update wallet information
message WalletProposal {
  adamant.global.v1.WalletProposalType proposal_type = 7; // The type of the proposal
  string requester_account_id = 1; // The account id which create the proposal
  string requester_name = 2; // The name of the account which create the proposal
  string approver_account_id = 3; // The account id which approve the proposal
  string approver_name = 4; // The name of the account which approve the proposal
  string proposed_policy = 5; // The proposed id of the policy which is trying
  // to be applied in the proposal
  repeated string proposed_validators = 8; // The proposed list of ids of validator
  uint32 proposed_required_approval_count = 9; // The proposed number of approvals by validator
  bool is_reviewed = 6; // The flag which indicates the proposal is reviewed or not
}

// The model of wallet member
message WalletMember {
  string account_id = 1; // id
  adamant.global.v1.AccountType account_type = 2; // The account type
  string name = 3; // name
  string email = 4; // email
  RoleType role = 5; // The role type of account in organization
  bool is_key_registered = 6; // The flag which indicates the member registered a key to wallet
  bool is_master = 7; // The flag which indicates the member is master user
  // (only XRP wallet)
  bool is_validated_to_create_wallet = 8; // The flag which indicates the member is validated to create wallet
}

// The model of key pair
message Key {
  string wallet_id = 1; // The id of wallet
  string account_id = 2; // The id of account which owns the key
  adamant.global.v1.AccountType account_type = 3; // The account type of key owner
  string key_id = 4; // id
  uint32 key_index = 5; // The index of key
  uint32 hd_index = 6; // The index of hdkey
}

// The model of address
message Address {
  string wallet_id = 1; // The id of wallet
  string address_id = 2; // id
  gincoinc.global.v1.Coin coin = 3; // The type of coin
  gincoinc.global.v1.Network network = 14; // The network of coin
  string address = 4; // address
  uint32 index = 5; // The index of address
  uint32 hd_change = 13; // The HD change of address
  double balance = 6; // The number-typed balance corresponding to the address
  string string_balance = 7; // The string-typed balance corresponding to the address
  AddressState state = 8; // state
  gincoinc.global.v1.AddressType address_type = 9; // The type of address
  google.protobuf.Timestamp create_time = 11; // the time at which the address was created
  google.protobuf.Timestamp update_time = 12; // the time at which the address was updated
}

// The model of AddressWithoutBalance
message AddressWithoutBalance {
  string wallet_id = 1; // The id of wallet
  string address_id = 2; // id
  gincoinc.global.v1.Coin coin = 3; // The type of coin
  gincoinc.global.v1.Network network = 11; // The network of coin
  string address = 4; // address
  uint32 index = 5; // The index of address
  uint32 hd_change = 10; // The HD change of address
  AddressState state = 6; // state
  gincoinc.global.v1.AddressType address_type = 7; // The type of address
  google.protobuf.Timestamp create_time = 8; // the time at which the address was created
  google.protobuf.Timestamp update_time = 9; // the time at which the address was updated
}

message FlushedAddress {
  string wallet_id = 1; // The id of wallet
  string address_id = 2; // id
  gincoinc.global.v1.Coin coin = 3; // The type of coin
  string address = 4; // address
  uint32 index = 5; // The index of address
  double value = 6; // The number-typed value corresponding to the address
  string string_value = 7; // The string-typed string value corresponding to the address
  AddressState state = 9; // state
  gincoinc.global.v1.AddressType address_type = 10; // The type of address
}

// The model of address which hold ETH for ethereum wallet/address creation etc
message EthereumFeeAddress {
  string address = 1; // ethereum address
  double balance = 2; // The number-typed balance corresponding to the address
  string string_balance = 3; // The string-typed balance corresponding to the address
}

message AddressWithBalance {
  string address = 1; // address
  double balance = 2; // The number-typed balance corresponding to the address
  string string_balance = 3; // The string-typed balance corresponding to the address
  double fee_balance = 4; // The number-typed fee balance corresponding to the address
  string string_fee_balance = 5; // The string-typed string fee balance corresponding to the address
}

// The model of pre transaction
message PreTransaction {
  string pre_transaction_id = 1; // id
  string owner_id = 2; // organization id
  string external_id = 3; // external withdrawal id
  gincoinc.global.v1.Coin coin = 4; // The type of coin
  gincoinc.global.v1.Network network = 5; // Network
  repeated PreTransactionDetail details = 6; // Details about recipients
  PreTransactionState state = 7; // The state of pre-transaction
  string transaction_id = 8; // transaction id for which pre-transaction is used
  google.protobuf.Timestamp create_time = 9; // the time at which the pre transaction was created
  google.protobuf.Timestamp update_time = 10; // the time at which the pre transaction was updated
}

message PreTransactionDetail {
  string address = 1;
  string string_value = 2;
}

// The model of transaction
message Transaction {
  string wallet_id = 1; // The id of wallet
  string transaction_id = 2; // id
  gincoinc.global.v1.Coin coin = 3; // The type of coin
  gincoinc.global.v1.Network network = 47; // The network of coin
  string tx_id = 4; // txID
  string address = 5; // address
  double value = 6; // The number-typed amount of transaction
  string string_value = 7; // The string-typed amount of transaction
  double jpy_rate = 9; // The rate of fiat
  double fee = 10; // The number-typed amount of transaction fee
  string string_fee = 11; // The string-typed amount of transaction fee
  uint64 fee_rate = 12; // The fee rate of transaction (only BTC and its forks.
  // unit: sat/Byte)
  TransactionState state = 13; // state
  repeated Key signed_keys = 14; // The list of keys which signed to the transaction
  repeated TransactionMember members = 17; // members
  BitcoinSpecific bitcoin_specific = 22; // The Bitcoin specific fields
  EthereumSpecific ethereum_specific = 20; // The Ethereum specific fields
  LitecoinSpecific litecoin_specific = 23; // The Litecoin specific fields
  BitcoincashSpecific bitcoincash_specific = 24; // The Bitcoin Cash specific fields
  XrpSpecific xrp_specific = 21; // The XRP specific fields
  TronSpecific tron_specific = 25; // The Tron specific fields
  C0banSpecific c0ban_specific = 26; // The C0ban specific fields
  StellarSpecific stellar_specific = 27; // The Stellar specific fields
  CardanoSpecific cardano_specific = 28; // The Cardano specific fields
  SubstrateSpecific substrate_specific = 29; // The Substrate specific fields
  MonacoinSpecific monacoin_specific = 30; // The Monacoin specific fields
  NemSpecific nem_specific = 31; // The Nem specific fields
  IOSTSpecific iost_specific = 32; // The IOST specific fields
  PolygonSpecific polygon_specific = 33; // The Polygon specific fields
  KlaytnSpecific klaytn_specific = 34; // The Klaytn specific fields
  SymbolSpecific symbol_specific = 35; // The Symbol specific fields
  AvalancheSpecific avalanche_specific = 36; // The Avalanche specific fields
  OasysSpecific oasys_specific = 37; // The Oasys specific fields
  XdcSpecific xdc_specific = 38; // The Xdc specific fields
  CosmosSpecific cosmos_specific = 39; // The Cosmos specific fields
  EthereumClassicSpecific ethereum_classic_specific = 40; // The Ethereum Classic specific fields
  AlgorandSpecific algorand_specific = 41; // The Algorand specific fields
  HederaSpecific hedera_specific = 42; // The Hedera specific fields
  JapanOpenChainSpecific japan_open_chain_specific = 43; // The Japan Open Chain specific fields
  SolanaSpecific solana_specific = 44; // The Solana specific fields
  BNBSmartChainSpecific bnb_smart_chain_specific = 45; // The BNB Smart Chain specific fields
  FlareSpecific flare_specific = 46; // The Flare specific fields
  ArbitrumOneSpecific arbitrum_one_specific = 48; // The Arbitrum specific fields
  AptosSpecific aptos_specific = 49; // The Flare specific fields
  DogecoinSpecific dogecoin_specific = 50; // THe Doge specific fields
  AvalanchePlatformChainSpecific avalanche_platform_chain_specific = 51; // The Avalanche Platform Chain specific fields
  google.protobuf.Timestamp create_time = 18; // the time at which the transaction was created
  google.protobuf.Timestamp update_time = 19; // the time at which the transaction was updated
}

// The model of unconfirmed transaction
message UnconfirmedTransaction {
  string wallet_id = 1; // The id of wallet
  string transaction_id = 2; // id
  string tx_id = 5; // txID
  double value = 6; // The number-typed amount of transfer
  string string_value = 7; // The string-typed amount of transfer
  string address = 8; // The address of wallet to which the transfer send/receive
  double fee = 9; // The number-typed amount of transfer fee
  string string_fee = 10; // The string-typed amount of transfer fee
  uint64 fee_rate = 11; // The fee rate of transaction (only BTC and its forks unit: sat/Byte)
  google.protobuf.Timestamp create_time = 12; // the time at which the transfer was created

  BitcoinSpecific bitcoin_specific = 13; // The Bitcoin specific fields
  LitecoinSpecific litecoin_specific = 14; // The Litecoin specific fields
  BitcoincashSpecific bitcoincash_specific = 15; // The Bitcoin Cash specific fields
  C0banSpecific c0ban_specific = 16; // The C0ban specific fields
  CardanoSpecific cardano_specific = 17; // The Cardano specific fields
  MonacoinSpecific monacoin_specific = 18; // The Monacoin specific fields
  AvalanchePlatformChainSpecific avalanche_platform_chain_specific = 19; // The Avalanche Platform Chain specific fields
}

// The model of transaction member
message TransactionMember {
  string account_id = 1; // id
  adamant.global.v1.AccountType account_type = 2; // type
  string name = 3; // name
  string email = 4; // email
  RoleType role = 5; // role
  bool signed = 6; // The flag which indicates the member signed to the transaction
  bool validated = 7; // The flag which indicates the member validated to the transaction
}

// The model of transaction input
message TxInput {
  string tx_id = 1;
  uint32 tx_index = 2;
  double value = 3;
  string string_value = 4;
  uint32 tx_input_index = 5;
  string address = 6;
  string witness_script = 7;
  uint32 n_sequence = 8;
}

// The model of transaction output
message TxOutput {
  string address = 1;
  double value = 2;
  string string_value = 3;
  bool is_change = 4;
  uint32 tx_output_index = 5;
}

// The model of UTXO
message UTXO {
  string tx_id = 1;
  uint32 vout = 2;
  double value = 3;
  string string_value = 4;
  string address = 5;
  string transaction_id = 6 [(validate.rules).string = {
    pattern: "^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  }];
  CardanoUTXOSpecific cardano_specific = 7; // The Cardano specific fields
  AvalanchePlatformChainUTXOSpecific avalanche_platform_chain_specific = 8; // The Avalanche Platform Chain specific fields
}

// The model of Cardano specific fields of UTXO
message CardanoUTXOSpecific {
  repeated CardanoCustomToken tokens = 1;
}

// The model of Avalanche Platform Chain specific fields of UTXO
message AvalanchePlatformChainUTXOSpecific {
  uint32 threshold = 1;
  repeated string addresses = 2;
}

// The model of Cardano custom token
message CardanoCustomToken {
  string policy_id = 1;
  string asset_name = 2;
  double value = 3;
}

// The model of Bitcoin specific fields of transaction
message BitcoinSpecific {
  repeated TxInput tx_inputs = 1;
  repeated TxOutput tx_outputs = 2;
}

// The model of Litecoin specific fields of transaction
message LitecoinSpecific {
  repeated TxInput tx_inputs = 1;
  repeated TxOutput tx_outputs = 2;
}

// The model of Dogecoin specific fields of transaction
message DogecoinSpecific {
  repeated TxInput tx_inputs = 1;
  repeated TxOutput tx_outputs = 2;
}

// The model of BitcoinCash specific fields of transaction
message BitcoincashSpecific {
  repeated TxInput tx_inputs = 1;
  repeated TxOutput tx_outputs = 2;
}

// The model of Ethereum specific fields of transaction
message EthereumSpecific {
  uint64 gas_limit = 1;
  uint64 nonce = 2;
  bool is_next_nonce = 3;
  adamant.global.v1.EthereumContractMethodIDType method_id_type = 4;
  uint64 expiration = 5;
  string data = 6; // data
  bool is_staking_transaction = 7;
  string from_address = 8;
  string token_address = 9;
  uint64 chain_id = 10;
}

// The model of XRP specific fields of transaction
message XrpSpecific {
  uint32 sequence_number = 1;
  uint32 destination_tag = 2;
  gincoinc.global.v1.XRPTransactionType tx_type = 3;
  bool is_next_sequence_number = 4;
  string from_address = 5;
}

// The model of Tron specific fields of transaction
message TronSpecific {
  uint64 expiration = 1;
}

// The model of C0ban specific fields of transaction
message C0banSpecific {
  repeated TxInput tx_inputs = 1;
  repeated TxOutput tx_outputs = 2;
}

// The model of Stellar specific fields of transaction
message StellarSpecific {
  int64 sequence_number = 1;
  uint64 memo_id = 2 [jstype = JS_STRING];
  bool is_next_sequence_number = 3;
}

// The model of Cardano specific fields of transaction
message CardanoSpecific {
  repeated TxInput tx_inputs = 1;
  repeated TxOutput tx_outputs = 2;
}

// The model of Substrate specific fields of transaction
message SubstrateSpecific {
  uint64 nonce = 1;
  bool is_next_nonce = 2;
  repeated SubstrateMultisigTransaction substrate_multisig_transactions = 4;
  SubstrateCallType call_type = 6;
}

// The model of Monacoin specific fields of transaction
message MonacoinSpecific {
  repeated TxInput tx_inputs = 1;
  repeated TxOutput tx_outputs = 2;
}

// The model of Substrate specific fields of transaction
message NemSpecific {
  string message = 1;
  gincoinc.global.v1.NemTransactionType tx_type = 2;
  repeated NemMultisigTransaction nem_multisig_transactions = 3;
  uint64 expiration = 4;
  uint64 timestamp = 5;
}

// The model of IOST specific fields of transaction
message IOSTSpecific {
  string memo = 1;
  uint64 timestamp = 2;
  uint64 expiration = 3;
  adamant.global.v1.IOSTActionType type = 4;
}

// The model of Polygon specific fields of transaction
message PolygonSpecific {
  uint64 gas_limit = 1;
  uint64 nonce = 2;
  bool is_next_nonce = 3;
}

// The model of Klaytn specific fields of transaction
message KlaytnSpecific {
  uint64 gas_limit = 1;
  uint64 nonce = 2;
  bool is_next_nonce = 3;
}

// The model of Substrate specific fields of transaction
message SymbolSpecific {
  string message = 1;
  gincoinc.global.v1.SymbolTransactionType tx_type = 2;
  repeated SymbolMultisigTransaction symbol_multisig_transactions = 3;
  uint64 expiration = 4;
  uint64 timestamp = 5;
}

// The model of Avalanche specific fields of transaction
message AvalancheSpecific {
  uint64 gas_limit = 1;
  uint64 nonce = 2;
  bool is_next_nonce = 3;
  AtomicTx atomic_tx = 4;
}

// The model of Oasys specific fields of transaction
message OasysSpecific {
  uint64 gas_limit = 1;
  uint64 nonce = 2;
  bool is_next_nonce = 3;
}

// The model of Xdc specific fields of transaction
message XdcSpecific {
  uint64 gas_limit = 1;
  uint64 nonce = 2;
  bool is_next_nonce = 3;
}

// The model of Cosmos specific fields of transaction
message CosmosSpecific {
  uint64 gas_limit = 1;
  uint64 nonce = 2;
  bool is_next_nonce = 3;
  gincoinc.global.v1.CosmosMsgType type = 4;
  string memo = 5;
  double gas_adjustment = 6;
}

// The model of Ethereum Classic specific fields of transaction
message EthereumClassicSpecific {
  uint64 gas_limit = 1;
  uint64 nonce = 2;
  bool is_next_nonce = 3;
}

// The model of Algorand specific fields of transaction
message AlgorandSpecific {
  uint64 gas_limit = 1;
  uint64 nonce = 2;
  bool is_next_nonce = 3;
  string memo = 4;
  uint64 first_round = 5;
  uint64 last_round = 6;
  uint64 expiration = 7;
  uint64 timestamp = 8;
}

// The model of Hedera specific fields of transaction
message HederaSpecific {
  string memo = 1;
  uint64 timestamp = 2;
  uint64 expiration = 3;
}

// The model of Japan Open Chain specific fields of transaction
message JapanOpenChainSpecific {
  uint64 gas_limit = 1;
  uint64 nonce = 2;
  bool is_next_nonce = 3;
}

// The model of Solana specific fields of transaction
message SolanaSpecific {
  uint64 expiration = 1;
  gincoinc.global.v1.SolanaEventType event_type = 2;
  string from_address = 3;
  string recent_blockhash = 4;
  uint32 priority_fee_unit_limit = 5;
}

// The model of Aptos specific fields of transaction
message AptosSpecific {
  uint64 gas_limit = 1;
  uint64 nonce = 2;
  bool is_next_nonce = 3;
  uint64 expiration = 4;
}

// The model of BNB Smart Chain specific fields of transaction
message BNBSmartChainSpecific {
  uint64 gas_limit = 1;
  uint64 nonce = 2;
  bool is_next_nonce = 3;
}

// The model of Flare specific fields of transaction
message FlareSpecific {
  uint64 gas_limit = 1;
  uint64 nonce = 2;
  bool is_next_nonce = 3;
}

message ArbitrumOneSpecific {
  uint64 gas_limit = 1;
  uint64 nonce = 2;
  bool is_next_nonce = 3;
  string data = 4; // data
}

message AtomicTx {
  gincoinc.global.v1.AvalancheTxType tx_type = 1;
  repeated AvalancheTxInput tx_inputs = 2;
  repeated AvalancheTxOutput tx_outputs = 3;
}

message AvalanchePlatformChainSpecific {
  gincoinc.global.v1.AvalancheTxType tx_type = 1;
  repeated AvalancheTxInput tx_inputs = 2;
  repeated AvalancheTxOutput tx_outputs = 3;
  uint64 start_time = 4;
  uint64 end_time = 5;
}

message AvalancheTxInput {
  string tx_id = 1;
  uint32 input_index = 2;
  uint32 input_index_type = 3;
  double value = 4;
  string string_value = 5;
  repeated uint32 address_indices = 6;
}

message AvalancheTxOutput {
  uint32 output_index = 1;
  uint32 output_type = 2;
  double value = 3;
  string string_value = 4;
  uint64 locktime = 5;
  uint32 threshold = 6;
  bool is_change = 7;
  repeated string addresses = 8;
}

// The model of Substrate specific fields of CreateTransaction
message CreateTransactionSubstrateSpecific {
  string transaction_id = 1;
  SubstrateCallType call_type = 2;
  SubstrateCallType multisig_call_type = 3;
}

// The model of Ethereum specific fields of CreateTransaction
message CreateTransactionWalletConnectSpecific {
  WalletConnectCallRequestType call_request_type = 1;
  string call_request_params = 2;
}

// The model of Nem specific fields of CreateTransaction
message CreateTransactionNemSpecific {
  string transaction_id = 1;
  gincoinc.global.v1.NemTransactionType tx_type = 2;
  string message = 3;
  uint64 timestamp = 4;
}

// The model of IOST specific fields of CreateTransaction
message CreateTransactionIOSTSpecific {
  string memo = 1;
  uint64 timestamp = 2;
  // optional
  optional adamant.global.v1.IOSTActionType type = 3;
}

// The model of Symbol specific fields of CreateTransaction
message CreateTransactionSymbolSpecific {
  string transaction_id = 1;
  gincoinc.global.v1.SymbolTransactionType tx_type = 2;
  string message = 3;
  uint64 timestamp = 4;
}

// The model of Ethereum specific fields of CreateTransaction
message CreateTransactionEthereumSpecific {
  string data = 1;
  optional string staking_recipient_wallet_id = 2;
  optional gincoinc.global.v1.EthereumCallMethod call_method = 3;
  optional string utils_address = 4;
}

// The model of Cosmos specific fields of CreateTransaction
message CreateTransactionCosmosSpecific {
  gincoinc.global.v1.CosmosMsgType type = 1;
  string memo = 2;
}

// The model of Algorand specific fields of CreateTransaction
message CreateTransactionAlgorandSpecific {
  uint64 timestamp = 1;
}

// The model of Hedera specific fields of CreateTransaction
message CreateTransactionHederaSpecific {
  string memo = 1;
  uint64 timestamp = 2;
}

// The model of Solana specific fields of CreateTransaction
message CreateTransactionSolanaSpecific {
  gincoinc.global.v1.SolanaEventType event_type = 1;
}

// The model of Aptos specific fields of CreateTransaction
message CreateTransactionAptosSpecific {
  optional uint64 expiration = 1;
}

// The model of Avalanche specific fields of CreateTransaction
message CreateTransactionAvalancheSpecific {
  optional gincoinc.global.v1.AvalancheTxType tx_type = 1;
  optional ImportTxSpecific import_tx_specific = 2;
  optional StakingSpecific staking_specific = 3;
}

message ImportTxSpecific {
  string tx_id = 1;
}

message StakingSpecific {
  uint64 start_time = 1;
  uint64 end_time = 2;
}

// The model of SelectedUTXO fields of CreateTransaction
message SelectedUTXO {
  string tx_id = 1;
  uint32 vout = 2;
}

// The model of substrate multisig transaction
message SubstrateMultisigTransaction {
  string wallet_id = 1; // The id of wallet
  string transaction_id = 2; // id
  string substrate_multisig_transaction_id = 3;
  string account_id = 4; // AccountID
  string tx_id = 5; // txID
  string extrinsic_id = 6; // ExtrinsicID
  double jpy_rate = 7; // The rate of fiat
  double fee = 8; // The number-typed amount of transaction fee
  string string_fee = 9; // The string-typed amount of transaction fee
  uint64 nonce = 10;
  SubstrateCallType multisig_call_type = 11;
  TransactionState state = 12; // state
  google.protobuf.Timestamp create_time = 13; // the time at which the transaction was created
  google.protobuf.Timestamp update_time = 14; // the time at which the transaction was updated
}

// The model of nem multisig transaction
message NemMultisigTransaction {
  string wallet_id = 1; // The id of wallet
  string transaction_id = 2; // id
  string nem_multisig_transaction_id = 3;
  string account_id = 10; // AccountID
  gincoinc.global.v1.NemTransactionType tx_type = 4;
  string data = 5; // The string-typed amount of transaction fee
  string signature = 6; // The string-typed amount of transaction fee
  TransactionState state = 7; // state
  google.protobuf.Timestamp create_time = 8; // the time at which the transaction was created
  google.protobuf.Timestamp update_time = 9; // the time at which the transaction was updated
}

// The model of symbol multisig transaction
message SymbolMultisigTransaction {
  string wallet_id = 1; // The id of wallet
  string transaction_id = 2; // id
  string symbol_multisig_transaction_id = 3;
  string account_id = 10; // AccountID
  gincoinc.global.v1.SymbolTransactionType tx_type = 4;
  string data = 5; // The string-typed amount of transaction fee
  string signature = 6; // The string-typed amount of transaction fee
  TransactionState state = 7; // state
  google.protobuf.Timestamp create_time = 8; // the time at which the transaction was created
  google.protobuf.Timestamp update_time = 9; // the time at which the transaction was updated
}

// The model of information about signing
message SignInfo {
  string wallet_id = 1;
  string transaction_id = 2;
  string key_id = 3;
  uint32 hd_account = 4;
  gincoinc.global.v1.Coin coin = 5;
  string tx_id = 6;
  uint32 sign_index = 11;
  string sign_message = 7;
  uint32 hd_change = 8;
  uint32 hd_index = 9;
  gincoinc.global.v1.Network network = 12;
  repeated SignTxInput sign_tx_inputs = 10;
}

// The model of transaction input for signing
message SignTxInput {
  uint32 tx_input_index = 1;
  string sign_message = 2;
  uint32 hd_change = 3;
  uint32 hd_index = 4;
}

// The model of transfer
message Transfer {
  string wallet_id = 1; // The id of wallet
  string transfer_id = 2; // id
  gincoinc.global.v1.Coin coin = 3; // coin
  gincoinc.global.v1.Network network = 26; // network
  string tx_id = 4; // txID
  gincoinc.global.v1.TransferType transfer_type = 5; // type
  double value = 6; // The number-typed amount of transfer
  string string_value = 7; // The string-typed amount of transfer
  double jpy_rate = 9; // The rate of fiat
  string partner_wallet_id = 10; // The wallet id to which the transfer send/receive
  string partner_address = 11; // The address of wallet to which the transfer send/receive
  uint32 destination_tag = 15; // destination tag (only XRP)
  uint64 memo_id = 17 [jstype = JS_STRING]; // memo id (only XLM)
  string message = 18; // message (only NEM)
  double fee = 19; // The number-typed amount of transfer fee
  string string_fee = 20; // The string-typed amount of transfer fee
  string from = 21; // from address
  string to = 22; // to address
  gincoinc.global.v1.TransactionState state = 12; // state
  gincoinc.global.v1.TransactionResult result = 16; // result
  google.protobuf.Timestamp create_time = 13; // the time at which the transfer was created
  google.protobuf.Timestamp update_time = 14; // the time at which the transfer was updated
  TransferCosmosSpecific cosmos_specific = 23; // cosmos_specific
  gincoinc.global.v1.StakingEventType staking_event_type = 24; // staking_event_type
  string method = 25;
}

message TransferCosmosSpecific {
  gincoinc.global.v1.CosmosMsgType type = 1;
  double delegate_amount = 2;
  double reward_amount = 3;
}

// The model of transfer
message UncheckedTransfer {
  string wallet_id = 1; // The id of wallet
  string transfer_id = 2; // id
  gincoinc.global.v1.Coin coin = 3; // coin
  string tx_id = 4; // txID
  gincoinc.global.v1.TransferType transfer_type = 5; // type
  gincoinc.global.v1.TransactionState state = 6; // state
  gincoinc.global.v1.TransactionResult result = 7; // result
  double value = 8; // The number-typed amount of transfer
  string string_value = 9; // The string-typed amount of transfer
  double jpy_rate = 10; // The rate of fiat
  string partner_wallet_id = 11; // The wallet id to which the transfer send/receive
  string partner_address = 12; // The address of wallet to which the transfer send/receive
  uint32 destination_tag = 13; // destination tag (only XRP)
  uint64 memo_id = 14 [jstype = JS_STRING]; // memo id (only XLM)
  string message = 18; // message (only NEM)
  double fee = 19; // The number-typed amount of transfer fee
  string string_fee = 20; // The string-typed amount of transfer fee
  string from = 21; // from address
  string to = 22; // to address
  bool has_checked = 15; // Whether the transfer has been checked or not
  google.protobuf.Timestamp create_time = 16; // the time at which the transfer was created
  google.protobuf.Timestamp update_time = 17; // the time at which the transfer was updated
}

message EventTriggeredMessage {
  string event_triggered_message_id = 1;
  adamant.global.v1.EventTriggeredMessageType event_triggered_message_type = 2;
  string owner_id = 3;
  string destination = 4;
  google.protobuf.Timestamp create_time = 5;
  google.protobuf.Timestamp update_time = 6;
}

// The model of fiat rate
message Rate {
  gincoinc.global.v1.Coin coin = 1;
  double jpy = 2;
}

// The model of rate snapshot. the snapshot contains a set of rates
message RateSnapshot {
  string rate_snapshot_id = 1; // id
  map<uint32, Rate> rates = 2; // RatesEntry: map<k, v> / k: enum number of Coin, v: Rate
}

// The model which indicates corresponding account is deactivatable
message Deactivatability {
  string account_id = 1;
  bool deactivatable = 2;
}

// The model of labeled address. labeled address is the address which is used to
// construct whitelist
message LabeledAddress {
  string labeled_address_id = 1; // id
  string name = 2; // name
  gincoinc.global.v1.Coin coin = 3; // coin
  string address = 4; // address
  LabeledAddressProposal proposal = 5; // The proposal about updating the labeled address
  google.protobuf.Timestamp create_time = 7; // the time at which the labeled address was created
  google.protobuf.Timestamp update_time = 8; // the time at which the labeled address was updated
  gincoinc.global.v1.Network network = 9;
  string message = 10; // message
}

// The model of proposal to update labeled address information
message LabeledAddressProposal {
  string requester_account_id = 1;
  string requester_name = 2;
  string approver_account_id = 3;
  string approver_name = 4;
  string proposed_address = 5;
  bool address_is_reviewed = 6;
  string proposed_message = 7;
}

// The model of whitelist
message Whitelist {
  string whitelist_id = 1; // id
  string name = 2; // name
  gincoinc.global.v1.Coin coin = 3; // coin
  gincoinc.global.v1.Network network = 8; // network
  repeated LabeledAddress addresses = 4; // The list of labeled addresses registered in the whitelist
  google.protobuf.Timestamp create_time = 6; // the time at which the whitelist was created
  google.protobuf.Timestamp update_time = 7; // the time at which the whitelist was updated
}

// The model of transfer limit
message TransferLimit {
  string transfer_limit_id = 1; // id
  string name = 2; // name
  gincoinc.global.v1.Coin coin = 3; // coin
  gincoinc.global.v1.Network network = 12; // network
  int64 hourly_limit = 4; // The hourly limit of amount which the wallet can transfer (in JPY)
  int64 daily_limit = 5; // The daily limit of amount which the wallet can transfer (in JPY)
  int64 one_time_limit = 6; // The daily limit of amount which the wallet can transfer (in JPY)
  TransferLimitProposal proposal = 7; // The proposal about updating the transfer limit
  bool is_reviewed = 8; // The flag which indicates the transfer limit is reviewed or not
  google.protobuf.Timestamp create_time = 10; // the time at which the whitelist was created
  google.protobuf.Timestamp update_time = 11; // the time at which the whitelist was updated
}

// The model of proposal to update transfer limit information
message TransferLimitProposal {
  string requester_account_id = 1;
  string requester_name = 2;
  string approver_account_id = 3;
  string approver_name = 4;
  int64 proposed_hourly_limit = 5;
  int64 proposed_daily_limit = 6;
  int64 proposed_one_time_limit = 7;
  bool is_reviewed = 8;
}

// The model of policy
message Policy {
  string policy_id = 1; // id
  PolicyType policy_type = 2; // type
  string name = 3; // name
  bool is_base_policy = 4; // The flag indicates the policy is default
  gincoinc.global.v1.Coin coin = 5; // coin
  gincoinc.global.v1.Network network = 12; // network
  Whitelist whitelist = 6; // whitelist
  TransferLimit transfer_limit = 7; // transfer limit
  PolicyProposal proposal = 11; // // The proposal about updating the policy
  google.protobuf.Timestamp create_time = 9; // the time at which the policy was created
  google.protobuf.Timestamp update_time = 10; // the time at which the policy was updated
}

// The model of proposal to update policy information
message PolicyProposal {
  string requester_account_id = 1;
  string requester_name = 2;
  string approver_account_id = 3;
  string approver_name = 4;
  Whitelist proposed_whitelist = 5;
  bool is_reviewed = 6;
}

// The model of total balance by asset
message TotalBalanceByCoin {
  gincoinc.global.v1.Coin coin = 1;
  gincoinc.global.v1.Network network = 4;
  string cold_string_balance = 2;
  string hot_string_balance = 3;
}

// The model of total balace
message TotalBalance {
  map<uint32, TotalBalanceByCoin> total_balances = 1 [(validate.rules).map.no_sparse = true]; // map<k, v> ... k: enum number of Coin / v: TotalBalanceByCoin
}

// The model of balance snapshot
message BalanceSnapshot {
  google.protobuf.Timestamp create_time = 1;
  map<uint32, TotalBalanceByCoin> total_balances = 2 [(validate.rules).map.no_sparse = true]; // map<k, v> ... k: enum number of Coin / v: TotalBalanceByCoin
  map<uint32, Rate> rates = 3 [(validate.rules).map.no_sparse = true]; // map<k, v> ... k: enum number of Coin / v: Rate
}

message WalletBalanceSnapshotMap {
  map<string, ListWalletBalanceSnapshots> wallet_balance_snapshot_map = 1 [(validate.rules).map.no_sparse = true]; // map<k, v> ... k: wallet id / v: ListWalletBalanceSnapshot
}

message ListWalletBalanceSnapshots {
  repeated WalletBalanceSnapshot wallet_balance_snapshots = 1;
}

// The model of wallet balance snapshot
message WalletBalanceSnapshot {
  google.protobuf.Timestamp create_time = 1;
  string string_balance = 2; // Wallet Balance
  double jpy = 3; // JPY rate
}

message TransferVolumeSnapshots {
  map<int32, ListTransferVolumeSnapshots> transfer_volume_snapshot_by_transfer_type = 1 [(validate.rules).map.no_sparse = true]; // map<k, v> ... k: transfer type / v:

// ListWalletTransferVolumeSnapshots
}

message ListTransferVolumeSnapshots {
  repeated TransferVolumeSnapshot transfer_volume_snapshots = 1;
}

// The model of transfer volume snapshot
message TransferVolumeSnapshot {
  google.protobuf.Timestamp target_time = 1;
  map<int32, TransferVolume> transfer_volume_by_coin = 2; // map<k, v> ... k: coin / v: TransferVolumeByCoin
}

message TransferVolume {
  gincoinc.global.v1.Coin coin = 1; // coin
  gincoinc.global.v1.Network network = 9; // network
  string hot_string_volume = 2; // hot volume
  string cold_string_volume = 3; // col volume
  string hot_string_jpy_volume = 4; // hot volume
  string cold_string_jpy_volume = 5; // col volume
  int64 hot_number = 6; // hot transfer number volume
  int64 cold_number = 7; // cold transfer number volume
  gincoinc.global.v1.TransferType transfer_type = 8; // transfer type
}

message WalletTransferVolumeSnapshots {
  map<string, ListWalletTransferVolumeSnapshots> wallet_transfer_volume_snapshot_by_wallet_id = 1 [(validate.rules).map.no_sparse = true]; // map<k, v> ... k: wallet id / v: ListWalletTransferVolumeSnapshots
}

message ListWalletTransferVolumeSnapshots {
  repeated WalletTransferVolumeSnapshot wallet_transfer_volume_snapshots = 1;
}

message WalletTransferVolumeSnapshot {
  google.protobuf.Timestamp target_time = 1;
  map<int32, WalletTransferVolume> wallet_transfer_volume_by_transfer_type = 2; // map<k, v> ... k: transfer type / v:TransferVolumeByCoin
}

message WalletTransferVolume {
  string string_volume = 1; // coin volume
  string string_jpy_volume = 2; // hot volume
  int64 number = 3; // transfer number volume
  gincoinc.global.v1.TransferType transfer_type = 4; // transfer type;
}

// The model of confirmation
message Confirmation {
  gincoinc.global.v1.Coin coin = 1;
  uint32 confirmation = 2;
}

message WalletFlushSetting {
  string owner_id = 1;
  gincoinc.global.v1.Coin coin = 2;
  gincoinc.global.v1.Network network = 6;
  string destination_wallet_id = 3;
  google.protobuf.Timestamp create_time = 4;
  google.protobuf.Timestamp update_time = 5;
  double flush_threshold = 7;
}

message CompensationFee {
  string string_value = 1;
  bool is_spent = 2;
  google.protobuf.Timestamp create_time = 3;
}

message WalletGroup {
  string wallet_group_id = 1;
  string name = 2;
  gincoinc.global.v1.Coin coin = 3;
  gincoinc.global.v1.Network network = 8;
  repeated Wallet wallets = 4;
  bool watch_only = 7;
  google.protobuf.Timestamp create_time = 5;
  google.protobuf.Timestamp update_time = 6;
}

// =============================================================================
//  Request Model
// =============================================================================

message RequestTxOutput {
  string address = 1 [(validate.rules).string.min_len = 3];
  string string_value = 2 [(validate.rules).string.min_len = 1];
}

message RequestSignedInfo {
  repeated RequestSignature signatures = 1 [(validate.rules).repeated.min_items = 1];
}

message RequestSignature {
  uint32 sign_index = 1;
  string signature = 2 [(validate.rules).string.min_len = 1];
  uint32 hd_index = 3;
}

message RequestTransferLimitEntry {
  TransferLimitType transfer_limit_type = 1 [(validate.rules).enum = {
    defined_only: true,
    not_in: [
      0
    ]
  }];
  int64 transfer_limit_value = 2 [(validate.rules).int64.gte = 0];
}

message RequestRate {
  gincoinc.global.v1.Coin coin = 1 [(validate.rules).enum = {
    defined_only: true,
    not_in: [
      0
    ]
  }]; // The id of coin
  double jpy = 2 [(validate.rules).double = {
    gte: 0
  }]; // The rate of JPY
}

message SubstrateChildAddress {
  string wallet_id = 1;
  string account_id = 2;
  string address = 3;
  double balance = 4;
  string string_balance = 5;
}

message SymbolChildAddress {
  string wallet_id = 1;
  string account_id = 2;
  string address = 3;
  double balance = 4;
  string string_balance = 5;
}

message IOSTChildAccount {
  string wallet_id = 1;
  string account_id = 2;
  string account_name = 3;
}

// The model of IOST caller account
message IOSTCallerAccount {
  string account_name = 1; // iost account name
  double balance = 2; // The number-typed balance corresponding to the account
  string string_balance = 3; // The string-typed balance corresponding to the account
}

// The model of caller account
message CallerAddress {
  string address = 1; // Klaytn address
  double balance = 2; // The number-typed balance corresponding to the address
  string string_balance = 3; // The string-typed balance corresponding to the address
  gincoinc.global.v1.Coin coin = 4; // The type of asset
  gincoinc.global.v1.Network network = 5; // The network of asset
}

message FeeDepositAddress {
  string address = 1; // address
  double balance = 2; // The number-typed balance corresponding to the address
  string string_balance = 3; // The string-typed balance corresponding to the address
  gincoinc.global.v1.Coin coin = 4; // The type of asset
  gincoinc.global.v1.Network network = 5; // The network of asset
}

message CosmosDelegation {
  string validator_address = 1;
  double delegate_amount = 2;
  double reward_amount = 3;
}

// The model of StakingHistory
message StakingHistory {
  string staking_history_id = 1; // id
  string owner_id = 2; // owner id
  string wallet_id = 3; // wallet id
  gincoinc.global.v1.Coin coin = 4; // coin
  string validator_id = 5; // validator id
  string tx_id = 6; // txID
  uint32 tx_index = 7; // tx index
  string block_hash = 8; // block hash
  double value = 9; // The number-typed amount of staking
  string string_value = 10; // The string-typed amount of staking
  gincoinc.global.v1.StakingEventType event_type = 11; // event type
  string event_id = 15; // event id

  StakingHistoryEthereumSpecific ethereum_specific = 14; // The Ethereum specific fields
  StakingHistoryAvalancheSpecific avalanche_specific = 16; // The Avalanche specific fields
  google.protobuf.Timestamp create_time = 12; // the time at which the staking history was created
  google.protobuf.Timestamp update_time = 13; // the time at which the staking history was updated
}

// The model of Ethereum specific fields of StakingHistory
message StakingHistoryEthereumSpecific {
  string event_id = 1; // event id
  string address = 2; // receiver address
  uint64 withdrawal_index = 3; // withdrawal index
  uint64 validator_index = 4; // validator index
  uint64 block_number = 5; // block number
  google.protobuf.Timestamp block_time = 6; // block time
  gincoinc.global.v1.EthereumStakingHistoryType history_type = 7; // ethereum staking history type
}

// The model of Avalanche specific fields of StakingHistory
message StakingHistoryAvalancheSpecific {
  uint64 start_time = 1;
  uint64 end_time = 2;
  uint64 rewards_owner_threshold = 3;
  repeated string rewards_owner_addresses = 4;
}

// The model of StakingValidator
message StakingValidator {
  string staking_validator_id = 1; // id
  string owner_id = 2; // owner id
  string wallet_id = 3; // wallet id
  gincoinc.global.v1.Coin coin = 4; // coin
  string validator_id = 5; // validator id
  string recipient_wallet_id = 6; // recipient wallet id
  gincoinc.global.v1.StakingValidatorStatus status = 7; // status
  double value = 8; // The number-typed amount of staking
  string string_value = 9; // The string-typed amount of staking
  int64 expiration_time = 10; // expiration time
  google.protobuf.Timestamp create_time = 11; // the time at which the staking validator was created
  google.protobuf.Timestamp update_time = 12; // the time at which the staking validator was updated
}

// The model of PreTransactionThreshold
message PreTransactionThreshold {
  string pre_transaction_threshold_id = 1;
  gincoinc.global.v1.Coin coin = 2;
  gincoinc.global.v1.Network network = 3;
  double value = 4;
  PreTransactionThresholdProposal proposal = 5;
  google.protobuf.Timestamp create_time = 6;
  google.protobuf.Timestamp update_time = 7;
}

message PreTransactionThresholdProposal {
  string pre_transaction_threshold_id = 1;
  string proposal_id = 2;
  string requester_account_id = 3;
  string requester_name = 4;
  string approver_account_id = 5;
  string approver_name = 6;
  double proposed_value = 7;
  bool is_reviewed = 8;
}

message BlacklistAddress {
  string blacklist_address_id = 1;
  string blacklist_address_proposal_id = 2;
  gincoinc.global.v1.Network network = 3;
  string address = 4;
  bool is_activated = 5;
  BlacklistAddressStatus status = 6;
  string external_id = 7;
  google.protobuf.Timestamp create_time = 8;
  google.protobuf.Timestamp update_time = 9;
  optional string file_id = 10;
  optional string file_name = 11;
  BlacklistAddressProposal proposal = 12;
}

message BlacklistAddressProposal {
  string blacklist_address_proposal_id = 1;
  string blacklist_address_id = 2;
  string requester_account_id = 3;
  string requester_name = 4;
  string approver_account_id = 5;
  string approver_name = 6;
  BlaclistAddressDiff diff = 7;
}

message BlaclistAddressDiff {
  bool is_activated = 1;
}
