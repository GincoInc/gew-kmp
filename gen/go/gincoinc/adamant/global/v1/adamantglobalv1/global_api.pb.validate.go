// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gincoinc/adamant/global/v1/adamantglobalv1/global_api.proto

package adamantglobalv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	gincoincglobalv1 "gincoinc/global/v1/gincoincglobalv1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.AddressType(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)
)

// define the regex for a UUID once up-front
var _global_api_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ApproveWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveWalletRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	return nil
}

// ApproveWalletRequestValidationError is the validation error returned by
// ApproveWalletRequest.Validate if the designated constraints aren't met.
type ApproveWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveWalletRequestValidationError) ErrorName() string {
	return "ApproveWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveWalletRequestValidationError{}

// Validate checks the field values on ApproveTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	// no validation rules for TransactionId

	return nil
}

// ApproveTransactionRequestValidationError is the validation error returned by
// ApproveTransactionRequest.Validate if the designated constraints aren't met.
type ApproveTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveTransactionRequestValidationError) ErrorName() string {
	return "ApproveTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveTransactionRequestValidationError{}

// Validate checks the field values on CreateWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateWalletRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletName

	// no validation rules for Coin

	// no validation rules for WalletType

	// no validation rules for AddressType

	// no validation rules for M

	// no validation rules for N

	// no validation rules for PolicyId

	return nil
}

// CreateWalletRequestValidationError is the validation error returned by
// CreateWalletRequest.Validate if the designated constraints aren't met.
type CreateWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWalletRequestValidationError) ErrorName() string {
	return "CreateWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWalletRequestValidationError{}

// Validate checks the field values on GetWalletRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetWalletRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetWalletRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return GetWalletRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// GetWalletRequestValidationError is the validation error returned by
// GetWalletRequest.Validate if the designated constraints aren't met.
type GetWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletRequestValidationError) ErrorName() string { return "GetWalletRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletRequestValidationError{}

var _GetWalletRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CancelWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelWalletRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CancelWalletRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return CancelWalletRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// CancelWalletRequestValidationError is the validation error returned by
// CancelWalletRequest.Validate if the designated constraints aren't met.
type CancelWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelWalletRequestValidationError) ErrorName() string {
	return "CancelWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelWalletRequestValidationError{}

var _CancelWalletRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ArchiveWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ArchiveWalletRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ArchiveWalletRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return ArchiveWalletRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// ArchiveWalletRequestValidationError is the validation error returned by
// ArchiveWalletRequest.Validate if the designated constraints aren't met.
type ArchiveWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArchiveWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArchiveWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArchiveWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArchiveWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArchiveWalletRequestValidationError) ErrorName() string {
	return "ArchiveWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ArchiveWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArchiveWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArchiveWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArchiveWalletRequestValidationError{}

var _ArchiveWalletRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on UnArchiveWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnArchiveWalletRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UnArchiveWalletRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return UnArchiveWalletRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// UnArchiveWalletRequestValidationError is the validation error returned by
// UnArchiveWalletRequest.Validate if the designated constraints aren't met.
type UnArchiveWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnArchiveWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnArchiveWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnArchiveWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnArchiveWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnArchiveWalletRequestValidationError) ErrorName() string {
	return "UnArchiveWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnArchiveWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnArchiveWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnArchiveWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnArchiveWalletRequestValidationError{}

var _UnArchiveWalletRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListWalletsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListWalletsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PageSize

	if !_ListWalletsRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		return ListWalletsRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
	}

	return nil
}

// ListWalletsRequestValidationError is the validation error returned by
// ListWalletsRequest.Validate if the designated constraints aren't met.
type ListWalletsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletsRequestValidationError) ErrorName() string {
	return "ListWalletsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletsRequestValidationError{}

var _ListWalletsRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListWalletsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListWalletsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetWallets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWalletsResponseValidationError{
					field:  fmt.Sprintf("Wallets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	return nil
}

// ListWalletsResponseValidationError is the validation error returned by
// ListWalletsResponse.Validate if the designated constraints aren't met.
type ListWalletsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletsResponseValidationError) ErrorName() string {
	return "ListWalletsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletsResponseValidationError{}

// Validate checks the field values on UpdateWalletPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateWalletPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	// no validation rules for PolicyId

	return nil
}

// UpdateWalletPolicyRequestValidationError is the validation error returned by
// UpdateWalletPolicyRequest.Validate if the designated constraints aren't met.
type UpdateWalletPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWalletPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWalletPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWalletPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWalletPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWalletPolicyRequestValidationError) ErrorName() string {
	return "UpdateWalletPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWalletPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWalletPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWalletPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWalletPolicyRequestValidationError{}

// Validate checks the field values on GetNextHdAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNextHdAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	return nil
}

// GetNextHdAccountRequestValidationError is the validation error returned by
// GetNextHdAccountRequest.Validate if the designated constraints aren't met.
type GetNextHdAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNextHdAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNextHdAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNextHdAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNextHdAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNextHdAccountRequestValidationError) ErrorName() string {
	return "GetNextHdAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNextHdAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNextHdAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNextHdAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNextHdAccountRequestValidationError{}

// Validate checks the field values on GetNextHdAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNextHdAccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for HdAccount

	return nil
}

// GetNextHdAccountResponseValidationError is the validation error returned by
// GetNextHdAccountResponse.Validate if the designated constraints aren't met.
type GetNextHdAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNextHdAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNextHdAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNextHdAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNextHdAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNextHdAccountResponseValidationError) ErrorName() string {
	return "GetNextHdAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNextHdAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNextHdAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNextHdAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNextHdAccountResponseValidationError{}

// Validate checks the field values on RegisterKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisterKeyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	// no validation rules for PubKey

	// no validation rules for HdAccount

	return nil
}

// RegisterKeyRequestValidationError is the validation error returned by
// RegisterKeyRequest.Validate if the designated constraints aren't met.
type RegisterKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterKeyRequestValidationError) ErrorName() string {
	return "RegisterKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterKeyRequestValidationError{}

// Validate checks the field values on CreateAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CreateAddressRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return CreateAddressRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// CreateAddressRequestValidationError is the validation error returned by
// CreateAddressRequest.Validate if the designated constraints aren't met.
type CreateAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAddressRequestValidationError) ErrorName() string {
	return "CreateAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAddressRequestValidationError{}

var _CreateAddressRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetAddressRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetAddressRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return GetAddressRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_GetAddressRequest_AddressId_Pattern.MatchString(m.GetAddressId()) {
		return GetAddressRequestValidationError{
			field:  "AddressId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// GetAddressRequestValidationError is the validation error returned by
// GetAddressRequest.Validate if the designated constraints aren't met.
type GetAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressRequestValidationError) ErrorName() string {
	return "GetAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressRequestValidationError{}

var _GetAddressRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _GetAddressRequest_AddressId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListAddressesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAddressesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListAddressesRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return ListAddressesRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	// no validation rules for OmitChange

	if m.GetPageSize() > 100 {
		return ListAddressesRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
	}

	if !_ListAddressesRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		return ListAddressesRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
	}

	return nil
}

// ListAddressesRequestValidationError is the validation error returned by
// ListAddressesRequest.Validate if the designated constraints aren't met.
type ListAddressesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAddressesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAddressesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAddressesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAddressesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAddressesRequestValidationError) ErrorName() string {
	return "ListAddressesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAddressesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAddressesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAddressesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAddressesRequestValidationError{}

var _ListAddressesRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ListAddressesRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListAddressesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAddressesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAddressesResponseValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	return nil
}

// ListAddressesResponseValidationError is the validation error returned by
// ListAddressesResponse.Validate if the designated constraints aren't met.
type ListAddressesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAddressesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAddressesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAddressesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAddressesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAddressesResponseValidationError) ErrorName() string {
	return "ListAddressesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAddressesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAddressesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAddressesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAddressesResponseValidationError{}

// Validate checks the field values on CreateTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CreateTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return CreateTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if m.GetFeeRate() < 1 {
		return CreateTransactionRequestValidationError{
			field:  "FeeRate",
			reason: "value must be greater than or equal to 1",
		}
	}

	for idx, item := range m.GetTxOutputs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateTransactionRequestValidationError{
					field:  fmt.Sprintf("TxOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CreateTransactionRequestValidationError is the validation error returned by
// CreateTransactionRequest.Validate if the designated constraints aren't met.
type CreateTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransactionRequestValidationError) ErrorName() string {
	return "CreateTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransactionRequestValidationError{}

var _CreateTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on SignTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SignTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_SignTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return SignTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_SignTransactionRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		return SignTransactionRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_SignTransactionRequest_KeyId_Pattern.MatchString(m.GetKeyId()) {
		return SignTransactionRequestValidationError{
			field:  "KeyId",
			reason: "value does not match regex pattern \"^[0-9A-F]{64}$\"",
		}
	}

	if m.GetSignedInfo() == nil {
		return SignTransactionRequestValidationError{
			field:  "SignedInfo",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignedInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignTransactionRequestValidationError{
				field:  "SignedInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SignTransactionRequestValidationError is the validation error returned by
// SignTransactionRequest.Validate if the designated constraints aren't met.
type SignTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignTransactionRequestValidationError) ErrorName() string {
	return "SignTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SignTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignTransactionRequestValidationError{}

var _SignTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _SignTransactionRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _SignTransactionRequest_KeyId_Pattern = regexp.MustCompile("^[0-9A-F]{64}$")

// Validate checks the field values on SendTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_SendTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return SendTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_SendTransactionRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		return SendTransactionRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// SendTransactionRequestValidationError is the validation error returned by
// SendTransactionRequest.Validate if the designated constraints aren't met.
type SendTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTransactionRequestValidationError) ErrorName() string {
	return "SendTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTransactionRequestValidationError{}

var _SendTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _SendTransactionRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CancelTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CancelTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return CancelTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_CancelTransactionRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		return CancelTransactionRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// CancelTransactionRequestValidationError is the validation error returned by
// CancelTransactionRequest.Validate if the designated constraints aren't met.
type CancelTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTransactionRequestValidationError) ErrorName() string {
	return "CancelTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTransactionRequestValidationError{}

var _CancelTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _CancelTransactionRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return GetTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_GetTransactionRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		return GetTransactionRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// GetTransactionRequestValidationError is the validation error returned by
// GetTransactionRequest.Validate if the designated constraints aren't met.
type GetTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionRequestValidationError) ErrorName() string {
	return "GetTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionRequestValidationError{}

var _GetTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _GetTransactionRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListTransactionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTransactionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListTransactionsRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return ListTransactionsRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if m.GetPageSize() > 100 {
		return ListTransactionsRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
	}

	if !_ListTransactionsRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		return ListTransactionsRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
	}

	return nil
}

// ListTransactionsRequestValidationError is the validation error returned by
// ListTransactionsRequest.Validate if the designated constraints aren't met.
type ListTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransactionsRequestValidationError) ErrorName() string {
	return "ListTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransactionsRequestValidationError{}

var _ListTransactionsRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ListTransactionsRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListTransactionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTransactionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTransactionsResponseValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	return nil
}

// ListTransactionsResponseValidationError is the validation error returned by
// ListTransactionsResponse.Validate if the designated constraints aren't met.
type ListTransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransactionsResponseValidationError) ErrorName() string {
	return "ListTransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransactionsResponseValidationError{}

// Validate checks the field values on GetSignInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSignInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetSignInfoRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return GetSignInfoRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_GetSignInfoRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		return GetSignInfoRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// GetSignInfoRequestValidationError is the validation error returned by
// GetSignInfoRequest.Validate if the designated constraints aren't met.
type GetSignInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSignInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSignInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSignInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSignInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSignInfoRequestValidationError) ErrorName() string {
	return "GetSignInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSignInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSignInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSignInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSignInfoRequestValidationError{}

var _GetSignInfoRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _GetSignInfoRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListSignInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSignInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListSignInfoRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return ListSignInfoRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_ListSignInfoRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		return ListSignInfoRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// ListSignInfoRequestValidationError is the validation error returned by
// ListSignInfoRequest.Validate if the designated constraints aren't met.
type ListSignInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSignInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSignInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSignInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSignInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSignInfoRequestValidationError) ErrorName() string {
	return "ListSignInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSignInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSignInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSignInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSignInfoRequestValidationError{}

var _ListSignInfoRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ListSignInfoRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListSignInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSignInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSignInfoList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSignInfoResponseValidationError{
					field:  fmt.Sprintf("SignInfoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListSignInfoResponseValidationError is the validation error returned by
// ListSignInfoResponse.Validate if the designated constraints aren't met.
type ListSignInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSignInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSignInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSignInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSignInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSignInfoResponseValidationError) ErrorName() string {
	return "ListSignInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSignInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSignInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSignInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSignInfoResponseValidationError{}

// Validate checks the field values on ListTransfersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTransfersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListTransfersRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return ListTransfersRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if m.GetPageSize() > 100 {
		return ListTransfersRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
	}

	if !_ListTransfersRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		return ListTransfersRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
	}

	return nil
}

// ListTransfersRequestValidationError is the validation error returned by
// ListTransfersRequest.Validate if the designated constraints aren't met.
type ListTransfersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransfersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransfersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransfersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransfersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransfersRequestValidationError) ErrorName() string {
	return "ListTransfersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransfersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransfersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransfersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransfersRequestValidationError{}

var _ListTransfersRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ListTransfersRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListTransfersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTransfersResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTransfers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTransfersResponseValidationError{
					field:  fmt.Sprintf("Transfers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	return nil
}

// ListTransfersResponseValidationError is the validation error returned by
// ListTransfersResponse.Validate if the designated constraints aren't met.
type ListTransfersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransfersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransfersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransfersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransfersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransfersResponseValidationError) ErrorName() string {
	return "ListTransfersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransfersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransfersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransfersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransfersResponseValidationError{}

// Validate checks the field values on ListRatesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListRatesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRates() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRatesResponseValidationError{
					field:  fmt.Sprintf("Rates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListRatesResponseValidationError is the validation error returned by
// ListRatesResponse.Validate if the designated constraints aren't met.
type ListRatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRatesResponseValidationError) ErrorName() string {
	return "ListRatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRatesResponseValidationError{}

// Validate checks the field values on GetSpendableBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSpendableBalanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetSpendableBalanceRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return GetSpendableBalanceRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// GetSpendableBalanceRequestValidationError is the validation error returned
// by GetSpendableBalanceRequest.Validate if the designated constraints aren't met.
type GetSpendableBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpendableBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpendableBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpendableBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpendableBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpendableBalanceRequestValidationError) ErrorName() string {
	return "GetSpendableBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpendableBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpendableBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpendableBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpendableBalanceRequestValidationError{}

var _GetSpendableBalanceRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetSpendableBalanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSpendableBalanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalSpendableBalance

	// no validation rules for StringTotalSpendableBalance

	// no validation rules for DailySpendableBalance

	// no validation rules for StringDailySpendableBalance

	// no validation rules for HourlySpendableBalance

	// no validation rules for StringHourlySpendableBalance

	// no validation rules for OneTimeSpendableBalance

	// no validation rules for StringOneTimeSpendableBalance

	return nil
}

// GetSpendableBalanceResponseValidationError is the validation error returned
// by GetSpendableBalanceResponse.Validate if the designated constraints
// aren't met.
type GetSpendableBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpendableBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpendableBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpendableBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpendableBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpendableBalanceResponseValidationError) ErrorName() string {
	return "GetSpendableBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpendableBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpendableBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpendableBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpendableBalanceResponseValidationError{}

// Validate checks the field values on CalculateFeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CalculateFeeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CalculateFeeRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return CalculateFeeRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if m.GetFeeRate() < 1 {
		return CalculateFeeRequestValidationError{
			field:  "FeeRate",
			reason: "value must be greater than or equal to 1",
		}
	}

	for idx, item := range m.GetTxOutputs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CalculateFeeRequestValidationError{
					field:  fmt.Sprintf("TxOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CalculateFeeRequestValidationError is the validation error returned by
// CalculateFeeRequest.Validate if the designated constraints aren't met.
type CalculateFeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateFeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateFeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateFeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateFeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateFeeRequestValidationError) ErrorName() string {
	return "CalculateFeeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateFeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateFeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateFeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateFeeRequestValidationError{}

var _CalculateFeeRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CalculateFeeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CalculateFeeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Fee

	// no validation rules for StringFee

	return nil
}

// CalculateFeeResponseValidationError is the validation error returned by
// CalculateFeeResponse.Validate if the designated constraints aren't met.
type CalculateFeeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateFeeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateFeeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateFeeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateFeeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateFeeResponseValidationError) ErrorName() string {
	return "CalculateFeeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateFeeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateFeeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateFeeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateFeeResponseValidationError{}

// Validate checks the field values on GetMembersDeactivatabilitiesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetMembersDeactivatabilitiesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetMembersDeactivatabilitiesRequestValidationError is the validation error
// returned by GetMembersDeactivatabilitiesRequest.Validate if the designated
// constraints aren't met.
type GetMembersDeactivatabilitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMembersDeactivatabilitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMembersDeactivatabilitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMembersDeactivatabilitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMembersDeactivatabilitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMembersDeactivatabilitiesRequestValidationError) ErrorName() string {
	return "GetMembersDeactivatabilitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMembersDeactivatabilitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMembersDeactivatabilitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMembersDeactivatabilitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMembersDeactivatabilitiesRequestValidationError{}

// Validate checks the field values on GetMembersDeactivatabilitiesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetMembersDeactivatabilitiesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetDeactivatabilities() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMembersDeactivatabilitiesResponseValidationError{
					field:  fmt.Sprintf("Deactivatabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetMembersDeactivatabilitiesResponseValidationError is the validation error
// returned by GetMembersDeactivatabilitiesResponse.Validate if the designated
// constraints aren't met.
type GetMembersDeactivatabilitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMembersDeactivatabilitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMembersDeactivatabilitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMembersDeactivatabilitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMembersDeactivatabilitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMembersDeactivatabilitiesResponseValidationError) ErrorName() string {
	return "GetMembersDeactivatabilitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMembersDeactivatabilitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMembersDeactivatabilitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMembersDeactivatabilitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMembersDeactivatabilitiesResponseValidationError{}

// Validate checks the field values on CreateLabeledAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateLabeledAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		return CreateLabeledAddressRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	// no validation rules for Coin

	// no validation rules for Address

	return nil
}

// CreateLabeledAddressRequestValidationError is the validation error returned
// by CreateLabeledAddressRequest.Validate if the designated constraints
// aren't met.
type CreateLabeledAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLabeledAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLabeledAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLabeledAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLabeledAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLabeledAddressRequestValidationError) ErrorName() string {
	return "CreateLabeledAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLabeledAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLabeledAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLabeledAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLabeledAddressRequestValidationError{}

// Validate checks the field values on UpdateLabeledAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateLabeledAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdateLabeledAddressRequest_LabeledAddressId_Pattern.MatchString(m.GetLabeledAddressId()) {
		return UpdateLabeledAddressRequestValidationError{
			field:  "LabeledAddressId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		return UpdateLabeledAddressRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	// no validation rules for Coin

	// no validation rules for Address

	return nil
}

// UpdateLabeledAddressRequestValidationError is the validation error returned
// by UpdateLabeledAddressRequest.Validate if the designated constraints
// aren't met.
type UpdateLabeledAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLabeledAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLabeledAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLabeledAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLabeledAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLabeledAddressRequestValidationError) ErrorName() string {
	return "UpdateLabeledAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLabeledAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLabeledAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLabeledAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLabeledAddressRequestValidationError{}

var _UpdateLabeledAddressRequest_LabeledAddressId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetLabeledAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetLabeledAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetLabeledAddressRequest_LabeledAddressId_Pattern.MatchString(m.GetLabeledAddressId()) {
		return GetLabeledAddressRequestValidationError{
			field:  "LabeledAddressId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// GetLabeledAddressRequestValidationError is the validation error returned by
// GetLabeledAddressRequest.Validate if the designated constraints aren't met.
type GetLabeledAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLabeledAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLabeledAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLabeledAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLabeledAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLabeledAddressRequestValidationError) ErrorName() string {
	return "GetLabeledAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLabeledAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLabeledAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLabeledAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLabeledAddressRequestValidationError{}

var _GetLabeledAddressRequest_LabeledAddressId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListLabeledAddressesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLabeledAddressesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListLabeledAddressesRequestValidationError is the validation error returned
// by ListLabeledAddressesRequest.Validate if the designated constraints
// aren't met.
type ListLabeledAddressesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLabeledAddressesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLabeledAddressesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLabeledAddressesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLabeledAddressesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLabeledAddressesRequestValidationError) ErrorName() string {
	return "ListLabeledAddressesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLabeledAddressesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLabeledAddressesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLabeledAddressesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLabeledAddressesRequestValidationError{}

// Validate checks the field values on ListLabeledAddressesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLabeledAddressesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLabeledAddressesResponseValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListLabeledAddressesResponseValidationError is the validation error returned
// by ListLabeledAddressesResponse.Validate if the designated constraints
// aren't met.
type ListLabeledAddressesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLabeledAddressesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLabeledAddressesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLabeledAddressesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLabeledAddressesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLabeledAddressesResponseValidationError) ErrorName() string {
	return "ListLabeledAddressesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLabeledAddressesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLabeledAddressesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLabeledAddressesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLabeledAddressesResponseValidationError{}

// Validate checks the field values on DeleteLabeledAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteLabeledAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeleteLabeledAddressRequest_LabeledAddressId_Pattern.MatchString(m.GetLabeledAddressId()) {
		return DeleteLabeledAddressRequestValidationError{
			field:  "LabeledAddressId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// DeleteLabeledAddressRequestValidationError is the validation error returned
// by DeleteLabeledAddressRequest.Validate if the designated constraints
// aren't met.
type DeleteLabeledAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLabeledAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLabeledAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLabeledAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLabeledAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLabeledAddressRequestValidationError) ErrorName() string {
	return "DeleteLabeledAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLabeledAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLabeledAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLabeledAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLabeledAddressRequestValidationError{}

var _DeleteLabeledAddressRequest_LabeledAddressId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ApproveLabeledAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveLabeledAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ApproveLabeledAddressRequest_LabeledAddressId_Pattern.MatchString(m.GetLabeledAddressId()) {
		return ApproveLabeledAddressRequestValidationError{
			field:  "LabeledAddressId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// ApproveLabeledAddressRequestValidationError is the validation error returned
// by ApproveLabeledAddressRequest.Validate if the designated constraints
// aren't met.
type ApproveLabeledAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveLabeledAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveLabeledAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveLabeledAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveLabeledAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveLabeledAddressRequestValidationError) ErrorName() string {
	return "ApproveLabeledAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveLabeledAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveLabeledAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveLabeledAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveLabeledAddressRequestValidationError{}

var _ApproveLabeledAddressRequest_LabeledAddressId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreateWhitelistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateWhitelistRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		return CreateWhitelistRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	// no validation rules for Coin

	return nil
}

// CreateWhitelistRequestValidationError is the validation error returned by
// CreateWhitelistRequest.Validate if the designated constraints aren't met.
type CreateWhitelistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWhitelistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWhitelistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWhitelistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWhitelistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWhitelistRequestValidationError) ErrorName() string {
	return "CreateWhitelistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWhitelistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWhitelistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWhitelistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWhitelistRequestValidationError{}

// Validate checks the field values on GetWhitelistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetWhitelistRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetWhitelistRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		return GetWhitelistRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// GetWhitelistRequestValidationError is the validation error returned by
// GetWhitelistRequest.Validate if the designated constraints aren't met.
type GetWhitelistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWhitelistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWhitelistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWhitelistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWhitelistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWhitelistRequestValidationError) ErrorName() string {
	return "GetWhitelistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWhitelistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWhitelistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWhitelistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWhitelistRequestValidationError{}

var _GetWhitelistRequest_WhitelistId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListWhitelistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListWhitelistsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListWhitelistsRequestValidationError is the validation error returned by
// ListWhitelistsRequest.Validate if the designated constraints aren't met.
type ListWhitelistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWhitelistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWhitelistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWhitelistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWhitelistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWhitelistsRequestValidationError) ErrorName() string {
	return "ListWhitelistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWhitelistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWhitelistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWhitelistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWhitelistsRequestValidationError{}

// Validate checks the field values on ListWhitelistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListWhitelistsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetWhitelists() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWhitelistsResponseValidationError{
					field:  fmt.Sprintf("Whitelists[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListWhitelistsResponseValidationError is the validation error returned by
// ListWhitelistsResponse.Validate if the designated constraints aren't met.
type ListWhitelistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWhitelistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWhitelistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWhitelistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWhitelistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWhitelistsResponseValidationError) ErrorName() string {
	return "ListWhitelistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWhitelistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWhitelistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWhitelistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWhitelistsResponseValidationError{}

// Validate checks the field values on UpdateWhitelistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateWhitelistRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdateWhitelistRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		return UpdateWhitelistRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		return UpdateWhitelistRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	// no validation rules for Coin

	return nil
}

// UpdateWhitelistRequestValidationError is the validation error returned by
// UpdateWhitelistRequest.Validate if the designated constraints aren't met.
type UpdateWhitelistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWhitelistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWhitelistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWhitelistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWhitelistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWhitelistRequestValidationError) ErrorName() string {
	return "UpdateWhitelistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWhitelistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWhitelistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWhitelistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWhitelistRequestValidationError{}

var _UpdateWhitelistRequest_WhitelistId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on DeleteWhitelistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteWhitelistRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeleteWhitelistRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		return DeleteWhitelistRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// DeleteWhitelistRequestValidationError is the validation error returned by
// DeleteWhitelistRequest.Validate if the designated constraints aren't met.
type DeleteWhitelistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWhitelistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWhitelistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWhitelistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWhitelistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWhitelistRequestValidationError) ErrorName() string {
	return "DeleteWhitelistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWhitelistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWhitelistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWhitelistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWhitelistRequestValidationError{}

var _DeleteWhitelistRequest_WhitelistId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreateTransferLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTransferLimitRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		return CreateTransferLimitRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	// no validation rules for Coin

	// no validation rules for HourlyLimit

	// no validation rules for DailyLimit

	// no validation rules for OneTimeLimit

	return nil
}

// CreateTransferLimitRequestValidationError is the validation error returned
// by CreateTransferLimitRequest.Validate if the designated constraints aren't met.
type CreateTransferLimitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransferLimitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransferLimitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransferLimitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransferLimitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransferLimitRequestValidationError) ErrorName() string {
	return "CreateTransferLimitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransferLimitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransferLimitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransferLimitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransferLimitRequestValidationError{}

// Validate checks the field values on GetTransferLimitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTransferLimitRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetTransferLimitRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		return GetTransferLimitRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// GetTransferLimitRequestValidationError is the validation error returned by
// GetTransferLimitRequest.Validate if the designated constraints aren't met.
type GetTransferLimitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransferLimitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransferLimitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransferLimitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransferLimitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransferLimitRequestValidationError) ErrorName() string {
	return "GetTransferLimitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransferLimitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransferLimitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransferLimitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransferLimitRequestValidationError{}

var _GetTransferLimitRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListTransferLimitsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTransferLimitsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListTransferLimitsRequestValidationError is the validation error returned by
// ListTransferLimitsRequest.Validate if the designated constraints aren't met.
type ListTransferLimitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransferLimitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransferLimitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransferLimitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransferLimitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransferLimitsRequestValidationError) ErrorName() string {
	return "ListTransferLimitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransferLimitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransferLimitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransferLimitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransferLimitsRequestValidationError{}

// Validate checks the field values on ListTransferLimitsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTransferLimitsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTransferLimits() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTransferLimitsResponseValidationError{
					field:  fmt.Sprintf("TransferLimits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListTransferLimitsResponseValidationError is the validation error returned
// by ListTransferLimitsResponse.Validate if the designated constraints aren't met.
type ListTransferLimitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransferLimitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransferLimitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransferLimitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransferLimitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransferLimitsResponseValidationError) ErrorName() string {
	return "ListTransferLimitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransferLimitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransferLimitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransferLimitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransferLimitsResponseValidationError{}

// Validate checks the field values on UpdateTransferLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTransferLimitRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdateTransferLimitRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		return UpdateTransferLimitRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		return UpdateTransferLimitRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	// no validation rules for HourlyLimit

	// no validation rules for DailyLimit

	// no validation rules for OneTimeLimit

	return nil
}

// UpdateTransferLimitRequestValidationError is the validation error returned
// by UpdateTransferLimitRequest.Validate if the designated constraints aren't met.
type UpdateTransferLimitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTransferLimitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTransferLimitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTransferLimitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTransferLimitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTransferLimitRequestValidationError) ErrorName() string {
	return "UpdateTransferLimitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTransferLimitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTransferLimitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTransferLimitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTransferLimitRequestValidationError{}

var _UpdateTransferLimitRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on DeleteTransferLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteTransferLimitRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeleteTransferLimitRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		return DeleteTransferLimitRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// DeleteTransferLimitRequestValidationError is the validation error returned
// by DeleteTransferLimitRequest.Validate if the designated constraints aren't met.
type DeleteTransferLimitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTransferLimitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTransferLimitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTransferLimitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTransferLimitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTransferLimitRequestValidationError) ErrorName() string {
	return "DeleteTransferLimitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTransferLimitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTransferLimitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTransferLimitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTransferLimitRequestValidationError{}

var _DeleteTransferLimitRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ApproveTransferLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveTransferLimitRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ApproveTransferLimitRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		return ApproveTransferLimitRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// ApproveTransferLimitRequestValidationError is the validation error returned
// by ApproveTransferLimitRequest.Validate if the designated constraints
// aren't met.
type ApproveTransferLimitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveTransferLimitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveTransferLimitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveTransferLimitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveTransferLimitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveTransferLimitRequestValidationError) ErrorName() string {
	return "ApproveTransferLimitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveTransferLimitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveTransferLimitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveTransferLimitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveTransferLimitRequestValidationError{}

var _ApproveTransferLimitRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		return CreatePolicyRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	// no validation rules for IsBasePolicy

	// no validation rules for Coin

	// no validation rules for Type

	if !_CreatePolicyRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		return CreatePolicyRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_CreatePolicyRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		return CreatePolicyRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// CreatePolicyRequestValidationError is the validation error returned by
// CreatePolicyRequest.Validate if the designated constraints aren't met.
type CreatePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicyRequestValidationError) ErrorName() string {
	return "CreatePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicyRequestValidationError{}

var _CreatePolicyRequest_WhitelistId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _CreatePolicyRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetPolicyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetPolicyRequest_PolicyId_Pattern.MatchString(m.GetPolicyId()) {
		return GetPolicyRequestValidationError{
			field:  "PolicyId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// GetPolicyRequestValidationError is the validation error returned by
// GetPolicyRequest.Validate if the designated constraints aren't met.
type GetPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPolicyRequestValidationError) ErrorName() string { return "GetPolicyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPolicyRequestValidationError{}

var _GetPolicyRequest_PolicyId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListPoliciesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPoliciesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListPoliciesRequestValidationError is the validation error returned by
// ListPoliciesRequest.Validate if the designated constraints aren't met.
type ListPoliciesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPoliciesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPoliciesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPoliciesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPoliciesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPoliciesRequestValidationError) ErrorName() string {
	return "ListPoliciesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPoliciesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPoliciesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPoliciesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPoliciesRequestValidationError{}

// Validate checks the field values on ListPoliciesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPoliciesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPoliciesResponseValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListPoliciesResponseValidationError is the validation error returned by
// ListPoliciesResponse.Validate if the designated constraints aren't met.
type ListPoliciesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPoliciesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPoliciesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPoliciesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPoliciesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPoliciesResponseValidationError) ErrorName() string {
	return "ListPoliciesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPoliciesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPoliciesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPoliciesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPoliciesResponseValidationError{}

// Validate checks the field values on UpdatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdatePolicyRequest_PolicyId_Pattern.MatchString(m.GetPolicyId()) {
		return UpdatePolicyRequestValidationError{
			field:  "PolicyId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		return UpdatePolicyRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	if !_UpdatePolicyRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		return UpdatePolicyRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_UpdatePolicyRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		return UpdatePolicyRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// UpdatePolicyRequestValidationError is the validation error returned by
// UpdatePolicyRequest.Validate if the designated constraints aren't met.
type UpdatePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePolicyRequestValidationError) ErrorName() string {
	return "UpdatePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePolicyRequestValidationError{}

var _UpdatePolicyRequest_PolicyId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _UpdatePolicyRequest_WhitelistId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _UpdatePolicyRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on DeletePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeletePolicyRequest_PolicyId_Pattern.MatchString(m.GetPolicyId()) {
		return DeletePolicyRequestValidationError{
			field:  "PolicyId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// DeletePolicyRequestValidationError is the validation error returned by
// DeletePolicyRequest.Validate if the designated constraints aren't met.
type DeletePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePolicyRequestValidationError) ErrorName() string {
	return "DeletePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePolicyRequestValidationError{}

var _DeletePolicyRequest_PolicyId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")
