// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gincoinc/adamant/teller/v1/adamanttellerv1/teller_api.proto

package adamanttellerv1

import (
	context "context"
	fmt "fmt"
	adamantglobalv1 "gincoinc/adamant/global/v1/adamantglobalv1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SignTransactionRequest struct {
	WalletId             string   `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId        string   `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignTransactionRequest) Reset()         { *m = SignTransactionRequest{} }
func (m *SignTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*SignTransactionRequest) ProtoMessage()    {}
func (*SignTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48887539066eccda, []int{0}
}

func (m *SignTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignTransactionRequest.Unmarshal(m, b)
}
func (m *SignTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignTransactionRequest.Marshal(b, m, deterministic)
}
func (m *SignTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTransactionRequest.Merge(m, src)
}
func (m *SignTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_SignTransactionRequest.Size(m)
}
func (m *SignTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignTransactionRequest proto.InternalMessageInfo

func (m *SignTransactionRequest) GetWalletId() string {
	if m != nil {
		return m.WalletId
	}
	return ""
}

func (m *SignTransactionRequest) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func init() {
	proto.RegisterType((*SignTransactionRequest)(nil), "adamant.teller.v1.SignTransactionRequest")
}

func init() {
	proto.RegisterFile("gincoinc/adamant/teller/v1/adamanttellerv1/teller_api.proto", fileDescriptor_48887539066eccda)
}

var fileDescriptor_48887539066eccda = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xdf, 0x6f, 0xd3, 0x30,
	0x10, 0xc7, 0x3b, 0x1e, 0x10, 0x35, 0x2b, 0xa3, 0x46, 0x1a, 0x90, 0x49, 0x08, 0x15, 0xf6, 0x03,
	0x26, 0x1c, 0x05, 0x24, 0x5e, 0x78, 0xda, 0x2a, 0xa8, 0x2a, 0x81, 0x34, 0xad, 0x13, 0x48, 0x13,
	0x62, 0x72, 0xe2, 0x5b, 0x14, 0xc9, 0x75, 0x42, 0xe2, 0x06, 0xf1, 0xd7, 0xf1, 0xaf, 0xa1, 0xc4,
	0x76, 0xea, 0xa5, 0xae, 0xd2, 0xbe, 0x55, 0x77, 0x1f, 0x7f, 0xef, 0xfa, 0xf5, 0xf9, 0x82, 0x3e,
	0xc5, 0x89, 0x88, 0xd2, 0x44, 0x44, 0x3e, 0x65, 0x74, 0x4e, 0x85, 0xf4, 0x25, 0x70, 0x0e, 0xb9,
	0x5f, 0x06, 0x26, 0xa2, 0x02, 0x65, 0xa0, 0x33, 0x37, 0x34, 0x4b, 0x48, 0x96, 0xa7, 0x32, 0xc5,
	0x43, 0x4d, 0x10, 0x95, 0x21, 0x65, 0xe0, 0x1d, 0xc4, 0x69, 0x1a, 0x73, 0xf0, 0x6b, 0x20, 0x5c,
	0xdc, 0xfa, 0x30, 0xcf, 0xe4, 0x5f, 0xc5, 0x7b, 0x4f, 0x4b, 0xca, 0x13, 0x46, 0x25, 0xf8, 0xe6,
	0x87, 0x4e, 0xac, 0x76, 0x11, 0xf3, 0x34, 0xa4, 0xdc, 0xea, 0x42, 0x05, 0xca, 0x40, 0x67, 0x96,
	0x5d, 0x78, 0x1f, 0xb7, 0x38, 0x3c, 0x4f, 0x19, 0x70, 0x75, 0x6e, 0xf4, 0x13, 0xed, 0xcf, 0x92,
	0x58, 0x5c, 0xe5, 0x54, 0x14, 0x34, 0x92, 0x49, 0x2a, 0x2e, 0xe1, 0xf7, 0x02, 0x0a, 0x89, 0x0f,
	0x50, 0xff, 0x0f, 0xe5, 0x1c, 0xe4, 0x4d, 0xc2, 0x9e, 0xed, 0xbc, 0xdc, 0x39, 0xe9, 0x5f, 0x3e,
	0x50, 0x81, 0x29, 0xc3, 0x87, 0xe8, 0x91, 0x5c, 0x1e, 0xa9, 0x88, 0x7b, 0x35, 0x31, 0xb0, 0xa2,
	0x53, 0xf6, 0xfe, 0x1f, 0x42, 0xfd, 0xab, 0xda, 0x96, 0xb3, 0x8b, 0x29, 0x9e, 0xa1, 0xdd, 0x71,
	0x0e, 0x54, 0xc2, 0x8f, 0x5a, 0x06, 0x1f, 0x11, 0x63, 0x9d, 0x6a, 0x8d, 0x94, 0x01, 0xb1, 0x01,
	0xdd, 0x89, 0xf7, 0xdc, 0xc1, 0x29, 0x62, 0xd4, 0xc3, 0xdf, 0x50, 0x7f, 0x02, 0x52, 0x2b, 0xbe,
	0x72, 0x90, 0x4d, 0x76, 0x23, 0xb9, 0x5f, 0xe8, 0xe1, 0xd7, 0xa4, 0xd0, 0x27, 0x0a, 0x7c, 0xe8,
	0x60, 0xad, 0xbc, 0x91, 0x3c, 0xea, 0xc2, 0x8a, 0x2c, 0x15, 0x05, 0x8c, 0x7a, 0xb8, 0x44, 0x4f,
	0x26, 0x20, 0x67, 0x19, 0x08, 0x46, 0x43, 0x0e, 0xe7, 0x94, 0x53, 0x11, 0x01, 0x7e, 0xe7, 0x6e,
	0xbc, 0xcd, 0x99, 0x7a, 0x64, 0x53, 0xbc, 0xa9, 0xfb, 0x1d, 0x0d, 0x94, 0xb5, 0x67, 0x8c, 0xe5,
	0x50, 0x14, 0xf8, 0x78, 0xad, 0xf9, 0x9a, 0x30, 0xb5, 0x3c, 0x07, 0xa8, 0x91, 0x51, 0x0f, 0x5f,
	0x20, 0x34, 0x01, 0x69, 0x44, 0x5f, 0xbb, 0xfb, 0xda, 0x4a, 0x91, 0xa1, 0x41, 0x65, 0x9d, 0x0e,
	0x80, 0xbb, 0xd3, 0x3b, 0x84, 0xd1, 0x3d, 0xe9, 0x06, 0x1b, 0x3f, 0x42, 0x34, 0x54, 0xff, 0xd6,
	0x9a, 0x7c, 0x7c, 0xba, 0xd6, 0x93, 0xd5, 0xf7, 0xe1, 0xbd, 0x70, 0xc0, 0x16, 0x56, 0x7b, 0xbe,
	0xd7, 0x7a, 0x5b, 0xf8, 0x0d, 0x59, 0xd9, 0x16, 0xc4, 0xfd, 0xfe, 0xbc, 0x7d, 0xa2, 0xb6, 0x08,
	0x31, 0x5b, 0x84, 0x7c, 0xae, 0xb6, 0x88, 0xd6, 0x05, 0xc1, 0xdc, 0xba, 0xcb, 0x66, 0x5a, 0x4c,
	0xb7, 0xee, 0x35, 0x1a, 0x8e, 0xab, 0xb1, 0xe1, 0x9d, 0x9e, 0xb4, 0xa9, 0x6e, 0xed, 0x39, 0x7a,
	0x5c, 0x5d, 0x85, 0x75, 0xa6, 0xc0, 0x6f, 0xd7, 0xdc, 0x97, 0x0d, 0x19, 0xe5, 0xd3, 0x8d, 0xd8,
	0xe6, 0x7a, 0xf5, 0x10, 0xd5, 0xd9, 0x5b, 0xc8, 0xd7, 0x0f, 0x51, 0x43, 0x74, 0x0d, 0x91, 0x05,
	0x36, 0x55, 0x28, 0xda, 0x1d, 0x53, 0x1e, 0x2d, 0x38, 0x95, 0xf0, 0x05, 0xc0, 0xbd, 0xd0, 0x2c,
	0xc0, 0xd4, 0x38, 0xee, 0xe4, 0x4c, 0x89, 0xf3, 0xe1, 0xf5, 0x5e, 0xeb, 0x0b, 0x14, 0xde, 0xaf,
	0xcd, 0xfd, 0xf0, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x49, 0xc3, 0x0b, 0xb5, 0xb6, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TellerAPIClient is the client API for TellerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TellerAPIClient interface {
	// Wallet
	CreateWallet(ctx context.Context, in *adamantglobalv1.CreateWalletRequest, opts ...grpc.CallOption) (*adamantglobalv1.Wallet, error)
	GetWallet(ctx context.Context, in *adamantglobalv1.GetWalletRequest, opts ...grpc.CallOption) (*adamantglobalv1.Wallet, error)
	ListWallets(ctx context.Context, in *adamantglobalv1.ListWalletsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListWalletsResponse, error)
	GetSpendableBalance(ctx context.Context, in *adamantglobalv1.GetSpendableBalanceRequest, opts ...grpc.CallOption) (*adamantglobalv1.GetSpendableBalanceResponse, error)
	// Address
	CreateAddress(ctx context.Context, in *adamantglobalv1.CreateAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error)
	GetAddress(ctx context.Context, in *adamantglobalv1.GetAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error)
	ListAddresses(ctx context.Context, in *adamantglobalv1.ListAddressesRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListAddressesResponse, error)
	// Transaction
	CreateTransaction(ctx context.Context, in *adamantglobalv1.CreateTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.Transaction, error)
	SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SendTransaction(ctx context.Context, in *adamantglobalv1.SendTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CancelTransaction(ctx context.Context, in *adamantglobalv1.CancelTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListTransactions(ctx context.Context, in *adamantglobalv1.ListTransactionsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransactionsResponse, error)
	// Transfer
	ListTransfers(ctx context.Context, in *adamantglobalv1.ListTransfersRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransfersResponse, error)
	// Utility
	CalculateFee(ctx context.Context, in *adamantglobalv1.CalculateFeeRequest, opts ...grpc.CallOption) (*adamantglobalv1.CalculateFeeResponse, error)
}

type tellerAPIClient struct {
	cc *grpc.ClientConn
}

func NewTellerAPIClient(cc *grpc.ClientConn) TellerAPIClient {
	return &tellerAPIClient{cc}
}

func (c *tellerAPIClient) CreateWallet(ctx context.Context, in *adamantglobalv1.CreateWalletRequest, opts ...grpc.CallOption) (*adamantglobalv1.Wallet, error) {
	out := new(adamantglobalv1.Wallet)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetWallet(ctx context.Context, in *adamantglobalv1.GetWalletRequest, opts ...grpc.CallOption) (*adamantglobalv1.Wallet, error) {
	out := new(adamantglobalv1.Wallet)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListWallets(ctx context.Context, in *adamantglobalv1.ListWalletsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListWalletsResponse, error) {
	out := new(adamantglobalv1.ListWalletsResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetSpendableBalance(ctx context.Context, in *adamantglobalv1.GetSpendableBalanceRequest, opts ...grpc.CallOption) (*adamantglobalv1.GetSpendableBalanceResponse, error) {
	out := new(adamantglobalv1.GetSpendableBalanceResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetSpendableBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) CreateAddress(ctx context.Context, in *adamantglobalv1.CreateAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error) {
	out := new(adamantglobalv1.Address)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CreateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetAddress(ctx context.Context, in *adamantglobalv1.GetAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error) {
	out := new(adamantglobalv1.Address)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListAddresses(ctx context.Context, in *adamantglobalv1.ListAddressesRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListAddressesResponse, error) {
	out := new(adamantglobalv1.ListAddressesResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) CreateTransaction(ctx context.Context, in *adamantglobalv1.CreateTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.Transaction, error) {
	out := new(adamantglobalv1.Transaction)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/SignTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) SendTransaction(ctx context.Context, in *adamantglobalv1.SendTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) CancelTransaction(ctx context.Context, in *adamantglobalv1.CancelTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CancelTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListTransactions(ctx context.Context, in *adamantglobalv1.ListTransactionsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransactionsResponse, error) {
	out := new(adamantglobalv1.ListTransactionsResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListTransfers(ctx context.Context, in *adamantglobalv1.ListTransfersRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransfersResponse, error) {
	out := new(adamantglobalv1.ListTransfersResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) CalculateFee(ctx context.Context, in *adamantglobalv1.CalculateFeeRequest, opts ...grpc.CallOption) (*adamantglobalv1.CalculateFeeResponse, error) {
	out := new(adamantglobalv1.CalculateFeeResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CalculateFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TellerAPIServer is the server API for TellerAPI service.
type TellerAPIServer interface {
	// Wallet
	CreateWallet(context.Context, *adamantglobalv1.CreateWalletRequest) (*adamantglobalv1.Wallet, error)
	GetWallet(context.Context, *adamantglobalv1.GetWalletRequest) (*adamantglobalv1.Wallet, error)
	ListWallets(context.Context, *adamantglobalv1.ListWalletsRequest) (*adamantglobalv1.ListWalletsResponse, error)
	GetSpendableBalance(context.Context, *adamantglobalv1.GetSpendableBalanceRequest) (*adamantglobalv1.GetSpendableBalanceResponse, error)
	// Address
	CreateAddress(context.Context, *adamantglobalv1.CreateAddressRequest) (*adamantglobalv1.Address, error)
	GetAddress(context.Context, *adamantglobalv1.GetAddressRequest) (*adamantglobalv1.Address, error)
	ListAddresses(context.Context, *adamantglobalv1.ListAddressesRequest) (*adamantglobalv1.ListAddressesResponse, error)
	// Transaction
	CreateTransaction(context.Context, *adamantglobalv1.CreateTransactionRequest) (*adamantglobalv1.Transaction, error)
	SignTransaction(context.Context, *SignTransactionRequest) (*empty.Empty, error)
	SendTransaction(context.Context, *adamantglobalv1.SendTransactionRequest) (*empty.Empty, error)
	CancelTransaction(context.Context, *adamantglobalv1.CancelTransactionRequest) (*empty.Empty, error)
	ListTransactions(context.Context, *adamantglobalv1.ListTransactionsRequest) (*adamantglobalv1.ListTransactionsResponse, error)
	// Transfer
	ListTransfers(context.Context, *adamantglobalv1.ListTransfersRequest) (*adamantglobalv1.ListTransfersResponse, error)
	// Utility
	CalculateFee(context.Context, *adamantglobalv1.CalculateFeeRequest) (*adamantglobalv1.CalculateFeeResponse, error)
}

// UnimplementedTellerAPIServer can be embedded to have forward compatible implementations.
type UnimplementedTellerAPIServer struct {
}

func (*UnimplementedTellerAPIServer) CreateWallet(ctx context.Context, req *adamantglobalv1.CreateWalletRequest) (*adamantglobalv1.Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (*UnimplementedTellerAPIServer) GetWallet(ctx context.Context, req *adamantglobalv1.GetWalletRequest) (*adamantglobalv1.Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallet not implemented")
}
func (*UnimplementedTellerAPIServer) ListWallets(ctx context.Context, req *adamantglobalv1.ListWalletsRequest) (*adamantglobalv1.ListWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWallets not implemented")
}
func (*UnimplementedTellerAPIServer) GetSpendableBalance(ctx context.Context, req *adamantglobalv1.GetSpendableBalanceRequest) (*adamantglobalv1.GetSpendableBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpendableBalance not implemented")
}
func (*UnimplementedTellerAPIServer) CreateAddress(ctx context.Context, req *adamantglobalv1.CreateAddressRequest) (*adamantglobalv1.Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddress not implemented")
}
func (*UnimplementedTellerAPIServer) GetAddress(ctx context.Context, req *adamantglobalv1.GetAddressRequest) (*adamantglobalv1.Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (*UnimplementedTellerAPIServer) ListAddresses(ctx context.Context, req *adamantglobalv1.ListAddressesRequest) (*adamantglobalv1.ListAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddresses not implemented")
}
func (*UnimplementedTellerAPIServer) CreateTransaction(ctx context.Context, req *adamantglobalv1.CreateTransactionRequest) (*adamantglobalv1.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (*UnimplementedTellerAPIServer) SignTransaction(ctx context.Context, req *SignTransactionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransaction not implemented")
}
func (*UnimplementedTellerAPIServer) SendTransaction(ctx context.Context, req *adamantglobalv1.SendTransactionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (*UnimplementedTellerAPIServer) CancelTransaction(ctx context.Context, req *adamantglobalv1.CancelTransactionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTransaction not implemented")
}
func (*UnimplementedTellerAPIServer) ListTransactions(ctx context.Context, req *adamantglobalv1.ListTransactionsRequest) (*adamantglobalv1.ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (*UnimplementedTellerAPIServer) ListTransfers(ctx context.Context, req *adamantglobalv1.ListTransfersRequest) (*adamantglobalv1.ListTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransfers not implemented")
}
func (*UnimplementedTellerAPIServer) CalculateFee(ctx context.Context, req *adamantglobalv1.CalculateFeeRequest) (*adamantglobalv1.CalculateFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFee not implemented")
}

func RegisterTellerAPIServer(s *grpc.Server, srv TellerAPIServer) {
	s.RegisterService(&_TellerAPI_serviceDesc, srv)
}

func _TellerAPI_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CreateWallet(ctx, req.(*adamantglobalv1.CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetWallet(ctx, req.(*adamantglobalv1.GetWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListWallets(ctx, req.(*adamantglobalv1.ListWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetSpendableBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetSpendableBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetSpendableBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetSpendableBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetSpendableBalance(ctx, req.(*adamantglobalv1.GetSpendableBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.CreateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CreateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CreateAddress(ctx, req.(*adamantglobalv1.CreateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetAddress(ctx, req.(*adamantglobalv1.GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListAddresses(ctx, req.(*adamantglobalv1.ListAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CreateTransaction(ctx, req.(*adamantglobalv1.CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).SignTransaction(ctx, req.(*SignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).SendTransaction(ctx, req.(*adamantglobalv1.SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_CancelTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.CancelTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CancelTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CancelTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CancelTransaction(ctx, req.(*adamantglobalv1.CancelTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListTransactions(ctx, req.(*adamantglobalv1.ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListTransfers(ctx, req.(*adamantglobalv1.ListTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_CalculateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.CalculateFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CalculateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CalculateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CalculateFee(ctx, req.(*adamantglobalv1.CalculateFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TellerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "adamant.teller.v1.TellerAPI",
	HandlerType: (*TellerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _TellerAPI_CreateWallet_Handler,
		},
		{
			MethodName: "GetWallet",
			Handler:    _TellerAPI_GetWallet_Handler,
		},
		{
			MethodName: "ListWallets",
			Handler:    _TellerAPI_ListWallets_Handler,
		},
		{
			MethodName: "GetSpendableBalance",
			Handler:    _TellerAPI_GetSpendableBalance_Handler,
		},
		{
			MethodName: "CreateAddress",
			Handler:    _TellerAPI_CreateAddress_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _TellerAPI_GetAddress_Handler,
		},
		{
			MethodName: "ListAddresses",
			Handler:    _TellerAPI_ListAddresses_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _TellerAPI_CreateTransaction_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _TellerAPI_SignTransaction_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _TellerAPI_SendTransaction_Handler,
		},
		{
			MethodName: "CancelTransaction",
			Handler:    _TellerAPI_CancelTransaction_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _TellerAPI_ListTransactions_Handler,
		},
		{
			MethodName: "ListTransfers",
			Handler:    _TellerAPI_ListTransfers_Handler,
		},
		{
			MethodName: "CalculateFee",
			Handler:    _TellerAPI_CalculateFee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gincoinc/adamant/teller/v1/adamanttellerv1/teller_api.proto",
}
