<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: gincoinc/adamant/global/v1/adamantglobalv1/enum.proto

namespace Adamant\PBGlobal\V1;

use UnexpectedValueException;

/**
 * AuditLogGroup is a enum of AuditLogGroup
 *
 * Protobuf type <code>adamant.global.v1.AuditLogGroup</code>
 */
class AuditLogGroup
{
    /**
     * Generated from protobuf enum <code>AUDIT_LOG_GROUP_INVALID = 0;</code>
     */
    const AUDIT_LOG_GROUP_INVALID = 0;
    /**
     * Generated from protobuf enum <code>AUDIT_LOG_GROUP_LOGIN = 1;</code>
     */
    const AUDIT_LOG_GROUP_LOGIN = 1;
    /**
     * Generated from protobuf enum <code>AUDIT_LOG_GROUP_ACCOUNT = 2;</code>
     */
    const AUDIT_LOG_GROUP_ACCOUNT = 2;
    /**
     * Generated from protobuf enum <code>AUDIT_LOG_GROUP_SERVICE_ACCOUNT = 3;</code>
     */
    const AUDIT_LOG_GROUP_SERVICE_ACCOUNT = 3;
    /**
     * Generated from protobuf enum <code>AUDIT_LOG_GROUP_WALLET = 4;</code>
     */
    const AUDIT_LOG_GROUP_WALLET = 4;
    /**
     * Generated from protobuf enum <code>AUDIT_LOG_GROUP_PRE_TRANSACTION = 11;</code>
     */
    const AUDIT_LOG_GROUP_PRE_TRANSACTION = 11;
    /**
     * Generated from protobuf enum <code>AUDIT_LOG_GROUP_TRANSACTION = 5;</code>
     */
    const AUDIT_LOG_GROUP_TRANSACTION = 5;
    /**
     * Generated from protobuf enum <code>AUDIT_LOG_GROUP_POLICY = 6;</code>
     */
    const AUDIT_LOG_GROUP_POLICY = 6;
    /**
     * Generated from protobuf enum <code>AUDIT_LOG_GROUP_WALLET_GROUP = 7;</code>
     */
    const AUDIT_LOG_GROUP_WALLET_GROUP = 7;
    /**
     * Generated from protobuf enum <code>AUDIT_LOG_GROUP_MAIL = 8;</code>
     */
    const AUDIT_LOG_GROUP_MAIL = 8;
    /**
     * Generated from protobuf enum <code>AUDIT_LOG_GROUP_PRE_TRANSACTION_THRESHOLD = 9;</code>
     */
    const AUDIT_LOG_GROUP_PRE_TRANSACTION_THRESHOLD = 9;
    /**
     * Generated from protobuf enum <code>AUDIT_LOG_GROUP_BLACKLIST_ADDRESS = 10;</code>
     */
    const AUDIT_LOG_GROUP_BLACKLIST_ADDRESS = 10;

    private static $valueToName = [
        self::AUDIT_LOG_GROUP_INVALID => 'AUDIT_LOG_GROUP_INVALID',
        self::AUDIT_LOG_GROUP_LOGIN => 'AUDIT_LOG_GROUP_LOGIN',
        self::AUDIT_LOG_GROUP_ACCOUNT => 'AUDIT_LOG_GROUP_ACCOUNT',
        self::AUDIT_LOG_GROUP_SERVICE_ACCOUNT => 'AUDIT_LOG_GROUP_SERVICE_ACCOUNT',
        self::AUDIT_LOG_GROUP_WALLET => 'AUDIT_LOG_GROUP_WALLET',
        self::AUDIT_LOG_GROUP_PRE_TRANSACTION => 'AUDIT_LOG_GROUP_PRE_TRANSACTION',
        self::AUDIT_LOG_GROUP_TRANSACTION => 'AUDIT_LOG_GROUP_TRANSACTION',
        self::AUDIT_LOG_GROUP_POLICY => 'AUDIT_LOG_GROUP_POLICY',
        self::AUDIT_LOG_GROUP_WALLET_GROUP => 'AUDIT_LOG_GROUP_WALLET_GROUP',
        self::AUDIT_LOG_GROUP_MAIL => 'AUDIT_LOG_GROUP_MAIL',
        self::AUDIT_LOG_GROUP_PRE_TRANSACTION_THRESHOLD => 'AUDIT_LOG_GROUP_PRE_TRANSACTION_THRESHOLD',
        self::AUDIT_LOG_GROUP_BLACKLIST_ADDRESS => 'AUDIT_LOG_GROUP_BLACKLIST_ADDRESS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

