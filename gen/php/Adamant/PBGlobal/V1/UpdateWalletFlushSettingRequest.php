<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: gincoinc/adamant/global/v1/adamantglobalv1/global_api.proto

namespace Adamant\PBGlobal\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>adamant.global.v1.UpdateWalletFlushSettingRequest</code>
 */
class UpdateWalletFlushSettingRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.gincoinc.global.v1.Coin coin = 1 [json_name = "coin", (.validate.rules) = {</code>
     */
    protected $coin = 0;
    /**
     * Generated from protobuf field <code>optional .gincoinc.global.v1.Network network = 3 [json_name = "network", (.validate.rules) = {</code>
     */
    protected $network = null;
    /**
     * Generated from protobuf field <code>string destination_wallet_id = 2 [json_name = "destinationWalletId", (.validate.rules) = {</code>
     */
    protected $destination_wallet_id = '';
    /**
     * Generated from protobuf field <code>double flush_threshold = 4 [json_name = "flushThreshold"];</code>
     */
    protected $flush_threshold = 0.0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $coin
     *     @type int $network
     *     @type string $destination_wallet_id
     *     @type float $flush_threshold
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Gincoinc\Adamant\PBGlobal\V1\Adamantglobalv1\GlobalApi::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.gincoinc.global.v1.Coin coin = 1 [json_name = "coin", (.validate.rules) = {</code>
     * @return int
     */
    public function getCoin()
    {
        return $this->coin;
    }

    /**
     * Generated from protobuf field <code>.gincoinc.global.v1.Coin coin = 1 [json_name = "coin", (.validate.rules) = {</code>
     * @param int $var
     * @return $this
     */
    public function setCoin($var)
    {
        GPBUtil::checkEnum($var, \Gincoinc\PBGlobal\V1\Coin::class);
        $this->coin = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional .gincoinc.global.v1.Network network = 3 [json_name = "network", (.validate.rules) = {</code>
     * @return int
     */
    public function getNetwork()
    {
        return isset($this->network) ? $this->network : 0;
    }

    public function hasNetwork()
    {
        return isset($this->network);
    }

    public function clearNetwork()
    {
        unset($this->network);
    }

    /**
     * Generated from protobuf field <code>optional .gincoinc.global.v1.Network network = 3 [json_name = "network", (.validate.rules) = {</code>
     * @param int $var
     * @return $this
     */
    public function setNetwork($var)
    {
        GPBUtil::checkEnum($var, \Gincoinc\PBGlobal\V1\Network::class);
        $this->network = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string destination_wallet_id = 2 [json_name = "destinationWalletId", (.validate.rules) = {</code>
     * @return string
     */
    public function getDestinationWalletId()
    {
        return $this->destination_wallet_id;
    }

    /**
     * Generated from protobuf field <code>string destination_wallet_id = 2 [json_name = "destinationWalletId", (.validate.rules) = {</code>
     * @param string $var
     * @return $this
     */
    public function setDestinationWalletId($var)
    {
        GPBUtil::checkString($var, True);
        $this->destination_wallet_id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double flush_threshold = 4 [json_name = "flushThreshold"];</code>
     * @return float
     */
    public function getFlushThreshold()
    {
        return $this->flush_threshold;
    }

    /**
     * Generated from protobuf field <code>double flush_threshold = 4 [json_name = "flushThreshold"];</code>
     * @param float $var
     * @return $this
     */
    public function setFlushThreshold($var)
    {
        GPBUtil::checkDouble($var);
        $this->flush_threshold = $var;

        return $this;
    }

}

