<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: gincoinc/adamant/global/v1/adamantglobalv1/model.proto

namespace Adamant\PBGlobal\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The model of Ethereum specific fields of transaction
 *
 * Generated from protobuf message <code>adamant.global.v1.EthereumSpecific</code>
 */
class EthereumSpecific extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>uint64 gas_limit = 1 [json_name = "gasLimit"];</code>
     */
    protected $gas_limit = 0;
    /**
     * Generated from protobuf field <code>uint64 nonce = 2 [json_name = "nonce"];</code>
     */
    protected $nonce = 0;
    /**
     * Generated from protobuf field <code>bool is_next_nonce = 3 [json_name = "isNextNonce"];</code>
     */
    protected $is_next_nonce = false;
    /**
     * Generated from protobuf field <code>.adamant.global.v1.EthereumContractMethodIDType method_id_type = 4 [json_name = "methodIdType"];</code>
     */
    protected $method_id_type = 0;
    /**
     * Generated from protobuf field <code>uint64 expiration = 5 [json_name = "expiration"];</code>
     */
    protected $expiration = 0;
    /**
     * data
     *
     * Generated from protobuf field <code>string data = 6 [json_name = "data"];</code>
     */
    protected $data = '';
    /**
     * Generated from protobuf field <code>bool is_staking_transaction = 7 [json_name = "isStakingTransaction"];</code>
     */
    protected $is_staking_transaction = false;
    /**
     * Generated from protobuf field <code>string from_address = 8 [json_name = "fromAddress"];</code>
     */
    protected $from_address = '';
    /**
     * Generated from protobuf field <code>string token_address = 9 [json_name = "tokenAddress"];</code>
     */
    protected $token_address = '';
    /**
     * Generated from protobuf field <code>uint64 chain_id = 10 [json_name = "chainId"];</code>
     */
    protected $chain_id = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $gas_limit
     *     @type int|string $nonce
     *     @type bool $is_next_nonce
     *     @type int $method_id_type
     *     @type int|string $expiration
     *     @type string $data
     *           data
     *     @type bool $is_staking_transaction
     *     @type string $from_address
     *     @type string $token_address
     *     @type int|string $chain_id
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Gincoinc\Adamant\PBGlobal\V1\Adamantglobalv1\Model::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>uint64 gas_limit = 1 [json_name = "gasLimit"];</code>
     * @return int|string
     */
    public function getGasLimit()
    {
        return $this->gas_limit;
    }

    /**
     * Generated from protobuf field <code>uint64 gas_limit = 1 [json_name = "gasLimit"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setGasLimit($var)
    {
        GPBUtil::checkUint64($var);
        $this->gas_limit = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint64 nonce = 2 [json_name = "nonce"];</code>
     * @return int|string
     */
    public function getNonce()
    {
        return $this->nonce;
    }

    /**
     * Generated from protobuf field <code>uint64 nonce = 2 [json_name = "nonce"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setNonce($var)
    {
        GPBUtil::checkUint64($var);
        $this->nonce = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool is_next_nonce = 3 [json_name = "isNextNonce"];</code>
     * @return bool
     */
    public function getIsNextNonce()
    {
        return $this->is_next_nonce;
    }

    /**
     * Generated from protobuf field <code>bool is_next_nonce = 3 [json_name = "isNextNonce"];</code>
     * @param bool $var
     * @return $this
     */
    public function setIsNextNonce($var)
    {
        GPBUtil::checkBool($var);
        $this->is_next_nonce = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.adamant.global.v1.EthereumContractMethodIDType method_id_type = 4 [json_name = "methodIdType"];</code>
     * @return int
     */
    public function getMethodIdType()
    {
        return $this->method_id_type;
    }

    /**
     * Generated from protobuf field <code>.adamant.global.v1.EthereumContractMethodIDType method_id_type = 4 [json_name = "methodIdType"];</code>
     * @param int $var
     * @return $this
     */
    public function setMethodIdType($var)
    {
        GPBUtil::checkEnum($var, \Adamant\PBGlobal\V1\EthereumContractMethodIDType::class);
        $this->method_id_type = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint64 expiration = 5 [json_name = "expiration"];</code>
     * @return int|string
     */
    public function getExpiration()
    {
        return $this->expiration;
    }

    /**
     * Generated from protobuf field <code>uint64 expiration = 5 [json_name = "expiration"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setExpiration($var)
    {
        GPBUtil::checkUint64($var);
        $this->expiration = $var;

        return $this;
    }

    /**
     * data
     *
     * Generated from protobuf field <code>string data = 6 [json_name = "data"];</code>
     * @return string
     */
    public function getData()
    {
        return $this->data;
    }

    /**
     * data
     *
     * Generated from protobuf field <code>string data = 6 [json_name = "data"];</code>
     * @param string $var
     * @return $this
     */
    public function setData($var)
    {
        GPBUtil::checkString($var, True);
        $this->data = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool is_staking_transaction = 7 [json_name = "isStakingTransaction"];</code>
     * @return bool
     */
    public function getIsStakingTransaction()
    {
        return $this->is_staking_transaction;
    }

    /**
     * Generated from protobuf field <code>bool is_staking_transaction = 7 [json_name = "isStakingTransaction"];</code>
     * @param bool $var
     * @return $this
     */
    public function setIsStakingTransaction($var)
    {
        GPBUtil::checkBool($var);
        $this->is_staking_transaction = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string from_address = 8 [json_name = "fromAddress"];</code>
     * @return string
     */
    public function getFromAddress()
    {
        return $this->from_address;
    }

    /**
     * Generated from protobuf field <code>string from_address = 8 [json_name = "fromAddress"];</code>
     * @param string $var
     * @return $this
     */
    public function setFromAddress($var)
    {
        GPBUtil::checkString($var, True);
        $this->from_address = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string token_address = 9 [json_name = "tokenAddress"];</code>
     * @return string
     */
    public function getTokenAddress()
    {
        return $this->token_address;
    }

    /**
     * Generated from protobuf field <code>string token_address = 9 [json_name = "tokenAddress"];</code>
     * @param string $var
     * @return $this
     */
    public function setTokenAddress($var)
    {
        GPBUtil::checkString($var, True);
        $this->token_address = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint64 chain_id = 10 [json_name = "chainId"];</code>
     * @return int|string
     */
    public function getChainId()
    {
        return $this->chain_id;
    }

    /**
     * Generated from protobuf field <code>uint64 chain_id = 10 [json_name = "chainId"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setChainId($var)
    {
        GPBUtil::checkUint64($var);
        $this->chain_id = $var;

        return $this;
    }

}

