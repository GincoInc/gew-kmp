<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: gincoinc/adamant/global/v1/adamantglobalv1/model.proto

namespace Adamant\PBGlobal\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The model of NFTSpecific fields of CreateTransaction
 *
 * Generated from protobuf message <code>adamant.global.v1.CreateTransactionNFTSpecific</code>
 */
class CreateTransactionNFTSpecific extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>optional .gincoinc.global.v1.NFTCallMethod nft_call_method = 1 [json_name = "nftCallMethod"];</code>
     */
    protected $nft_call_method = null;
    /**
     * Generated from protobuf field <code>optional string token_id = 2 [json_name = "tokenId"];</code>
     */
    protected $token_id = null;
    /**
     * Generated from protobuf field <code>optional string metadata_json = 3 [json_name = "metadataJson"];</code>
     */
    protected $metadata_json = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $nft_call_method
     *     @type string $token_id
     *     @type string $metadata_json
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Gincoinc\Adamant\PBGlobal\V1\Adamantglobalv1\Model::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>optional .gincoinc.global.v1.NFTCallMethod nft_call_method = 1 [json_name = "nftCallMethod"];</code>
     * @return int
     */
    public function getNftCallMethod()
    {
        return isset($this->nft_call_method) ? $this->nft_call_method : 0;
    }

    public function hasNftCallMethod()
    {
        return isset($this->nft_call_method);
    }

    public function clearNftCallMethod()
    {
        unset($this->nft_call_method);
    }

    /**
     * Generated from protobuf field <code>optional .gincoinc.global.v1.NFTCallMethod nft_call_method = 1 [json_name = "nftCallMethod"];</code>
     * @param int $var
     * @return $this
     */
    public function setNftCallMethod($var)
    {
        GPBUtil::checkEnum($var, \Gincoinc\PBGlobal\V1\NFTCallMethod::class);
        $this->nft_call_method = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional string token_id = 2 [json_name = "tokenId"];</code>
     * @return string
     */
    public function getTokenId()
    {
        return isset($this->token_id) ? $this->token_id : '';
    }

    public function hasTokenId()
    {
        return isset($this->token_id);
    }

    public function clearTokenId()
    {
        unset($this->token_id);
    }

    /**
     * Generated from protobuf field <code>optional string token_id = 2 [json_name = "tokenId"];</code>
     * @param string $var
     * @return $this
     */
    public function setTokenId($var)
    {
        GPBUtil::checkString($var, True);
        $this->token_id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional string metadata_json = 3 [json_name = "metadataJson"];</code>
     * @return string
     */
    public function getMetadataJson()
    {
        return isset($this->metadata_json) ? $this->metadata_json : '';
    }

    public function hasMetadataJson()
    {
        return isset($this->metadata_json);
    }

    public function clearMetadataJson()
    {
        unset($this->metadata_json);
    }

    /**
     * Generated from protobuf field <code>optional string metadata_json = 3 [json_name = "metadataJson"];</code>
     * @param string $var
     * @return $this
     */
    public function setMetadataJson($var)
    {
        GPBUtil::checkString($var, True);
        $this->metadata_json = $var;

        return $this;
    }

}

