<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: gincoinc/adamant/global/v1/adamantglobalv1/model.proto

namespace Adamant\PBGlobal\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The model of StakingHistory
 *
 * Generated from protobuf message <code>adamant.global.v1.StakingHistory</code>
 */
class StakingHistory extends \Google\Protobuf\Internal\Message
{
    /**
     * id
     *
     * Generated from protobuf field <code>string staking_history_id = 1 [json_name = "stakingHistoryId"];</code>
     */
    protected $staking_history_id = '';
    /**
     * owner id
     *
     * Generated from protobuf field <code>string owner_id = 2 [json_name = "ownerId"];</code>
     */
    protected $owner_id = '';
    /**
     * wallet id
     *
     * Generated from protobuf field <code>string wallet_id = 3 [json_name = "walletId"];</code>
     */
    protected $wallet_id = '';
    /**
     * coin
     *
     * Generated from protobuf field <code>.gincoinc.global.v1.Coin coin = 4 [json_name = "coin"];</code>
     */
    protected $coin = 0;
    /**
     * validator id
     *
     * Generated from protobuf field <code>string validator_id = 5 [json_name = "validatorId"];</code>
     */
    protected $validator_id = '';
    /**
     * txID
     *
     * Generated from protobuf field <code>string tx_id = 6 [json_name = "txId"];</code>
     */
    protected $tx_id = '';
    /**
     * tx index
     *
     * Generated from protobuf field <code>uint32 tx_index = 7 [json_name = "txIndex"];</code>
     */
    protected $tx_index = 0;
    /**
     * block hash
     *
     * Generated from protobuf field <code>string block_hash = 8 [json_name = "blockHash"];</code>
     */
    protected $block_hash = '';
    /**
     * The number-typed amount of staking
     *
     * Generated from protobuf field <code>double value = 9 [json_name = "value"];</code>
     */
    protected $value = 0.0;
    /**
     * The string-typed amount of staking
     *
     * Generated from protobuf field <code>string string_value = 10 [json_name = "stringValue"];</code>
     */
    protected $string_value = '';
    /**
     * event type
     *
     * Generated from protobuf field <code>.gincoinc.global.v1.StakingEventType event_type = 11 [json_name = "eventType"];</code>
     */
    protected $event_type = 0;
    /**
     * event id
     *
     * Generated from protobuf field <code>string event_id = 15 [json_name = "eventId"];</code>
     */
    protected $event_id = '';
    /**
     * The Ethereum specific fields
     *
     * Generated from protobuf field <code>.adamant.global.v1.StakingHistoryEthereumSpecific ethereum_specific = 14 [json_name = "ethereumSpecific"];</code>
     */
    protected $ethereum_specific = null;
    /**
     * the time at which the staking history was created
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp create_time = 12 [json_name = "createTime"];</code>
     */
    protected $create_time = null;
    /**
     * the time at which the staking history was updated
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp update_time = 13 [json_name = "updateTime"];</code>
     */
    protected $update_time = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $staking_history_id
     *           id
     *     @type string $owner_id
     *           owner id
     *     @type string $wallet_id
     *           wallet id
     *     @type int $coin
     *           coin
     *     @type string $validator_id
     *           validator id
     *     @type string $tx_id
     *           txID
     *     @type int $tx_index
     *           tx index
     *     @type string $block_hash
     *           block hash
     *     @type float $value
     *           The number-typed amount of staking
     *     @type string $string_value
     *           The string-typed amount of staking
     *     @type int $event_type
     *           event type
     *     @type string $event_id
     *           event id
     *     @type \Adamant\PBGlobal\V1\StakingHistoryEthereumSpecific $ethereum_specific
     *           The Ethereum specific fields
     *     @type \Google\Protobuf\Timestamp $create_time
     *           the time at which the staking history was created
     *     @type \Google\Protobuf\Timestamp $update_time
     *           the time at which the staking history was updated
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Gincoinc\Adamant\PBGlobal\V1\Adamantglobalv1\Model::initOnce();
        parent::__construct($data);
    }

    /**
     * id
     *
     * Generated from protobuf field <code>string staking_history_id = 1 [json_name = "stakingHistoryId"];</code>
     * @return string
     */
    public function getStakingHistoryId()
    {
        return $this->staking_history_id;
    }

    /**
     * id
     *
     * Generated from protobuf field <code>string staking_history_id = 1 [json_name = "stakingHistoryId"];</code>
     * @param string $var
     * @return $this
     */
    public function setStakingHistoryId($var)
    {
        GPBUtil::checkString($var, True);
        $this->staking_history_id = $var;

        return $this;
    }

    /**
     * owner id
     *
     * Generated from protobuf field <code>string owner_id = 2 [json_name = "ownerId"];</code>
     * @return string
     */
    public function getOwnerId()
    {
        return $this->owner_id;
    }

    /**
     * owner id
     *
     * Generated from protobuf field <code>string owner_id = 2 [json_name = "ownerId"];</code>
     * @param string $var
     * @return $this
     */
    public function setOwnerId($var)
    {
        GPBUtil::checkString($var, True);
        $this->owner_id = $var;

        return $this;
    }

    /**
     * wallet id
     *
     * Generated from protobuf field <code>string wallet_id = 3 [json_name = "walletId"];</code>
     * @return string
     */
    public function getWalletId()
    {
        return $this->wallet_id;
    }

    /**
     * wallet id
     *
     * Generated from protobuf field <code>string wallet_id = 3 [json_name = "walletId"];</code>
     * @param string $var
     * @return $this
     */
    public function setWalletId($var)
    {
        GPBUtil::checkString($var, True);
        $this->wallet_id = $var;

        return $this;
    }

    /**
     * coin
     *
     * Generated from protobuf field <code>.gincoinc.global.v1.Coin coin = 4 [json_name = "coin"];</code>
     * @return int
     */
    public function getCoin()
    {
        return $this->coin;
    }

    /**
     * coin
     *
     * Generated from protobuf field <code>.gincoinc.global.v1.Coin coin = 4 [json_name = "coin"];</code>
     * @param int $var
     * @return $this
     */
    public function setCoin($var)
    {
        GPBUtil::checkEnum($var, \Gincoinc\PBGlobal\V1\Coin::class);
        $this->coin = $var;

        return $this;
    }

    /**
     * validator id
     *
     * Generated from protobuf field <code>string validator_id = 5 [json_name = "validatorId"];</code>
     * @return string
     */
    public function getValidatorId()
    {
        return $this->validator_id;
    }

    /**
     * validator id
     *
     * Generated from protobuf field <code>string validator_id = 5 [json_name = "validatorId"];</code>
     * @param string $var
     * @return $this
     */
    public function setValidatorId($var)
    {
        GPBUtil::checkString($var, True);
        $this->validator_id = $var;

        return $this;
    }

    /**
     * txID
     *
     * Generated from protobuf field <code>string tx_id = 6 [json_name = "txId"];</code>
     * @return string
     */
    public function getTxId()
    {
        return $this->tx_id;
    }

    /**
     * txID
     *
     * Generated from protobuf field <code>string tx_id = 6 [json_name = "txId"];</code>
     * @param string $var
     * @return $this
     */
    public function setTxId($var)
    {
        GPBUtil::checkString($var, True);
        $this->tx_id = $var;

        return $this;
    }

    /**
     * tx index
     *
     * Generated from protobuf field <code>uint32 tx_index = 7 [json_name = "txIndex"];</code>
     * @return int
     */
    public function getTxIndex()
    {
        return $this->tx_index;
    }

    /**
     * tx index
     *
     * Generated from protobuf field <code>uint32 tx_index = 7 [json_name = "txIndex"];</code>
     * @param int $var
     * @return $this
     */
    public function setTxIndex($var)
    {
        GPBUtil::checkUint32($var);
        $this->tx_index = $var;

        return $this;
    }

    /**
     * block hash
     *
     * Generated from protobuf field <code>string block_hash = 8 [json_name = "blockHash"];</code>
     * @return string
     */
    public function getBlockHash()
    {
        return $this->block_hash;
    }

    /**
     * block hash
     *
     * Generated from protobuf field <code>string block_hash = 8 [json_name = "blockHash"];</code>
     * @param string $var
     * @return $this
     */
    public function setBlockHash($var)
    {
        GPBUtil::checkString($var, True);
        $this->block_hash = $var;

        return $this;
    }

    /**
     * The number-typed amount of staking
     *
     * Generated from protobuf field <code>double value = 9 [json_name = "value"];</code>
     * @return float
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * The number-typed amount of staking
     *
     * Generated from protobuf field <code>double value = 9 [json_name = "value"];</code>
     * @param float $var
     * @return $this
     */
    public function setValue($var)
    {
        GPBUtil::checkDouble($var);
        $this->value = $var;

        return $this;
    }

    /**
     * The string-typed amount of staking
     *
     * Generated from protobuf field <code>string string_value = 10 [json_name = "stringValue"];</code>
     * @return string
     */
    public function getStringValue()
    {
        return $this->string_value;
    }

    /**
     * The string-typed amount of staking
     *
     * Generated from protobuf field <code>string string_value = 10 [json_name = "stringValue"];</code>
     * @param string $var
     * @return $this
     */
    public function setStringValue($var)
    {
        GPBUtil::checkString($var, True);
        $this->string_value = $var;

        return $this;
    }

    /**
     * event type
     *
     * Generated from protobuf field <code>.gincoinc.global.v1.StakingEventType event_type = 11 [json_name = "eventType"];</code>
     * @return int
     */
    public function getEventType()
    {
        return $this->event_type;
    }

    /**
     * event type
     *
     * Generated from protobuf field <code>.gincoinc.global.v1.StakingEventType event_type = 11 [json_name = "eventType"];</code>
     * @param int $var
     * @return $this
     */
    public function setEventType($var)
    {
        GPBUtil::checkEnum($var, \Gincoinc\PBGlobal\V1\StakingEventType::class);
        $this->event_type = $var;

        return $this;
    }

    /**
     * event id
     *
     * Generated from protobuf field <code>string event_id = 15 [json_name = "eventId"];</code>
     * @return string
     */
    public function getEventId()
    {
        return $this->event_id;
    }

    /**
     * event id
     *
     * Generated from protobuf field <code>string event_id = 15 [json_name = "eventId"];</code>
     * @param string $var
     * @return $this
     */
    public function setEventId($var)
    {
        GPBUtil::checkString($var, True);
        $this->event_id = $var;

        return $this;
    }

    /**
     * The Ethereum specific fields
     *
     * Generated from protobuf field <code>.adamant.global.v1.StakingHistoryEthereumSpecific ethereum_specific = 14 [json_name = "ethereumSpecific"];</code>
     * @return \Adamant\PBGlobal\V1\StakingHistoryEthereumSpecific|null
     */
    public function getEthereumSpecific()
    {
        return $this->ethereum_specific;
    }

    public function hasEthereumSpecific()
    {
        return isset($this->ethereum_specific);
    }

    public function clearEthereumSpecific()
    {
        unset($this->ethereum_specific);
    }

    /**
     * The Ethereum specific fields
     *
     * Generated from protobuf field <code>.adamant.global.v1.StakingHistoryEthereumSpecific ethereum_specific = 14 [json_name = "ethereumSpecific"];</code>
     * @param \Adamant\PBGlobal\V1\StakingHistoryEthereumSpecific $var
     * @return $this
     */
    public function setEthereumSpecific($var)
    {
        GPBUtil::checkMessage($var, \Adamant\PBGlobal\V1\StakingHistoryEthereumSpecific::class);
        $this->ethereum_specific = $var;

        return $this;
    }

    /**
     * the time at which the staking history was created
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp create_time = 12 [json_name = "createTime"];</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getCreateTime()
    {
        return $this->create_time;
    }

    public function hasCreateTime()
    {
        return isset($this->create_time);
    }

    public function clearCreateTime()
    {
        unset($this->create_time);
    }

    /**
     * the time at which the staking history was created
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp create_time = 12 [json_name = "createTime"];</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setCreateTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->create_time = $var;

        return $this;
    }

    /**
     * the time at which the staking history was updated
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp update_time = 13 [json_name = "updateTime"];</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getUpdateTime()
    {
        return $this->update_time;
    }

    public function hasUpdateTime()
    {
        return isset($this->update_time);
    }

    public function clearUpdateTime()
    {
        unset($this->update_time);
    }

    /**
     * the time at which the staking history was updated
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp update_time = 13 [json_name = "updateTime"];</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setUpdateTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->update_time = $var;

        return $this;
    }

}

