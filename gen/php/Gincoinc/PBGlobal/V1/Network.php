<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: gincoinc/global/v1/gincoincglobalv1/enum.proto

namespace Gincoinc\PBGlobal\V1;

use UnexpectedValueException;

/**
 * Network is a type of blockchain network.
 *
 * Protobuf type <code>gincoinc.global.v1.Network</code>
 */
class Network
{
    /**
     * Generated from protobuf enum <code>NETWORK_INVALID = 0;</code>
     */
    const NETWORK_INVALID = 0;
    /**
     * Generated from protobuf enum <code>NETWORK_BITCOIN_MAINNET = 1;</code>
     */
    const NETWORK_BITCOIN_MAINNET = 1;
    /**
     * Generated from protobuf enum <code>NETWORK_BITCOIN_TESTNET = 2;</code>
     */
    const NETWORK_BITCOIN_TESTNET = 2;
    /**
     * Generated from protobuf enum <code>NETWORK_ETHEREUM_MAINNET = 3;</code>
     */
    const NETWORK_ETHEREUM_MAINNET = 3;
    /**
     * Generated from protobuf enum <code>NETWORK_ETHEREUM_TESTNET = 4;</code>
     */
    const NETWORK_ETHEREUM_TESTNET = 4;
    /**
     * Generated from protobuf enum <code>NETWORK_LITECOIN_MAINNET = 5;</code>
     */
    const NETWORK_LITECOIN_MAINNET = 5;
    /**
     * Generated from protobuf enum <code>NETWORK_LITECOIN_TESTNET = 6;</code>
     */
    const NETWORK_LITECOIN_TESTNET = 6;
    /**
     * Generated from protobuf enum <code>NETWORK_BITCOINCASH_MAINNET = 7;</code>
     */
    const NETWORK_BITCOINCASH_MAINNET = 7;
    /**
     * Generated from protobuf enum <code>NETWORK_BITCOINCASH_TESTNET = 8;</code>
     */
    const NETWORK_BITCOINCASH_TESTNET = 8;
    /**
     * Generated from protobuf enum <code>NETWORK_RIPPLE_MAINNET = 9;</code>
     */
    const NETWORK_RIPPLE_MAINNET = 9;
    /**
     * Generated from protobuf enum <code>NETWORK_RIPPLE_TESTNET = 10;</code>
     */
    const NETWORK_RIPPLE_TESTNET = 10;
    /**
     * Generated from protobuf enum <code>NETWORK_TRON_MAINNET = 11;</code>
     */
    const NETWORK_TRON_MAINNET = 11;
    /**
     * Generated from protobuf enum <code>NETWORK_TRON_TESTNET = 12;</code>
     */
    const NETWORK_TRON_TESTNET = 12;
    /**
     * Generated from protobuf enum <code>NETWORK_C0BAN_MAINNET = 13;</code>
     */
    const NETWORK_C0BAN_MAINNET = 13;
    /**
     * Generated from protobuf enum <code>NETWORK_C0BAN_TESTNET = 14;</code>
     */
    const NETWORK_C0BAN_TESTNET = 14;
    /**
     * Generated from protobuf enum <code>NETWORK_STELLAR_MAINNET = 15;</code>
     */
    const NETWORK_STELLAR_MAINNET = 15;
    /**
     * Generated from protobuf enum <code>NETWORK_STELLAR_TESTNET = 16;</code>
     */
    const NETWORK_STELLAR_TESTNET = 16;
    /**
     * Generated from protobuf enum <code>NETWORK_CARDANO_MAINNET = 17;</code>
     */
    const NETWORK_CARDANO_MAINNET = 17;
    /**
     * Generated from protobuf enum <code>NETWORK_CARDANO_TESTNET = 18;</code>
     */
    const NETWORK_CARDANO_TESTNET = 18;
    /**
     * Generated from protobuf enum <code>NETWORK_POLKADOT_MAINNET = 19;</code>
     */
    const NETWORK_POLKADOT_MAINNET = 19;
    /**
     * Generated from protobuf enum <code>NETWORK_POLKADOT_TESTNET = 20;</code>
     */
    const NETWORK_POLKADOT_TESTNET = 20;
    /**
     * Generated from protobuf enum <code>NETWORK_NEM_MAINNET = 21;</code>
     */
    const NETWORK_NEM_MAINNET = 21;
    /**
     * Generated from protobuf enum <code>NETWORK_NEM_TESTNET = 22;</code>
     */
    const NETWORK_NEM_TESTNET = 22;
    /**
     * Generated from protobuf enum <code>NETWORK_MONACOIN_MAINNET = 23;</code>
     */
    const NETWORK_MONACOIN_MAINNET = 23;
    /**
     * Generated from protobuf enum <code>NETWORK_MONACOIN_TESTNET = 24;</code>
     */
    const NETWORK_MONACOIN_TESTNET = 24;
    /**
     * Generated from protobuf enum <code>NETWORK_IOST_MAINNET = 25;</code>
     */
    const NETWORK_IOST_MAINNET = 25;
    /**
     * Generated from protobuf enum <code>NETWORK_IOST_TESTNET = 26;</code>
     */
    const NETWORK_IOST_TESTNET = 26;
    /**
     * Generated from protobuf enum <code>NETWORK_KLAY_MAINNET = 27;</code>
     */
    const NETWORK_KLAY_MAINNET = 27;
    /**
     * Generated from protobuf enum <code>NETWORK_KLAY_TESTNET = 28;</code>
     */
    const NETWORK_KLAY_TESTNET = 28;
    /**
     * Generated from protobuf enum <code>NETWORK_POLYGON_MAINNET = 29;</code>
     */
    const NETWORK_POLYGON_MAINNET = 29;
    /**
     * Generated from protobuf enum <code>NETWORK_POLYGON_TESTNET = 30;</code>
     */
    const NETWORK_POLYGON_TESTNET = 30;
    /**
     * Generated from protobuf enum <code>NETWORK_SYMBOL_MAINNET = 31;</code>
     */
    const NETWORK_SYMBOL_MAINNET = 31;
    /**
     * Generated from protobuf enum <code>NETWORK_SYMBOL_TESTNET = 32;</code>
     */
    const NETWORK_SYMBOL_TESTNET = 32;

    private static $valueToName = [
        self::NETWORK_INVALID => 'NETWORK_INVALID',
        self::NETWORK_BITCOIN_MAINNET => 'NETWORK_BITCOIN_MAINNET',
        self::NETWORK_BITCOIN_TESTNET => 'NETWORK_BITCOIN_TESTNET',
        self::NETWORK_ETHEREUM_MAINNET => 'NETWORK_ETHEREUM_MAINNET',
        self::NETWORK_ETHEREUM_TESTNET => 'NETWORK_ETHEREUM_TESTNET',
        self::NETWORK_LITECOIN_MAINNET => 'NETWORK_LITECOIN_MAINNET',
        self::NETWORK_LITECOIN_TESTNET => 'NETWORK_LITECOIN_TESTNET',
        self::NETWORK_BITCOINCASH_MAINNET => 'NETWORK_BITCOINCASH_MAINNET',
        self::NETWORK_BITCOINCASH_TESTNET => 'NETWORK_BITCOINCASH_TESTNET',
        self::NETWORK_RIPPLE_MAINNET => 'NETWORK_RIPPLE_MAINNET',
        self::NETWORK_RIPPLE_TESTNET => 'NETWORK_RIPPLE_TESTNET',
        self::NETWORK_TRON_MAINNET => 'NETWORK_TRON_MAINNET',
        self::NETWORK_TRON_TESTNET => 'NETWORK_TRON_TESTNET',
        self::NETWORK_C0BAN_MAINNET => 'NETWORK_C0BAN_MAINNET',
        self::NETWORK_C0BAN_TESTNET => 'NETWORK_C0BAN_TESTNET',
        self::NETWORK_STELLAR_MAINNET => 'NETWORK_STELLAR_MAINNET',
        self::NETWORK_STELLAR_TESTNET => 'NETWORK_STELLAR_TESTNET',
        self::NETWORK_CARDANO_MAINNET => 'NETWORK_CARDANO_MAINNET',
        self::NETWORK_CARDANO_TESTNET => 'NETWORK_CARDANO_TESTNET',
        self::NETWORK_POLKADOT_MAINNET => 'NETWORK_POLKADOT_MAINNET',
        self::NETWORK_POLKADOT_TESTNET => 'NETWORK_POLKADOT_TESTNET',
        self::NETWORK_NEM_MAINNET => 'NETWORK_NEM_MAINNET',
        self::NETWORK_NEM_TESTNET => 'NETWORK_NEM_TESTNET',
        self::NETWORK_MONACOIN_MAINNET => 'NETWORK_MONACOIN_MAINNET',
        self::NETWORK_MONACOIN_TESTNET => 'NETWORK_MONACOIN_TESTNET',
        self::NETWORK_IOST_MAINNET => 'NETWORK_IOST_MAINNET',
        self::NETWORK_IOST_TESTNET => 'NETWORK_IOST_TESTNET',
        self::NETWORK_KLAY_MAINNET => 'NETWORK_KLAY_MAINNET',
        self::NETWORK_KLAY_TESTNET => 'NETWORK_KLAY_TESTNET',
        self::NETWORK_POLYGON_MAINNET => 'NETWORK_POLYGON_MAINNET',
        self::NETWORK_POLYGON_TESTNET => 'NETWORK_POLYGON_TESTNET',
        self::NETWORK_SYMBOL_MAINNET => 'NETWORK_SYMBOL_MAINNET',
        self::NETWORK_SYMBOL_TESTNET => 'NETWORK_SYMBOL_TESTNET',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

