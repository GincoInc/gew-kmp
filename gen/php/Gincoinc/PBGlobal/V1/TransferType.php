<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: gincoinc/global/v1/gincoincglobalv1/enum.proto

namespace Gincoinc\PBGlobal\V1;

use UnexpectedValueException;

/**
 * TransferType is a type of transaction.
 *
 * Protobuf type <code>gincoinc.global.v1.TransferType</code>
 */
class TransferType
{
    /**
     * Generated from protobuf enum <code>TRANSFER_TYPE_INVALID = 0;</code>
     */
    const TRANSFER_TYPE_INVALID = 0;
    /**
     * The type of send
     *
     * Generated from protobuf enum <code>TRANSFER_TYPE_SEND = 1;</code>
     */
    const TRANSFER_TYPE_SEND = 1;
    /**
     * The type of receive
     *
     * Generated from protobuf enum <code>TRANSFER_TYPE_RECEIVE = 2;</code>
     */
    const TRANSFER_TYPE_RECEIVE = 2;
    /**
     * The type of change transaction for BTC/LTC/BCH
     *
     * Generated from protobuf enum <code>TRANSFER_TYPE_CHANGE = 3;</code>
     */
    const TRANSFER_TYPE_CHANGE = 3;
    /**
     * The type of fraudulent remittance
     *
     * Generated from protobuf enum <code>TRANSFER_TYPE_FATAL = 4;</code>
     */
    const TRANSFER_TYPE_FATAL = 4;

    private static $valueToName = [
        self::TRANSFER_TYPE_INVALID => 'TRANSFER_TYPE_INVALID',
        self::TRANSFER_TYPE_SEND => 'TRANSFER_TYPE_SEND',
        self::TRANSFER_TYPE_RECEIVE => 'TRANSFER_TYPE_RECEIVE',
        self::TRANSFER_TYPE_CHANGE => 'TRANSFER_TYPE_CHANGE',
        self::TRANSFER_TYPE_FATAL => 'TRANSFER_TYPE_FATAL',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

