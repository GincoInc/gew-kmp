// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.8.0
// source: gincoinc/adamant/teller/v1/adamanttellerv1/teller_api.proto

package adamanttellerv1

import (
	context "context"
	adamantglobalv1 "github.com/GincoInc/gew-kmp/gen/gincoinc/adamant/global/v1/adamantglobalv1"
	gincoincglobalv1 "github.com/GincoInc/gew-kmp/gen/gincoinc/global/v1/gincoincglobalv1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CreateWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletName  string                       `protobuf:"bytes,1,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	Coin        gincoincglobalv1.Coin        `protobuf:"varint,2,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	WalletType  adamantglobalv1.WalletType   `protobuf:"varint,3,opt,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`
	AddressType gincoincglobalv1.AddressType `protobuf:"varint,4,opt,name=address_type,json=addressType,proto3,enum=gincoinc.global.v1.AddressType" json:"address_type,omitempty"`
	// required when create receive only wallet
	DestinationWalletId string `protobuf:"bytes,5,opt,name=destination_wallet_id,json=destinationWalletId,proto3" json:"destination_wallet_id,omitempty"`
	// optional
	InheritWalletId string `protobuf:"bytes,6,opt,name=inherit_wallet_id,json=inheritWalletId,proto3" json:"inherit_wallet_id,omitempty"`
}

func (x *CreateWalletRequest) Reset() {
	*x = CreateWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletRequest) ProtoMessage() {}

func (x *CreateWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletRequest.ProtoReflect.Descriptor instead.
func (*CreateWalletRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{0}
}

func (x *CreateWalletRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *CreateWalletRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin_COIN_INVALID
}

func (x *CreateWalletRequest) GetWalletType() adamantglobalv1.WalletType {
	if x != nil {
		return x.WalletType
	}
	return adamantglobalv1.WalletType_WALLET_TYPE_INVALID
}

func (x *CreateWalletRequest) GetAddressType() gincoincglobalv1.AddressType {
	if x != nil {
		return x.AddressType
	}
	return gincoincglobalv1.AddressType_ADDRESS_TYPE_INVALID
}

func (x *CreateWalletRequest) GetDestinationWalletId() string {
	if x != nil {
		return x.DestinationWalletId
	}
	return ""
}

func (x *CreateWalletRequest) GetInheritWalletId() string {
	if x != nil {
		return x.InheritWalletId
	}
	return ""
}

type InitializeXRPWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *InitializeXRPWalletRequest) Reset() {
	*x = InitializeXRPWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeXRPWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeXRPWalletRequest) ProtoMessage() {}

func (x *InitializeXRPWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeXRPWalletRequest.ProtoReflect.Descriptor instead.
func (*InitializeXRPWalletRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{1}
}

func (x *InitializeXRPWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type InitializeWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *InitializeWalletRequest) Reset() {
	*x = InitializeWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeWalletRequest) ProtoMessage() {}

func (x *InitializeWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeWalletRequest.ProtoReflect.Descriptor instead.
func (*InitializeWalletRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{2}
}

func (x *InitializeWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type SignTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *SignTransactionRequest) Reset() {
	*x = SignTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTransactionRequest) ProtoMessage() {}

func (x *SignTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTransactionRequest.ProtoReflect.Descriptor instead.
func (*SignTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{3}
}

func (x *SignTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *SignTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

var File_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto protoreflect.FileDescriptor

var file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2f, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x69, 0x6e, 0x63, 0x6f,
	0x69, 0x6e, 0x63, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63,
	0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x67,
	0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x6e, 0x63,
	0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x9c, 0x04, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0b, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x12, 0x4c, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x82, 0x01, 0x06, 0x10, 0x01, 0x20, 0x00,
	0x20, 0x02, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20,
	0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x83,
	0x01, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f,
	0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52,
	0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x7b, 0x0a, 0x11, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x5f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24,
	0x52, 0x0f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x87, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x58, 0x52, 0x50, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x17,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72,
	0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a,
	0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x32, 0xdb, 0x19,
	0x0a, 0x09, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x50, 0x49, 0x12, 0x61, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x0b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x58,
	0x52, 0x50, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x58, 0x52, 0x50, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x58, 0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x50, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x24, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2b, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x46, 0x65, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x46, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x46, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00,
	0x12, 0x60, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x70, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f,
	0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x68, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x78, 0x49, 0x44, 0x12, 0x2e, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54,
	0x78, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x74, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x22, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x26, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x65, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x23, 0x42, 0x0e, 0x54,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x50, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x0f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescOnce sync.Once
	file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescData = file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDesc
)

func file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP() []byte {
	file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescOnce.Do(func() {
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescData)
	})
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescData
}

var file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_goTypes = []interface{}{
	(*CreateWalletRequest)(nil),                             // 0: adamant.teller.v1.CreateWalletRequest
	(*InitializeXRPWalletRequest)(nil),                      // 1: adamant.teller.v1.InitializeXRPWalletRequest
	(*InitializeWalletRequest)(nil),                         // 2: adamant.teller.v1.InitializeWalletRequest
	(*SignTransactionRequest)(nil),                          // 3: adamant.teller.v1.SignTransactionRequest
	(gincoincglobalv1.Coin)(0),                              // 4: gincoinc.global.v1.Coin
	(adamantglobalv1.WalletType)(0),                         // 5: adamant.global.v1.WalletType
	(gincoincglobalv1.AddressType)(0),                       // 6: gincoinc.global.v1.AddressType
	(*adamantglobalv1.GetWalletRequest)(nil),                // 7: adamant.global.v1.GetWalletRequest
	(*adamantglobalv1.ListWalletsRequest)(nil),              // 8: adamant.global.v1.ListWalletsRequest
	(*adamantglobalv1.ListWalletsByFilterRequest)(nil),      // 9: adamant.global.v1.ListWalletsByFilterRequest
	(*adamantglobalv1.ListBaseWalletsRequest)(nil),          // 10: adamant.global.v1.ListBaseWalletsRequest
	(*adamantglobalv1.GetSpendableBalanceRequest)(nil),      // 11: adamant.global.v1.GetSpendableBalanceRequest
	(*adamantglobalv1.CreateAddressRequest)(nil),            // 12: adamant.global.v1.CreateAddressRequest
	(*adamantglobalv1.GetAddressRequest)(nil),               // 13: adamant.global.v1.GetAddressRequest
	(*adamantglobalv1.GetAddressByAddressRequest)(nil),      // 14: adamant.global.v1.GetAddressByAddressRequest
	(*adamantglobalv1.GetAddressByIndexRequest)(nil),        // 15: adamant.global.v1.GetAddressByIndexRequest
	(*adamantglobalv1.ListAddressesRequest)(nil),            // 16: adamant.global.v1.ListAddressesRequest
	(*adamantglobalv1.GetEthereumFeeAddressRequest)(nil),    // 17: adamant.global.v1.GetEthereumFeeAddressRequest
	(*adamantglobalv1.UpdateAddressBalanceRequest)(nil),     // 18: adamant.global.v1.UpdateAddressBalanceRequest
	(*adamantglobalv1.CreateTransactionRequest)(nil),        // 19: adamant.global.v1.CreateTransactionRequest
	(*adamantglobalv1.SendTransactionRequest)(nil),          // 20: adamant.global.v1.SendTransactionRequest
	(*adamantglobalv1.CancelTransactionRequest)(nil),        // 21: adamant.global.v1.CancelTransactionRequest
	(*adamantglobalv1.GetTransactionRequest)(nil),           // 22: adamant.global.v1.GetTransactionRequest
	(*adamantglobalv1.GetTransactionByTxIDRequest)(nil),     // 23: adamant.global.v1.GetTransactionByTxIDRequest
	(*adamantglobalv1.ListTransactionsRequest)(nil),         // 24: adamant.global.v1.ListTransactionsRequest
	(*adamantglobalv1.ListTransactionsByFilterRequest)(nil), // 25: adamant.global.v1.ListTransactionsByFilterRequest
	(*adamantglobalv1.ListTransfersRequest)(nil),            // 26: adamant.global.v1.ListTransfersRequest
	(*adamantglobalv1.ListTransfersByFilterRequest)(nil),    // 27: adamant.global.v1.ListTransfersByFilterRequest
	(*adamantglobalv1.GetRateSnapshotRequest)(nil),          // 28: adamant.global.v1.GetRateSnapshotRequest
	(*adamantglobalv1.GetLatestRateSnapshotRequest)(nil),    // 29: adamant.global.v1.GetLatestRateSnapshotRequest
	(*adamantglobalv1.SetRatesRequest)(nil),                 // 30: adamant.global.v1.SetRatesRequest
	(*adamantglobalv1.CalculateFeeRequest)(nil),             // 31: adamant.global.v1.CalculateFeeRequest
	(*adamantglobalv1.GetRecommendedFeeRateRequest)(nil),    // 32: adamant.global.v1.GetRecommendedFeeRateRequest
	(*adamantglobalv1.ValidateAddressRequest)(nil),          // 33: adamant.global.v1.ValidateAddressRequest
	(*adamantglobalv1.FlushBalanceRequest)(nil),             // 34: adamant.global.v1.FlushBalanceRequest
	(*adamantglobalv1.CreateWalletResponse)(nil),            // 35: adamant.global.v1.CreateWalletResponse
	(*adamantglobalv1.Wallet)(nil),                          // 36: adamant.global.v1.Wallet
	(*adamantglobalv1.ListWalletsResponse)(nil),             // 37: adamant.global.v1.ListWalletsResponse
	(*adamantglobalv1.ListBaseWalletsResponse)(nil),         // 38: adamant.global.v1.ListBaseWalletsResponse
	(*adamantglobalv1.GetSpendableBalanceResponse)(nil),     // 39: adamant.global.v1.GetSpendableBalanceResponse
	(*empty.Empty)(nil),                                     // 40: google.protobuf.Empty
	(*adamantglobalv1.CreateAddressResponse)(nil),           // 41: adamant.global.v1.CreateAddressResponse
	(*adamantglobalv1.Address)(nil),                         // 42: adamant.global.v1.Address
	(*adamantglobalv1.ListAddressesResponse)(nil),           // 43: adamant.global.v1.ListAddressesResponse
	(*adamantglobalv1.EthereumFeeAddress)(nil),              // 44: adamant.global.v1.EthereumFeeAddress
	(*adamantglobalv1.CreateTransactionResponse)(nil),       // 45: adamant.global.v1.CreateTransactionResponse
	(*adamantglobalv1.SendTransactionResponse)(nil),         // 46: adamant.global.v1.SendTransactionResponse
	(*adamantglobalv1.Transaction)(nil),                     // 47: adamant.global.v1.Transaction
	(*adamantglobalv1.ListTransactionsResponse)(nil),        // 48: adamant.global.v1.ListTransactionsResponse
	(*adamantglobalv1.ListTransfersResponse)(nil),           // 49: adamant.global.v1.ListTransfersResponse
	(*adamantglobalv1.RateSnapshot)(nil),                    // 50: adamant.global.v1.RateSnapshot
	(*adamantglobalv1.SetRatesResponse)(nil),                // 51: adamant.global.v1.SetRatesResponse
	(*adamantglobalv1.CalculateFeeResponse)(nil),            // 52: adamant.global.v1.CalculateFeeResponse
	(*adamantglobalv1.GetRecommendedFeeRateResponse)(nil),   // 53: adamant.global.v1.GetRecommendedFeeRateResponse
	(*adamantglobalv1.ValidateAddressResponse)(nil),         // 54: adamant.global.v1.ValidateAddressResponse
	(*adamantglobalv1.FlushBalanceResponse)(nil),            // 55: adamant.global.v1.FlushBalanceResponse
}
var file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_depIdxs = []int32{
	4,  // 0: adamant.teller.v1.CreateWalletRequest.coin:type_name -> gincoinc.global.v1.Coin
	5,  // 1: adamant.teller.v1.CreateWalletRequest.wallet_type:type_name -> adamant.global.v1.WalletType
	6,  // 2: adamant.teller.v1.CreateWalletRequest.address_type:type_name -> gincoinc.global.v1.AddressType
	0,  // 3: adamant.teller.v1.TellerAPI.CreateWallet:input_type -> adamant.teller.v1.CreateWalletRequest
	7,  // 4: adamant.teller.v1.TellerAPI.GetWallet:input_type -> adamant.global.v1.GetWalletRequest
	8,  // 5: adamant.teller.v1.TellerAPI.ListWallets:input_type -> adamant.global.v1.ListWalletsRequest
	9,  // 6: adamant.teller.v1.TellerAPI.ListWalletsByFilter:input_type -> adamant.global.v1.ListWalletsByFilterRequest
	10, // 7: adamant.teller.v1.TellerAPI.ListBaseWallets:input_type -> adamant.global.v1.ListBaseWalletsRequest
	11, // 8: adamant.teller.v1.TellerAPI.GetSpendableBalance:input_type -> adamant.global.v1.GetSpendableBalanceRequest
	1,  // 9: adamant.teller.v1.TellerAPI.InitializeXRPWallet:input_type -> adamant.teller.v1.InitializeXRPWalletRequest
	2,  // 10: adamant.teller.v1.TellerAPI.InitializeWallet:input_type -> adamant.teller.v1.InitializeWalletRequest
	12, // 11: adamant.teller.v1.TellerAPI.CreateAddress:input_type -> adamant.global.v1.CreateAddressRequest
	13, // 12: adamant.teller.v1.TellerAPI.GetAddress:input_type -> adamant.global.v1.GetAddressRequest
	14, // 13: adamant.teller.v1.TellerAPI.GetAddressByAddress:input_type -> adamant.global.v1.GetAddressByAddressRequest
	15, // 14: adamant.teller.v1.TellerAPI.GetAddressByIndex:input_type -> adamant.global.v1.GetAddressByIndexRequest
	16, // 15: adamant.teller.v1.TellerAPI.ListAddresses:input_type -> adamant.global.v1.ListAddressesRequest
	17, // 16: adamant.teller.v1.TellerAPI.GetEthereumFeeAddress:input_type -> adamant.global.v1.GetEthereumFeeAddressRequest
	18, // 17: adamant.teller.v1.TellerAPI.UpdateAddressBalance:input_type -> adamant.global.v1.UpdateAddressBalanceRequest
	19, // 18: adamant.teller.v1.TellerAPI.CreateTransaction:input_type -> adamant.global.v1.CreateTransactionRequest
	3,  // 19: adamant.teller.v1.TellerAPI.SignTransaction:input_type -> adamant.teller.v1.SignTransactionRequest
	20, // 20: adamant.teller.v1.TellerAPI.SendTransaction:input_type -> adamant.global.v1.SendTransactionRequest
	21, // 21: adamant.teller.v1.TellerAPI.CancelTransaction:input_type -> adamant.global.v1.CancelTransactionRequest
	22, // 22: adamant.teller.v1.TellerAPI.GetTransaction:input_type -> adamant.global.v1.GetTransactionRequest
	23, // 23: adamant.teller.v1.TellerAPI.GetTransactionByTxID:input_type -> adamant.global.v1.GetTransactionByTxIDRequest
	24, // 24: adamant.teller.v1.TellerAPI.ListTransactions:input_type -> adamant.global.v1.ListTransactionsRequest
	25, // 25: adamant.teller.v1.TellerAPI.ListTransactionsByFilter:input_type -> adamant.global.v1.ListTransactionsByFilterRequest
	26, // 26: adamant.teller.v1.TellerAPI.ListTransfers:input_type -> adamant.global.v1.ListTransfersRequest
	27, // 27: adamant.teller.v1.TellerAPI.ListTransfersByFilter:input_type -> adamant.global.v1.ListTransfersByFilterRequest
	28, // 28: adamant.teller.v1.TellerAPI.GetRateSnapshot:input_type -> adamant.global.v1.GetRateSnapshotRequest
	29, // 29: adamant.teller.v1.TellerAPI.GetLatestRateSnapshot:input_type -> adamant.global.v1.GetLatestRateSnapshotRequest
	30, // 30: adamant.teller.v1.TellerAPI.SetRates:input_type -> adamant.global.v1.SetRatesRequest
	31, // 31: adamant.teller.v1.TellerAPI.CalculateFee:input_type -> adamant.global.v1.CalculateFeeRequest
	32, // 32: adamant.teller.v1.TellerAPI.GetRecommendedFeeRate:input_type -> adamant.global.v1.GetRecommendedFeeRateRequest
	33, // 33: adamant.teller.v1.TellerAPI.ValidateAddress:input_type -> adamant.global.v1.ValidateAddressRequest
	34, // 34: adamant.teller.v1.TellerAPI.FlushBalance:input_type -> adamant.global.v1.FlushBalanceRequest
	35, // 35: adamant.teller.v1.TellerAPI.CreateWallet:output_type -> adamant.global.v1.CreateWalletResponse
	36, // 36: adamant.teller.v1.TellerAPI.GetWallet:output_type -> adamant.global.v1.Wallet
	37, // 37: adamant.teller.v1.TellerAPI.ListWallets:output_type -> adamant.global.v1.ListWalletsResponse
	37, // 38: adamant.teller.v1.TellerAPI.ListWalletsByFilter:output_type -> adamant.global.v1.ListWalletsResponse
	38, // 39: adamant.teller.v1.TellerAPI.ListBaseWallets:output_type -> adamant.global.v1.ListBaseWalletsResponse
	39, // 40: adamant.teller.v1.TellerAPI.GetSpendableBalance:output_type -> adamant.global.v1.GetSpendableBalanceResponse
	40, // 41: adamant.teller.v1.TellerAPI.InitializeXRPWallet:output_type -> google.protobuf.Empty
	40, // 42: adamant.teller.v1.TellerAPI.InitializeWallet:output_type -> google.protobuf.Empty
	41, // 43: adamant.teller.v1.TellerAPI.CreateAddress:output_type -> adamant.global.v1.CreateAddressResponse
	42, // 44: adamant.teller.v1.TellerAPI.GetAddress:output_type -> adamant.global.v1.Address
	42, // 45: adamant.teller.v1.TellerAPI.GetAddressByAddress:output_type -> adamant.global.v1.Address
	42, // 46: adamant.teller.v1.TellerAPI.GetAddressByIndex:output_type -> adamant.global.v1.Address
	43, // 47: adamant.teller.v1.TellerAPI.ListAddresses:output_type -> adamant.global.v1.ListAddressesResponse
	44, // 48: adamant.teller.v1.TellerAPI.GetEthereumFeeAddress:output_type -> adamant.global.v1.EthereumFeeAddress
	40, // 49: adamant.teller.v1.TellerAPI.UpdateAddressBalance:output_type -> google.protobuf.Empty
	45, // 50: adamant.teller.v1.TellerAPI.CreateTransaction:output_type -> adamant.global.v1.CreateTransactionResponse
	40, // 51: adamant.teller.v1.TellerAPI.SignTransaction:output_type -> google.protobuf.Empty
	46, // 52: adamant.teller.v1.TellerAPI.SendTransaction:output_type -> adamant.global.v1.SendTransactionResponse
	40, // 53: adamant.teller.v1.TellerAPI.CancelTransaction:output_type -> google.protobuf.Empty
	47, // 54: adamant.teller.v1.TellerAPI.GetTransaction:output_type -> adamant.global.v1.Transaction
	47, // 55: adamant.teller.v1.TellerAPI.GetTransactionByTxID:output_type -> adamant.global.v1.Transaction
	48, // 56: adamant.teller.v1.TellerAPI.ListTransactions:output_type -> adamant.global.v1.ListTransactionsResponse
	48, // 57: adamant.teller.v1.TellerAPI.ListTransactionsByFilter:output_type -> adamant.global.v1.ListTransactionsResponse
	49, // 58: adamant.teller.v1.TellerAPI.ListTransfers:output_type -> adamant.global.v1.ListTransfersResponse
	49, // 59: adamant.teller.v1.TellerAPI.ListTransfersByFilter:output_type -> adamant.global.v1.ListTransfersResponse
	50, // 60: adamant.teller.v1.TellerAPI.GetRateSnapshot:output_type -> adamant.global.v1.RateSnapshot
	50, // 61: adamant.teller.v1.TellerAPI.GetLatestRateSnapshot:output_type -> adamant.global.v1.RateSnapshot
	51, // 62: adamant.teller.v1.TellerAPI.SetRates:output_type -> adamant.global.v1.SetRatesResponse
	52, // 63: adamant.teller.v1.TellerAPI.CalculateFee:output_type -> adamant.global.v1.CalculateFeeResponse
	53, // 64: adamant.teller.v1.TellerAPI.GetRecommendedFeeRate:output_type -> adamant.global.v1.GetRecommendedFeeRateResponse
	54, // 65: adamant.teller.v1.TellerAPI.ValidateAddress:output_type -> adamant.global.v1.ValidateAddressResponse
	55, // 66: adamant.teller.v1.TellerAPI.FlushBalance:output_type -> adamant.global.v1.FlushBalanceResponse
	35, // [35:67] is the sub-list for method output_type
	3,  // [3:35] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_init() }
func file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_init() {
	if File_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeXRPWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_goTypes,
		DependencyIndexes: file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_depIdxs,
		MessageInfos:      file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes,
	}.Build()
	File_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto = out.File
	file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDesc = nil
	file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_goTypes = nil
	file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TellerAPIClient is the client API for TellerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TellerAPIClient interface {
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateWalletResponse, error)
	// Get wallet information. the wallet model includes balance, address etc.
	GetWallet(ctx context.Context, in *adamantglobalv1.GetWalletRequest, opts ...grpc.CallOption) (*adamantglobalv1.Wallet, error)
	ListWallets(ctx context.Context, in *adamantglobalv1.ListWalletsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListWalletsResponse, error)
	ListWalletsByFilter(ctx context.Context, in *adamantglobalv1.ListWalletsByFilterRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListWalletsResponse, error)
	ListBaseWallets(ctx context.Context, in *adamantglobalv1.ListBaseWalletsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListBaseWalletsResponse, error)
	GetSpendableBalance(ctx context.Context, in *adamantglobalv1.GetSpendableBalanceRequest, opts ...grpc.CallOption) (*adamantglobalv1.GetSpendableBalanceResponse, error)
	InitializeXRPWallet(ctx context.Context, in *InitializeXRPWalletRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	InitializeWallet(ctx context.Context, in *InitializeWalletRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Create a new address for an existing wallet
	CreateAddress(ctx context.Context, in *adamantglobalv1.CreateAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateAddressResponse, error)
	GetAddress(ctx context.Context, in *adamantglobalv1.GetAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error)
	GetAddressByAddress(ctx context.Context, in *adamantglobalv1.GetAddressByAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error)
	GetAddressByIndex(ctx context.Context, in *adamantglobalv1.GetAddressByIndexRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error)
	ListAddresses(ctx context.Context, in *adamantglobalv1.ListAddressesRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListAddressesResponse, error)
	// Get an address which hold ETH for ethereum wallet/address creation etc
	GetEthereumFeeAddress(ctx context.Context, in *adamantglobalv1.GetEthereumFeeAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.EthereumFeeAddress, error)
	UpdateAddressBalance(ctx context.Context, in *adamantglobalv1.UpdateAddressBalanceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateTransaction(ctx context.Context, in *adamantglobalv1.CreateTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error)
	SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SendTransaction(ctx context.Context, in *adamantglobalv1.SendTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.SendTransactionResponse, error)
	CancelTransaction(ctx context.Context, in *adamantglobalv1.CancelTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetTransaction(ctx context.Context, in *adamantglobalv1.GetTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.Transaction, error)
	GetTransactionByTxID(ctx context.Context, in *adamantglobalv1.GetTransactionByTxIDRequest, opts ...grpc.CallOption) (*adamantglobalv1.Transaction, error)
	ListTransactions(ctx context.Context, in *adamantglobalv1.ListTransactionsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransactionsResponse, error)
	ListTransactionsByFilter(ctx context.Context, in *adamantglobalv1.ListTransactionsByFilterRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransactionsResponse, error)
	// List transfers for a given wallet. Ordered by update time desc
	ListTransfers(ctx context.Context, in *adamantglobalv1.ListTransfersRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransfersResponse, error)
	ListTransfersByFilter(ctx context.Context, in *adamantglobalv1.ListTransfersByFilterRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransfersResponse, error)
	// Get rates by snapshot id
	GetRateSnapshot(ctx context.Context, in *adamantglobalv1.GetRateSnapshotRequest, opts ...grpc.CallOption) (*adamantglobalv1.RateSnapshot, error)
	// Get latest rates set to your organization
	GetLatestRateSnapshot(ctx context.Context, in *adamantglobalv1.GetLatestRateSnapshotRequest, opts ...grpc.CallOption) (*adamantglobalv1.RateSnapshot, error)
	// Set rates to your organization
	SetRates(ctx context.Context, in *adamantglobalv1.SetRatesRequest, opts ...grpc.CallOption) (*adamantglobalv1.SetRatesResponse, error)
	CalculateFee(ctx context.Context, in *adamantglobalv1.CalculateFeeRequest, opts ...grpc.CallOption) (*adamantglobalv1.CalculateFeeResponse, error)
	GetRecommendedFeeRate(ctx context.Context, in *adamantglobalv1.GetRecommendedFeeRateRequest, opts ...grpc.CallOption) (*adamantglobalv1.GetRecommendedFeeRateResponse, error)
	// Validate format of given address
	ValidateAddress(ctx context.Context, in *adamantglobalv1.ValidateAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.ValidateAddressResponse, error)
	FlushBalance(ctx context.Context, in *adamantglobalv1.FlushBalanceRequest, opts ...grpc.CallOption) (*adamantglobalv1.FlushBalanceResponse, error)
}

type tellerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTellerAPIClient(cc grpc.ClientConnInterface) TellerAPIClient {
	return &tellerAPIClient{cc}
}

func (c *tellerAPIClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateWalletResponse, error) {
	out := new(adamantglobalv1.CreateWalletResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetWallet(ctx context.Context, in *adamantglobalv1.GetWalletRequest, opts ...grpc.CallOption) (*adamantglobalv1.Wallet, error) {
	out := new(adamantglobalv1.Wallet)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListWallets(ctx context.Context, in *adamantglobalv1.ListWalletsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListWalletsResponse, error) {
	out := new(adamantglobalv1.ListWalletsResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListWalletsByFilter(ctx context.Context, in *adamantglobalv1.ListWalletsByFilterRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListWalletsResponse, error) {
	out := new(adamantglobalv1.ListWalletsResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListWalletsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListBaseWallets(ctx context.Context, in *adamantglobalv1.ListBaseWalletsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListBaseWalletsResponse, error) {
	out := new(adamantglobalv1.ListBaseWalletsResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListBaseWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetSpendableBalance(ctx context.Context, in *adamantglobalv1.GetSpendableBalanceRequest, opts ...grpc.CallOption) (*adamantglobalv1.GetSpendableBalanceResponse, error) {
	out := new(adamantglobalv1.GetSpendableBalanceResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetSpendableBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) InitializeXRPWallet(ctx context.Context, in *InitializeXRPWalletRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/InitializeXRPWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) InitializeWallet(ctx context.Context, in *InitializeWalletRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/InitializeWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) CreateAddress(ctx context.Context, in *adamantglobalv1.CreateAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateAddressResponse, error) {
	out := new(adamantglobalv1.CreateAddressResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CreateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetAddress(ctx context.Context, in *adamantglobalv1.GetAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error) {
	out := new(adamantglobalv1.Address)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetAddressByAddress(ctx context.Context, in *adamantglobalv1.GetAddressByAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error) {
	out := new(adamantglobalv1.Address)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetAddressByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetAddressByIndex(ctx context.Context, in *adamantglobalv1.GetAddressByIndexRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error) {
	out := new(adamantglobalv1.Address)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetAddressByIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListAddresses(ctx context.Context, in *adamantglobalv1.ListAddressesRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListAddressesResponse, error) {
	out := new(adamantglobalv1.ListAddressesResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetEthereumFeeAddress(ctx context.Context, in *adamantglobalv1.GetEthereumFeeAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.EthereumFeeAddress, error) {
	out := new(adamantglobalv1.EthereumFeeAddress)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetEthereumFeeAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) UpdateAddressBalance(ctx context.Context, in *adamantglobalv1.UpdateAddressBalanceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/UpdateAddressBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) CreateTransaction(ctx context.Context, in *adamantglobalv1.CreateTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error) {
	out := new(adamantglobalv1.CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/SignTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) SendTransaction(ctx context.Context, in *adamantglobalv1.SendTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.SendTransactionResponse, error) {
	out := new(adamantglobalv1.SendTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) CancelTransaction(ctx context.Context, in *adamantglobalv1.CancelTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CancelTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetTransaction(ctx context.Context, in *adamantglobalv1.GetTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.Transaction, error) {
	out := new(adamantglobalv1.Transaction)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetTransactionByTxID(ctx context.Context, in *adamantglobalv1.GetTransactionByTxIDRequest, opts ...grpc.CallOption) (*adamantglobalv1.Transaction, error) {
	out := new(adamantglobalv1.Transaction)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetTransactionByTxID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListTransactions(ctx context.Context, in *adamantglobalv1.ListTransactionsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransactionsResponse, error) {
	out := new(adamantglobalv1.ListTransactionsResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListTransactionsByFilter(ctx context.Context, in *adamantglobalv1.ListTransactionsByFilterRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransactionsResponse, error) {
	out := new(adamantglobalv1.ListTransactionsResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListTransactionsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListTransfers(ctx context.Context, in *adamantglobalv1.ListTransfersRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransfersResponse, error) {
	out := new(adamantglobalv1.ListTransfersResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListTransfersByFilter(ctx context.Context, in *adamantglobalv1.ListTransfersByFilterRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransfersResponse, error) {
	out := new(adamantglobalv1.ListTransfersResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListTransfersByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetRateSnapshot(ctx context.Context, in *adamantglobalv1.GetRateSnapshotRequest, opts ...grpc.CallOption) (*adamantglobalv1.RateSnapshot, error) {
	out := new(adamantglobalv1.RateSnapshot)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetRateSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetLatestRateSnapshot(ctx context.Context, in *adamantglobalv1.GetLatestRateSnapshotRequest, opts ...grpc.CallOption) (*adamantglobalv1.RateSnapshot, error) {
	out := new(adamantglobalv1.RateSnapshot)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetLatestRateSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) SetRates(ctx context.Context, in *adamantglobalv1.SetRatesRequest, opts ...grpc.CallOption) (*adamantglobalv1.SetRatesResponse, error) {
	out := new(adamantglobalv1.SetRatesResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/SetRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) CalculateFee(ctx context.Context, in *adamantglobalv1.CalculateFeeRequest, opts ...grpc.CallOption) (*adamantglobalv1.CalculateFeeResponse, error) {
	out := new(adamantglobalv1.CalculateFeeResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CalculateFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetRecommendedFeeRate(ctx context.Context, in *adamantglobalv1.GetRecommendedFeeRateRequest, opts ...grpc.CallOption) (*adamantglobalv1.GetRecommendedFeeRateResponse, error) {
	out := new(adamantglobalv1.GetRecommendedFeeRateResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetRecommendedFeeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ValidateAddress(ctx context.Context, in *adamantglobalv1.ValidateAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.ValidateAddressResponse, error) {
	out := new(adamantglobalv1.ValidateAddressResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ValidateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) FlushBalance(ctx context.Context, in *adamantglobalv1.FlushBalanceRequest, opts ...grpc.CallOption) (*adamantglobalv1.FlushBalanceResponse, error) {
	out := new(adamantglobalv1.FlushBalanceResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/FlushBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TellerAPIServer is the server API for TellerAPI service.
type TellerAPIServer interface {
	CreateWallet(context.Context, *CreateWalletRequest) (*adamantglobalv1.CreateWalletResponse, error)
	// Get wallet information. the wallet model includes balance, address etc.
	GetWallet(context.Context, *adamantglobalv1.GetWalletRequest) (*adamantglobalv1.Wallet, error)
	ListWallets(context.Context, *adamantglobalv1.ListWalletsRequest) (*adamantglobalv1.ListWalletsResponse, error)
	ListWalletsByFilter(context.Context, *adamantglobalv1.ListWalletsByFilterRequest) (*adamantglobalv1.ListWalletsResponse, error)
	ListBaseWallets(context.Context, *adamantglobalv1.ListBaseWalletsRequest) (*adamantglobalv1.ListBaseWalletsResponse, error)
	GetSpendableBalance(context.Context, *adamantglobalv1.GetSpendableBalanceRequest) (*adamantglobalv1.GetSpendableBalanceResponse, error)
	InitializeXRPWallet(context.Context, *InitializeXRPWalletRequest) (*empty.Empty, error)
	InitializeWallet(context.Context, *InitializeWalletRequest) (*empty.Empty, error)
	// Create a new address for an existing wallet
	CreateAddress(context.Context, *adamantglobalv1.CreateAddressRequest) (*adamantglobalv1.CreateAddressResponse, error)
	GetAddress(context.Context, *adamantglobalv1.GetAddressRequest) (*adamantglobalv1.Address, error)
	GetAddressByAddress(context.Context, *adamantglobalv1.GetAddressByAddressRequest) (*adamantglobalv1.Address, error)
	GetAddressByIndex(context.Context, *adamantglobalv1.GetAddressByIndexRequest) (*adamantglobalv1.Address, error)
	ListAddresses(context.Context, *adamantglobalv1.ListAddressesRequest) (*adamantglobalv1.ListAddressesResponse, error)
	// Get an address which hold ETH for ethereum wallet/address creation etc
	GetEthereumFeeAddress(context.Context, *adamantglobalv1.GetEthereumFeeAddressRequest) (*adamantglobalv1.EthereumFeeAddress, error)
	UpdateAddressBalance(context.Context, *adamantglobalv1.UpdateAddressBalanceRequest) (*empty.Empty, error)
	CreateTransaction(context.Context, *adamantglobalv1.CreateTransactionRequest) (*adamantglobalv1.CreateTransactionResponse, error)
	SignTransaction(context.Context, *SignTransactionRequest) (*empty.Empty, error)
	SendTransaction(context.Context, *adamantglobalv1.SendTransactionRequest) (*adamantglobalv1.SendTransactionResponse, error)
	CancelTransaction(context.Context, *adamantglobalv1.CancelTransactionRequest) (*empty.Empty, error)
	GetTransaction(context.Context, *adamantglobalv1.GetTransactionRequest) (*adamantglobalv1.Transaction, error)
	GetTransactionByTxID(context.Context, *adamantglobalv1.GetTransactionByTxIDRequest) (*adamantglobalv1.Transaction, error)
	ListTransactions(context.Context, *adamantglobalv1.ListTransactionsRequest) (*adamantglobalv1.ListTransactionsResponse, error)
	ListTransactionsByFilter(context.Context, *adamantglobalv1.ListTransactionsByFilterRequest) (*adamantglobalv1.ListTransactionsResponse, error)
	// List transfers for a given wallet. Ordered by update time desc
	ListTransfers(context.Context, *adamantglobalv1.ListTransfersRequest) (*adamantglobalv1.ListTransfersResponse, error)
	ListTransfersByFilter(context.Context, *adamantglobalv1.ListTransfersByFilterRequest) (*adamantglobalv1.ListTransfersResponse, error)
	// Get rates by snapshot id
	GetRateSnapshot(context.Context, *adamantglobalv1.GetRateSnapshotRequest) (*adamantglobalv1.RateSnapshot, error)
	// Get latest rates set to your organization
	GetLatestRateSnapshot(context.Context, *adamantglobalv1.GetLatestRateSnapshotRequest) (*adamantglobalv1.RateSnapshot, error)
	// Set rates to your organization
	SetRates(context.Context, *adamantglobalv1.SetRatesRequest) (*adamantglobalv1.SetRatesResponse, error)
	CalculateFee(context.Context, *adamantglobalv1.CalculateFeeRequest) (*adamantglobalv1.CalculateFeeResponse, error)
	GetRecommendedFeeRate(context.Context, *adamantglobalv1.GetRecommendedFeeRateRequest) (*adamantglobalv1.GetRecommendedFeeRateResponse, error)
	// Validate format of given address
	ValidateAddress(context.Context, *adamantglobalv1.ValidateAddressRequest) (*adamantglobalv1.ValidateAddressResponse, error)
	FlushBalance(context.Context, *adamantglobalv1.FlushBalanceRequest) (*adamantglobalv1.FlushBalanceResponse, error)
}

// UnimplementedTellerAPIServer can be embedded to have forward compatible implementations.
type UnimplementedTellerAPIServer struct {
}

func (*UnimplementedTellerAPIServer) CreateWallet(context.Context, *CreateWalletRequest) (*adamantglobalv1.CreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (*UnimplementedTellerAPIServer) GetWallet(context.Context, *adamantglobalv1.GetWalletRequest) (*adamantglobalv1.Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallet not implemented")
}
func (*UnimplementedTellerAPIServer) ListWallets(context.Context, *adamantglobalv1.ListWalletsRequest) (*adamantglobalv1.ListWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWallets not implemented")
}
func (*UnimplementedTellerAPIServer) ListWalletsByFilter(context.Context, *adamantglobalv1.ListWalletsByFilterRequest) (*adamantglobalv1.ListWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletsByFilter not implemented")
}
func (*UnimplementedTellerAPIServer) ListBaseWallets(context.Context, *adamantglobalv1.ListBaseWalletsRequest) (*adamantglobalv1.ListBaseWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBaseWallets not implemented")
}
func (*UnimplementedTellerAPIServer) GetSpendableBalance(context.Context, *adamantglobalv1.GetSpendableBalanceRequest) (*adamantglobalv1.GetSpendableBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpendableBalance not implemented")
}
func (*UnimplementedTellerAPIServer) InitializeXRPWallet(context.Context, *InitializeXRPWalletRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeXRPWallet not implemented")
}
func (*UnimplementedTellerAPIServer) InitializeWallet(context.Context, *InitializeWalletRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeWallet not implemented")
}
func (*UnimplementedTellerAPIServer) CreateAddress(context.Context, *adamantglobalv1.CreateAddressRequest) (*adamantglobalv1.CreateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddress not implemented")
}
func (*UnimplementedTellerAPIServer) GetAddress(context.Context, *adamantglobalv1.GetAddressRequest) (*adamantglobalv1.Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (*UnimplementedTellerAPIServer) GetAddressByAddress(context.Context, *adamantglobalv1.GetAddressByAddressRequest) (*adamantglobalv1.Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressByAddress not implemented")
}
func (*UnimplementedTellerAPIServer) GetAddressByIndex(context.Context, *adamantglobalv1.GetAddressByIndexRequest) (*adamantglobalv1.Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressByIndex not implemented")
}
func (*UnimplementedTellerAPIServer) ListAddresses(context.Context, *adamantglobalv1.ListAddressesRequest) (*adamantglobalv1.ListAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddresses not implemented")
}
func (*UnimplementedTellerAPIServer) GetEthereumFeeAddress(context.Context, *adamantglobalv1.GetEthereumFeeAddressRequest) (*adamantglobalv1.EthereumFeeAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEthereumFeeAddress not implemented")
}
func (*UnimplementedTellerAPIServer) UpdateAddressBalance(context.Context, *adamantglobalv1.UpdateAddressBalanceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddressBalance not implemented")
}
func (*UnimplementedTellerAPIServer) CreateTransaction(context.Context, *adamantglobalv1.CreateTransactionRequest) (*adamantglobalv1.CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (*UnimplementedTellerAPIServer) SignTransaction(context.Context, *SignTransactionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransaction not implemented")
}
func (*UnimplementedTellerAPIServer) SendTransaction(context.Context, *adamantglobalv1.SendTransactionRequest) (*adamantglobalv1.SendTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (*UnimplementedTellerAPIServer) CancelTransaction(context.Context, *adamantglobalv1.CancelTransactionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTransaction not implemented")
}
func (*UnimplementedTellerAPIServer) GetTransaction(context.Context, *adamantglobalv1.GetTransactionRequest) (*adamantglobalv1.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (*UnimplementedTellerAPIServer) GetTransactionByTxID(context.Context, *adamantglobalv1.GetTransactionByTxIDRequest) (*adamantglobalv1.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByTxID not implemented")
}
func (*UnimplementedTellerAPIServer) ListTransactions(context.Context, *adamantglobalv1.ListTransactionsRequest) (*adamantglobalv1.ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (*UnimplementedTellerAPIServer) ListTransactionsByFilter(context.Context, *adamantglobalv1.ListTransactionsByFilterRequest) (*adamantglobalv1.ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactionsByFilter not implemented")
}
func (*UnimplementedTellerAPIServer) ListTransfers(context.Context, *adamantglobalv1.ListTransfersRequest) (*adamantglobalv1.ListTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransfers not implemented")
}
func (*UnimplementedTellerAPIServer) ListTransfersByFilter(context.Context, *adamantglobalv1.ListTransfersByFilterRequest) (*adamantglobalv1.ListTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransfersByFilter not implemented")
}
func (*UnimplementedTellerAPIServer) GetRateSnapshot(context.Context, *adamantglobalv1.GetRateSnapshotRequest) (*adamantglobalv1.RateSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRateSnapshot not implemented")
}
func (*UnimplementedTellerAPIServer) GetLatestRateSnapshot(context.Context, *adamantglobalv1.GetLatestRateSnapshotRequest) (*adamantglobalv1.RateSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestRateSnapshot not implemented")
}
func (*UnimplementedTellerAPIServer) SetRates(context.Context, *adamantglobalv1.SetRatesRequest) (*adamantglobalv1.SetRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRates not implemented")
}
func (*UnimplementedTellerAPIServer) CalculateFee(context.Context, *adamantglobalv1.CalculateFeeRequest) (*adamantglobalv1.CalculateFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFee not implemented")
}
func (*UnimplementedTellerAPIServer) GetRecommendedFeeRate(context.Context, *adamantglobalv1.GetRecommendedFeeRateRequest) (*adamantglobalv1.GetRecommendedFeeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendedFeeRate not implemented")
}
func (*UnimplementedTellerAPIServer) ValidateAddress(context.Context, *adamantglobalv1.ValidateAddressRequest) (*adamantglobalv1.ValidateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAddress not implemented")
}
func (*UnimplementedTellerAPIServer) FlushBalance(context.Context, *adamantglobalv1.FlushBalanceRequest) (*adamantglobalv1.FlushBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushBalance not implemented")
}

func RegisterTellerAPIServer(s *grpc.Server, srv TellerAPIServer) {
	s.RegisterService(&_TellerAPI_serviceDesc, srv)
}

func _TellerAPI_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetWallet(ctx, req.(*adamantglobalv1.GetWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListWallets(ctx, req.(*adamantglobalv1.ListWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListWalletsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListWalletsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListWalletsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListWalletsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListWalletsByFilter(ctx, req.(*adamantglobalv1.ListWalletsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListBaseWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListBaseWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListBaseWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListBaseWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListBaseWallets(ctx, req.(*adamantglobalv1.ListBaseWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetSpendableBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetSpendableBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetSpendableBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetSpendableBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetSpendableBalance(ctx, req.(*adamantglobalv1.GetSpendableBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_InitializeXRPWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeXRPWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).InitializeXRPWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/InitializeXRPWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).InitializeXRPWallet(ctx, req.(*InitializeXRPWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_InitializeWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).InitializeWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/InitializeWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).InitializeWallet(ctx, req.(*InitializeWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.CreateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CreateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CreateAddress(ctx, req.(*adamantglobalv1.CreateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetAddress(ctx, req.(*adamantglobalv1.GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetAddressByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetAddressByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetAddressByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetAddressByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetAddressByAddress(ctx, req.(*adamantglobalv1.GetAddressByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetAddressByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetAddressByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetAddressByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetAddressByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetAddressByIndex(ctx, req.(*adamantglobalv1.GetAddressByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListAddresses(ctx, req.(*adamantglobalv1.ListAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetEthereumFeeAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetEthereumFeeAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetEthereumFeeAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetEthereumFeeAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetEthereumFeeAddress(ctx, req.(*adamantglobalv1.GetEthereumFeeAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_UpdateAddressBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.UpdateAddressBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).UpdateAddressBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/UpdateAddressBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).UpdateAddressBalance(ctx, req.(*adamantglobalv1.UpdateAddressBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CreateTransaction(ctx, req.(*adamantglobalv1.CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).SignTransaction(ctx, req.(*SignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).SendTransaction(ctx, req.(*adamantglobalv1.SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_CancelTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.CancelTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CancelTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CancelTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CancelTransaction(ctx, req.(*adamantglobalv1.CancelTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetTransaction(ctx, req.(*adamantglobalv1.GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetTransactionByTxID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetTransactionByTxIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetTransactionByTxID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetTransactionByTxID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetTransactionByTxID(ctx, req.(*adamantglobalv1.GetTransactionByTxIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListTransactions(ctx, req.(*adamantglobalv1.ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListTransactionsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListTransactionsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListTransactionsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListTransactionsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListTransactionsByFilter(ctx, req.(*adamantglobalv1.ListTransactionsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListTransfers(ctx, req.(*adamantglobalv1.ListTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListTransfersByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListTransfersByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListTransfersByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListTransfersByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListTransfersByFilter(ctx, req.(*adamantglobalv1.ListTransfersByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetRateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetRateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetRateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetRateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetRateSnapshot(ctx, req.(*adamantglobalv1.GetRateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetLatestRateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetLatestRateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetLatestRateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetLatestRateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetLatestRateSnapshot(ctx, req.(*adamantglobalv1.GetLatestRateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_SetRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.SetRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).SetRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/SetRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).SetRates(ctx, req.(*adamantglobalv1.SetRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_CalculateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.CalculateFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CalculateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CalculateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CalculateFee(ctx, req.(*adamantglobalv1.CalculateFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetRecommendedFeeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetRecommendedFeeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetRecommendedFeeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetRecommendedFeeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetRecommendedFeeRate(ctx, req.(*adamantglobalv1.GetRecommendedFeeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ValidateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ValidateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ValidateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ValidateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ValidateAddress(ctx, req.(*adamantglobalv1.ValidateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_FlushBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.FlushBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).FlushBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/FlushBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).FlushBalance(ctx, req.(*adamantglobalv1.FlushBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TellerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "adamant.teller.v1.TellerAPI",
	HandlerType: (*TellerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _TellerAPI_CreateWallet_Handler,
		},
		{
			MethodName: "GetWallet",
			Handler:    _TellerAPI_GetWallet_Handler,
		},
		{
			MethodName: "ListWallets",
			Handler:    _TellerAPI_ListWallets_Handler,
		},
		{
			MethodName: "ListWalletsByFilter",
			Handler:    _TellerAPI_ListWalletsByFilter_Handler,
		},
		{
			MethodName: "ListBaseWallets",
			Handler:    _TellerAPI_ListBaseWallets_Handler,
		},
		{
			MethodName: "GetSpendableBalance",
			Handler:    _TellerAPI_GetSpendableBalance_Handler,
		},
		{
			MethodName: "InitializeXRPWallet",
			Handler:    _TellerAPI_InitializeXRPWallet_Handler,
		},
		{
			MethodName: "InitializeWallet",
			Handler:    _TellerAPI_InitializeWallet_Handler,
		},
		{
			MethodName: "CreateAddress",
			Handler:    _TellerAPI_CreateAddress_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _TellerAPI_GetAddress_Handler,
		},
		{
			MethodName: "GetAddressByAddress",
			Handler:    _TellerAPI_GetAddressByAddress_Handler,
		},
		{
			MethodName: "GetAddressByIndex",
			Handler:    _TellerAPI_GetAddressByIndex_Handler,
		},
		{
			MethodName: "ListAddresses",
			Handler:    _TellerAPI_ListAddresses_Handler,
		},
		{
			MethodName: "GetEthereumFeeAddress",
			Handler:    _TellerAPI_GetEthereumFeeAddress_Handler,
		},
		{
			MethodName: "UpdateAddressBalance",
			Handler:    _TellerAPI_UpdateAddressBalance_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _TellerAPI_CreateTransaction_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _TellerAPI_SignTransaction_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _TellerAPI_SendTransaction_Handler,
		},
		{
			MethodName: "CancelTransaction",
			Handler:    _TellerAPI_CancelTransaction_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _TellerAPI_GetTransaction_Handler,
		},
		{
			MethodName: "GetTransactionByTxID",
			Handler:    _TellerAPI_GetTransactionByTxID_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _TellerAPI_ListTransactions_Handler,
		},
		{
			MethodName: "ListTransactionsByFilter",
			Handler:    _TellerAPI_ListTransactionsByFilter_Handler,
		},
		{
			MethodName: "ListTransfers",
			Handler:    _TellerAPI_ListTransfers_Handler,
		},
		{
			MethodName: "ListTransfersByFilter",
			Handler:    _TellerAPI_ListTransfersByFilter_Handler,
		},
		{
			MethodName: "GetRateSnapshot",
			Handler:    _TellerAPI_GetRateSnapshot_Handler,
		},
		{
			MethodName: "GetLatestRateSnapshot",
			Handler:    _TellerAPI_GetLatestRateSnapshot_Handler,
		},
		{
			MethodName: "SetRates",
			Handler:    _TellerAPI_SetRates_Handler,
		},
		{
			MethodName: "CalculateFee",
			Handler:    _TellerAPI_CalculateFee_Handler,
		},
		{
			MethodName: "GetRecommendedFeeRate",
			Handler:    _TellerAPI_GetRecommendedFeeRate_Handler,
		},
		{
			MethodName: "ValidateAddress",
			Handler:    _TellerAPI_ValidateAddress_Handler,
		},
		{
			MethodName: "FlushBalance",
			Handler:    _TellerAPI_FlushBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gincoinc/adamant/teller/v1/adamanttellerv1/teller_api.proto",
}
