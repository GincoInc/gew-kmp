// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gincoinc/adamant/teller/v1/adamanttellerv1/teller_api.proto

package adamanttellerv1

import (
	context "context"
	fmt "fmt"
	adamantglobalv1 "github.com/GincoInc/gew-kmp/gen/gincoinc/adamant/global/v1/adamantglobalv1"
	gincoincglobalv1 "github.com/GincoInc/gew-kmp/gen/gincoinc/global/v1/gincoincglobalv1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateWalletRequest struct {
	WalletName  string                       `protobuf:"bytes,1,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	Coin        gincoincglobalv1.Coin        `protobuf:"varint,2,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	WalletType  adamantglobalv1.WalletType   `protobuf:"varint,3,opt,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`
	AddressType gincoincglobalv1.AddressType `protobuf:"varint,4,opt,name=address_type,json=addressType,proto3,enum=gincoinc.global.v1.AddressType" json:"address_type,omitempty"`
	// required when create receive only wallet
	DestinationWalletId  string   `protobuf:"bytes,5,opt,name=destination_wallet_id,json=destinationWalletId,proto3" json:"destination_wallet_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateWalletRequest) Reset()         { *m = CreateWalletRequest{} }
func (m *CreateWalletRequest) String() string { return proto.CompactTextString(m) }
func (*CreateWalletRequest) ProtoMessage()    {}
func (*CreateWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48887539066eccda, []int{0}
}

func (m *CreateWalletRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateWalletRequest.Unmarshal(m, b)
}
func (m *CreateWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateWalletRequest.Marshal(b, m, deterministic)
}
func (m *CreateWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateWalletRequest.Merge(m, src)
}
func (m *CreateWalletRequest) XXX_Size() int {
	return xxx_messageInfo_CreateWalletRequest.Size(m)
}
func (m *CreateWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateWalletRequest proto.InternalMessageInfo

func (m *CreateWalletRequest) GetWalletName() string {
	if m != nil {
		return m.WalletName
	}
	return ""
}

func (m *CreateWalletRequest) GetCoin() gincoincglobalv1.Coin {
	if m != nil {
		return m.Coin
	}
	return gincoincglobalv1.Coin_COIN_INVALID
}

func (m *CreateWalletRequest) GetWalletType() adamantglobalv1.WalletType {
	if m != nil {
		return m.WalletType
	}
	return adamantglobalv1.WalletType_WALLET_TYPE_INVALID
}

func (m *CreateWalletRequest) GetAddressType() gincoincglobalv1.AddressType {
	if m != nil {
		return m.AddressType
	}
	return gincoincglobalv1.AddressType_ADDRESS_TYPE_INVALID
}

func (m *CreateWalletRequest) GetDestinationWalletId() string {
	if m != nil {
		return m.DestinationWalletId
	}
	return ""
}

type InitializeXRPWalletRequest struct {
	WalletId             string   `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitializeXRPWalletRequest) Reset()         { *m = InitializeXRPWalletRequest{} }
func (m *InitializeXRPWalletRequest) String() string { return proto.CompactTextString(m) }
func (*InitializeXRPWalletRequest) ProtoMessage()    {}
func (*InitializeXRPWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48887539066eccda, []int{1}
}

func (m *InitializeXRPWalletRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitializeXRPWalletRequest.Unmarshal(m, b)
}
func (m *InitializeXRPWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitializeXRPWalletRequest.Marshal(b, m, deterministic)
}
func (m *InitializeXRPWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitializeXRPWalletRequest.Merge(m, src)
}
func (m *InitializeXRPWalletRequest) XXX_Size() int {
	return xxx_messageInfo_InitializeXRPWalletRequest.Size(m)
}
func (m *InitializeXRPWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitializeXRPWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitializeXRPWalletRequest proto.InternalMessageInfo

func (m *InitializeXRPWalletRequest) GetWalletId() string {
	if m != nil {
		return m.WalletId
	}
	return ""
}

type SignTransactionRequest struct {
	WalletId             string   `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId        string   `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignTransactionRequest) Reset()         { *m = SignTransactionRequest{} }
func (m *SignTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*SignTransactionRequest) ProtoMessage()    {}
func (*SignTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48887539066eccda, []int{2}
}

func (m *SignTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignTransactionRequest.Unmarshal(m, b)
}
func (m *SignTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignTransactionRequest.Marshal(b, m, deterministic)
}
func (m *SignTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTransactionRequest.Merge(m, src)
}
func (m *SignTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_SignTransactionRequest.Size(m)
}
func (m *SignTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignTransactionRequest proto.InternalMessageInfo

func (m *SignTransactionRequest) GetWalletId() string {
	if m != nil {
		return m.WalletId
	}
	return ""
}

func (m *SignTransactionRequest) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateWalletRequest)(nil), "adamant.teller.v1.CreateWalletRequest")
	proto.RegisterType((*InitializeXRPWalletRequest)(nil), "adamant.teller.v1.InitializeXRPWalletRequest")
	proto.RegisterType((*SignTransactionRequest)(nil), "adamant.teller.v1.SignTransactionRequest")
}

func init() {
	proto.RegisterFile("gincoinc/adamant/teller/v1/adamanttellerv1/teller_api.proto", fileDescriptor_48887539066eccda)
}

var fileDescriptor_48887539066eccda = []byte{
	// 1032 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x97, 0xdf, 0x73, 0xda, 0x46,
	0x10, 0xc7, 0x91, 0xe3, 0xba, 0xe1, 0xfc, 0x03, 0x73, 0x24, 0x29, 0xa5, 0xd3, 0xc6, 0xa3, 0xb8,
	0xae, 0xeb, 0x14, 0x11, 0x48, 0xda, 0x71, 0x26, 0x4f, 0x91, 0xeb, 0x50, 0x3a, 0x34, 0xf5, 0x80,
	0x9b, 0x66, 0x92, 0x06, 0xcf, 0x81, 0xd6, 0x58, 0x19, 0xfd, 0xa0, 0xd2, 0x41, 0x42, 0x1b, 0xbf,
	0xa4, 0x0f, 0xfd, 0x33, 0xfa, 0x77, 0xf4, 0x3f, 0xeb, 0xf0, 0xd4, 0x91, 0x4e, 0x77, 0x08, 0x38,
	0x40, 0x99, 0x69, 0xf3, 0x26, 0x6e, 0x3f, 0xbb, 0xdf, 0xbd, 0xdd, 0xdb, 0x13, 0x42, 0x0f, 0xba,
	0xa6, 0xd3, 0x71, 0x4d, 0xa7, 0x53, 0x22, 0x06, 0xb1, 0x89, 0x43, 0x4b, 0x14, 0x2c, 0x0b, 0xbc,
	0xd2, 0xa0, 0xcc, 0x57, 0xd8, 0xc2, 0xa0, 0x1c, 0x59, 0xce, 0x48, 0xcf, 0xd4, 0x7a, 0x9e, 0x4b,
	0x5d, 0x9c, 0x8d, 0x08, 0x8d, 0x59, 0xb4, 0x41, 0xb9, 0xf0, 0x49, 0xd7, 0x75, 0xbb, 0x16, 0x94,
	0x42, 0xa0, 0xdd, 0x3f, 0x2f, 0x81, 0xdd, 0xa3, 0x43, 0xc6, 0x17, 0x3e, 0x1a, 0x10, 0xcb, 0x34,
	0x08, 0x85, 0x12, 0x7f, 0x88, 0x0c, 0x9a, 0xc8, 0xa2, 0x6b, 0xb9, 0x6d, 0x62, 0x05, 0xea, 0x7c,
	0x89, 0xad, 0x0c, 0xca, 0x25, 0x70, 0xfa, 0x76, 0xc4, 0x7f, 0x3d, 0x93, 0xf5, 0xd8, 0x2f, 0x5a,
	0x91, 0xb9, 0x3d, 0x78, 0x07, 0x37, 0xf6, 0x30, 0xde, 0x6c, 0xe1, 0x9b, 0x77, 0x70, 0xb6, 0x5d,
	0x03, 0x2c, 0xe6, 0xa7, 0xfe, 0x75, 0x05, 0xe5, 0x8e, 0x3c, 0x20, 0x14, 0x7e, 0x26, 0x96, 0x05,
	0xb4, 0x01, 0xbf, 0xf6, 0xc1, 0xa7, 0xf8, 0x00, 0xad, 0xbf, 0x0a, 0x17, 0xce, 0x1c, 0x62, 0x43,
	0x5e, 0xd9, 0x51, 0xf6, 0xd3, 0x7a, 0x7a, 0xa4, 0xaf, 0x79, 0xab, 0xdb, 0x4a, 0xfe, 0x5a, 0x03,
	0x31, 0xeb, 0x63, 0x62, 0x03, 0x3e, 0x44, 0xab, 0x81, 0x74, 0x7e, 0x65, 0x47, 0xd9, 0xdf, 0xaa,
	0xe4, 0x45, 0xb9, 0x34, 0xa6, 0xa8, 0x0d, 0xca, 0xda, 0x91, 0x6b, 0x3a, 0x3a, 0x1a, 0xe9, 0x1f,
	0xbe, 0x55, 0x56, 0xb7, 0x95, 0x9d, 0x54, 0x23, 0xf4, 0xc0, 0x75, 0xa1, 0x42, 0x87, 0x3d, 0xc8,
	0x5f, 0x09, 0x03, 0x7c, 0xaa, 0xf1, 0xc6, 0x8d, 0xfd, 0x59, 0x72, 0xa7, 0xc3, 0x1e, 0xe8, 0x1b,
	0x23, 0x3d, 0xfd, 0x56, 0x59, 0x0b, 0xa2, 0xec, 0xac, 0xf0, 0x3c, 0x02, 0x0b, 0x7e, 0x8c, 0x36,
	0x88, 0x61, 0x78, 0xe0, 0xfb, 0x2c, 0xdc, 0x6a, 0x18, 0xee, 0xa6, 0x2c, 0x9f, 0x87, 0x8c, 0x0b,
	0x03, 0xc6, 0xd3, 0x5a, 0x27, 0x63, 0x03, 0xfe, 0x43, 0x41, 0xd7, 0x0d, 0xf0, 0xa9, 0xe9, 0x10,
	0x6a, 0xba, 0xce, 0x59, 0x94, 0xaa, 0x69, 0xe4, 0x3f, 0x08, 0xcb, 0xf1, 0xe3, 0x48, 0xaf, 0x7b,
	0xdf, 0x57, 0xbe, 0x6b, 0xed, 0xbe, 0x69, 0x3d, 0xbf, 0x53, 0xbc, 0x4f, 0x8a, 0xe7, 0x2f, 0x7e,
	0x3f, 0xbc, 0x2c, 0x8a, 0xe7, 0x7b, 0x97, 0xc5, 0x7b, 0xe2, 0xc7, 0xdd, 0xcb, 0xe2, 0xf3, 0xc3,
	0xfb, 0xa4, 0xfd, 0x62, 0x62, 0x85, 0x3f, 0x97, 0x2b, 0x97, 0xbb, 0x8d, 0x5c, 0x4c, 0x8d, 0xed,
	0xb8, 0x66, 0xa8, 0x7f, 0x2a, 0xa8, 0x50, 0x73, 0x4c, 0x6a, 0x12, 0xcb, 0xfc, 0x0d, 0x9e, 0x36,
	0x4e, 0x26, 0x1b, 0x65, 0xa2, 0xf4, 0x38, 0x2f, 0xd6, 0xa6, 0xfa, 0x48, 0xaf, 0x79, 0xd5, 0xca,
	0xf1, 0x7f, 0x93, 0xd4, 0xd5, 0x57, 0x3c, 0x93, 0x7f, 0x14, 0x74, 0xa3, 0x69, 0x76, 0x9d, 0x53,
	0x8f, 0x38, 0x3e, 0xe9, 0x04, 0x59, 0xbe, 0xff, 0x2c, 0xb0, 0x8f, 0xb6, 0xe8, 0x38, 0x81, 0x40,
	0x6f, 0xe5, 0x7f, 0xd0, 0xdb, 0x8c, 0x69, 0xd4, 0x8c, 0xca, 0xdf, 0x39, 0x94, 0x3e, 0x0d, 0xaf,
	0x91, 0x87, 0x27, 0x35, 0x4c, 0xd0, 0x46, 0x7c, 0x66, 0xf0, 0x9e, 0x36, 0x73, 0xd5, 0x68, 0x92,
	0xa1, 0x2a, 0x7c, 0x21, 0x39, 0xd9, 0x93, 0x9c, 0xdf, 0x73, 0x1d, 0x1f, 0xd4, 0x14, 0xfe, 0x01,
	0xa5, 0xab, 0x40, 0xa3, 0xf8, 0xb7, 0x24, 0x7e, 0xc2, 0xca, 0x83, 0x7f, 0x3c, 0x77, 0x6c, 0xd4,
	0x14, 0x6e, 0xa1, 0xf5, 0xba, 0xe9, 0x47, 0x1e, 0x3e, 0xfe, 0x5c, 0xc2, 0xc6, 0xec, 0x3c, 0xe4,
	0xde, 0x32, 0x4c, 0xa4, 0x3b, 0x40, 0xb9, 0x2a, 0xd0, 0x66, 0x0f, 0x1c, 0x83, 0xb4, 0x2d, 0xd0,
	0x89, 0x45, 0x9c, 0x0e, 0xe0, 0xa2, 0x3c, 0xf1, 0x69, 0x8e, 0xeb, 0x69, 0x49, 0x71, 0xa1, 0xdb,
	0x42, 0x39, 0xc9, 0x6c, 0xc4, 0x74, 0xc7, 0x0d, 0x99, 0x3f, 0x43, 0x85, 0x1b, 0x1a, 0x7b, 0x2f,
	0x68, 0xfc, 0xbd, 0xa0, 0x1d, 0x07, 0xef, 0x05, 0x35, 0x85, 0x0d, 0xb4, 0xc9, 0x1a, 0x14, 0x5d,
	0x18, 0x78, 0x7e, 0x0b, 0x23, 0x82, 0xc7, 0xdc, 0x5f, 0x0e, 0x8a, 0x5d, 0x9c, 0x20, 0x54, 0x05,
	0xca, 0x25, 0x76, 0xe5, 0x55, 0x98, 0x8a, 0x5f, 0x90, 0x50, 0x11, 0xa2, 0xa6, 0x70, 0x3b, 0xec,
	0x47, 0xf4, 0x5b, 0x1f, 0xf2, 0xd0, 0xc5, 0x85, 0xa1, 0x05, 0x97, 0x4c, 0xa3, 0x85, 0xb2, 0x71,
	0xdf, 0x9a, 0x63, 0xc0, 0x6b, 0x7c, 0x7b, 0x89, 0x42, 0x48, 0x25, 0x8b, 0x6f, 0xa0, 0xcd, 0xe0,
	0xb0, 0x45, 0x0b, 0x20, 0xaf, 0xfd, 0x04, 0xb1, 0xa8, 0xf6, 0x53, 0xa0, 0xa8, 0xfd, 0x53, 0x74,
	0xbd, 0x0a, 0xf4, 0x98, 0x5e, 0x80, 0x07, 0x7d, 0xfb, 0x11, 0x88, 0x4e, 0xcf, 0x39, 0x14, 0x05,
	0xd9, 0xec, 0xcc, 0xba, 0xab, 0x29, 0xdc, 0x43, 0x59, 0xd6, 0xf0, 0xd8, 0x7d, 0x29, 0xad, 0xcf,
	0x0c, 0xc5, 0xf7, 0xf1, 0x55, 0x32, 0x58, 0xec, 0xe5, 0x09, 0xca, 0x4c, 0xdd, 0xcf, 0xf8, 0x4b,
	0xc9, 0x24, 0xc8, 0xef, 0xf0, 0x05, 0x53, 0xf0, 0x12, 0x65, 0x9a, 0xe0, 0x18, 0xf2, 0xb8, 0xe3,
	0xd4, 0xa6, 0x18, 0x1e, 0xf7, 0x20, 0x09, 0x2a, 0xf6, 0xf0, 0x0c, 0x65, 0x8f, 0x82, 0x21, 0xb7,
	0x96, 0x56, 0x6d, 0x9a, 0x5a, 0xbe, 0x8f, 0x5f, 0xd0, 0x56, 0x15, 0x68, 0x3c, 0xf0, 0xbe, 0xfc,
	0xb8, 0x4a, 0xa2, 0x7e, 0x26, 0x21, 0x63, 0x98, 0x9a, 0xc2, 0x17, 0xe8, 0xda, 0xa4, 0xab, 0x3e,
	0x3c, 0x7d, 0x5d, 0xfb, 0x16, 0x6b, 0x4b, 0x35, 0x18, 0x98, 0x5c, 0xc9, 0x46, 0xdb, 0xc1, 0x71,
	0x8e, 0x2d, 0xfa, 0xf8, 0x60, 0xce, 0x99, 0x8f, 0x43, 0x5c, 0xe1, 0x76, 0x22, 0x56, 0xb4, 0x24,
	0x1a, 0xc4, 0xd0, 0x7a, 0x0e, 0xde, 0xfc, 0x41, 0x14, 0xc4, 0xb2, 0x41, 0x8c, 0x81, 0x42, 0xe5,
	0x0c, 0x65, 0xaa, 0x40, 0x1b, 0x84, 0x42, 0xd3, 0x21, 0x3d, 0xff, 0xc2, 0xa5, 0xd2, 0x43, 0x36,
	0xc5, 0x70, 0xa5, 0x9b, 0x12, 0x34, 0xce, 0xa9, 0x29, 0xdc, 0x08, 0x27, 0xbd, 0x4e, 0x28, 0xf8,
	0x93, 0x32, 0xf3, 0x26, 0x3d, 0x41, 0xcc, 0x9f, 0xd0, 0xd5, 0x26, 0x4b, 0xc8, 0xc7, 0xaa, 0xf4,
	0x9c, 0x33, 0x23, 0x4f, 0xf3, 0xd6, 0x42, 0x46, 0xd4, 0x22, 0xf8, 0x83, 0x41, 0xac, 0x4e, 0xdf,
	0x22, 0x14, 0x1e, 0x01, 0xe0, 0x3d, 0xe9, 0xf9, 0x1f, 0x03, 0x0b, 0xff, 0x60, 0x4c, 0x70, 0x42,
	0xe2, 0x4d, 0x58, 0x8d, 0x06, 0x74, 0x5c, 0xdb, 0x06, 0xc7, 0x00, 0x23, 0x30, 0x13, 0x0a, 0xb8,
	0x34, 0xa7, 0xe8, 0x33, 0x24, 0x17, 0xbd, 0x93, 0xdc, 0x41, 0xa8, 0xbf, 0x44, 0x99, 0x27, 0xd1,
	0x47, 0x16, 0xbf, 0x6f, 0x65, 0xcd, 0x9e, 0x62, 0x16, 0xdd, 0x28, 0x33, 0x28, 0xd7, 0xd2, 0xb3,
	0xcf, 0x32, 0x53, 0xdf, 0x8a, 0xed, 0xb5, 0xb0, 0xd3, 0x77, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0xb9, 0x10, 0x5f, 0x3b, 0x60, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TellerAPIClient is the client API for TellerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TellerAPIClient interface {
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateWalletResponse, error)
	// Get wallet information. the wallet model includes balance, address etc.
	GetWallet(ctx context.Context, in *adamantglobalv1.GetWalletRequest, opts ...grpc.CallOption) (*adamantglobalv1.Wallet, error)
	ListWallets(ctx context.Context, in *adamantglobalv1.ListWalletsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListWalletsResponse, error)
	GetSpendableBalance(ctx context.Context, in *adamantglobalv1.GetSpendableBalanceRequest, opts ...grpc.CallOption) (*adamantglobalv1.GetSpendableBalanceResponse, error)
	InitializeXRPWallet(ctx context.Context, in *InitializeXRPWalletRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Create a new address for an existing wallet
	CreateAddress(ctx context.Context, in *adamantglobalv1.CreateAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateAddressResponse, error)
	GetAddress(ctx context.Context, in *adamantglobalv1.GetAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error)
	GetAddressByAddress(ctx context.Context, in *adamantglobalv1.GetAddressByAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error)
	GetAddressByIndex(ctx context.Context, in *adamantglobalv1.GetAddressByIndexRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error)
	ListAddresses(ctx context.Context, in *adamantglobalv1.ListAddressesRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListAddressesResponse, error)
	// Get an address which hold ETH for ethereum wallet/address creation etc
	GetEthereumFeeAddress(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*adamantglobalv1.EthereumFeeAddress, error)
	CreateTransaction(ctx context.Context, in *adamantglobalv1.CreateTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error)
	SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SendTransaction(ctx context.Context, in *adamantglobalv1.SendTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.SendTransactionResponse, error)
	CancelTransaction(ctx context.Context, in *adamantglobalv1.CancelTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetTransaction(ctx context.Context, in *adamantglobalv1.GetTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.Transaction, error)
	GetTransactionByTxID(ctx context.Context, in *adamantglobalv1.GetTransactionByTxIDRequest, opts ...grpc.CallOption) (*adamantglobalv1.Transaction, error)
	ListTransactions(ctx context.Context, in *adamantglobalv1.ListTransactionsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransactionsResponse, error)
	// List transfers for a given wallet. Ordered by update time desc
	ListTransfers(ctx context.Context, in *adamantglobalv1.ListTransfersRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransfersResponse, error)
	// Get rates by snapshot id
	GetRateSnapshot(ctx context.Context, in *adamantglobalv1.GetRateSnapshotRequest, opts ...grpc.CallOption) (*adamantglobalv1.RateSnapshot, error)
	// Get latest rates set to your organization
	GetLatestRateSnapshot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*adamantglobalv1.RateSnapshot, error)
	// Set rates to your organization
	SetRates(ctx context.Context, in *adamantglobalv1.SetRatesRequest, opts ...grpc.CallOption) (*adamantglobalv1.SetRatesResponse, error)
	CalculateFee(ctx context.Context, in *adamantglobalv1.CalculateFeeRequest, opts ...grpc.CallOption) (*adamantglobalv1.CalculateFeeResponse, error)
	GetRecommendedFeeRate(ctx context.Context, in *adamantglobalv1.GetRecommendedFeeRateRequest, opts ...grpc.CallOption) (*adamantglobalv1.GetRecommendedFeeRateResponse, error)
	// Validate format of given address
	ValidateAddress(ctx context.Context, in *adamantglobalv1.ValidateAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.ValidateAddressResponse, error)
}

type tellerAPIClient struct {
	cc *grpc.ClientConn
}

func NewTellerAPIClient(cc *grpc.ClientConn) TellerAPIClient {
	return &tellerAPIClient{cc}
}

func (c *tellerAPIClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateWalletResponse, error) {
	out := new(adamantglobalv1.CreateWalletResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetWallet(ctx context.Context, in *adamantglobalv1.GetWalletRequest, opts ...grpc.CallOption) (*adamantglobalv1.Wallet, error) {
	out := new(adamantglobalv1.Wallet)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListWallets(ctx context.Context, in *adamantglobalv1.ListWalletsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListWalletsResponse, error) {
	out := new(adamantglobalv1.ListWalletsResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetSpendableBalance(ctx context.Context, in *adamantglobalv1.GetSpendableBalanceRequest, opts ...grpc.CallOption) (*adamantglobalv1.GetSpendableBalanceResponse, error) {
	out := new(adamantglobalv1.GetSpendableBalanceResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetSpendableBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) InitializeXRPWallet(ctx context.Context, in *InitializeXRPWalletRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/InitializeXRPWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) CreateAddress(ctx context.Context, in *adamantglobalv1.CreateAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateAddressResponse, error) {
	out := new(adamantglobalv1.CreateAddressResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CreateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetAddress(ctx context.Context, in *adamantglobalv1.GetAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error) {
	out := new(adamantglobalv1.Address)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetAddressByAddress(ctx context.Context, in *adamantglobalv1.GetAddressByAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error) {
	out := new(adamantglobalv1.Address)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetAddressByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetAddressByIndex(ctx context.Context, in *adamantglobalv1.GetAddressByIndexRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error) {
	out := new(adamantglobalv1.Address)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetAddressByIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListAddresses(ctx context.Context, in *adamantglobalv1.ListAddressesRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListAddressesResponse, error) {
	out := new(adamantglobalv1.ListAddressesResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetEthereumFeeAddress(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*adamantglobalv1.EthereumFeeAddress, error) {
	out := new(adamantglobalv1.EthereumFeeAddress)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetEthereumFeeAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) CreateTransaction(ctx context.Context, in *adamantglobalv1.CreateTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error) {
	out := new(adamantglobalv1.CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/SignTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) SendTransaction(ctx context.Context, in *adamantglobalv1.SendTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.SendTransactionResponse, error) {
	out := new(adamantglobalv1.SendTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) CancelTransaction(ctx context.Context, in *adamantglobalv1.CancelTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CancelTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetTransaction(ctx context.Context, in *adamantglobalv1.GetTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.Transaction, error) {
	out := new(adamantglobalv1.Transaction)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetTransactionByTxID(ctx context.Context, in *adamantglobalv1.GetTransactionByTxIDRequest, opts ...grpc.CallOption) (*adamantglobalv1.Transaction, error) {
	out := new(adamantglobalv1.Transaction)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetTransactionByTxID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListTransactions(ctx context.Context, in *adamantglobalv1.ListTransactionsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransactionsResponse, error) {
	out := new(adamantglobalv1.ListTransactionsResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListTransfers(ctx context.Context, in *adamantglobalv1.ListTransfersRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransfersResponse, error) {
	out := new(adamantglobalv1.ListTransfersResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetRateSnapshot(ctx context.Context, in *adamantglobalv1.GetRateSnapshotRequest, opts ...grpc.CallOption) (*adamantglobalv1.RateSnapshot, error) {
	out := new(adamantglobalv1.RateSnapshot)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetRateSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetLatestRateSnapshot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*adamantglobalv1.RateSnapshot, error) {
	out := new(adamantglobalv1.RateSnapshot)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetLatestRateSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) SetRates(ctx context.Context, in *adamantglobalv1.SetRatesRequest, opts ...grpc.CallOption) (*adamantglobalv1.SetRatesResponse, error) {
	out := new(adamantglobalv1.SetRatesResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/SetRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) CalculateFee(ctx context.Context, in *adamantglobalv1.CalculateFeeRequest, opts ...grpc.CallOption) (*adamantglobalv1.CalculateFeeResponse, error) {
	out := new(adamantglobalv1.CalculateFeeResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CalculateFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetRecommendedFeeRate(ctx context.Context, in *adamantglobalv1.GetRecommendedFeeRateRequest, opts ...grpc.CallOption) (*adamantglobalv1.GetRecommendedFeeRateResponse, error) {
	out := new(adamantglobalv1.GetRecommendedFeeRateResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetRecommendedFeeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ValidateAddress(ctx context.Context, in *adamantglobalv1.ValidateAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.ValidateAddressResponse, error) {
	out := new(adamantglobalv1.ValidateAddressResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ValidateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TellerAPIServer is the server API for TellerAPI service.
type TellerAPIServer interface {
	CreateWallet(context.Context, *CreateWalletRequest) (*adamantglobalv1.CreateWalletResponse, error)
	// Get wallet information. the wallet model includes balance, address etc.
	GetWallet(context.Context, *adamantglobalv1.GetWalletRequest) (*adamantglobalv1.Wallet, error)
	ListWallets(context.Context, *adamantglobalv1.ListWalletsRequest) (*adamantglobalv1.ListWalletsResponse, error)
	GetSpendableBalance(context.Context, *adamantglobalv1.GetSpendableBalanceRequest) (*adamantglobalv1.GetSpendableBalanceResponse, error)
	InitializeXRPWallet(context.Context, *InitializeXRPWalletRequest) (*empty.Empty, error)
	// Create a new address for an existing wallet
	CreateAddress(context.Context, *adamantglobalv1.CreateAddressRequest) (*adamantglobalv1.CreateAddressResponse, error)
	GetAddress(context.Context, *adamantglobalv1.GetAddressRequest) (*adamantglobalv1.Address, error)
	GetAddressByAddress(context.Context, *adamantglobalv1.GetAddressByAddressRequest) (*adamantglobalv1.Address, error)
	GetAddressByIndex(context.Context, *adamantglobalv1.GetAddressByIndexRequest) (*adamantglobalv1.Address, error)
	ListAddresses(context.Context, *adamantglobalv1.ListAddressesRequest) (*adamantglobalv1.ListAddressesResponse, error)
	// Get an address which hold ETH for ethereum wallet/address creation etc
	GetEthereumFeeAddress(context.Context, *empty.Empty) (*adamantglobalv1.EthereumFeeAddress, error)
	CreateTransaction(context.Context, *adamantglobalv1.CreateTransactionRequest) (*adamantglobalv1.CreateTransactionResponse, error)
	SignTransaction(context.Context, *SignTransactionRequest) (*empty.Empty, error)
	SendTransaction(context.Context, *adamantglobalv1.SendTransactionRequest) (*adamantglobalv1.SendTransactionResponse, error)
	CancelTransaction(context.Context, *adamantglobalv1.CancelTransactionRequest) (*empty.Empty, error)
	GetTransaction(context.Context, *adamantglobalv1.GetTransactionRequest) (*adamantglobalv1.Transaction, error)
	GetTransactionByTxID(context.Context, *adamantglobalv1.GetTransactionByTxIDRequest) (*adamantglobalv1.Transaction, error)
	ListTransactions(context.Context, *adamantglobalv1.ListTransactionsRequest) (*adamantglobalv1.ListTransactionsResponse, error)
	// List transfers for a given wallet. Ordered by update time desc
	ListTransfers(context.Context, *adamantglobalv1.ListTransfersRequest) (*adamantglobalv1.ListTransfersResponse, error)
	// Get rates by snapshot id
	GetRateSnapshot(context.Context, *adamantglobalv1.GetRateSnapshotRequest) (*adamantglobalv1.RateSnapshot, error)
	// Get latest rates set to your organization
	GetLatestRateSnapshot(context.Context, *empty.Empty) (*adamantglobalv1.RateSnapshot, error)
	// Set rates to your organization
	SetRates(context.Context, *adamantglobalv1.SetRatesRequest) (*adamantglobalv1.SetRatesResponse, error)
	CalculateFee(context.Context, *adamantglobalv1.CalculateFeeRequest) (*adamantglobalv1.CalculateFeeResponse, error)
	GetRecommendedFeeRate(context.Context, *adamantglobalv1.GetRecommendedFeeRateRequest) (*adamantglobalv1.GetRecommendedFeeRateResponse, error)
	// Validate format of given address
	ValidateAddress(context.Context, *adamantglobalv1.ValidateAddressRequest) (*adamantglobalv1.ValidateAddressResponse, error)
}

// UnimplementedTellerAPIServer can be embedded to have forward compatible implementations.
type UnimplementedTellerAPIServer struct {
}

func (*UnimplementedTellerAPIServer) CreateWallet(ctx context.Context, req *CreateWalletRequest) (*adamantglobalv1.CreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (*UnimplementedTellerAPIServer) GetWallet(ctx context.Context, req *adamantglobalv1.GetWalletRequest) (*adamantglobalv1.Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallet not implemented")
}
func (*UnimplementedTellerAPIServer) ListWallets(ctx context.Context, req *adamantglobalv1.ListWalletsRequest) (*adamantglobalv1.ListWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWallets not implemented")
}
func (*UnimplementedTellerAPIServer) GetSpendableBalance(ctx context.Context, req *adamantglobalv1.GetSpendableBalanceRequest) (*adamantglobalv1.GetSpendableBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpendableBalance not implemented")
}
func (*UnimplementedTellerAPIServer) InitializeXRPWallet(ctx context.Context, req *InitializeXRPWalletRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeXRPWallet not implemented")
}
func (*UnimplementedTellerAPIServer) CreateAddress(ctx context.Context, req *adamantglobalv1.CreateAddressRequest) (*adamantglobalv1.CreateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddress not implemented")
}
func (*UnimplementedTellerAPIServer) GetAddress(ctx context.Context, req *adamantglobalv1.GetAddressRequest) (*adamantglobalv1.Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (*UnimplementedTellerAPIServer) GetAddressByAddress(ctx context.Context, req *adamantglobalv1.GetAddressByAddressRequest) (*adamantglobalv1.Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressByAddress not implemented")
}
func (*UnimplementedTellerAPIServer) GetAddressByIndex(ctx context.Context, req *adamantglobalv1.GetAddressByIndexRequest) (*adamantglobalv1.Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressByIndex not implemented")
}
func (*UnimplementedTellerAPIServer) ListAddresses(ctx context.Context, req *adamantglobalv1.ListAddressesRequest) (*adamantglobalv1.ListAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddresses not implemented")
}
func (*UnimplementedTellerAPIServer) GetEthereumFeeAddress(ctx context.Context, req *empty.Empty) (*adamantglobalv1.EthereumFeeAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEthereumFeeAddress not implemented")
}
func (*UnimplementedTellerAPIServer) CreateTransaction(ctx context.Context, req *adamantglobalv1.CreateTransactionRequest) (*adamantglobalv1.CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (*UnimplementedTellerAPIServer) SignTransaction(ctx context.Context, req *SignTransactionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransaction not implemented")
}
func (*UnimplementedTellerAPIServer) SendTransaction(ctx context.Context, req *adamantglobalv1.SendTransactionRequest) (*adamantglobalv1.SendTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (*UnimplementedTellerAPIServer) CancelTransaction(ctx context.Context, req *adamantglobalv1.CancelTransactionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTransaction not implemented")
}
func (*UnimplementedTellerAPIServer) GetTransaction(ctx context.Context, req *adamantglobalv1.GetTransactionRequest) (*adamantglobalv1.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (*UnimplementedTellerAPIServer) GetTransactionByTxID(ctx context.Context, req *adamantglobalv1.GetTransactionByTxIDRequest) (*adamantglobalv1.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByTxID not implemented")
}
func (*UnimplementedTellerAPIServer) ListTransactions(ctx context.Context, req *adamantglobalv1.ListTransactionsRequest) (*adamantglobalv1.ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (*UnimplementedTellerAPIServer) ListTransfers(ctx context.Context, req *adamantglobalv1.ListTransfersRequest) (*adamantglobalv1.ListTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransfers not implemented")
}
func (*UnimplementedTellerAPIServer) GetRateSnapshot(ctx context.Context, req *adamantglobalv1.GetRateSnapshotRequest) (*adamantglobalv1.RateSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRateSnapshot not implemented")
}
func (*UnimplementedTellerAPIServer) GetLatestRateSnapshot(ctx context.Context, req *empty.Empty) (*adamantglobalv1.RateSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestRateSnapshot not implemented")
}
func (*UnimplementedTellerAPIServer) SetRates(ctx context.Context, req *adamantglobalv1.SetRatesRequest) (*adamantglobalv1.SetRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRates not implemented")
}
func (*UnimplementedTellerAPIServer) CalculateFee(ctx context.Context, req *adamantglobalv1.CalculateFeeRequest) (*adamantglobalv1.CalculateFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFee not implemented")
}
func (*UnimplementedTellerAPIServer) GetRecommendedFeeRate(ctx context.Context, req *adamantglobalv1.GetRecommendedFeeRateRequest) (*adamantglobalv1.GetRecommendedFeeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendedFeeRate not implemented")
}
func (*UnimplementedTellerAPIServer) ValidateAddress(ctx context.Context, req *adamantglobalv1.ValidateAddressRequest) (*adamantglobalv1.ValidateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAddress not implemented")
}

func RegisterTellerAPIServer(s *grpc.Server, srv TellerAPIServer) {
	s.RegisterService(&_TellerAPI_serviceDesc, srv)
}

func _TellerAPI_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetWallet(ctx, req.(*adamantglobalv1.GetWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListWallets(ctx, req.(*adamantglobalv1.ListWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetSpendableBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetSpendableBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetSpendableBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetSpendableBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetSpendableBalance(ctx, req.(*adamantglobalv1.GetSpendableBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_InitializeXRPWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeXRPWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).InitializeXRPWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/InitializeXRPWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).InitializeXRPWallet(ctx, req.(*InitializeXRPWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.CreateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CreateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CreateAddress(ctx, req.(*adamantglobalv1.CreateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetAddress(ctx, req.(*adamantglobalv1.GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetAddressByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetAddressByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetAddressByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetAddressByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetAddressByAddress(ctx, req.(*adamantglobalv1.GetAddressByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetAddressByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetAddressByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetAddressByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetAddressByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetAddressByIndex(ctx, req.(*adamantglobalv1.GetAddressByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListAddresses(ctx, req.(*adamantglobalv1.ListAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetEthereumFeeAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetEthereumFeeAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetEthereumFeeAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetEthereumFeeAddress(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CreateTransaction(ctx, req.(*adamantglobalv1.CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).SignTransaction(ctx, req.(*SignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).SendTransaction(ctx, req.(*adamantglobalv1.SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_CancelTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.CancelTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CancelTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CancelTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CancelTransaction(ctx, req.(*adamantglobalv1.CancelTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetTransaction(ctx, req.(*adamantglobalv1.GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetTransactionByTxID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetTransactionByTxIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetTransactionByTxID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetTransactionByTxID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetTransactionByTxID(ctx, req.(*adamantglobalv1.GetTransactionByTxIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListTransactions(ctx, req.(*adamantglobalv1.ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListTransfers(ctx, req.(*adamantglobalv1.ListTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetRateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetRateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetRateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetRateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetRateSnapshot(ctx, req.(*adamantglobalv1.GetRateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetLatestRateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetLatestRateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetLatestRateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetLatestRateSnapshot(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_SetRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.SetRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).SetRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/SetRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).SetRates(ctx, req.(*adamantglobalv1.SetRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_CalculateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.CalculateFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CalculateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CalculateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CalculateFee(ctx, req.(*adamantglobalv1.CalculateFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetRecommendedFeeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetRecommendedFeeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetRecommendedFeeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetRecommendedFeeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetRecommendedFeeRate(ctx, req.(*adamantglobalv1.GetRecommendedFeeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ValidateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ValidateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ValidateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ValidateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ValidateAddress(ctx, req.(*adamantglobalv1.ValidateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TellerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "adamant.teller.v1.TellerAPI",
	HandlerType: (*TellerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _TellerAPI_CreateWallet_Handler,
		},
		{
			MethodName: "GetWallet",
			Handler:    _TellerAPI_GetWallet_Handler,
		},
		{
			MethodName: "ListWallets",
			Handler:    _TellerAPI_ListWallets_Handler,
		},
		{
			MethodName: "GetSpendableBalance",
			Handler:    _TellerAPI_GetSpendableBalance_Handler,
		},
		{
			MethodName: "InitializeXRPWallet",
			Handler:    _TellerAPI_InitializeXRPWallet_Handler,
		},
		{
			MethodName: "CreateAddress",
			Handler:    _TellerAPI_CreateAddress_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _TellerAPI_GetAddress_Handler,
		},
		{
			MethodName: "GetAddressByAddress",
			Handler:    _TellerAPI_GetAddressByAddress_Handler,
		},
		{
			MethodName: "GetAddressByIndex",
			Handler:    _TellerAPI_GetAddressByIndex_Handler,
		},
		{
			MethodName: "ListAddresses",
			Handler:    _TellerAPI_ListAddresses_Handler,
		},
		{
			MethodName: "GetEthereumFeeAddress",
			Handler:    _TellerAPI_GetEthereumFeeAddress_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _TellerAPI_CreateTransaction_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _TellerAPI_SignTransaction_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _TellerAPI_SendTransaction_Handler,
		},
		{
			MethodName: "CancelTransaction",
			Handler:    _TellerAPI_CancelTransaction_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _TellerAPI_GetTransaction_Handler,
		},
		{
			MethodName: "GetTransactionByTxID",
			Handler:    _TellerAPI_GetTransactionByTxID_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _TellerAPI_ListTransactions_Handler,
		},
		{
			MethodName: "ListTransfers",
			Handler:    _TellerAPI_ListTransfers_Handler,
		},
		{
			MethodName: "GetRateSnapshot",
			Handler:    _TellerAPI_GetRateSnapshot_Handler,
		},
		{
			MethodName: "GetLatestRateSnapshot",
			Handler:    _TellerAPI_GetLatestRateSnapshot_Handler,
		},
		{
			MethodName: "SetRates",
			Handler:    _TellerAPI_SetRates_Handler,
		},
		{
			MethodName: "CalculateFee",
			Handler:    _TellerAPI_CalculateFee_Handler,
		},
		{
			MethodName: "GetRecommendedFeeRate",
			Handler:    _TellerAPI_GetRecommendedFeeRate_Handler,
		},
		{
			MethodName: "ValidateAddress",
			Handler:    _TellerAPI_ValidateAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gincoinc/adamant/teller/v1/adamanttellerv1/teller_api.proto",
}
