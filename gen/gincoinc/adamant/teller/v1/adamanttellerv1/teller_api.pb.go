// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: gincoinc/adamant/teller/v1/adamanttellerv1/teller_api.proto

package adamanttellerv1

import (
	adamantglobalv1 "github.com/GincoInc/gew-kmp/gen/gincoinc/adamant/global/v1/adamantglobalv1"
	gincoincglobalv1 "github.com/GincoInc/gew-kmp/gen/gincoinc/global/v1/gincoincglobalv1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletName  string                       `protobuf:"bytes,1,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	Coin        gincoincglobalv1.Coin        `protobuf:"varint,2,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	WalletType  adamantglobalv1.WalletType   `protobuf:"varint,3,opt,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`
	AddressType gincoincglobalv1.AddressType `protobuf:"varint,4,opt,name=address_type,json=addressType,proto3,enum=gincoinc.global.v1.AddressType" json:"address_type,omitempty"`
	// required when create receive only wallet
	DestinationWalletId string `protobuf:"bytes,5,opt,name=destination_wallet_id,json=destinationWalletId,proto3" json:"destination_wallet_id,omitempty"`
	// optional
	InheritWalletId string `protobuf:"bytes,6,opt,name=inherit_wallet_id,json=inheritWalletId,proto3" json:"inherit_wallet_id,omitempty"`
}

func (x *CreateWalletRequest) Reset() {
	*x = CreateWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletRequest) ProtoMessage() {}

func (x *CreateWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletRequest.ProtoReflect.Descriptor instead.
func (*CreateWalletRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{0}
}

func (x *CreateWalletRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *CreateWalletRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *CreateWalletRequest) GetWalletType() adamantglobalv1.WalletType {
	if x != nil {
		return x.WalletType
	}
	return adamantglobalv1.WalletType(0)
}

func (x *CreateWalletRequest) GetAddressType() gincoincglobalv1.AddressType {
	if x != nil {
		return x.AddressType
	}
	return gincoincglobalv1.AddressType(0)
}

func (x *CreateWalletRequest) GetDestinationWalletId() string {
	if x != nil {
		return x.DestinationWalletId
	}
	return ""
}

func (x *CreateWalletRequest) GetInheritWalletId() string {
	if x != nil {
		return x.InheritWalletId
	}
	return ""
}

type InitializeXRPWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *InitializeXRPWalletRequest) Reset() {
	*x = InitializeXRPWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeXRPWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeXRPWalletRequest) ProtoMessage() {}

func (x *InitializeXRPWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeXRPWalletRequest.ProtoReflect.Descriptor instead.
func (*InitializeXRPWalletRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{1}
}

func (x *InitializeXRPWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type InitializeWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *InitializeWalletRequest) Reset() {
	*x = InitializeWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeWalletRequest) ProtoMessage() {}

func (x *InitializeWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeWalletRequest.ProtoReflect.Descriptor instead.
func (*InitializeWalletRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{2}
}

func (x *InitializeWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type SignTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *SignTransactionRequest) Reset() {
	*x = SignTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTransactionRequest) ProtoMessage() {}

func (x *SignTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTransactionRequest.ProtoReflect.Descriptor instead.
func (*SignTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{3}
}

func (x *SignTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *SignTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type SignMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId  string  `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	AddressId *string `protobuf:"bytes,2,opt,name=address_id,json=addressId,proto3,oneof" json:"address_id,omitempty"`
	Address   *string `protobuf:"bytes,4,opt,name=address,proto3,oneof" json:"address,omitempty"`
	Message   string  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SignMessageRequest) Reset() {
	*x = SignMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignMessageRequest) ProtoMessage() {}

func (x *SignMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignMessageRequest.ProtoReflect.Descriptor instead.
func (*SignMessageRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{4}
}

func (x *SignMessageRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *SignMessageRequest) GetAddressId() string {
	if x != nil && x.AddressId != nil {
		return *x.AddressId
	}
	return ""
}

func (x *SignMessageRequest) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *SignMessageRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SignMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignMessageResponse) Reset() {
	*x = SignMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignMessageResponse) ProtoMessage() {}

func (x *SignMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignMessageResponse.ProtoReflect.Descriptor instead.
func (*SignMessageResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{5}
}

func (x *SignMessageResponse) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type SendTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *SendTransactionRequest) Reset() {
	*x = SendTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTransactionRequest) ProtoMessage() {}

func (x *SendTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTransactionRequest.ProtoReflect.Descriptor instead.
func (*SendTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{6}
}

func (x *SendTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *SendTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

// ProgmatCoin
type ProgmatCoinInitializeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId               string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	FeeRate                uint64 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	ContractAddress        string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	TokenName              string `protobuf:"bytes,4,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	TokenSymbol            string `protobuf:"bytes,5,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
	TokenCurrency          string `protobuf:"bytes,6,opt,name=token_currency,json=tokenCurrency,proto3" json:"token_currency,omitempty"`
	TokenDecimals          uint32 `protobuf:"varint,7,opt,name=token_decimals,json=tokenDecimals,proto3" json:"token_decimals,omitempty"`
	NewMasterMinter        string `protobuf:"bytes,8,opt,name=new_master_minter,json=newMasterMinter,proto3" json:"new_master_minter,omitempty"`
	NewPauser              string `protobuf:"bytes,9,opt,name=new_pauser,json=newPauser,proto3" json:"new_pauser,omitempty"`
	NewWhiteAndBlackLister string `protobuf:"bytes,10,opt,name=new_white_and_black_lister,json=newWhiteAndBlackLister,proto3" json:"new_white_and_black_lister,omitempty"`
	NewConfiscator         string `protobuf:"bytes,11,opt,name=new_confiscator,json=newConfiscator,proto3" json:"new_confiscator,omitempty"`
	NewOwner               string `protobuf:"bytes,12,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty"`
}

func (x *ProgmatCoinInitializeRequest) Reset() {
	*x = ProgmatCoinInitializeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgmatCoinInitializeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgmatCoinInitializeRequest) ProtoMessage() {}

func (x *ProgmatCoinInitializeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgmatCoinInitializeRequest.ProtoReflect.Descriptor instead.
func (*ProgmatCoinInitializeRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{7}
}

func (x *ProgmatCoinInitializeRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ProgmatCoinInitializeRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *ProgmatCoinInitializeRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ProgmatCoinInitializeRequest) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *ProgmatCoinInitializeRequest) GetTokenSymbol() string {
	if x != nil {
		return x.TokenSymbol
	}
	return ""
}

func (x *ProgmatCoinInitializeRequest) GetTokenCurrency() string {
	if x != nil {
		return x.TokenCurrency
	}
	return ""
}

func (x *ProgmatCoinInitializeRequest) GetTokenDecimals() uint32 {
	if x != nil {
		return x.TokenDecimals
	}
	return 0
}

func (x *ProgmatCoinInitializeRequest) GetNewMasterMinter() string {
	if x != nil {
		return x.NewMasterMinter
	}
	return ""
}

func (x *ProgmatCoinInitializeRequest) GetNewPauser() string {
	if x != nil {
		return x.NewPauser
	}
	return ""
}

func (x *ProgmatCoinInitializeRequest) GetNewWhiteAndBlackLister() string {
	if x != nil {
		return x.NewWhiteAndBlackLister
	}
	return ""
}

func (x *ProgmatCoinInitializeRequest) GetNewConfiscator() string {
	if x != nil {
		return x.NewConfiscator
	}
	return ""
}

func (x *ProgmatCoinInitializeRequest) GetNewOwner() string {
	if x != nil {
		return x.NewOwner
	}
	return ""
}

type ProgmatCoinConfigureMinterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId            string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	FeeRate             uint64 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	ContractAddress     string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Address             string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	MinterAllowedAmount string `protobuf:"bytes,5,opt,name=minter_allowed_amount,json=minterAllowedAmount,proto3" json:"minter_allowed_amount,omitempty"`
}

func (x *ProgmatCoinConfigureMinterRequest) Reset() {
	*x = ProgmatCoinConfigureMinterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgmatCoinConfigureMinterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgmatCoinConfigureMinterRequest) ProtoMessage() {}

func (x *ProgmatCoinConfigureMinterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgmatCoinConfigureMinterRequest.ProtoReflect.Descriptor instead.
func (*ProgmatCoinConfigureMinterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{8}
}

func (x *ProgmatCoinConfigureMinterRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ProgmatCoinConfigureMinterRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *ProgmatCoinConfigureMinterRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ProgmatCoinConfigureMinterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ProgmatCoinConfigureMinterRequest) GetMinterAllowedAmount() string {
	if x != nil {
		return x.MinterAllowedAmount
	}
	return ""
}

type ProgmatCoinMintAndTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId        string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	FeeRate         uint64 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	MintAddress     string `protobuf:"bytes,4,opt,name=mint_address,json=mintAddress,proto3" json:"mint_address,omitempty"`
	TransferAddress string `protobuf:"bytes,5,opt,name=transfer_address,json=transferAddress,proto3" json:"transfer_address,omitempty"`
	Amount          string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ProgmatCoinMintAndTransferRequest) Reset() {
	*x = ProgmatCoinMintAndTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgmatCoinMintAndTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgmatCoinMintAndTransferRequest) ProtoMessage() {}

func (x *ProgmatCoinMintAndTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgmatCoinMintAndTransferRequest.ProtoReflect.Descriptor instead.
func (*ProgmatCoinMintAndTransferRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{9}
}

func (x *ProgmatCoinMintAndTransferRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ProgmatCoinMintAndTransferRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *ProgmatCoinMintAndTransferRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ProgmatCoinMintAndTransferRequest) GetMintAddress() string {
	if x != nil {
		return x.MintAddress
	}
	return ""
}

func (x *ProgmatCoinMintAndTransferRequest) GetTransferAddress() string {
	if x != nil {
		return x.TransferAddress
	}
	return ""
}

func (x *ProgmatCoinMintAndTransferRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type ProgmatCoinMintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId        string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	FeeRate         uint64 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Address         string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Amount          string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ProgmatCoinMintRequest) Reset() {
	*x = ProgmatCoinMintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgmatCoinMintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgmatCoinMintRequest) ProtoMessage() {}

func (x *ProgmatCoinMintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgmatCoinMintRequest.ProtoReflect.Descriptor instead.
func (*ProgmatCoinMintRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{10}
}

func (x *ProgmatCoinMintRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ProgmatCoinMintRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *ProgmatCoinMintRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ProgmatCoinMintRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ProgmatCoinMintRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type ProgmatCoinBurnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId        string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	FeeRate         uint64 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Amount          string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ProgmatCoinBurnRequest) Reset() {
	*x = ProgmatCoinBurnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgmatCoinBurnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgmatCoinBurnRequest) ProtoMessage() {}

func (x *ProgmatCoinBurnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgmatCoinBurnRequest.ProtoReflect.Descriptor instead.
func (*ProgmatCoinBurnRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{11}
}

func (x *ProgmatCoinBurnRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ProgmatCoinBurnRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *ProgmatCoinBurnRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ProgmatCoinBurnRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type ProgmatCoinAddToWhitelistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId        string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	FeeRate         uint64 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Address         string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ProgmatCoinAddToWhitelistRequest) Reset() {
	*x = ProgmatCoinAddToWhitelistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgmatCoinAddToWhitelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgmatCoinAddToWhitelistRequest) ProtoMessage() {}

func (x *ProgmatCoinAddToWhitelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgmatCoinAddToWhitelistRequest.ProtoReflect.Descriptor instead.
func (*ProgmatCoinAddToWhitelistRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{12}
}

func (x *ProgmatCoinAddToWhitelistRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ProgmatCoinAddToWhitelistRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *ProgmatCoinAddToWhitelistRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ProgmatCoinAddToWhitelistRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ProgmatCoinRemoveFromWhitelistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId        string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	FeeRate         uint64 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Address         string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ProgmatCoinRemoveFromWhitelistRequest) Reset() {
	*x = ProgmatCoinRemoveFromWhitelistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgmatCoinRemoveFromWhitelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgmatCoinRemoveFromWhitelistRequest) ProtoMessage() {}

func (x *ProgmatCoinRemoveFromWhitelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgmatCoinRemoveFromWhitelistRequest.ProtoReflect.Descriptor instead.
func (*ProgmatCoinRemoveFromWhitelistRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{13}
}

func (x *ProgmatCoinRemoveFromWhitelistRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ProgmatCoinRemoveFromWhitelistRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *ProgmatCoinRemoveFromWhitelistRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ProgmatCoinRemoveFromWhitelistRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ProgmatCoinAddToBlacklistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId        string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	FeeRate         uint64 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Address         string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ProgmatCoinAddToBlacklistRequest) Reset() {
	*x = ProgmatCoinAddToBlacklistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgmatCoinAddToBlacklistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgmatCoinAddToBlacklistRequest) ProtoMessage() {}

func (x *ProgmatCoinAddToBlacklistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgmatCoinAddToBlacklistRequest.ProtoReflect.Descriptor instead.
func (*ProgmatCoinAddToBlacklistRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{14}
}

func (x *ProgmatCoinAddToBlacklistRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ProgmatCoinAddToBlacklistRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *ProgmatCoinAddToBlacklistRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ProgmatCoinAddToBlacklistRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ProgmatCoinRemoveFromBlacklistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId        string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	FeeRate         uint64 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Address         string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ProgmatCoinRemoveFromBlacklistRequest) Reset() {
	*x = ProgmatCoinRemoveFromBlacklistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgmatCoinRemoveFromBlacklistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgmatCoinRemoveFromBlacklistRequest) ProtoMessage() {}

func (x *ProgmatCoinRemoveFromBlacklistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgmatCoinRemoveFromBlacklistRequest.ProtoReflect.Descriptor instead.
func (*ProgmatCoinRemoveFromBlacklistRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{15}
}

func (x *ProgmatCoinRemoveFromBlacklistRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ProgmatCoinRemoveFromBlacklistRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *ProgmatCoinRemoveFromBlacklistRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ProgmatCoinRemoveFromBlacklistRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ProgmatCoinConfiscateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId           string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	FeeRate            uint64 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	ContractAddress    string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	BlackListedAccount string `protobuf:"bytes,4,opt,name=black_listed_account,json=blackListedAccount,proto3" json:"black_listed_account,omitempty"`
	ToAccount          string `protobuf:"bytes,5,opt,name=to_account,json=toAccount,proto3" json:"to_account,omitempty"`
	Amount             string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ProgmatCoinConfiscateRequest) Reset() {
	*x = ProgmatCoinConfiscateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgmatCoinConfiscateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgmatCoinConfiscateRequest) ProtoMessage() {}

func (x *ProgmatCoinConfiscateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgmatCoinConfiscateRequest.ProtoReflect.Descriptor instead.
func (*ProgmatCoinConfiscateRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{16}
}

func (x *ProgmatCoinConfiscateRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ProgmatCoinConfiscateRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *ProgmatCoinConfiscateRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *ProgmatCoinConfiscateRequest) GetBlackListedAccount() string {
	if x != nil {
		return x.BlackListedAccount
	}
	return ""
}

func (x *ProgmatCoinConfiscateRequest) GetToAccount() string {
	if x != nil {
		return x.ToAccount
	}
	return ""
}

func (x *ProgmatCoinConfiscateRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type ProgmatCoinPauseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId        string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	FeeRate         uint64 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (x *ProgmatCoinPauseRequest) Reset() {
	*x = ProgmatCoinPauseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgmatCoinPauseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgmatCoinPauseRequest) ProtoMessage() {}

func (x *ProgmatCoinPauseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgmatCoinPauseRequest.ProtoReflect.Descriptor instead.
func (*ProgmatCoinPauseRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{17}
}

func (x *ProgmatCoinPauseRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ProgmatCoinPauseRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *ProgmatCoinPauseRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

type ProgmatCoinUnpauseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId        string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	FeeRate         uint64 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (x *ProgmatCoinUnpauseRequest) Reset() {
	*x = ProgmatCoinUnpauseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgmatCoinUnpauseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgmatCoinUnpauseRequest) ProtoMessage() {}

func (x *ProgmatCoinUnpauseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgmatCoinUnpauseRequest.ProtoReflect.Descriptor instead.
func (*ProgmatCoinUnpauseRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP(), []int{18}
}

func (x *ProgmatCoinUnpauseRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ProgmatCoinUnpauseRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *ProgmatCoinUnpauseRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

var File_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto protoreflect.FileDescriptor

var file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2f, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x1a, 0x35, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e,
	0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x76, 0x31, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x69,
	0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76,
	0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x9c, 0x04, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0b, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x28, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x12, 0x4c, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x82, 0x01, 0x06, 0x10, 0x01, 0x20, 0x00,
	0x20, 0x02, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20,
	0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x83,
	0x01, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f,
	0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52,
	0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x7b, 0x0a, 0x11, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x5f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24,
	0x52, 0x0f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x87, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x58, 0x52, 0x50, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x17,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72,
	0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a,
	0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc8, 0x02,
	0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x73, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x31, 0x32, 0x7d, 0x24, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x33, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xf8, 0x01,
	0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49,
	0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49,
	0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xd6, 0x04, 0x0a, 0x1c, 0x50, 0x72, 0x6f,
	0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42,
	0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62,
	0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0a, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x28, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x0a, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x2a, 0x02, 0x10, 0x64, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6e, 0x65, 0x77, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x1a, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x6e, 0x65, 0x77, 0x57, 0x68, 0x69, 0x74, 0x65, 0x41, 0x6e, 0x64,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x73, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x73, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x22, 0xa2, 0x02, 0x0a, 0x21, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72,
	0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xba, 0x02, 0x0a, 0x21, 0x50, 0x72, 0x6f, 0x67, 0x6d,
	0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d,
	0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38,
	0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xfb, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69,
	0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52,
	0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x65, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xe1, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x42, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d,
	0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38,
	0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa,
	0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61,
	0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf2, 0x01, 0x0a, 0x25, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x65,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x20, 0x50,
	0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x65,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf2, 0x01, 0x0a, 0x25, 0x50,
	0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0xb8, 0x02, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x17, 0x50,
	0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47,
	0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x67,
	0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32,
	0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0xd2, 0x32, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x41, 0x50, 0x49, 0x12, 0x61, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x74,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x42, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x42, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12,
	0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x58, 0x52,
	0x50, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x58, 0x52, 0x50, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x74,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x44, 0x12, 0x33, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x4f, 0x53, 0x54, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x4f, 0x53, 0x54,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x4f, 0x53, 0x54, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85,
	0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x31, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2b, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52,
	0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x71, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x46, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x46, 0x65, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x46, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x53, 0x69, 0x67,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x6a, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x74,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a,
	0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x12, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x54, 0x78, 0x49, 0x44, 0x12, 0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x78, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x32, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x69, 0x74, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x37, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x74, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x22, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x26, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x65, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x65, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a,
	0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x27, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x36, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c,
	0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x37, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x0b, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x74, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a,
	0x15, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x6d,
	0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x67,
	0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x4d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x6d,
	0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a,
	0x1a, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x69, 0x6e, 0x74,
	0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6c, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x4d, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x74,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6c, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x75,
	0x72, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x74, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x42, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01,
	0x0a, 0x19, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64,
	0x54, 0x6f, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x54, 0x6f,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x8a, 0x01, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x38, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x74, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01,
	0x0a, 0x19, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64,
	0x54, 0x6f, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x54, 0x6f,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x8a, 0x01, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x38, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x74, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a,
	0x15, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x6d,
	0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x67, 0x6d,
	0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x67, 0x6d,
	0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2c, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x5e, 0x42, 0x0e, 0x54,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x50, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x69, 0x6e, 0x63,
	0x6f, 0x49, 0x6e, 0x63, 0x2f, 0x67, 0x65, 0x77, 0x2d, 0x6b, 0x6d, 0x70, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2f, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescOnce sync.Once
	file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescData = file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDesc
)

func file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescGZIP() []byte {
	file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescOnce.Do(func() {
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescData)
	})
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDescData
}

var file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_goTypes = []interface{}{
	(*CreateWalletRequest)(nil),                                   // 0: adamant.teller.v1.CreateWalletRequest
	(*InitializeXRPWalletRequest)(nil),                            // 1: adamant.teller.v1.InitializeXRPWalletRequest
	(*InitializeWalletRequest)(nil),                               // 2: adamant.teller.v1.InitializeWalletRequest
	(*SignTransactionRequest)(nil),                                // 3: adamant.teller.v1.SignTransactionRequest
	(*SignMessageRequest)(nil),                                    // 4: adamant.teller.v1.SignMessageRequest
	(*SignMessageResponse)(nil),                                   // 5: adamant.teller.v1.SignMessageResponse
	(*SendTransactionRequest)(nil),                                // 6: adamant.teller.v1.SendTransactionRequest
	(*ProgmatCoinInitializeRequest)(nil),                          // 7: adamant.teller.v1.ProgmatCoinInitializeRequest
	(*ProgmatCoinConfigureMinterRequest)(nil),                     // 8: adamant.teller.v1.ProgmatCoinConfigureMinterRequest
	(*ProgmatCoinMintAndTransferRequest)(nil),                     // 9: adamant.teller.v1.ProgmatCoinMintAndTransferRequest
	(*ProgmatCoinMintRequest)(nil),                                // 10: adamant.teller.v1.ProgmatCoinMintRequest
	(*ProgmatCoinBurnRequest)(nil),                                // 11: adamant.teller.v1.ProgmatCoinBurnRequest
	(*ProgmatCoinAddToWhitelistRequest)(nil),                      // 12: adamant.teller.v1.ProgmatCoinAddToWhitelistRequest
	(*ProgmatCoinRemoveFromWhitelistRequest)(nil),                 // 13: adamant.teller.v1.ProgmatCoinRemoveFromWhitelistRequest
	(*ProgmatCoinAddToBlacklistRequest)(nil),                      // 14: adamant.teller.v1.ProgmatCoinAddToBlacklistRequest
	(*ProgmatCoinRemoveFromBlacklistRequest)(nil),                 // 15: adamant.teller.v1.ProgmatCoinRemoveFromBlacklistRequest
	(*ProgmatCoinConfiscateRequest)(nil),                          // 16: adamant.teller.v1.ProgmatCoinConfiscateRequest
	(*ProgmatCoinPauseRequest)(nil),                               // 17: adamant.teller.v1.ProgmatCoinPauseRequest
	(*ProgmatCoinUnpauseRequest)(nil),                             // 18: adamant.teller.v1.ProgmatCoinUnpauseRequest
	(gincoincglobalv1.Coin)(0),                                    // 19: gincoinc.global.v1.Coin
	(adamantglobalv1.WalletType)(0),                               // 20: adamant.global.v1.WalletType
	(gincoincglobalv1.AddressType)(0),                             // 21: gincoinc.global.v1.AddressType
	(*adamantglobalv1.GetWalletRequest)(nil),                      // 22: adamant.global.v1.GetWalletRequest
	(*adamantglobalv1.ListWalletsRequest)(nil),                    // 23: adamant.global.v1.ListWalletsRequest
	(*adamantglobalv1.ListWalletsByFilterRequest)(nil),            // 24: adamant.global.v1.ListWalletsByFilterRequest
	(*adamantglobalv1.ListStakingWalletsByFilterRequest)(nil),     // 25: adamant.global.v1.ListStakingWalletsByFilterRequest
	(*adamantglobalv1.ListBaseWalletsRequest)(nil),                // 26: adamant.global.v1.ListBaseWalletsRequest
	(*adamantglobalv1.GetSpendableBalanceRequest)(nil),            // 27: adamant.global.v1.GetSpendableBalanceRequest
	(*adamantglobalv1.UpdateDestinationWalletIDRequest)(nil),      // 28: adamant.global.v1.UpdateDestinationWalletIDRequest
	(*adamantglobalv1.GetCosmosBalanceRequest)(nil),               // 29: adamant.global.v1.GetCosmosBalanceRequest
	(*adamantglobalv1.ListCosmosDelegateHistoriesRequest)(nil),    // 30: adamant.global.v1.ListCosmosDelegateHistoriesRequest
	(*adamantglobalv1.CreateAddressRequest)(nil),                  // 31: adamant.global.v1.CreateAddressRequest
	(*adamantglobalv1.CreateIOSTAccountRequest)(nil),              // 32: adamant.global.v1.CreateIOSTAccountRequest
	(*adamantglobalv1.ListSymbolChildAddressesRequest)(nil),       // 33: adamant.global.v1.ListSymbolChildAddressesRequest
	(*adamantglobalv1.GetAddressRequest)(nil),                     // 34: adamant.global.v1.GetAddressRequest
	(*adamantglobalv1.GetAddressByAddressRequest)(nil),            // 35: adamant.global.v1.GetAddressByAddressRequest
	(*adamantglobalv1.GetAddressByAddressCoinRequest)(nil),        // 36: adamant.global.v1.GetAddressByAddressCoinRequest
	(*adamantglobalv1.GetAddressByIndexRequest)(nil),              // 37: adamant.global.v1.GetAddressByIndexRequest
	(*adamantglobalv1.ListAddressesRequest)(nil),                  // 38: adamant.global.v1.ListAddressesRequest
	(*adamantglobalv1.ImportAddressRequest)(nil),                  // 39: adamant.global.v1.ImportAddressRequest
	(*adamantglobalv1.GetEthereumFeeAddressRequest)(nil),          // 40: adamant.global.v1.GetEthereumFeeAddressRequest
	(*adamantglobalv1.UpdateAddressBalanceRequest)(nil),           // 41: adamant.global.v1.UpdateAddressBalanceRequest
	(*adamantglobalv1.CreateTransactionRequest)(nil),              // 42: adamant.global.v1.CreateTransactionRequest
	(*adamantglobalv1.CancelTransactionRequest)(nil),              // 43: adamant.global.v1.CancelTransactionRequest
	(*adamantglobalv1.ReplaceTransactionRequest)(nil),             // 44: adamant.global.v1.ReplaceTransactionRequest
	(*adamantglobalv1.GetTransactionRequest)(nil),                 // 45: adamant.global.v1.GetTransactionRequest
	(*adamantglobalv1.GetTransactionByTxIDRequest)(nil),           // 46: adamant.global.v1.GetTransactionByTxIDRequest
	(*adamantglobalv1.ListTransactionsRequest)(nil),               // 47: adamant.global.v1.ListTransactionsRequest
	(*adamantglobalv1.ListTransactionsByFilterRequest)(nil),       // 48: adamant.global.v1.ListTransactionsByFilterRequest
	(*adamantglobalv1.ExitEthereumStakingValidatorsRequest)(nil),  // 49: adamant.global.v1.ExitEthereumStakingValidatorsRequest
	(*adamantglobalv1.ListTransfersRequest)(nil),                  // 50: adamant.global.v1.ListTransfersRequest
	(*adamantglobalv1.ListTransfersByFilterRequest)(nil),          // 51: adamant.global.v1.ListTransfersByFilterRequest
	(*adamantglobalv1.GetRateSnapshotRequest)(nil),                // 52: adamant.global.v1.GetRateSnapshotRequest
	(*adamantglobalv1.GetLatestRateSnapshotRequest)(nil),          // 53: adamant.global.v1.GetLatestRateSnapshotRequest
	(*adamantglobalv1.SetRatesRequest)(nil),                       // 54: adamant.global.v1.SetRatesRequest
	(*adamantglobalv1.CalculateFeeRequest)(nil),                   // 55: adamant.global.v1.CalculateFeeRequest
	(*adamantglobalv1.GetRecommendedFeeRateRequest)(nil),          // 56: adamant.global.v1.GetRecommendedFeeRateRequest
	(*adamantglobalv1.ValidateAddressRequest)(nil),                // 57: adamant.global.v1.ValidateAddressRequest
	(*adamantglobalv1.FlushBalanceRequest)(nil),                   // 58: adamant.global.v1.FlushBalanceRequest
	(*adamantglobalv1.ListAuditLogsRequest)(nil),                  // 59: adamant.global.v1.ListAuditLogsRequest
	(*adamantglobalv1.ListStakingHistoriesByFilterRequest)(nil),   // 60: adamant.global.v1.ListStakingHistoriesByFilterRequest
	(*adamantglobalv1.ListStakingValidatorsByFilterRequest)(nil),  // 61: adamant.global.v1.ListStakingValidatorsByFilterRequest
	(*adamantglobalv1.CreateWalletResponse)(nil),                  // 62: adamant.global.v1.CreateWalletResponse
	(*adamantglobalv1.Wallet)(nil),                                // 63: adamant.global.v1.Wallet
	(*adamantglobalv1.ListWalletsResponse)(nil),                   // 64: adamant.global.v1.ListWalletsResponse
	(*adamantglobalv1.ListStakingWalletsResponse)(nil),            // 65: adamant.global.v1.ListStakingWalletsResponse
	(*adamantglobalv1.ListBaseWalletsResponse)(nil),               // 66: adamant.global.v1.ListBaseWalletsResponse
	(*adamantglobalv1.GetSpendableBalanceResponse)(nil),           // 67: adamant.global.v1.GetSpendableBalanceResponse
	(*emptypb.Empty)(nil),                                         // 68: google.protobuf.Empty
	(*adamantglobalv1.GetCosmosBalanceResponse)(nil),              // 69: adamant.global.v1.GetCosmosBalanceResponse
	(*adamantglobalv1.ListCosmosDelegateHistoriesResponse)(nil),   // 70: adamant.global.v1.ListCosmosDelegateHistoriesResponse
	(*adamantglobalv1.CreateAddressResponse)(nil),                 // 71: adamant.global.v1.CreateAddressResponse
	(*adamantglobalv1.CreateIOSTAccountResponse)(nil),             // 72: adamant.global.v1.CreateIOSTAccountResponse
	(*adamantglobalv1.ListSymbolChildAddressesResponse)(nil),      // 73: adamant.global.v1.ListSymbolChildAddressesResponse
	(*adamantglobalv1.Address)(nil),                               // 74: adamant.global.v1.Address
	(*adamantglobalv1.ListAddressesResponse)(nil),                 // 75: adamant.global.v1.ListAddressesResponse
	(*adamantglobalv1.EthereumFeeAddress)(nil),                    // 76: adamant.global.v1.EthereumFeeAddress
	(*adamantglobalv1.CreateTransactionResponse)(nil),             // 77: adamant.global.v1.CreateTransactionResponse
	(*adamantglobalv1.SendTransactionResponse)(nil),               // 78: adamant.global.v1.SendTransactionResponse
	(*adamantglobalv1.ReplaceTransactionResponse)(nil),            // 79: adamant.global.v1.ReplaceTransactionResponse
	(*adamantglobalv1.Transaction)(nil),                           // 80: adamant.global.v1.Transaction
	(*adamantglobalv1.ListTransactionsResponse)(nil),              // 81: adamant.global.v1.ListTransactionsResponse
	(*adamantglobalv1.ExitEthereumStakingValidatorsResponse)(nil), // 82: adamant.global.v1.ExitEthereumStakingValidatorsResponse
	(*adamantglobalv1.ListTransfersResponse)(nil),                 // 83: adamant.global.v1.ListTransfersResponse
	(*adamantglobalv1.RateSnapshot)(nil),                          // 84: adamant.global.v1.RateSnapshot
	(*adamantglobalv1.SetRatesResponse)(nil),                      // 85: adamant.global.v1.SetRatesResponse
	(*adamantglobalv1.CalculateFeeResponse)(nil),                  // 86: adamant.global.v1.CalculateFeeResponse
	(*adamantglobalv1.GetRecommendedFeeRateResponse)(nil),         // 87: adamant.global.v1.GetRecommendedFeeRateResponse
	(*adamantglobalv1.ValidateAddressResponse)(nil),               // 88: adamant.global.v1.ValidateAddressResponse
	(*adamantglobalv1.FlushBalanceResponse)(nil),                  // 89: adamant.global.v1.FlushBalanceResponse
	(*adamantglobalv1.ListAuditLogsResponse)(nil),                 // 90: adamant.global.v1.ListAuditLogsResponse
	(*adamantglobalv1.ListStakingHistoriesResponse)(nil),          // 91: adamant.global.v1.ListStakingHistoriesResponse
	(*adamantglobalv1.ListStakingValidatorsResponse)(nil),         // 92: adamant.global.v1.ListStakingValidatorsResponse
}
var file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_depIdxs = []int32{
	19, // 0: adamant.teller.v1.CreateWalletRequest.coin:type_name -> gincoinc.global.v1.Coin
	20, // 1: adamant.teller.v1.CreateWalletRequest.wallet_type:type_name -> adamant.global.v1.WalletType
	21, // 2: adamant.teller.v1.CreateWalletRequest.address_type:type_name -> gincoinc.global.v1.AddressType
	0,  // 3: adamant.teller.v1.TellerAPI.CreateWallet:input_type -> adamant.teller.v1.CreateWalletRequest
	22, // 4: adamant.teller.v1.TellerAPI.GetWallet:input_type -> adamant.global.v1.GetWalletRequest
	23, // 5: adamant.teller.v1.TellerAPI.ListWallets:input_type -> adamant.global.v1.ListWalletsRequest
	24, // 6: adamant.teller.v1.TellerAPI.ListWalletsByFilter:input_type -> adamant.global.v1.ListWalletsByFilterRequest
	25, // 7: adamant.teller.v1.TellerAPI.ListStakingWalletsByFilter:input_type -> adamant.global.v1.ListStakingWalletsByFilterRequest
	26, // 8: adamant.teller.v1.TellerAPI.ListBaseWallets:input_type -> adamant.global.v1.ListBaseWalletsRequest
	27, // 9: adamant.teller.v1.TellerAPI.GetSpendableBalance:input_type -> adamant.global.v1.GetSpendableBalanceRequest
	1,  // 10: adamant.teller.v1.TellerAPI.InitializeXRPWallet:input_type -> adamant.teller.v1.InitializeXRPWalletRequest
	2,  // 11: adamant.teller.v1.TellerAPI.InitializeWallet:input_type -> adamant.teller.v1.InitializeWalletRequest
	28, // 12: adamant.teller.v1.TellerAPI.UpdateDestinationWalletID:input_type -> adamant.global.v1.UpdateDestinationWalletIDRequest
	29, // 13: adamant.teller.v1.TellerAPI.GetCosmosBalance:input_type -> adamant.global.v1.GetCosmosBalanceRequest
	30, // 14: adamant.teller.v1.TellerAPI.ListCosmosDelegateHistories:input_type -> adamant.global.v1.ListCosmosDelegateHistoriesRequest
	31, // 15: adamant.teller.v1.TellerAPI.CreateAddress:input_type -> adamant.global.v1.CreateAddressRequest
	32, // 16: adamant.teller.v1.TellerAPI.CreateIOSTAccount:input_type -> adamant.global.v1.CreateIOSTAccountRequest
	33, // 17: adamant.teller.v1.TellerAPI.ListSymbolChildAddresses:input_type -> adamant.global.v1.ListSymbolChildAddressesRequest
	34, // 18: adamant.teller.v1.TellerAPI.GetAddress:input_type -> adamant.global.v1.GetAddressRequest
	35, // 19: adamant.teller.v1.TellerAPI.GetAddressByAddress:input_type -> adamant.global.v1.GetAddressByAddressRequest
	36, // 20: adamant.teller.v1.TellerAPI.GetAddressByAddressCoin:input_type -> adamant.global.v1.GetAddressByAddressCoinRequest
	37, // 21: adamant.teller.v1.TellerAPI.GetAddressByIndex:input_type -> adamant.global.v1.GetAddressByIndexRequest
	38, // 22: adamant.teller.v1.TellerAPI.ListAddresses:input_type -> adamant.global.v1.ListAddressesRequest
	39, // 23: adamant.teller.v1.TellerAPI.ImportAddress:input_type -> adamant.global.v1.ImportAddressRequest
	40, // 24: adamant.teller.v1.TellerAPI.GetEthereumFeeAddress:input_type -> adamant.global.v1.GetEthereumFeeAddressRequest
	41, // 25: adamant.teller.v1.TellerAPI.UpdateAddressBalance:input_type -> adamant.global.v1.UpdateAddressBalanceRequest
	42, // 26: adamant.teller.v1.TellerAPI.CreateTransaction:input_type -> adamant.global.v1.CreateTransactionRequest
	3,  // 27: adamant.teller.v1.TellerAPI.SignTransaction:input_type -> adamant.teller.v1.SignTransactionRequest
	6,  // 28: adamant.teller.v1.TellerAPI.SendTransaction:input_type -> adamant.teller.v1.SendTransactionRequest
	43, // 29: adamant.teller.v1.TellerAPI.CancelTransaction:input_type -> adamant.global.v1.CancelTransactionRequest
	44, // 30: adamant.teller.v1.TellerAPI.ReplaceTransaction:input_type -> adamant.global.v1.ReplaceTransactionRequest
	45, // 31: adamant.teller.v1.TellerAPI.GetTransaction:input_type -> adamant.global.v1.GetTransactionRequest
	46, // 32: adamant.teller.v1.TellerAPI.GetTransactionByTxID:input_type -> adamant.global.v1.GetTransactionByTxIDRequest
	47, // 33: adamant.teller.v1.TellerAPI.ListTransactions:input_type -> adamant.global.v1.ListTransactionsRequest
	48, // 34: adamant.teller.v1.TellerAPI.ListTransactionsByFilter:input_type -> adamant.global.v1.ListTransactionsByFilterRequest
	49, // 35: adamant.teller.v1.TellerAPI.ExitEthereumStakingValidators:input_type -> adamant.global.v1.ExitEthereumStakingValidatorsRequest
	50, // 36: adamant.teller.v1.TellerAPI.ListTransfers:input_type -> adamant.global.v1.ListTransfersRequest
	51, // 37: adamant.teller.v1.TellerAPI.ListTransfersByFilter:input_type -> adamant.global.v1.ListTransfersByFilterRequest
	52, // 38: adamant.teller.v1.TellerAPI.GetRateSnapshot:input_type -> adamant.global.v1.GetRateSnapshotRequest
	53, // 39: adamant.teller.v1.TellerAPI.GetLatestRateSnapshot:input_type -> adamant.global.v1.GetLatestRateSnapshotRequest
	54, // 40: adamant.teller.v1.TellerAPI.SetRates:input_type -> adamant.global.v1.SetRatesRequest
	55, // 41: adamant.teller.v1.TellerAPI.CalculateFee:input_type -> adamant.global.v1.CalculateFeeRequest
	56, // 42: adamant.teller.v1.TellerAPI.GetRecommendedFeeRate:input_type -> adamant.global.v1.GetRecommendedFeeRateRequest
	57, // 43: adamant.teller.v1.TellerAPI.ValidateAddress:input_type -> adamant.global.v1.ValidateAddressRequest
	58, // 44: adamant.teller.v1.TellerAPI.FlushBalance:input_type -> adamant.global.v1.FlushBalanceRequest
	59, // 45: adamant.teller.v1.TellerAPI.ListAuditLogs:input_type -> adamant.global.v1.ListAuditLogsRequest
	60, // 46: adamant.teller.v1.TellerAPI.ListStakingHistoriesByFilter:input_type -> adamant.global.v1.ListStakingHistoriesByFilterRequest
	61, // 47: adamant.teller.v1.TellerAPI.ListStakingValidatorsByFilter:input_type -> adamant.global.v1.ListStakingValidatorsByFilterRequest
	4,  // 48: adamant.teller.v1.TellerAPI.SignMessage:input_type -> adamant.teller.v1.SignMessageRequest
	7,  // 49: adamant.teller.v1.TellerAPI.ProgmatCoinInitialize:input_type -> adamant.teller.v1.ProgmatCoinInitializeRequest
	8,  // 50: adamant.teller.v1.TellerAPI.ProgmatCoinConfigureMinter:input_type -> adamant.teller.v1.ProgmatCoinConfigureMinterRequest
	9,  // 51: adamant.teller.v1.TellerAPI.ProgmatCoinMintAndTransfer:input_type -> adamant.teller.v1.ProgmatCoinMintAndTransferRequest
	10, // 52: adamant.teller.v1.TellerAPI.ProgmatCoinMint:input_type -> adamant.teller.v1.ProgmatCoinMintRequest
	11, // 53: adamant.teller.v1.TellerAPI.ProgmatCoinBurn:input_type -> adamant.teller.v1.ProgmatCoinBurnRequest
	12, // 54: adamant.teller.v1.TellerAPI.ProgmatCoinAddToWhitelist:input_type -> adamant.teller.v1.ProgmatCoinAddToWhitelistRequest
	13, // 55: adamant.teller.v1.TellerAPI.ProgmatCoinRemoveFromWhitelist:input_type -> adamant.teller.v1.ProgmatCoinRemoveFromWhitelistRequest
	14, // 56: adamant.teller.v1.TellerAPI.ProgmatCoinAddToBlacklist:input_type -> adamant.teller.v1.ProgmatCoinAddToBlacklistRequest
	15, // 57: adamant.teller.v1.TellerAPI.ProgmatCoinRemoveFromBlacklist:input_type -> adamant.teller.v1.ProgmatCoinRemoveFromBlacklistRequest
	16, // 58: adamant.teller.v1.TellerAPI.ProgmatCoinConfiscate:input_type -> adamant.teller.v1.ProgmatCoinConfiscateRequest
	17, // 59: adamant.teller.v1.TellerAPI.ProgmatCoinPause:input_type -> adamant.teller.v1.ProgmatCoinPauseRequest
	18, // 60: adamant.teller.v1.TellerAPI.ProgmatCoinUnpause:input_type -> adamant.teller.v1.ProgmatCoinUnpauseRequest
	62, // 61: adamant.teller.v1.TellerAPI.CreateWallet:output_type -> adamant.global.v1.CreateWalletResponse
	63, // 62: adamant.teller.v1.TellerAPI.GetWallet:output_type -> adamant.global.v1.Wallet
	64, // 63: adamant.teller.v1.TellerAPI.ListWallets:output_type -> adamant.global.v1.ListWalletsResponse
	64, // 64: adamant.teller.v1.TellerAPI.ListWalletsByFilter:output_type -> adamant.global.v1.ListWalletsResponse
	65, // 65: adamant.teller.v1.TellerAPI.ListStakingWalletsByFilter:output_type -> adamant.global.v1.ListStakingWalletsResponse
	66, // 66: adamant.teller.v1.TellerAPI.ListBaseWallets:output_type -> adamant.global.v1.ListBaseWalletsResponse
	67, // 67: adamant.teller.v1.TellerAPI.GetSpendableBalance:output_type -> adamant.global.v1.GetSpendableBalanceResponse
	68, // 68: adamant.teller.v1.TellerAPI.InitializeXRPWallet:output_type -> google.protobuf.Empty
	68, // 69: adamant.teller.v1.TellerAPI.InitializeWallet:output_type -> google.protobuf.Empty
	68, // 70: adamant.teller.v1.TellerAPI.UpdateDestinationWalletID:output_type -> google.protobuf.Empty
	69, // 71: adamant.teller.v1.TellerAPI.GetCosmosBalance:output_type -> adamant.global.v1.GetCosmosBalanceResponse
	70, // 72: adamant.teller.v1.TellerAPI.ListCosmosDelegateHistories:output_type -> adamant.global.v1.ListCosmosDelegateHistoriesResponse
	71, // 73: adamant.teller.v1.TellerAPI.CreateAddress:output_type -> adamant.global.v1.CreateAddressResponse
	72, // 74: adamant.teller.v1.TellerAPI.CreateIOSTAccount:output_type -> adamant.global.v1.CreateIOSTAccountResponse
	73, // 75: adamant.teller.v1.TellerAPI.ListSymbolChildAddresses:output_type -> adamant.global.v1.ListSymbolChildAddressesResponse
	74, // 76: adamant.teller.v1.TellerAPI.GetAddress:output_type -> adamant.global.v1.Address
	74, // 77: adamant.teller.v1.TellerAPI.GetAddressByAddress:output_type -> adamant.global.v1.Address
	74, // 78: adamant.teller.v1.TellerAPI.GetAddressByAddressCoin:output_type -> adamant.global.v1.Address
	74, // 79: adamant.teller.v1.TellerAPI.GetAddressByIndex:output_type -> adamant.global.v1.Address
	75, // 80: adamant.teller.v1.TellerAPI.ListAddresses:output_type -> adamant.global.v1.ListAddressesResponse
	68, // 81: adamant.teller.v1.TellerAPI.ImportAddress:output_type -> google.protobuf.Empty
	76, // 82: adamant.teller.v1.TellerAPI.GetEthereumFeeAddress:output_type -> adamant.global.v1.EthereumFeeAddress
	68, // 83: adamant.teller.v1.TellerAPI.UpdateAddressBalance:output_type -> google.protobuf.Empty
	77, // 84: adamant.teller.v1.TellerAPI.CreateTransaction:output_type -> adamant.global.v1.CreateTransactionResponse
	68, // 85: adamant.teller.v1.TellerAPI.SignTransaction:output_type -> google.protobuf.Empty
	78, // 86: adamant.teller.v1.TellerAPI.SendTransaction:output_type -> adamant.global.v1.SendTransactionResponse
	68, // 87: adamant.teller.v1.TellerAPI.CancelTransaction:output_type -> google.protobuf.Empty
	79, // 88: adamant.teller.v1.TellerAPI.ReplaceTransaction:output_type -> adamant.global.v1.ReplaceTransactionResponse
	80, // 89: adamant.teller.v1.TellerAPI.GetTransaction:output_type -> adamant.global.v1.Transaction
	80, // 90: adamant.teller.v1.TellerAPI.GetTransactionByTxID:output_type -> adamant.global.v1.Transaction
	81, // 91: adamant.teller.v1.TellerAPI.ListTransactions:output_type -> adamant.global.v1.ListTransactionsResponse
	81, // 92: adamant.teller.v1.TellerAPI.ListTransactionsByFilter:output_type -> adamant.global.v1.ListTransactionsResponse
	82, // 93: adamant.teller.v1.TellerAPI.ExitEthereumStakingValidators:output_type -> adamant.global.v1.ExitEthereumStakingValidatorsResponse
	83, // 94: adamant.teller.v1.TellerAPI.ListTransfers:output_type -> adamant.global.v1.ListTransfersResponse
	83, // 95: adamant.teller.v1.TellerAPI.ListTransfersByFilter:output_type -> adamant.global.v1.ListTransfersResponse
	84, // 96: adamant.teller.v1.TellerAPI.GetRateSnapshot:output_type -> adamant.global.v1.RateSnapshot
	84, // 97: adamant.teller.v1.TellerAPI.GetLatestRateSnapshot:output_type -> adamant.global.v1.RateSnapshot
	85, // 98: adamant.teller.v1.TellerAPI.SetRates:output_type -> adamant.global.v1.SetRatesResponse
	86, // 99: adamant.teller.v1.TellerAPI.CalculateFee:output_type -> adamant.global.v1.CalculateFeeResponse
	87, // 100: adamant.teller.v1.TellerAPI.GetRecommendedFeeRate:output_type -> adamant.global.v1.GetRecommendedFeeRateResponse
	88, // 101: adamant.teller.v1.TellerAPI.ValidateAddress:output_type -> adamant.global.v1.ValidateAddressResponse
	89, // 102: adamant.teller.v1.TellerAPI.FlushBalance:output_type -> adamant.global.v1.FlushBalanceResponse
	90, // 103: adamant.teller.v1.TellerAPI.ListAuditLogs:output_type -> adamant.global.v1.ListAuditLogsResponse
	91, // 104: adamant.teller.v1.TellerAPI.ListStakingHistoriesByFilter:output_type -> adamant.global.v1.ListStakingHistoriesResponse
	92, // 105: adamant.teller.v1.TellerAPI.ListStakingValidatorsByFilter:output_type -> adamant.global.v1.ListStakingValidatorsResponse
	5,  // 106: adamant.teller.v1.TellerAPI.SignMessage:output_type -> adamant.teller.v1.SignMessageResponse
	77, // 107: adamant.teller.v1.TellerAPI.ProgmatCoinInitialize:output_type -> adamant.global.v1.CreateTransactionResponse
	77, // 108: adamant.teller.v1.TellerAPI.ProgmatCoinConfigureMinter:output_type -> adamant.global.v1.CreateTransactionResponse
	77, // 109: adamant.teller.v1.TellerAPI.ProgmatCoinMintAndTransfer:output_type -> adamant.global.v1.CreateTransactionResponse
	77, // 110: adamant.teller.v1.TellerAPI.ProgmatCoinMint:output_type -> adamant.global.v1.CreateTransactionResponse
	77, // 111: adamant.teller.v1.TellerAPI.ProgmatCoinBurn:output_type -> adamant.global.v1.CreateTransactionResponse
	77, // 112: adamant.teller.v1.TellerAPI.ProgmatCoinAddToWhitelist:output_type -> adamant.global.v1.CreateTransactionResponse
	77, // 113: adamant.teller.v1.TellerAPI.ProgmatCoinRemoveFromWhitelist:output_type -> adamant.global.v1.CreateTransactionResponse
	77, // 114: adamant.teller.v1.TellerAPI.ProgmatCoinAddToBlacklist:output_type -> adamant.global.v1.CreateTransactionResponse
	77, // 115: adamant.teller.v1.TellerAPI.ProgmatCoinRemoveFromBlacklist:output_type -> adamant.global.v1.CreateTransactionResponse
	77, // 116: adamant.teller.v1.TellerAPI.ProgmatCoinConfiscate:output_type -> adamant.global.v1.CreateTransactionResponse
	77, // 117: adamant.teller.v1.TellerAPI.ProgmatCoinPause:output_type -> adamant.global.v1.CreateTransactionResponse
	77, // 118: adamant.teller.v1.TellerAPI.ProgmatCoinUnpause:output_type -> adamant.global.v1.CreateTransactionResponse
	61, // [61:119] is the sub-list for method output_type
	3,  // [3:61] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_init() }
func file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_init() {
	if File_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeXRPWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgmatCoinInitializeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgmatCoinConfigureMinterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgmatCoinMintAndTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgmatCoinMintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgmatCoinBurnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgmatCoinAddToWhitelistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgmatCoinRemoveFromWhitelistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgmatCoinAddToBlacklistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgmatCoinRemoveFromBlacklistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgmatCoinConfiscateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgmatCoinPauseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgmatCoinUnpauseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_goTypes,
		DependencyIndexes: file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_depIdxs,
		MessageInfos:      file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_msgTypes,
	}.Build()
	File_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto = out.File
	file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_rawDesc = nil
	file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_goTypes = nil
	file_gincoinc_adamant_teller_v1_adamanttellerv1_teller_api_proto_depIdxs = nil
}
