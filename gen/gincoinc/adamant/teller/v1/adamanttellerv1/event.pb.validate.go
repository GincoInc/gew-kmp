// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gincoinc/adamant/teller/v1/adamanttellerv1/event.proto

package adamanttellerv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	gincoincglobalv1 "github.com/GincoInc/gew-kmp/gen/gincoinc/global/v1/gincoincglobalv1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.TransactionState(0)

	_ = gincoincglobalv1.TransactionResult(0)

	_ = gincoincglobalv1.TransferType(0)

	_ = gincoincglobalv1.CosmosMsgType(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.TransactionState(0)

	_ = gincoincglobalv1.TransactionResult(0)

	_ = gincoincglobalv1.TransferType(0)

	_ = gincoincglobalv1.EthereumStakingRewardLayerType(0)
)

// Validate checks the field values on TransferUpdated with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in TransferUpdatedMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *TransferUpdated) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WalletId

	// no validation rules for TransferId

	// no validation rules for Coin

	// no validation rules for TxId

	// no validation rules for TxIndex

	// no validation rules for Value

	// no validation rules for StringValue

	// no validation rules for JpyRate

	// no validation rules for Address

	// no validation rules for DestinationTag

	// no validation rules for MemoId

	// no validation rules for Message

	// no validation rules for State

	// no validation rules for Result

	// no validation rules for TransferType

	// no validation rules for From

	// no validation rules for To

	if v, ok := interface{}(m.GetTime()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = TransferUpdatedValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	// no validation rules for EventId

	// no validation rules for Fee

	// no validation rules for StringFee

	if v, ok := interface{}(m.GetCosmosSpecific()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = TransferUpdatedValidationError{
				field:  "CosmosSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return TransferUpdatedMultiError(errors)
	}
	return nil
}

// TransferUpdatedMultiError is an error wrapping multiple validation errors
// returned by TransferUpdated.Validate(true) if the designated constraints
// aren't met.
type TransferUpdatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferUpdatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferUpdatedMultiError) AllErrors() []error { return m }

// TransferUpdatedValidationError is the validation error returned by
// TransferUpdated.Validate if the designated constraints aren't met.
type TransferUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferUpdatedValidationError) ErrorName() string { return "TransferUpdatedValidationError" }

// Error satisfies the builtin error interface
func (e TransferUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferUpdatedValidationError{}

// Validate checks the field values on TransferUpdateCosmosSpecific with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in TransferUpdateCosmosSpecificMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *TransferUpdateCosmosSpecific) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for DelegateAmount

	// no validation rules for RewardAmount

	if len(errors) > 0 {
		return TransferUpdateCosmosSpecificMultiError(errors)
	}
	return nil
}

// TransferUpdateCosmosSpecificMultiError is an error wrapping multiple
// validation errors returned by TransferUpdateCosmosSpecific.Validate(true)
// if the designated constraints aren't met.
type TransferUpdateCosmosSpecificMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferUpdateCosmosSpecificMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferUpdateCosmosSpecificMultiError) AllErrors() []error { return m }

// TransferUpdateCosmosSpecificValidationError is the validation error returned
// by TransferUpdateCosmosSpecific.Validate if the designated constraints
// aren't met.
type TransferUpdateCosmosSpecificValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferUpdateCosmosSpecificValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferUpdateCosmosSpecificValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferUpdateCosmosSpecificValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferUpdateCosmosSpecificValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferUpdateCosmosSpecificValidationError) ErrorName() string {
	return "TransferUpdateCosmosSpecificValidationError"
}

// Error satisfies the builtin error interface
func (e TransferUpdateCosmosSpecificValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferUpdateCosmosSpecific.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferUpdateCosmosSpecificValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferUpdateCosmosSpecificValidationError{}

// Validate checks the field values on TransferUpdateEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in TransferUpdateEventMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *TransferUpdateEvent) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for WalletId

	// no validation rules for Coin

	// no validation rules for TxId

	// no validation rules for TxIndex

	// no validation rules for Value

	// no validation rules for StringValue

	// no validation rules for JpyRate

	// no validation rules for Address

	// no validation rules for DestinationTag

	// no validation rules for MemoId

	// no validation rules for State

	// no validation rules for Result

	// no validation rules for TransferType

	if v, ok := interface{}(m.GetTime()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = TransferUpdateEventValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return TransferUpdateEventMultiError(errors)
	}
	return nil
}

// TransferUpdateEventMultiError is an error wrapping multiple validation
// errors returned by TransferUpdateEvent.Validate(true) if the designated
// constraints aren't met.
type TransferUpdateEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferUpdateEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferUpdateEventMultiError) AllErrors() []error { return m }

// TransferUpdateEventValidationError is the validation error returned by
// TransferUpdateEvent.Validate if the designated constraints aren't met.
type TransferUpdateEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferUpdateEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferUpdateEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferUpdateEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferUpdateEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferUpdateEventValidationError) ErrorName() string {
	return "TransferUpdateEventValidationError"
}

// Error satisfies the builtin error interface
func (e TransferUpdateEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferUpdateEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferUpdateEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferUpdateEventValidationError{}

// Validate checks the field values on EthereumStakingReward with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in EthereumStakingRewardMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *EthereumStakingReward) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for WithdrawalIndex

	// no validation rules for BlockNumber

	if v, ok := interface{}(m.GetBlockTime()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = EthereumStakingRewardValidationError{
				field:  "BlockTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	// no validation rules for ValidatorIndex

	// no validation rules for Address

	// no validation rules for Value

	if !_EthereumStakingReward_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := EthereumStakingRewardValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for EthereumStakingRewardLayerType

	// no validation rules for StringValue

	if len(errors) > 0 {
		return EthereumStakingRewardMultiError(errors)
	}
	return nil
}

// EthereumStakingRewardMultiError is an error wrapping multiple validation
// errors returned by EthereumStakingReward.Validate(true) if the designated
// constraints aren't met.
type EthereumStakingRewardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EthereumStakingRewardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EthereumStakingRewardMultiError) AllErrors() []error { return m }

// EthereumStakingRewardValidationError is the validation error returned by
// EthereumStakingReward.Validate if the designated constraints aren't met.
type EthereumStakingRewardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EthereumStakingRewardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EthereumStakingRewardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EthereumStakingRewardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EthereumStakingRewardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EthereumStakingRewardValidationError) ErrorName() string {
	return "EthereumStakingRewardValidationError"
}

// Error satisfies the builtin error interface
func (e EthereumStakingRewardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEthereumStakingReward.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EthereumStakingRewardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EthereumStakingRewardValidationError{}

var _EthereumStakingReward_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")
