// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: gincoinc/adamant/teller/v1/adamanttellerv1/teller_api.proto

package adamanttellerv1

import (
	context "context"
	adamantglobalv1 "github.com/GincoInc/gew-kmp/gen/gincoinc/adamant/global/v1/adamantglobalv1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TellerAPIClient is the client API for TellerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TellerAPIClient interface {
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateWalletResponse, error)
	// Get wallet information. the wallet model includes balance, address etc.
	GetWallet(ctx context.Context, in *adamantglobalv1.GetWalletRequest, opts ...grpc.CallOption) (*adamantglobalv1.Wallet, error)
	ListWallets(ctx context.Context, in *adamantglobalv1.ListWalletsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListWalletsResponse, error)
	ListWalletsByFilter(ctx context.Context, in *adamantglobalv1.ListWalletsByFilterRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListWalletsResponse, error)
	ListStakingWalletsByFilter(ctx context.Context, in *adamantglobalv1.ListStakingWalletsByFilterRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListStakingWalletsResponse, error)
	ListBaseWallets(ctx context.Context, in *adamantglobalv1.ListBaseWalletsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListBaseWalletsResponse, error)
	GetSpendableBalance(ctx context.Context, in *adamantglobalv1.GetSpendableBalanceRequest, opts ...grpc.CallOption) (*adamantglobalv1.GetSpendableBalanceResponse, error)
	InitializeXRPWallet(ctx context.Context, in *InitializeXRPWalletRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InitializeWallet(ctx context.Context, in *InitializeWalletRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateDestinationWalletID(ctx context.Context, in *adamantglobalv1.UpdateDestinationWalletIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCosmosBalance(ctx context.Context, in *adamantglobalv1.GetCosmosBalanceRequest, opts ...grpc.CallOption) (*adamantglobalv1.GetCosmosBalanceResponse, error)
	ListCosmosDelegateHistories(ctx context.Context, in *adamantglobalv1.ListCosmosDelegateHistoriesRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListCosmosDelegateHistoriesResponse, error)
	// Create a new address for an existing wallet
	CreateAddress(ctx context.Context, in *adamantglobalv1.CreateAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateAddressResponse, error)
	CreateIOSTAccount(ctx context.Context, in *adamantglobalv1.CreateIOSTAccountRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateIOSTAccountResponse, error)
	ListSymbolChildAddresses(ctx context.Context, in *adamantglobalv1.ListSymbolChildAddressesRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListSymbolChildAddressesResponse, error)
	GetAddress(ctx context.Context, in *adamantglobalv1.GetAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error)
	GetAddressByAddress(ctx context.Context, in *adamantglobalv1.GetAddressByAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error)
	GetAddressByAddressCoin(ctx context.Context, in *adamantglobalv1.GetAddressByAddressCoinRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error)
	GetAddressByIndex(ctx context.Context, in *adamantglobalv1.GetAddressByIndexRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error)
	ListAddresses(ctx context.Context, in *adamantglobalv1.ListAddressesRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListAddressesResponse, error)
	ImportAddress(ctx context.Context, in *adamantglobalv1.ImportAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get an address which hold ETH for ethereum wallet/address creation etc
	GetEthereumFeeAddress(ctx context.Context, in *adamantglobalv1.GetEthereumFeeAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.EthereumFeeAddress, error)
	UpdateAddressBalance(ctx context.Context, in *adamantglobalv1.UpdateAddressBalanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListColdFeeDepositAddresses(ctx context.Context, in *ListColdFeeDepositAddressesRequest, opts ...grpc.CallOption) (*ListColdFeeDepositAddressesResponse, error)
	ListHotFeeDepositAddresses(ctx context.Context, in *ListHotFeeDepositAddressesRequest, opts ...grpc.CallOption) (*ListHotFeeDepositAddressesResponse, error)
	CreateTransaction(ctx context.Context, in *adamantglobalv1.CreateTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error)
	SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.SendTransactionResponse, error)
	ResendTransaction(ctx context.Context, in *ResendTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.ResendTransactionResponse, error)
	CancelTransaction(ctx context.Context, in *adamantglobalv1.CancelTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReplaceTransaction(ctx context.Context, in *adamantglobalv1.ReplaceTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.ReplaceTransactionResponse, error)
	IsTransactionReplaceable(ctx context.Context, in *adamantglobalv1.IsTransactionReplaceableRequest, opts ...grpc.CallOption) (*adamantglobalv1.IsTransactionReplaceableResponse, error)
	GetTransaction(ctx context.Context, in *adamantglobalv1.GetTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.Transaction, error)
	GetTransactionByTxID(ctx context.Context, in *adamantglobalv1.GetTransactionByTxIDRequest, opts ...grpc.CallOption) (*adamantglobalv1.Transaction, error)
	ListTransactions(ctx context.Context, in *adamantglobalv1.ListTransactionsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransactionsResponse, error)
	ListTransactionsByFilter(ctx context.Context, in *adamantglobalv1.ListTransactionsByFilterRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransactionsResponse, error)
	// Exit ethereum validators
	ExitEthereumStakingValidators(ctx context.Context, in *adamantglobalv1.ExitEthereumStakingValidatorsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ExitEthereumStakingValidatorsResponse, error)
	// List transfers for a given wallet. Ordered by update time desc
	ListTransfers(ctx context.Context, in *adamantglobalv1.ListTransfersRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransfersResponse, error)
	ListTransfersByFilter(ctx context.Context, in *adamantglobalv1.ListTransfersByFilterRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransfersResponse, error)
	// Get rates by snapshot id
	GetRateSnapshot(ctx context.Context, in *adamantglobalv1.GetRateSnapshotRequest, opts ...grpc.CallOption) (*adamantglobalv1.RateSnapshot, error)
	// Get latest rates set to your organization
	GetLatestRateSnapshot(ctx context.Context, in *adamantglobalv1.GetLatestRateSnapshotRequest, opts ...grpc.CallOption) (*adamantglobalv1.RateSnapshot, error)
	// Set rates to your organization
	SetRates(ctx context.Context, in *adamantglobalv1.SetRatesRequest, opts ...grpc.CallOption) (*adamantglobalv1.SetRatesResponse, error)
	CalculateFee(ctx context.Context, in *adamantglobalv1.CalculateFeeRequest, opts ...grpc.CallOption) (*adamantglobalv1.CalculateFeeResponse, error)
	GetRecommendedFeeRate(ctx context.Context, in *adamantglobalv1.GetRecommendedFeeRateRequest, opts ...grpc.CallOption) (*adamantglobalv1.GetRecommendedFeeRateResponse, error)
	// Validate format of given address
	ValidateAddress(ctx context.Context, in *adamantglobalv1.ValidateAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.ValidateAddressResponse, error)
	FlushBalance(ctx context.Context, in *adamantglobalv1.FlushBalanceRequest, opts ...grpc.CallOption) (*adamantglobalv1.FlushBalanceResponse, error)
	ListAuditLogs(ctx context.Context, in *adamantglobalv1.ListAuditLogsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListAuditLogsResponse, error)
	ListStakingHistoriesByFilter(ctx context.Context, in *adamantglobalv1.ListStakingHistoriesByFilterRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListStakingHistoriesResponse, error)
	ListStakingValidatorsByFilter(ctx context.Context, in *adamantglobalv1.ListStakingValidatorsByFilterRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListStakingValidatorsResponse, error)
	SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignMessageResponse, error)
	// ProgmatCoin
	ProgmatCoinInitialize(ctx context.Context, in *ProgmatCoinInitializeRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinConfigureMinter(ctx context.Context, in *ProgmatCoinConfigureMinterRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinMintAndTransfer(ctx context.Context, in *ProgmatCoinMintAndTransferRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinMint(ctx context.Context, in *ProgmatCoinMintRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinBurn(ctx context.Context, in *ProgmatCoinBurnRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinAddToWhitelist(ctx context.Context, in *ProgmatCoinAddToWhitelistRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinRemoveFromWhitelist(ctx context.Context, in *ProgmatCoinRemoveFromWhitelistRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinAddToBlacklist(ctx context.Context, in *ProgmatCoinAddToBlacklistRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinRemoveFromBlacklist(ctx context.Context, in *ProgmatCoinRemoveFromBlacklistRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinConfiscate(ctx context.Context, in *ProgmatCoinConfiscateRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinPause(ctx context.Context, in *ProgmatCoinPauseRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinUnpause(ctx context.Context, in *ProgmatCoinUnpauseRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error)
}

type tellerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTellerAPIClient(cc grpc.ClientConnInterface) TellerAPIClient {
	return &tellerAPIClient{cc}
}

func (c *tellerAPIClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateWalletResponse, error) {
	out := new(adamantglobalv1.CreateWalletResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetWallet(ctx context.Context, in *adamantglobalv1.GetWalletRequest, opts ...grpc.CallOption) (*adamantglobalv1.Wallet, error) {
	out := new(adamantglobalv1.Wallet)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListWallets(ctx context.Context, in *adamantglobalv1.ListWalletsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListWalletsResponse, error) {
	out := new(adamantglobalv1.ListWalletsResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListWalletsByFilter(ctx context.Context, in *adamantglobalv1.ListWalletsByFilterRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListWalletsResponse, error) {
	out := new(adamantglobalv1.ListWalletsResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListWalletsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListStakingWalletsByFilter(ctx context.Context, in *adamantglobalv1.ListStakingWalletsByFilterRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListStakingWalletsResponse, error) {
	out := new(adamantglobalv1.ListStakingWalletsResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListStakingWalletsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListBaseWallets(ctx context.Context, in *adamantglobalv1.ListBaseWalletsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListBaseWalletsResponse, error) {
	out := new(adamantglobalv1.ListBaseWalletsResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListBaseWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetSpendableBalance(ctx context.Context, in *adamantglobalv1.GetSpendableBalanceRequest, opts ...grpc.CallOption) (*adamantglobalv1.GetSpendableBalanceResponse, error) {
	out := new(adamantglobalv1.GetSpendableBalanceResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetSpendableBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) InitializeXRPWallet(ctx context.Context, in *InitializeXRPWalletRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/InitializeXRPWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) InitializeWallet(ctx context.Context, in *InitializeWalletRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/InitializeWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) UpdateDestinationWalletID(ctx context.Context, in *adamantglobalv1.UpdateDestinationWalletIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/UpdateDestinationWalletID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetCosmosBalance(ctx context.Context, in *adamantglobalv1.GetCosmosBalanceRequest, opts ...grpc.CallOption) (*adamantglobalv1.GetCosmosBalanceResponse, error) {
	out := new(adamantglobalv1.GetCosmosBalanceResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetCosmosBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListCosmosDelegateHistories(ctx context.Context, in *adamantglobalv1.ListCosmosDelegateHistoriesRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListCosmosDelegateHistoriesResponse, error) {
	out := new(adamantglobalv1.ListCosmosDelegateHistoriesResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListCosmosDelegateHistories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) CreateAddress(ctx context.Context, in *adamantglobalv1.CreateAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateAddressResponse, error) {
	out := new(adamantglobalv1.CreateAddressResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CreateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) CreateIOSTAccount(ctx context.Context, in *adamantglobalv1.CreateIOSTAccountRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateIOSTAccountResponse, error) {
	out := new(adamantglobalv1.CreateIOSTAccountResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CreateIOSTAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListSymbolChildAddresses(ctx context.Context, in *adamantglobalv1.ListSymbolChildAddressesRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListSymbolChildAddressesResponse, error) {
	out := new(adamantglobalv1.ListSymbolChildAddressesResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListSymbolChildAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetAddress(ctx context.Context, in *adamantglobalv1.GetAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error) {
	out := new(adamantglobalv1.Address)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetAddressByAddress(ctx context.Context, in *adamantglobalv1.GetAddressByAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error) {
	out := new(adamantglobalv1.Address)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetAddressByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetAddressByAddressCoin(ctx context.Context, in *adamantglobalv1.GetAddressByAddressCoinRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error) {
	out := new(adamantglobalv1.Address)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetAddressByAddressCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetAddressByIndex(ctx context.Context, in *adamantglobalv1.GetAddressByIndexRequest, opts ...grpc.CallOption) (*adamantglobalv1.Address, error) {
	out := new(adamantglobalv1.Address)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetAddressByIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListAddresses(ctx context.Context, in *adamantglobalv1.ListAddressesRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListAddressesResponse, error) {
	out := new(adamantglobalv1.ListAddressesResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ImportAddress(ctx context.Context, in *adamantglobalv1.ImportAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ImportAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetEthereumFeeAddress(ctx context.Context, in *adamantglobalv1.GetEthereumFeeAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.EthereumFeeAddress, error) {
	out := new(adamantglobalv1.EthereumFeeAddress)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetEthereumFeeAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) UpdateAddressBalance(ctx context.Context, in *adamantglobalv1.UpdateAddressBalanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/UpdateAddressBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListColdFeeDepositAddresses(ctx context.Context, in *ListColdFeeDepositAddressesRequest, opts ...grpc.CallOption) (*ListColdFeeDepositAddressesResponse, error) {
	out := new(ListColdFeeDepositAddressesResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListColdFeeDepositAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListHotFeeDepositAddresses(ctx context.Context, in *ListHotFeeDepositAddressesRequest, opts ...grpc.CallOption) (*ListHotFeeDepositAddressesResponse, error) {
	out := new(ListHotFeeDepositAddressesResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListHotFeeDepositAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) CreateTransaction(ctx context.Context, in *adamantglobalv1.CreateTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error) {
	out := new(adamantglobalv1.CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/SignTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.SendTransactionResponse, error) {
	out := new(adamantglobalv1.SendTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ResendTransaction(ctx context.Context, in *ResendTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.ResendTransactionResponse, error) {
	out := new(adamantglobalv1.ResendTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ResendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) CancelTransaction(ctx context.Context, in *adamantglobalv1.CancelTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CancelTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ReplaceTransaction(ctx context.Context, in *adamantglobalv1.ReplaceTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.ReplaceTransactionResponse, error) {
	out := new(adamantglobalv1.ReplaceTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ReplaceTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) IsTransactionReplaceable(ctx context.Context, in *adamantglobalv1.IsTransactionReplaceableRequest, opts ...grpc.CallOption) (*adamantglobalv1.IsTransactionReplaceableResponse, error) {
	out := new(adamantglobalv1.IsTransactionReplaceableResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/IsTransactionReplaceable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetTransaction(ctx context.Context, in *adamantglobalv1.GetTransactionRequest, opts ...grpc.CallOption) (*adamantglobalv1.Transaction, error) {
	out := new(adamantglobalv1.Transaction)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetTransactionByTxID(ctx context.Context, in *adamantglobalv1.GetTransactionByTxIDRequest, opts ...grpc.CallOption) (*adamantglobalv1.Transaction, error) {
	out := new(adamantglobalv1.Transaction)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetTransactionByTxID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListTransactions(ctx context.Context, in *adamantglobalv1.ListTransactionsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransactionsResponse, error) {
	out := new(adamantglobalv1.ListTransactionsResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListTransactionsByFilter(ctx context.Context, in *adamantglobalv1.ListTransactionsByFilterRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransactionsResponse, error) {
	out := new(adamantglobalv1.ListTransactionsResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListTransactionsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ExitEthereumStakingValidators(ctx context.Context, in *adamantglobalv1.ExitEthereumStakingValidatorsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ExitEthereumStakingValidatorsResponse, error) {
	out := new(adamantglobalv1.ExitEthereumStakingValidatorsResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ExitEthereumStakingValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListTransfers(ctx context.Context, in *adamantglobalv1.ListTransfersRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransfersResponse, error) {
	out := new(adamantglobalv1.ListTransfersResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListTransfersByFilter(ctx context.Context, in *adamantglobalv1.ListTransfersByFilterRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListTransfersResponse, error) {
	out := new(adamantglobalv1.ListTransfersResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListTransfersByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetRateSnapshot(ctx context.Context, in *adamantglobalv1.GetRateSnapshotRequest, opts ...grpc.CallOption) (*adamantglobalv1.RateSnapshot, error) {
	out := new(adamantglobalv1.RateSnapshot)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetRateSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetLatestRateSnapshot(ctx context.Context, in *adamantglobalv1.GetLatestRateSnapshotRequest, opts ...grpc.CallOption) (*adamantglobalv1.RateSnapshot, error) {
	out := new(adamantglobalv1.RateSnapshot)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetLatestRateSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) SetRates(ctx context.Context, in *adamantglobalv1.SetRatesRequest, opts ...grpc.CallOption) (*adamantglobalv1.SetRatesResponse, error) {
	out := new(adamantglobalv1.SetRatesResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/SetRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) CalculateFee(ctx context.Context, in *adamantglobalv1.CalculateFeeRequest, opts ...grpc.CallOption) (*adamantglobalv1.CalculateFeeResponse, error) {
	out := new(adamantglobalv1.CalculateFeeResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/CalculateFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) GetRecommendedFeeRate(ctx context.Context, in *adamantglobalv1.GetRecommendedFeeRateRequest, opts ...grpc.CallOption) (*adamantglobalv1.GetRecommendedFeeRateResponse, error) {
	out := new(adamantglobalv1.GetRecommendedFeeRateResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/GetRecommendedFeeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ValidateAddress(ctx context.Context, in *adamantglobalv1.ValidateAddressRequest, opts ...grpc.CallOption) (*adamantglobalv1.ValidateAddressResponse, error) {
	out := new(adamantglobalv1.ValidateAddressResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ValidateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) FlushBalance(ctx context.Context, in *adamantglobalv1.FlushBalanceRequest, opts ...grpc.CallOption) (*adamantglobalv1.FlushBalanceResponse, error) {
	out := new(adamantglobalv1.FlushBalanceResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/FlushBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListAuditLogs(ctx context.Context, in *adamantglobalv1.ListAuditLogsRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListAuditLogsResponse, error) {
	out := new(adamantglobalv1.ListAuditLogsResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListAuditLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListStakingHistoriesByFilter(ctx context.Context, in *adamantglobalv1.ListStakingHistoriesByFilterRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListStakingHistoriesResponse, error) {
	out := new(adamantglobalv1.ListStakingHistoriesResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListStakingHistoriesByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ListStakingValidatorsByFilter(ctx context.Context, in *adamantglobalv1.ListStakingValidatorsByFilterRequest, opts ...grpc.CallOption) (*adamantglobalv1.ListStakingValidatorsResponse, error) {
	out := new(adamantglobalv1.ListStakingValidatorsResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ListStakingValidatorsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignMessageResponse, error) {
	out := new(SignMessageResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/SignMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ProgmatCoinInitialize(ctx context.Context, in *ProgmatCoinInitializeRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error) {
	out := new(adamantglobalv1.CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ProgmatCoinInitialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ProgmatCoinConfigureMinter(ctx context.Context, in *ProgmatCoinConfigureMinterRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error) {
	out := new(adamantglobalv1.CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ProgmatCoinConfigureMinter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ProgmatCoinMintAndTransfer(ctx context.Context, in *ProgmatCoinMintAndTransferRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error) {
	out := new(adamantglobalv1.CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ProgmatCoinMintAndTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ProgmatCoinMint(ctx context.Context, in *ProgmatCoinMintRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error) {
	out := new(adamantglobalv1.CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ProgmatCoinMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ProgmatCoinBurn(ctx context.Context, in *ProgmatCoinBurnRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error) {
	out := new(adamantglobalv1.CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ProgmatCoinBurn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ProgmatCoinAddToWhitelist(ctx context.Context, in *ProgmatCoinAddToWhitelistRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error) {
	out := new(adamantglobalv1.CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ProgmatCoinAddToWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ProgmatCoinRemoveFromWhitelist(ctx context.Context, in *ProgmatCoinRemoveFromWhitelistRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error) {
	out := new(adamantglobalv1.CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ProgmatCoinRemoveFromWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ProgmatCoinAddToBlacklist(ctx context.Context, in *ProgmatCoinAddToBlacklistRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error) {
	out := new(adamantglobalv1.CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ProgmatCoinAddToBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ProgmatCoinRemoveFromBlacklist(ctx context.Context, in *ProgmatCoinRemoveFromBlacklistRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error) {
	out := new(adamantglobalv1.CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ProgmatCoinRemoveFromBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ProgmatCoinConfiscate(ctx context.Context, in *ProgmatCoinConfiscateRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error) {
	out := new(adamantglobalv1.CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ProgmatCoinConfiscate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ProgmatCoinPause(ctx context.Context, in *ProgmatCoinPauseRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error) {
	out := new(adamantglobalv1.CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ProgmatCoinPause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerAPIClient) ProgmatCoinUnpause(ctx context.Context, in *ProgmatCoinUnpauseRequest, opts ...grpc.CallOption) (*adamantglobalv1.CreateTransactionResponse, error) {
	out := new(adamantglobalv1.CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.teller.v1.TellerAPI/ProgmatCoinUnpause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TellerAPIServer is the server API for TellerAPI service.
// All implementations should embed UnimplementedTellerAPIServer
// for forward compatibility
type TellerAPIServer interface {
	CreateWallet(context.Context, *CreateWalletRequest) (*adamantglobalv1.CreateWalletResponse, error)
	// Get wallet information. the wallet model includes balance, address etc.
	GetWallet(context.Context, *adamantglobalv1.GetWalletRequest) (*adamantglobalv1.Wallet, error)
	ListWallets(context.Context, *adamantglobalv1.ListWalletsRequest) (*adamantglobalv1.ListWalletsResponse, error)
	ListWalletsByFilter(context.Context, *adamantglobalv1.ListWalletsByFilterRequest) (*adamantglobalv1.ListWalletsResponse, error)
	ListStakingWalletsByFilter(context.Context, *adamantglobalv1.ListStakingWalletsByFilterRequest) (*adamantglobalv1.ListStakingWalletsResponse, error)
	ListBaseWallets(context.Context, *adamantglobalv1.ListBaseWalletsRequest) (*adamantglobalv1.ListBaseWalletsResponse, error)
	GetSpendableBalance(context.Context, *adamantglobalv1.GetSpendableBalanceRequest) (*adamantglobalv1.GetSpendableBalanceResponse, error)
	InitializeXRPWallet(context.Context, *InitializeXRPWalletRequest) (*emptypb.Empty, error)
	InitializeWallet(context.Context, *InitializeWalletRequest) (*emptypb.Empty, error)
	UpdateDestinationWalletID(context.Context, *adamantglobalv1.UpdateDestinationWalletIDRequest) (*emptypb.Empty, error)
	GetCosmosBalance(context.Context, *adamantglobalv1.GetCosmosBalanceRequest) (*adamantglobalv1.GetCosmosBalanceResponse, error)
	ListCosmosDelegateHistories(context.Context, *adamantglobalv1.ListCosmosDelegateHistoriesRequest) (*adamantglobalv1.ListCosmosDelegateHistoriesResponse, error)
	// Create a new address for an existing wallet
	CreateAddress(context.Context, *adamantglobalv1.CreateAddressRequest) (*adamantglobalv1.CreateAddressResponse, error)
	CreateIOSTAccount(context.Context, *adamantglobalv1.CreateIOSTAccountRequest) (*adamantglobalv1.CreateIOSTAccountResponse, error)
	ListSymbolChildAddresses(context.Context, *adamantglobalv1.ListSymbolChildAddressesRequest) (*adamantglobalv1.ListSymbolChildAddressesResponse, error)
	GetAddress(context.Context, *adamantglobalv1.GetAddressRequest) (*adamantglobalv1.Address, error)
	GetAddressByAddress(context.Context, *adamantglobalv1.GetAddressByAddressRequest) (*adamantglobalv1.Address, error)
	GetAddressByAddressCoin(context.Context, *adamantglobalv1.GetAddressByAddressCoinRequest) (*adamantglobalv1.Address, error)
	GetAddressByIndex(context.Context, *adamantglobalv1.GetAddressByIndexRequest) (*adamantglobalv1.Address, error)
	ListAddresses(context.Context, *adamantglobalv1.ListAddressesRequest) (*adamantglobalv1.ListAddressesResponse, error)
	ImportAddress(context.Context, *adamantglobalv1.ImportAddressRequest) (*emptypb.Empty, error)
	// Get an address which hold ETH for ethereum wallet/address creation etc
	GetEthereumFeeAddress(context.Context, *adamantglobalv1.GetEthereumFeeAddressRequest) (*adamantglobalv1.EthereumFeeAddress, error)
	UpdateAddressBalance(context.Context, *adamantglobalv1.UpdateAddressBalanceRequest) (*emptypb.Empty, error)
	ListColdFeeDepositAddresses(context.Context, *ListColdFeeDepositAddressesRequest) (*ListColdFeeDepositAddressesResponse, error)
	ListHotFeeDepositAddresses(context.Context, *ListHotFeeDepositAddressesRequest) (*ListHotFeeDepositAddressesResponse, error)
	CreateTransaction(context.Context, *adamantglobalv1.CreateTransactionRequest) (*adamantglobalv1.CreateTransactionResponse, error)
	SignTransaction(context.Context, *SignTransactionRequest) (*emptypb.Empty, error)
	SendTransaction(context.Context, *SendTransactionRequest) (*adamantglobalv1.SendTransactionResponse, error)
	ResendTransaction(context.Context, *ResendTransactionRequest) (*adamantglobalv1.ResendTransactionResponse, error)
	CancelTransaction(context.Context, *adamantglobalv1.CancelTransactionRequest) (*emptypb.Empty, error)
	ReplaceTransaction(context.Context, *adamantglobalv1.ReplaceTransactionRequest) (*adamantglobalv1.ReplaceTransactionResponse, error)
	IsTransactionReplaceable(context.Context, *adamantglobalv1.IsTransactionReplaceableRequest) (*adamantglobalv1.IsTransactionReplaceableResponse, error)
	GetTransaction(context.Context, *adamantglobalv1.GetTransactionRequest) (*adamantglobalv1.Transaction, error)
	GetTransactionByTxID(context.Context, *adamantglobalv1.GetTransactionByTxIDRequest) (*adamantglobalv1.Transaction, error)
	ListTransactions(context.Context, *adamantglobalv1.ListTransactionsRequest) (*adamantglobalv1.ListTransactionsResponse, error)
	ListTransactionsByFilter(context.Context, *adamantglobalv1.ListTransactionsByFilterRequest) (*adamantglobalv1.ListTransactionsResponse, error)
	// Exit ethereum validators
	ExitEthereumStakingValidators(context.Context, *adamantglobalv1.ExitEthereumStakingValidatorsRequest) (*adamantglobalv1.ExitEthereumStakingValidatorsResponse, error)
	// List transfers for a given wallet. Ordered by update time desc
	ListTransfers(context.Context, *adamantglobalv1.ListTransfersRequest) (*adamantglobalv1.ListTransfersResponse, error)
	ListTransfersByFilter(context.Context, *adamantglobalv1.ListTransfersByFilterRequest) (*adamantglobalv1.ListTransfersResponse, error)
	// Get rates by snapshot id
	GetRateSnapshot(context.Context, *adamantglobalv1.GetRateSnapshotRequest) (*adamantglobalv1.RateSnapshot, error)
	// Get latest rates set to your organization
	GetLatestRateSnapshot(context.Context, *adamantglobalv1.GetLatestRateSnapshotRequest) (*adamantglobalv1.RateSnapshot, error)
	// Set rates to your organization
	SetRates(context.Context, *adamantglobalv1.SetRatesRequest) (*adamantglobalv1.SetRatesResponse, error)
	CalculateFee(context.Context, *adamantglobalv1.CalculateFeeRequest) (*adamantglobalv1.CalculateFeeResponse, error)
	GetRecommendedFeeRate(context.Context, *adamantglobalv1.GetRecommendedFeeRateRequest) (*adamantglobalv1.GetRecommendedFeeRateResponse, error)
	// Validate format of given address
	ValidateAddress(context.Context, *adamantglobalv1.ValidateAddressRequest) (*adamantglobalv1.ValidateAddressResponse, error)
	FlushBalance(context.Context, *adamantglobalv1.FlushBalanceRequest) (*adamantglobalv1.FlushBalanceResponse, error)
	ListAuditLogs(context.Context, *adamantglobalv1.ListAuditLogsRequest) (*adamantglobalv1.ListAuditLogsResponse, error)
	ListStakingHistoriesByFilter(context.Context, *adamantglobalv1.ListStakingHistoriesByFilterRequest) (*adamantglobalv1.ListStakingHistoriesResponse, error)
	ListStakingValidatorsByFilter(context.Context, *adamantglobalv1.ListStakingValidatorsByFilterRequest) (*adamantglobalv1.ListStakingValidatorsResponse, error)
	SignMessage(context.Context, *SignMessageRequest) (*SignMessageResponse, error)
	// ProgmatCoin
	ProgmatCoinInitialize(context.Context, *ProgmatCoinInitializeRequest) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinConfigureMinter(context.Context, *ProgmatCoinConfigureMinterRequest) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinMintAndTransfer(context.Context, *ProgmatCoinMintAndTransferRequest) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinMint(context.Context, *ProgmatCoinMintRequest) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinBurn(context.Context, *ProgmatCoinBurnRequest) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinAddToWhitelist(context.Context, *ProgmatCoinAddToWhitelistRequest) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinRemoveFromWhitelist(context.Context, *ProgmatCoinRemoveFromWhitelistRequest) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinAddToBlacklist(context.Context, *ProgmatCoinAddToBlacklistRequest) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinRemoveFromBlacklist(context.Context, *ProgmatCoinRemoveFromBlacklistRequest) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinConfiscate(context.Context, *ProgmatCoinConfiscateRequest) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinPause(context.Context, *ProgmatCoinPauseRequest) (*adamantglobalv1.CreateTransactionResponse, error)
	ProgmatCoinUnpause(context.Context, *ProgmatCoinUnpauseRequest) (*adamantglobalv1.CreateTransactionResponse, error)
}

// UnimplementedTellerAPIServer should be embedded to have forward compatible implementations.
type UnimplementedTellerAPIServer struct {
}

func (UnimplementedTellerAPIServer) CreateWallet(context.Context, *CreateWalletRequest) (*adamantglobalv1.CreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedTellerAPIServer) GetWallet(context.Context, *adamantglobalv1.GetWalletRequest) (*adamantglobalv1.Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallet not implemented")
}
func (UnimplementedTellerAPIServer) ListWallets(context.Context, *adamantglobalv1.ListWalletsRequest) (*adamantglobalv1.ListWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWallets not implemented")
}
func (UnimplementedTellerAPIServer) ListWalletsByFilter(context.Context, *adamantglobalv1.ListWalletsByFilterRequest) (*adamantglobalv1.ListWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletsByFilter not implemented")
}
func (UnimplementedTellerAPIServer) ListStakingWalletsByFilter(context.Context, *adamantglobalv1.ListStakingWalletsByFilterRequest) (*adamantglobalv1.ListStakingWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStakingWalletsByFilter not implemented")
}
func (UnimplementedTellerAPIServer) ListBaseWallets(context.Context, *adamantglobalv1.ListBaseWalletsRequest) (*adamantglobalv1.ListBaseWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBaseWallets not implemented")
}
func (UnimplementedTellerAPIServer) GetSpendableBalance(context.Context, *adamantglobalv1.GetSpendableBalanceRequest) (*adamantglobalv1.GetSpendableBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpendableBalance not implemented")
}
func (UnimplementedTellerAPIServer) InitializeXRPWallet(context.Context, *InitializeXRPWalletRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeXRPWallet not implemented")
}
func (UnimplementedTellerAPIServer) InitializeWallet(context.Context, *InitializeWalletRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeWallet not implemented")
}
func (UnimplementedTellerAPIServer) UpdateDestinationWalletID(context.Context, *adamantglobalv1.UpdateDestinationWalletIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDestinationWalletID not implemented")
}
func (UnimplementedTellerAPIServer) GetCosmosBalance(context.Context, *adamantglobalv1.GetCosmosBalanceRequest) (*adamantglobalv1.GetCosmosBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCosmosBalance not implemented")
}
func (UnimplementedTellerAPIServer) ListCosmosDelegateHistories(context.Context, *adamantglobalv1.ListCosmosDelegateHistoriesRequest) (*adamantglobalv1.ListCosmosDelegateHistoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCosmosDelegateHistories not implemented")
}
func (UnimplementedTellerAPIServer) CreateAddress(context.Context, *adamantglobalv1.CreateAddressRequest) (*adamantglobalv1.CreateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddress not implemented")
}
func (UnimplementedTellerAPIServer) CreateIOSTAccount(context.Context, *adamantglobalv1.CreateIOSTAccountRequest) (*adamantglobalv1.CreateIOSTAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIOSTAccount not implemented")
}
func (UnimplementedTellerAPIServer) ListSymbolChildAddresses(context.Context, *adamantglobalv1.ListSymbolChildAddressesRequest) (*adamantglobalv1.ListSymbolChildAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSymbolChildAddresses not implemented")
}
func (UnimplementedTellerAPIServer) GetAddress(context.Context, *adamantglobalv1.GetAddressRequest) (*adamantglobalv1.Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedTellerAPIServer) GetAddressByAddress(context.Context, *adamantglobalv1.GetAddressByAddressRequest) (*adamantglobalv1.Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressByAddress not implemented")
}
func (UnimplementedTellerAPIServer) GetAddressByAddressCoin(context.Context, *adamantglobalv1.GetAddressByAddressCoinRequest) (*adamantglobalv1.Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressByAddressCoin not implemented")
}
func (UnimplementedTellerAPIServer) GetAddressByIndex(context.Context, *adamantglobalv1.GetAddressByIndexRequest) (*adamantglobalv1.Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressByIndex not implemented")
}
func (UnimplementedTellerAPIServer) ListAddresses(context.Context, *adamantglobalv1.ListAddressesRequest) (*adamantglobalv1.ListAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddresses not implemented")
}
func (UnimplementedTellerAPIServer) ImportAddress(context.Context, *adamantglobalv1.ImportAddressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAddress not implemented")
}
func (UnimplementedTellerAPIServer) GetEthereumFeeAddress(context.Context, *adamantglobalv1.GetEthereumFeeAddressRequest) (*adamantglobalv1.EthereumFeeAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEthereumFeeAddress not implemented")
}
func (UnimplementedTellerAPIServer) UpdateAddressBalance(context.Context, *adamantglobalv1.UpdateAddressBalanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddressBalance not implemented")
}
func (UnimplementedTellerAPIServer) ListColdFeeDepositAddresses(context.Context, *ListColdFeeDepositAddressesRequest) (*ListColdFeeDepositAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListColdFeeDepositAddresses not implemented")
}
func (UnimplementedTellerAPIServer) ListHotFeeDepositAddresses(context.Context, *ListHotFeeDepositAddressesRequest) (*ListHotFeeDepositAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHotFeeDepositAddresses not implemented")
}
func (UnimplementedTellerAPIServer) CreateTransaction(context.Context, *adamantglobalv1.CreateTransactionRequest) (*adamantglobalv1.CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedTellerAPIServer) SignTransaction(context.Context, *SignTransactionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransaction not implemented")
}
func (UnimplementedTellerAPIServer) SendTransaction(context.Context, *SendTransactionRequest) (*adamantglobalv1.SendTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (UnimplementedTellerAPIServer) ResendTransaction(context.Context, *ResendTransactionRequest) (*adamantglobalv1.ResendTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendTransaction not implemented")
}
func (UnimplementedTellerAPIServer) CancelTransaction(context.Context, *adamantglobalv1.CancelTransactionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTransaction not implemented")
}
func (UnimplementedTellerAPIServer) ReplaceTransaction(context.Context, *adamantglobalv1.ReplaceTransactionRequest) (*adamantglobalv1.ReplaceTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceTransaction not implemented")
}
func (UnimplementedTellerAPIServer) IsTransactionReplaceable(context.Context, *adamantglobalv1.IsTransactionReplaceableRequest) (*adamantglobalv1.IsTransactionReplaceableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsTransactionReplaceable not implemented")
}
func (UnimplementedTellerAPIServer) GetTransaction(context.Context, *adamantglobalv1.GetTransactionRequest) (*adamantglobalv1.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedTellerAPIServer) GetTransactionByTxID(context.Context, *adamantglobalv1.GetTransactionByTxIDRequest) (*adamantglobalv1.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByTxID not implemented")
}
func (UnimplementedTellerAPIServer) ListTransactions(context.Context, *adamantglobalv1.ListTransactionsRequest) (*adamantglobalv1.ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedTellerAPIServer) ListTransactionsByFilter(context.Context, *adamantglobalv1.ListTransactionsByFilterRequest) (*adamantglobalv1.ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactionsByFilter not implemented")
}
func (UnimplementedTellerAPIServer) ExitEthereumStakingValidators(context.Context, *adamantglobalv1.ExitEthereumStakingValidatorsRequest) (*adamantglobalv1.ExitEthereumStakingValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitEthereumStakingValidators not implemented")
}
func (UnimplementedTellerAPIServer) ListTransfers(context.Context, *adamantglobalv1.ListTransfersRequest) (*adamantglobalv1.ListTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransfers not implemented")
}
func (UnimplementedTellerAPIServer) ListTransfersByFilter(context.Context, *adamantglobalv1.ListTransfersByFilterRequest) (*adamantglobalv1.ListTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransfersByFilter not implemented")
}
func (UnimplementedTellerAPIServer) GetRateSnapshot(context.Context, *adamantglobalv1.GetRateSnapshotRequest) (*adamantglobalv1.RateSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRateSnapshot not implemented")
}
func (UnimplementedTellerAPIServer) GetLatestRateSnapshot(context.Context, *adamantglobalv1.GetLatestRateSnapshotRequest) (*adamantglobalv1.RateSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestRateSnapshot not implemented")
}
func (UnimplementedTellerAPIServer) SetRates(context.Context, *adamantglobalv1.SetRatesRequest) (*adamantglobalv1.SetRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRates not implemented")
}
func (UnimplementedTellerAPIServer) CalculateFee(context.Context, *adamantglobalv1.CalculateFeeRequest) (*adamantglobalv1.CalculateFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFee not implemented")
}
func (UnimplementedTellerAPIServer) GetRecommendedFeeRate(context.Context, *adamantglobalv1.GetRecommendedFeeRateRequest) (*adamantglobalv1.GetRecommendedFeeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendedFeeRate not implemented")
}
func (UnimplementedTellerAPIServer) ValidateAddress(context.Context, *adamantglobalv1.ValidateAddressRequest) (*adamantglobalv1.ValidateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAddress not implemented")
}
func (UnimplementedTellerAPIServer) FlushBalance(context.Context, *adamantglobalv1.FlushBalanceRequest) (*adamantglobalv1.FlushBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushBalance not implemented")
}
func (UnimplementedTellerAPIServer) ListAuditLogs(context.Context, *adamantglobalv1.ListAuditLogsRequest) (*adamantglobalv1.ListAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuditLogs not implemented")
}
func (UnimplementedTellerAPIServer) ListStakingHistoriesByFilter(context.Context, *adamantglobalv1.ListStakingHistoriesByFilterRequest) (*adamantglobalv1.ListStakingHistoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStakingHistoriesByFilter not implemented")
}
func (UnimplementedTellerAPIServer) ListStakingValidatorsByFilter(context.Context, *adamantglobalv1.ListStakingValidatorsByFilterRequest) (*adamantglobalv1.ListStakingValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStakingValidatorsByFilter not implemented")
}
func (UnimplementedTellerAPIServer) SignMessage(context.Context, *SignMessageRequest) (*SignMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignMessage not implemented")
}
func (UnimplementedTellerAPIServer) ProgmatCoinInitialize(context.Context, *ProgmatCoinInitializeRequest) (*adamantglobalv1.CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProgmatCoinInitialize not implemented")
}
func (UnimplementedTellerAPIServer) ProgmatCoinConfigureMinter(context.Context, *ProgmatCoinConfigureMinterRequest) (*adamantglobalv1.CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProgmatCoinConfigureMinter not implemented")
}
func (UnimplementedTellerAPIServer) ProgmatCoinMintAndTransfer(context.Context, *ProgmatCoinMintAndTransferRequest) (*adamantglobalv1.CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProgmatCoinMintAndTransfer not implemented")
}
func (UnimplementedTellerAPIServer) ProgmatCoinMint(context.Context, *ProgmatCoinMintRequest) (*adamantglobalv1.CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProgmatCoinMint not implemented")
}
func (UnimplementedTellerAPIServer) ProgmatCoinBurn(context.Context, *ProgmatCoinBurnRequest) (*adamantglobalv1.CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProgmatCoinBurn not implemented")
}
func (UnimplementedTellerAPIServer) ProgmatCoinAddToWhitelist(context.Context, *ProgmatCoinAddToWhitelistRequest) (*adamantglobalv1.CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProgmatCoinAddToWhitelist not implemented")
}
func (UnimplementedTellerAPIServer) ProgmatCoinRemoveFromWhitelist(context.Context, *ProgmatCoinRemoveFromWhitelistRequest) (*adamantglobalv1.CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProgmatCoinRemoveFromWhitelist not implemented")
}
func (UnimplementedTellerAPIServer) ProgmatCoinAddToBlacklist(context.Context, *ProgmatCoinAddToBlacklistRequest) (*adamantglobalv1.CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProgmatCoinAddToBlacklist not implemented")
}
func (UnimplementedTellerAPIServer) ProgmatCoinRemoveFromBlacklist(context.Context, *ProgmatCoinRemoveFromBlacklistRequest) (*adamantglobalv1.CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProgmatCoinRemoveFromBlacklist not implemented")
}
func (UnimplementedTellerAPIServer) ProgmatCoinConfiscate(context.Context, *ProgmatCoinConfiscateRequest) (*adamantglobalv1.CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProgmatCoinConfiscate not implemented")
}
func (UnimplementedTellerAPIServer) ProgmatCoinPause(context.Context, *ProgmatCoinPauseRequest) (*adamantglobalv1.CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProgmatCoinPause not implemented")
}
func (UnimplementedTellerAPIServer) ProgmatCoinUnpause(context.Context, *ProgmatCoinUnpauseRequest) (*adamantglobalv1.CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProgmatCoinUnpause not implemented")
}

// UnsafeTellerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TellerAPIServer will
// result in compilation errors.
type UnsafeTellerAPIServer interface {
	mustEmbedUnimplementedTellerAPIServer()
}

func RegisterTellerAPIServer(s grpc.ServiceRegistrar, srv TellerAPIServer) {
	s.RegisterService(&TellerAPI_ServiceDesc, srv)
}

func _TellerAPI_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetWallet(ctx, req.(*adamantglobalv1.GetWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListWallets(ctx, req.(*adamantglobalv1.ListWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListWalletsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListWalletsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListWalletsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListWalletsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListWalletsByFilter(ctx, req.(*adamantglobalv1.ListWalletsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListStakingWalletsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListStakingWalletsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListStakingWalletsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListStakingWalletsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListStakingWalletsByFilter(ctx, req.(*adamantglobalv1.ListStakingWalletsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListBaseWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListBaseWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListBaseWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListBaseWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListBaseWallets(ctx, req.(*adamantglobalv1.ListBaseWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetSpendableBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetSpendableBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetSpendableBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetSpendableBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetSpendableBalance(ctx, req.(*adamantglobalv1.GetSpendableBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_InitializeXRPWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeXRPWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).InitializeXRPWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/InitializeXRPWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).InitializeXRPWallet(ctx, req.(*InitializeXRPWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_InitializeWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).InitializeWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/InitializeWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).InitializeWallet(ctx, req.(*InitializeWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_UpdateDestinationWalletID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.UpdateDestinationWalletIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).UpdateDestinationWalletID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/UpdateDestinationWalletID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).UpdateDestinationWalletID(ctx, req.(*adamantglobalv1.UpdateDestinationWalletIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetCosmosBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetCosmosBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetCosmosBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetCosmosBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetCosmosBalance(ctx, req.(*adamantglobalv1.GetCosmosBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListCosmosDelegateHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListCosmosDelegateHistoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListCosmosDelegateHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListCosmosDelegateHistories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListCosmosDelegateHistories(ctx, req.(*adamantglobalv1.ListCosmosDelegateHistoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.CreateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CreateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CreateAddress(ctx, req.(*adamantglobalv1.CreateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_CreateIOSTAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.CreateIOSTAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CreateIOSTAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CreateIOSTAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CreateIOSTAccount(ctx, req.(*adamantglobalv1.CreateIOSTAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListSymbolChildAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListSymbolChildAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListSymbolChildAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListSymbolChildAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListSymbolChildAddresses(ctx, req.(*adamantglobalv1.ListSymbolChildAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetAddress(ctx, req.(*adamantglobalv1.GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetAddressByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetAddressByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetAddressByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetAddressByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetAddressByAddress(ctx, req.(*adamantglobalv1.GetAddressByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetAddressByAddressCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetAddressByAddressCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetAddressByAddressCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetAddressByAddressCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetAddressByAddressCoin(ctx, req.(*adamantglobalv1.GetAddressByAddressCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetAddressByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetAddressByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetAddressByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetAddressByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetAddressByIndex(ctx, req.(*adamantglobalv1.GetAddressByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListAddresses(ctx, req.(*adamantglobalv1.ListAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ImportAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ImportAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ImportAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ImportAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ImportAddress(ctx, req.(*adamantglobalv1.ImportAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetEthereumFeeAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetEthereumFeeAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetEthereumFeeAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetEthereumFeeAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetEthereumFeeAddress(ctx, req.(*adamantglobalv1.GetEthereumFeeAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_UpdateAddressBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.UpdateAddressBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).UpdateAddressBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/UpdateAddressBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).UpdateAddressBalance(ctx, req.(*adamantglobalv1.UpdateAddressBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListColdFeeDepositAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListColdFeeDepositAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListColdFeeDepositAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListColdFeeDepositAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListColdFeeDepositAddresses(ctx, req.(*ListColdFeeDepositAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListHotFeeDepositAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHotFeeDepositAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListHotFeeDepositAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListHotFeeDepositAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListHotFeeDepositAddresses(ctx, req.(*ListHotFeeDepositAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CreateTransaction(ctx, req.(*adamantglobalv1.CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).SignTransaction(ctx, req.(*SignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ResendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ResendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ResendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ResendTransaction(ctx, req.(*ResendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_CancelTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.CancelTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CancelTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CancelTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CancelTransaction(ctx, req.(*adamantglobalv1.CancelTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ReplaceTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ReplaceTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ReplaceTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ReplaceTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ReplaceTransaction(ctx, req.(*adamantglobalv1.ReplaceTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_IsTransactionReplaceable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.IsTransactionReplaceableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).IsTransactionReplaceable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/IsTransactionReplaceable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).IsTransactionReplaceable(ctx, req.(*adamantglobalv1.IsTransactionReplaceableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetTransaction(ctx, req.(*adamantglobalv1.GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetTransactionByTxID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetTransactionByTxIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetTransactionByTxID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetTransactionByTxID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetTransactionByTxID(ctx, req.(*adamantglobalv1.GetTransactionByTxIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListTransactions(ctx, req.(*adamantglobalv1.ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListTransactionsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListTransactionsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListTransactionsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListTransactionsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListTransactionsByFilter(ctx, req.(*adamantglobalv1.ListTransactionsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ExitEthereumStakingValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ExitEthereumStakingValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ExitEthereumStakingValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ExitEthereumStakingValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ExitEthereumStakingValidators(ctx, req.(*adamantglobalv1.ExitEthereumStakingValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListTransfers(ctx, req.(*adamantglobalv1.ListTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListTransfersByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListTransfersByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListTransfersByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListTransfersByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListTransfersByFilter(ctx, req.(*adamantglobalv1.ListTransfersByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetRateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetRateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetRateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetRateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetRateSnapshot(ctx, req.(*adamantglobalv1.GetRateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetLatestRateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetLatestRateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetLatestRateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetLatestRateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetLatestRateSnapshot(ctx, req.(*adamantglobalv1.GetLatestRateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_SetRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.SetRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).SetRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/SetRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).SetRates(ctx, req.(*adamantglobalv1.SetRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_CalculateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.CalculateFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).CalculateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/CalculateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).CalculateFee(ctx, req.(*adamantglobalv1.CalculateFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_GetRecommendedFeeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.GetRecommendedFeeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).GetRecommendedFeeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/GetRecommendedFeeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).GetRecommendedFeeRate(ctx, req.(*adamantglobalv1.GetRecommendedFeeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ValidateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ValidateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ValidateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ValidateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ValidateAddress(ctx, req.(*adamantglobalv1.ValidateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_FlushBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.FlushBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).FlushBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/FlushBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).FlushBalance(ctx, req.(*adamantglobalv1.FlushBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListAuditLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListAuditLogs(ctx, req.(*adamantglobalv1.ListAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListStakingHistoriesByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListStakingHistoriesByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListStakingHistoriesByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListStakingHistoriesByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListStakingHistoriesByFilter(ctx, req.(*adamantglobalv1.ListStakingHistoriesByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ListStakingValidatorsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(adamantglobalv1.ListStakingValidatorsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ListStakingValidatorsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ListStakingValidatorsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ListStakingValidatorsByFilter(ctx, req.(*adamantglobalv1.ListStakingValidatorsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_SignMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).SignMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/SignMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).SignMessage(ctx, req.(*SignMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ProgmatCoinInitialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgmatCoinInitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ProgmatCoinInitialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ProgmatCoinInitialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ProgmatCoinInitialize(ctx, req.(*ProgmatCoinInitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ProgmatCoinConfigureMinter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgmatCoinConfigureMinterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ProgmatCoinConfigureMinter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ProgmatCoinConfigureMinter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ProgmatCoinConfigureMinter(ctx, req.(*ProgmatCoinConfigureMinterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ProgmatCoinMintAndTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgmatCoinMintAndTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ProgmatCoinMintAndTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ProgmatCoinMintAndTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ProgmatCoinMintAndTransfer(ctx, req.(*ProgmatCoinMintAndTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ProgmatCoinMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgmatCoinMintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ProgmatCoinMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ProgmatCoinMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ProgmatCoinMint(ctx, req.(*ProgmatCoinMintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ProgmatCoinBurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgmatCoinBurnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ProgmatCoinBurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ProgmatCoinBurn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ProgmatCoinBurn(ctx, req.(*ProgmatCoinBurnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ProgmatCoinAddToWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgmatCoinAddToWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ProgmatCoinAddToWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ProgmatCoinAddToWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ProgmatCoinAddToWhitelist(ctx, req.(*ProgmatCoinAddToWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ProgmatCoinRemoveFromWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgmatCoinRemoveFromWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ProgmatCoinRemoveFromWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ProgmatCoinRemoveFromWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ProgmatCoinRemoveFromWhitelist(ctx, req.(*ProgmatCoinRemoveFromWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ProgmatCoinAddToBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgmatCoinAddToBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ProgmatCoinAddToBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ProgmatCoinAddToBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ProgmatCoinAddToBlacklist(ctx, req.(*ProgmatCoinAddToBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ProgmatCoinRemoveFromBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgmatCoinRemoveFromBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ProgmatCoinRemoveFromBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ProgmatCoinRemoveFromBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ProgmatCoinRemoveFromBlacklist(ctx, req.(*ProgmatCoinRemoveFromBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ProgmatCoinConfiscate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgmatCoinConfiscateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ProgmatCoinConfiscate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ProgmatCoinConfiscate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ProgmatCoinConfiscate(ctx, req.(*ProgmatCoinConfiscateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ProgmatCoinPause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgmatCoinPauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ProgmatCoinPause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ProgmatCoinPause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ProgmatCoinPause(ctx, req.(*ProgmatCoinPauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TellerAPI_ProgmatCoinUnpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgmatCoinUnpauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerAPIServer).ProgmatCoinUnpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.teller.v1.TellerAPI/ProgmatCoinUnpause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerAPIServer).ProgmatCoinUnpause(ctx, req.(*ProgmatCoinUnpauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TellerAPI_ServiceDesc is the grpc.ServiceDesc for TellerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TellerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adamant.teller.v1.TellerAPI",
	HandlerType: (*TellerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _TellerAPI_CreateWallet_Handler,
		},
		{
			MethodName: "GetWallet",
			Handler:    _TellerAPI_GetWallet_Handler,
		},
		{
			MethodName: "ListWallets",
			Handler:    _TellerAPI_ListWallets_Handler,
		},
		{
			MethodName: "ListWalletsByFilter",
			Handler:    _TellerAPI_ListWalletsByFilter_Handler,
		},
		{
			MethodName: "ListStakingWalletsByFilter",
			Handler:    _TellerAPI_ListStakingWalletsByFilter_Handler,
		},
		{
			MethodName: "ListBaseWallets",
			Handler:    _TellerAPI_ListBaseWallets_Handler,
		},
		{
			MethodName: "GetSpendableBalance",
			Handler:    _TellerAPI_GetSpendableBalance_Handler,
		},
		{
			MethodName: "InitializeXRPWallet",
			Handler:    _TellerAPI_InitializeXRPWallet_Handler,
		},
		{
			MethodName: "InitializeWallet",
			Handler:    _TellerAPI_InitializeWallet_Handler,
		},
		{
			MethodName: "UpdateDestinationWalletID",
			Handler:    _TellerAPI_UpdateDestinationWalletID_Handler,
		},
		{
			MethodName: "GetCosmosBalance",
			Handler:    _TellerAPI_GetCosmosBalance_Handler,
		},
		{
			MethodName: "ListCosmosDelegateHistories",
			Handler:    _TellerAPI_ListCosmosDelegateHistories_Handler,
		},
		{
			MethodName: "CreateAddress",
			Handler:    _TellerAPI_CreateAddress_Handler,
		},
		{
			MethodName: "CreateIOSTAccount",
			Handler:    _TellerAPI_CreateIOSTAccount_Handler,
		},
		{
			MethodName: "ListSymbolChildAddresses",
			Handler:    _TellerAPI_ListSymbolChildAddresses_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _TellerAPI_GetAddress_Handler,
		},
		{
			MethodName: "GetAddressByAddress",
			Handler:    _TellerAPI_GetAddressByAddress_Handler,
		},
		{
			MethodName: "GetAddressByAddressCoin",
			Handler:    _TellerAPI_GetAddressByAddressCoin_Handler,
		},
		{
			MethodName: "GetAddressByIndex",
			Handler:    _TellerAPI_GetAddressByIndex_Handler,
		},
		{
			MethodName: "ListAddresses",
			Handler:    _TellerAPI_ListAddresses_Handler,
		},
		{
			MethodName: "ImportAddress",
			Handler:    _TellerAPI_ImportAddress_Handler,
		},
		{
			MethodName: "GetEthereumFeeAddress",
			Handler:    _TellerAPI_GetEthereumFeeAddress_Handler,
		},
		{
			MethodName: "UpdateAddressBalance",
			Handler:    _TellerAPI_UpdateAddressBalance_Handler,
		},
		{
			MethodName: "ListColdFeeDepositAddresses",
			Handler:    _TellerAPI_ListColdFeeDepositAddresses_Handler,
		},
		{
			MethodName: "ListHotFeeDepositAddresses",
			Handler:    _TellerAPI_ListHotFeeDepositAddresses_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _TellerAPI_CreateTransaction_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _TellerAPI_SignTransaction_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _TellerAPI_SendTransaction_Handler,
		},
		{
			MethodName: "ResendTransaction",
			Handler:    _TellerAPI_ResendTransaction_Handler,
		},
		{
			MethodName: "CancelTransaction",
			Handler:    _TellerAPI_CancelTransaction_Handler,
		},
		{
			MethodName: "ReplaceTransaction",
			Handler:    _TellerAPI_ReplaceTransaction_Handler,
		},
		{
			MethodName: "IsTransactionReplaceable",
			Handler:    _TellerAPI_IsTransactionReplaceable_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _TellerAPI_GetTransaction_Handler,
		},
		{
			MethodName: "GetTransactionByTxID",
			Handler:    _TellerAPI_GetTransactionByTxID_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _TellerAPI_ListTransactions_Handler,
		},
		{
			MethodName: "ListTransactionsByFilter",
			Handler:    _TellerAPI_ListTransactionsByFilter_Handler,
		},
		{
			MethodName: "ExitEthereumStakingValidators",
			Handler:    _TellerAPI_ExitEthereumStakingValidators_Handler,
		},
		{
			MethodName: "ListTransfers",
			Handler:    _TellerAPI_ListTransfers_Handler,
		},
		{
			MethodName: "ListTransfersByFilter",
			Handler:    _TellerAPI_ListTransfersByFilter_Handler,
		},
		{
			MethodName: "GetRateSnapshot",
			Handler:    _TellerAPI_GetRateSnapshot_Handler,
		},
		{
			MethodName: "GetLatestRateSnapshot",
			Handler:    _TellerAPI_GetLatestRateSnapshot_Handler,
		},
		{
			MethodName: "SetRates",
			Handler:    _TellerAPI_SetRates_Handler,
		},
		{
			MethodName: "CalculateFee",
			Handler:    _TellerAPI_CalculateFee_Handler,
		},
		{
			MethodName: "GetRecommendedFeeRate",
			Handler:    _TellerAPI_GetRecommendedFeeRate_Handler,
		},
		{
			MethodName: "ValidateAddress",
			Handler:    _TellerAPI_ValidateAddress_Handler,
		},
		{
			MethodName: "FlushBalance",
			Handler:    _TellerAPI_FlushBalance_Handler,
		},
		{
			MethodName: "ListAuditLogs",
			Handler:    _TellerAPI_ListAuditLogs_Handler,
		},
		{
			MethodName: "ListStakingHistoriesByFilter",
			Handler:    _TellerAPI_ListStakingHistoriesByFilter_Handler,
		},
		{
			MethodName: "ListStakingValidatorsByFilter",
			Handler:    _TellerAPI_ListStakingValidatorsByFilter_Handler,
		},
		{
			MethodName: "SignMessage",
			Handler:    _TellerAPI_SignMessage_Handler,
		},
		{
			MethodName: "ProgmatCoinInitialize",
			Handler:    _TellerAPI_ProgmatCoinInitialize_Handler,
		},
		{
			MethodName: "ProgmatCoinConfigureMinter",
			Handler:    _TellerAPI_ProgmatCoinConfigureMinter_Handler,
		},
		{
			MethodName: "ProgmatCoinMintAndTransfer",
			Handler:    _TellerAPI_ProgmatCoinMintAndTransfer_Handler,
		},
		{
			MethodName: "ProgmatCoinMint",
			Handler:    _TellerAPI_ProgmatCoinMint_Handler,
		},
		{
			MethodName: "ProgmatCoinBurn",
			Handler:    _TellerAPI_ProgmatCoinBurn_Handler,
		},
		{
			MethodName: "ProgmatCoinAddToWhitelist",
			Handler:    _TellerAPI_ProgmatCoinAddToWhitelist_Handler,
		},
		{
			MethodName: "ProgmatCoinRemoveFromWhitelist",
			Handler:    _TellerAPI_ProgmatCoinRemoveFromWhitelist_Handler,
		},
		{
			MethodName: "ProgmatCoinAddToBlacklist",
			Handler:    _TellerAPI_ProgmatCoinAddToBlacklist_Handler,
		},
		{
			MethodName: "ProgmatCoinRemoveFromBlacklist",
			Handler:    _TellerAPI_ProgmatCoinRemoveFromBlacklist_Handler,
		},
		{
			MethodName: "ProgmatCoinConfiscate",
			Handler:    _TellerAPI_ProgmatCoinConfiscate_Handler,
		},
		{
			MethodName: "ProgmatCoinPause",
			Handler:    _TellerAPI_ProgmatCoinPause_Handler,
		},
		{
			MethodName: "ProgmatCoinUnpause",
			Handler:    _TellerAPI_ProgmatCoinUnpause_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gincoinc/adamant/teller/v1/adamanttellerv1/teller_api.proto",
}
