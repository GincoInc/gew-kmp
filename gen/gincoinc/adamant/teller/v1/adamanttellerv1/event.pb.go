// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: gincoinc/adamant/teller/v1/adamanttellerv1/event.proto

package adamanttellerv1

import (
	gincoincglobalv1 "github.com/GincoInc/gew-kmp/gen/gincoinc/global/v1/gincoincglobalv1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransferUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId    string                `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransferId  string                `protobuf:"bytes,2,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	Coin        gincoincglobalv1.Coin `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	TxId        string                `protobuf:"bytes,4,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	TxIndex     uint32                `protobuf:"varint,5,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	Value       float64               `protobuf:"fixed64,6,opt,name=value,proto3" json:"value,omitempty"`
	StringValue string                `protobuf:"bytes,7,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	JpyRate     float64               `protobuf:"fixed64,8,opt,name=jpy_rate,json=jpyRate,proto3" json:"jpy_rate,omitempty"`
	// Deprecated: Do not use.
	Address        string                             `protobuf:"bytes,9,opt,name=address,proto3" json:"address,omitempty"`
	DestinationTag uint32                             `protobuf:"varint,10,opt,name=destination_tag,json=destinationTag,proto3" json:"destination_tag,omitempty"`
	MemoId         uint64                             `protobuf:"varint,14,opt,name=memo_id,json=memoId,proto3" json:"memo_id,omitempty"`
	Message        string                             `protobuf:"bytes,21,opt,name=message,proto3" json:"message,omitempty"`
	State          gincoincglobalv1.TransactionState  `protobuf:"varint,11,opt,name=state,proto3,enum=gincoinc.global.v1.TransactionState" json:"state,omitempty"`
	Result         gincoincglobalv1.TransactionResult `protobuf:"varint,12,opt,name=result,proto3,enum=gincoinc.global.v1.TransactionResult" json:"result,omitempty"`
	TransferType   gincoincglobalv1.TransferType      `protobuf:"varint,13,opt,name=transfer_type,json=transferType,proto3,enum=gincoinc.global.v1.TransferType" json:"transfer_type,omitempty"`
	From           string                             `protobuf:"bytes,15,opt,name=from,proto3" json:"from,omitempty"`
	To             string                             `protobuf:"bytes,16,opt,name=to,proto3" json:"to,omitempty"`
	Time           *timestamppb.Timestamp             `protobuf:"bytes,17,opt,name=time,proto3" json:"time,omitempty"`
	EventId        string                             `protobuf:"bytes,18,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Fee            float64                            `protobuf:"fixed64,19,opt,name=fee,proto3" json:"fee,omitempty"`
	StringFee      string                             `protobuf:"bytes,20,opt,name=string_fee,json=stringFee,proto3" json:"string_fee,omitempty"`
}

func (x *TransferUpdated) Reset() {
	*x = TransferUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferUpdated) ProtoMessage() {}

func (x *TransferUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferUpdated.ProtoReflect.Descriptor instead.
func (*TransferUpdated) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_rawDescGZIP(), []int{0}
}

func (x *TransferUpdated) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *TransferUpdated) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *TransferUpdated) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *TransferUpdated) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *TransferUpdated) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *TransferUpdated) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TransferUpdated) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *TransferUpdated) GetJpyRate() float64 {
	if x != nil {
		return x.JpyRate
	}
	return 0
}

// Deprecated: Do not use.
func (x *TransferUpdated) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TransferUpdated) GetDestinationTag() uint32 {
	if x != nil {
		return x.DestinationTag
	}
	return 0
}

func (x *TransferUpdated) GetMemoId() uint64 {
	if x != nil {
		return x.MemoId
	}
	return 0
}

func (x *TransferUpdated) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TransferUpdated) GetState() gincoincglobalv1.TransactionState {
	if x != nil {
		return x.State
	}
	return gincoincglobalv1.TransactionState(0)
}

func (x *TransferUpdated) GetResult() gincoincglobalv1.TransactionResult {
	if x != nil {
		return x.Result
	}
	return gincoincglobalv1.TransactionResult(0)
}

func (x *TransferUpdated) GetTransferType() gincoincglobalv1.TransferType {
	if x != nil {
		return x.TransferType
	}
	return gincoincglobalv1.TransferType(0)
}

func (x *TransferUpdated) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TransferUpdated) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TransferUpdated) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TransferUpdated) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *TransferUpdated) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TransferUpdated) GetStringFee() string {
	if x != nil {
		return x.StringFee
	}
	return ""
}

// TODO deprecate
type TransferUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId        string                             `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	WalletId       string                             `protobuf:"bytes,14,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Coin           gincoincglobalv1.Coin              `protobuf:"varint,2,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	TxId           string                             `protobuf:"bytes,3,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	TxIndex        uint32                             `protobuf:"varint,4,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	Value          float64                            `protobuf:"fixed64,5,opt,name=value,proto3" json:"value,omitempty"`
	StringValue    string                             `protobuf:"bytes,6,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	JpyRate        float64                            `protobuf:"fixed64,13,opt,name=jpy_rate,json=jpyRate,proto3" json:"jpy_rate,omitempty"`
	Address        string                             `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	DestinationTag uint32                             `protobuf:"varint,8,opt,name=destination_tag,json=destinationTag,proto3" json:"destination_tag,omitempty"`
	MemoId         uint64                             `protobuf:"varint,15,opt,name=memo_id,json=memoId,proto3" json:"memo_id,omitempty"`
	State          gincoincglobalv1.TransactionState  `protobuf:"varint,9,opt,name=state,proto3,enum=gincoinc.global.v1.TransactionState" json:"state,omitempty"`
	Result         gincoincglobalv1.TransactionResult `protobuf:"varint,10,opt,name=result,proto3,enum=gincoinc.global.v1.TransactionResult" json:"result,omitempty"`
	TransferType   gincoincglobalv1.TransferType      `protobuf:"varint,11,opt,name=transfer_type,json=transferType,proto3,enum=gincoinc.global.v1.TransferType" json:"transfer_type,omitempty"`
	Time           *timestamppb.Timestamp             `protobuf:"bytes,12,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TransferUpdateEvent) Reset() {
	*x = TransferUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferUpdateEvent) ProtoMessage() {}

func (x *TransferUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferUpdateEvent.ProtoReflect.Descriptor instead.
func (*TransferUpdateEvent) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_rawDescGZIP(), []int{1}
}

func (x *TransferUpdateEvent) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *TransferUpdateEvent) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *TransferUpdateEvent) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *TransferUpdateEvent) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *TransferUpdateEvent) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *TransferUpdateEvent) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TransferUpdateEvent) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *TransferUpdateEvent) GetJpyRate() float64 {
	if x != nil {
		return x.JpyRate
	}
	return 0
}

func (x *TransferUpdateEvent) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TransferUpdateEvent) GetDestinationTag() uint32 {
	if x != nil {
		return x.DestinationTag
	}
	return 0
}

func (x *TransferUpdateEvent) GetMemoId() uint64 {
	if x != nil {
		return x.MemoId
	}
	return 0
}

func (x *TransferUpdateEvent) GetState() gincoincglobalv1.TransactionState {
	if x != nil {
		return x.State
	}
	return gincoincglobalv1.TransactionState(0)
}

func (x *TransferUpdateEvent) GetResult() gincoincglobalv1.TransactionResult {
	if x != nil {
		return x.Result
	}
	return gincoincglobalv1.TransactionResult(0)
}

func (x *TransferUpdateEvent) GetTransferType() gincoincglobalv1.TransferType {
	if x != nil {
		return x.TransferType
	}
	return gincoincglobalv1.TransferType(0)
}

func (x *TransferUpdateEvent) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type EthereumStakingReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId                        string                                          `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	WithdrawalIndex                uint64                                          `protobuf:"varint,2,opt,name=withdrawal_index,json=withdrawalIndex,proto3" json:"withdrawal_index,omitempty"`
	BlockNumber                    uint64                                          `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockTime                      *timestamppb.Timestamp                          `protobuf:"bytes,4,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	ValidatorIndex                 uint64                                          `protobuf:"varint,5,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty"`
	Address                        string                                          `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	Value                          float64                                         `protobuf:"fixed64,7,opt,name=value,proto3" json:"value,omitempty"`
	WalletId                       string                                          `protobuf:"bytes,8,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	EthereumStakingRewardLayerType gincoincglobalv1.EthereumStakingRewardLayerType `protobuf:"varint,9,opt,name=ethereum_staking_reward_layer_type,json=ethereumStakingRewardLayerType,proto3,enum=gincoinc.global.v1.EthereumStakingRewardLayerType" json:"ethereum_staking_reward_layer_type,omitempty"`
	StringValue                    string                                          `protobuf:"bytes,10,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
}

func (x *EthereumStakingReward) Reset() {
	*x = EthereumStakingReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumStakingReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumStakingReward) ProtoMessage() {}

func (x *EthereumStakingReward) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumStakingReward.ProtoReflect.Descriptor instead.
func (*EthereumStakingReward) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_rawDescGZIP(), []int{2}
}

func (x *EthereumStakingReward) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EthereumStakingReward) GetWithdrawalIndex() uint64 {
	if x != nil {
		return x.WithdrawalIndex
	}
	return 0
}

func (x *EthereumStakingReward) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *EthereumStakingReward) GetBlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTime
	}
	return nil
}

func (x *EthereumStakingReward) GetValidatorIndex() uint64 {
	if x != nil {
		return x.ValidatorIndex
	}
	return 0
}

func (x *EthereumStakingReward) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *EthereumStakingReward) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *EthereumStakingReward) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *EthereumStakingReward) GetEthereumStakingRewardLayerType() gincoincglobalv1.EthereumStakingRewardLayerType {
	if x != nil {
		return x.EthereumStakingRewardLayerType
	}
	return gincoincglobalv1.EthereumStakingRewardLayerType(0)
}

func (x *EthereumStakingReward) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

var File_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto protoreflect.FileDescriptor

var file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_rawDesc = []byte{
	0x0a, 0x36, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2f, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x2e, 0x67, 0x69, 0x6e,
	0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x05, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x78,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6a, 0x70, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x6a, 0x70, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x3d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x65, 0x65, 0x22, 0xcd, 0x04, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x78, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6a, 0x70, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x6a, 0x70, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65,
	0x6d, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x3d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa2, 0x04, 0x0a, 0x15, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x69, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d,
	0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38,
	0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x7e, 0x0a, 0x22, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x69, 0x6e, 0x63, 0x6f, 0x49, 0x6e,
	0x63, 0x2f, 0x67, 0x65, 0x77, 0x2d, 0x6b, 0x6d, 0x70, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x69,
	0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2f, 0x74,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_rawDescOnce sync.Once
	file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_rawDescData = file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_rawDesc
)

func file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_rawDescGZIP() []byte {
	file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_rawDescOnce.Do(func() {
		file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_rawDescData)
	})
	return file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_rawDescData
}

var file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_goTypes = []interface{}{
	(*TransferUpdated)(nil),                              // 0: adamant.teller.v1.TransferUpdated
	(*TransferUpdateEvent)(nil),                          // 1: adamant.teller.v1.TransferUpdateEvent
	(*EthereumStakingReward)(nil),                        // 2: adamant.teller.v1.EthereumStakingReward
	(gincoincglobalv1.Coin)(0),                           // 3: gincoinc.global.v1.Coin
	(gincoincglobalv1.TransactionState)(0),               // 4: gincoinc.global.v1.TransactionState
	(gincoincglobalv1.TransactionResult)(0),              // 5: gincoinc.global.v1.TransactionResult
	(gincoincglobalv1.TransferType)(0),                   // 6: gincoinc.global.v1.TransferType
	(*timestamppb.Timestamp)(nil),                        // 7: google.protobuf.Timestamp
	(gincoincglobalv1.EthereumStakingRewardLayerType)(0), // 8: gincoinc.global.v1.EthereumStakingRewardLayerType
}
var file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_depIdxs = []int32{
	3,  // 0: adamant.teller.v1.TransferUpdated.coin:type_name -> gincoinc.global.v1.Coin
	4,  // 1: adamant.teller.v1.TransferUpdated.state:type_name -> gincoinc.global.v1.TransactionState
	5,  // 2: adamant.teller.v1.TransferUpdated.result:type_name -> gincoinc.global.v1.TransactionResult
	6,  // 3: adamant.teller.v1.TransferUpdated.transfer_type:type_name -> gincoinc.global.v1.TransferType
	7,  // 4: adamant.teller.v1.TransferUpdated.time:type_name -> google.protobuf.Timestamp
	3,  // 5: adamant.teller.v1.TransferUpdateEvent.coin:type_name -> gincoinc.global.v1.Coin
	4,  // 6: adamant.teller.v1.TransferUpdateEvent.state:type_name -> gincoinc.global.v1.TransactionState
	5,  // 7: adamant.teller.v1.TransferUpdateEvent.result:type_name -> gincoinc.global.v1.TransactionResult
	6,  // 8: adamant.teller.v1.TransferUpdateEvent.transfer_type:type_name -> gincoinc.global.v1.TransferType
	7,  // 9: adamant.teller.v1.TransferUpdateEvent.time:type_name -> google.protobuf.Timestamp
	7,  // 10: adamant.teller.v1.EthereumStakingReward.block_time:type_name -> google.protobuf.Timestamp
	8,  // 11: adamant.teller.v1.EthereumStakingReward.ethereum_staking_reward_layer_type:type_name -> gincoinc.global.v1.EthereumStakingRewardLayerType
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_init() }
func file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_init() {
	if File_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumStakingReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_goTypes,
		DependencyIndexes: file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_depIdxs,
		MessageInfos:      file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_msgTypes,
	}.Build()
	File_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto = out.File
	file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_rawDesc = nil
	file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_goTypes = nil
	file_gincoinc_adamant_teller_v1_adamanttellerv1_event_proto_depIdxs = nil
}
