// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: gincoinc/adamant/global/v1/adamantglobalv1/model.proto

package adamantglobalv1

import (
	gincoincglobalv1 "github.com/GincoInc/gew-kmp/gen/gincoinc/global/v1/gincoincglobalv1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AssetType int32

const (
	AssetType_ASSET_TYPE_INVALID AssetType = 0
	AssetType_ASSET_TYPE_ERC721  AssetType = 1
)

// Enum value maps for AssetType.
var (
	AssetType_name = map[int32]string{
		0: "ASSET_TYPE_INVALID",
		1: "ASSET_TYPE_ERC721",
	}
	AssetType_value = map[string]int32{
		"ASSET_TYPE_INVALID": 0,
		"ASSET_TYPE_ERC721":  1,
	}
)

func (x AssetType) Enum() *AssetType {
	p := new(AssetType)
	*p = x
	return p
}

func (x AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_enumTypes[0].Descriptor()
}

func (AssetType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_enumTypes[0]
}

func (x AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetType.Descriptor instead.
func (AssetType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{0}
}

// The wallet model
type Wallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId               string                       `protobuf:"bytes,23,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`                                                 // organization id
	WalletId              string                       `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`                                               // id
	Name                  string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                       // name
	Coin                  gincoincglobalv1.Coin        `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`                                         // The type of asset
	Network               gincoincglobalv1.Network     `protobuf:"varint,27,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`                               // The type of network
	HdAccount             uint32                       `protobuf:"varint,17,opt,name=hd_account,json=hdAccount,proto3" json:"hd_account,omitempty"`                                          // The number indicating what order the wallet is created
	WalletType            WalletType                   `protobuf:"varint,4,opt,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`      // type
	AddressType           gincoincglobalv1.AddressType `protobuf:"varint,5,opt,name=address_type,json=addressType,proto3,enum=gincoinc.global.v1.AddressType" json:"address_type,omitempty"` // type of address
	M                     uint32                       `protobuf:"varint,6,opt,name=m,proto3" json:"m,omitempty"`                                                                            // The number of signitures which is required to transfer asset
	N                     uint32                       `protobuf:"varint,7,opt,name=n,proto3" json:"n,omitempty"`                                                                            // The number of keys
	State                 WalletState                  `protobuf:"varint,8,opt,name=state,proto3,enum=adamant.global.v1.WalletState" json:"state,omitempty"`                                 // state
	Keys                  []*Key                       `protobuf:"bytes,9,rep,name=keys,proto3" json:"keys,omitempty"`                                                                       // keys
	Members               []*WalletMember              `protobuf:"bytes,10,rep,name=members,proto3" json:"members,omitempty"`                                                                // members
	RequiredApprovalCount uint32                       `protobuf:"varint,20,opt,name=required_approval_count,json=requiredApprovalCount,proto3" json:"required_approval_count,omitempty"`    // The number of approvals by validator which is required to transfer
	// asset, update wallet info etc.
	Balance             float64         `protobuf:"fixed64,11,opt,name=balance,proto3" json:"balance,omitempty"`                                                    // number-typed balance
	StringBalance       string          `protobuf:"bytes,12,opt,name=string_balance,json=stringBalance,proto3" json:"string_balance,omitempty"`                     // string-typed balance
	Address             string          `protobuf:"bytes,13,opt,name=address,proto3" json:"address,omitempty"`                                                      // address
	PolicyId            string          `protobuf:"bytes,14,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`                                    // The id of the policy which is adopted the wallet
	Proposal            *WalletProposal `protobuf:"bytes,18,opt,name=proposal,proto3" json:"proposal,omitempty"`                                                    // The proposal about updating the policy
	DestinationWalletId string          `protobuf:"bytes,19,opt,name=destination_wallet_id,json=destinationWalletId,proto3" json:"destination_wallet_id,omitempty"` // The id of wallet to which the tx is send (only wallet type is
	// WALLET_TYPE_SELF_CUSTODY_HOT_ETHEREUM_EOA_RECEIVE_ONLY)
	WatchOnly             bool                   `protobuf:"varint,21,opt,name=watch_only,json=watchOnly,proto3" json:"watch_only,omitempty"`                                       // The flag indicating the
	AddressNumber         uint32                 `protobuf:"varint,22,opt,name=address_number,json=addressNumber,proto3" json:"address_number,omitempty"`                           // number of address (only watch_only is true)
	ShouldCheckRemittance bool                   `protobuf:"varint,24,opt,name=should_check_remittance,json=shouldCheckRemittance,proto3" json:"should_check_remittance,omitempty"` // should check remittance
	InheritWalletId       string                 `protobuf:"bytes,25,opt,name=inherit_wallet_id,json=inheritWalletId,proto3" json:"inherit_wallet_id,omitempty"`                    // The wallet id of the inherited ethereum (only for ERC20 token)
	IsStakingAvailable    bool                   `protobuf:"varint,26,opt,name=is_staking_available,json=isStakingAvailable,proto3" json:"is_staking_available,omitempty"`          // The flag indicating the wallet is available for staking
	CreateTime            *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                     // the time at which the wallet was created
	UpdateTime            *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                     // the time at which the wallet was updated
}

func (x *Wallet) Reset() {
	*x = Wallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wallet) ProtoMessage() {}

func (x *Wallet) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wallet.ProtoReflect.Descriptor instead.
func (*Wallet) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{0}
}

func (x *Wallet) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Wallet) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *Wallet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Wallet) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *Wallet) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *Wallet) GetHdAccount() uint32 {
	if x != nil {
		return x.HdAccount
	}
	return 0
}

func (x *Wallet) GetWalletType() WalletType {
	if x != nil {
		return x.WalletType
	}
	return WalletType_WALLET_TYPE_INVALID
}

func (x *Wallet) GetAddressType() gincoincglobalv1.AddressType {
	if x != nil {
		return x.AddressType
	}
	return gincoincglobalv1.AddressType(0)
}

func (x *Wallet) GetM() uint32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *Wallet) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *Wallet) GetState() WalletState {
	if x != nil {
		return x.State
	}
	return WalletState_WALLET_STATE_INVALID
}

func (x *Wallet) GetKeys() []*Key {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Wallet) GetMembers() []*WalletMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Wallet) GetRequiredApprovalCount() uint32 {
	if x != nil {
		return x.RequiredApprovalCount
	}
	return 0
}

func (x *Wallet) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Wallet) GetStringBalance() string {
	if x != nil {
		return x.StringBalance
	}
	return ""
}

func (x *Wallet) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Wallet) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *Wallet) GetProposal() *WalletProposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *Wallet) GetDestinationWalletId() string {
	if x != nil {
		return x.DestinationWalletId
	}
	return ""
}

func (x *Wallet) GetWatchOnly() bool {
	if x != nil {
		return x.WatchOnly
	}
	return false
}

func (x *Wallet) GetAddressNumber() uint32 {
	if x != nil {
		return x.AddressNumber
	}
	return 0
}

func (x *Wallet) GetShouldCheckRemittance() bool {
	if x != nil {
		return x.ShouldCheckRemittance
	}
	return false
}

func (x *Wallet) GetInheritWalletId() string {
	if x != nil {
		return x.InheritWalletId
	}
	return ""
}

func (x *Wallet) GetIsStakingAvailable() bool {
	if x != nil {
		return x.IsStakingAvailable
	}
	return false
}

func (x *Wallet) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Wallet) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type WalletWithoutBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId               string                       `protobuf:"bytes,20,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	WalletId              string                       `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Name                  string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Coin                  gincoincglobalv1.Coin        `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	Network               gincoincglobalv1.Network     `protobuf:"varint,23,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`
	HdAccount             uint32                       `protobuf:"varint,4,opt,name=hd_account,json=hdAccount,proto3" json:"hd_account,omitempty"`
	WalletType            WalletType                   `protobuf:"varint,5,opt,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`
	AddressType           gincoincglobalv1.AddressType `protobuf:"varint,6,opt,name=address_type,json=addressType,proto3,enum=gincoinc.global.v1.AddressType" json:"address_type,omitempty"`
	M                     uint32                       `protobuf:"varint,7,opt,name=m,proto3" json:"m,omitempty"`
	N                     uint32                       `protobuf:"varint,8,opt,name=n,proto3" json:"n,omitempty"`
	State                 WalletState                  `protobuf:"varint,9,opt,name=state,proto3,enum=adamant.global.v1.WalletState" json:"state,omitempty"`
	Keys                  []*Key                       `protobuf:"bytes,10,rep,name=keys,proto3" json:"keys,omitempty"`
	Members               []*WalletMember              `protobuf:"bytes,11,rep,name=members,proto3" json:"members,omitempty"`
	RequiredApprovalCount uint32                       `protobuf:"varint,12,opt,name=required_approval_count,json=requiredApprovalCount,proto3" json:"required_approval_count,omitempty"`
	Address               string                       `protobuf:"bytes,13,opt,name=address,proto3" json:"address,omitempty"`
	PolicyId              string                       `protobuf:"bytes,14,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Proposal              *WalletProposal              `protobuf:"bytes,15,opt,name=proposal,proto3" json:"proposal,omitempty"`
	DestinationWalletId   string                       `protobuf:"bytes,16,opt,name=destination_wallet_id,json=destinationWalletId,proto3" json:"destination_wallet_id,omitempty"`
	WatchOnly             bool                         `protobuf:"varint,19,opt,name=watch_only,json=watchOnly,proto3" json:"watch_only,omitempty"`
	ShouldCheckRemittance bool                         `protobuf:"varint,21,opt,name=should_check_remittance,json=shouldCheckRemittance,proto3" json:"should_check_remittance,omitempty"`
	InheritWalletId       string                       `protobuf:"bytes,22,opt,name=inherit_wallet_id,json=inheritWalletId,proto3" json:"inherit_wallet_id,omitempty"`
	CreateTime            *timestamppb.Timestamp       `protobuf:"bytes,17,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime            *timestamppb.Timestamp       `protobuf:"bytes,18,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *WalletWithoutBalance) Reset() {
	*x = WalletWithoutBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletWithoutBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletWithoutBalance) ProtoMessage() {}

func (x *WalletWithoutBalance) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletWithoutBalance.ProtoReflect.Descriptor instead.
func (*WalletWithoutBalance) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{1}
}

func (x *WalletWithoutBalance) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *WalletWithoutBalance) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *WalletWithoutBalance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WalletWithoutBalance) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *WalletWithoutBalance) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *WalletWithoutBalance) GetHdAccount() uint32 {
	if x != nil {
		return x.HdAccount
	}
	return 0
}

func (x *WalletWithoutBalance) GetWalletType() WalletType {
	if x != nil {
		return x.WalletType
	}
	return WalletType_WALLET_TYPE_INVALID
}

func (x *WalletWithoutBalance) GetAddressType() gincoincglobalv1.AddressType {
	if x != nil {
		return x.AddressType
	}
	return gincoincglobalv1.AddressType(0)
}

func (x *WalletWithoutBalance) GetM() uint32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *WalletWithoutBalance) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *WalletWithoutBalance) GetState() WalletState {
	if x != nil {
		return x.State
	}
	return WalletState_WALLET_STATE_INVALID
}

func (x *WalletWithoutBalance) GetKeys() []*Key {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *WalletWithoutBalance) GetMembers() []*WalletMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *WalletWithoutBalance) GetRequiredApprovalCount() uint32 {
	if x != nil {
		return x.RequiredApprovalCount
	}
	return 0
}

func (x *WalletWithoutBalance) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *WalletWithoutBalance) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *WalletWithoutBalance) GetProposal() *WalletProposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *WalletWithoutBalance) GetDestinationWalletId() string {
	if x != nil {
		return x.DestinationWalletId
	}
	return ""
}

func (x *WalletWithoutBalance) GetWatchOnly() bool {
	if x != nil {
		return x.WatchOnly
	}
	return false
}

func (x *WalletWithoutBalance) GetShouldCheckRemittance() bool {
	if x != nil {
		return x.ShouldCheckRemittance
	}
	return false
}

func (x *WalletWithoutBalance) GetInheritWalletId() string {
	if x != nil {
		return x.InheritWalletId
	}
	return ""
}

func (x *WalletWithoutBalance) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *WalletWithoutBalance) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// The staking wallet model
type StakingWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId                           string                       `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`                                                                                    // organization id
	WalletId                          string                       `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`                                                                                 // id
	Name                              string                       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                                                         // name
	Coin                              gincoincglobalv1.Coin        `protobuf:"varint,4,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`                                                                           // The type of asset
	WalletType                        WalletType                   `protobuf:"varint,5,opt,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`                                        // type
	AddressType                       gincoincglobalv1.AddressType `protobuf:"varint,6,opt,name=address_type,json=addressType,proto3,enum=gincoinc.global.v1.AddressType" json:"address_type,omitempty"`                                   // type of address
	State                             WalletState                  `protobuf:"varint,7,opt,name=state,proto3,enum=adamant.global.v1.WalletState" json:"state,omitempty"`                                                                   // state
	Balance                           float64                      `protobuf:"fixed64,8,opt,name=balance,proto3" json:"balance,omitempty"`                                                                                                 // number-typed balance
	StringBalance                     string                       `protobuf:"bytes,9,opt,name=string_balance,json=stringBalance,proto3" json:"string_balance,omitempty"`                                                                  // string-typed balance
	SpendableBalance                  float64                      `protobuf:"fixed64,10,opt,name=spendable_balance,json=spendableBalance,proto3" json:"spendable_balance,omitempty"`                                                      // number-typed spendable balance
	StringSpendableBalance            string                       `protobuf:"bytes,11,opt,name=string_spendable_balance,json=stringSpendableBalance,proto3" json:"string_spendable_balance,omitempty"`                                    // string-typed spendable balance
	StakingBalance                    float64                      `protobuf:"fixed64,12,opt,name=staking_balance,json=stakingBalance,proto3" json:"staking_balance,omitempty"`                                                            // number-typed staking balance
	StringStakingBalance              string                       `protobuf:"bytes,13,opt,name=string_staking_balance,json=stringStakingBalance,proto3" json:"string_staking_balance,omitempty"`                                          // string-typed staking balance
	ClaimableRewardBalance            float64                      `protobuf:"fixed64,14,opt,name=claimable_reward_balance,json=claimableRewardBalance,proto3" json:"claimable_reward_balance,omitempty"`                                  // number-typed claimable reward balance
	StringClaimableRewardBalance      string                       `protobuf:"bytes,15,opt,name=string_claimable_reward_balance,json=stringClaimableRewardBalance,proto3" json:"string_claimable_reward_balance,omitempty"`                // string-typed claimable reward balance
	WithdrawableUnstakedBalance       float64                      `protobuf:"fixed64,20,opt,name=withdrawable_unstaked_balance,json=withdrawableUnstakedBalance,proto3" json:"withdrawable_unstaked_balance,omitempty"`                   // number-typed withdrawable unstaked balance
	StringWithdrawableUnstakedBalance string                       `protobuf:"bytes,21,opt,name=string_withdrawable_unstaked_balance,json=stringWithdrawableUnstakedBalance,proto3" json:"string_withdrawable_unstaked_balance,omitempty"` // string-typed withdrawable unstaked balance
	FrozenUnstakedBalance             float64                      `protobuf:"fixed64,22,opt,name=frozen_unstaked_balance,json=frozenUnstakedBalance,proto3" json:"frozen_unstaked_balance,omitempty"`                                     // number-typed frozen unstaked balance
	StringFrozenUnstakedBalance       string                       `protobuf:"bytes,23,opt,name=string_frozen_unstaked_balance,json=stringFrozenUnstakedBalance,proto3" json:"string_frozen_unstaked_balance,omitempty"`                   // string-typed frozen unstaked balance
	Address                           string                       `protobuf:"bytes,16,opt,name=address,proto3" json:"address,omitempty"`                                                                                                  // address
	ActiveValidatorsCount             uint32                       `protobuf:"varint,19,opt,name=active_validators_count,json=activeValidatorsCount,proto3" json:"active_validators_count,omitempty"`                                      // number of active validators
	CreateTime                        *timestamppb.Timestamp       `protobuf:"bytes,17,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                                                          // the time at which the wallet was created
	UpdateTime                        *timestamppb.Timestamp       `protobuf:"bytes,18,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                                                          // the time at which the wallet was updated
}

func (x *StakingWallet) Reset() {
	*x = StakingWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingWallet) ProtoMessage() {}

func (x *StakingWallet) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingWallet.ProtoReflect.Descriptor instead.
func (*StakingWallet) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{2}
}

func (x *StakingWallet) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *StakingWallet) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *StakingWallet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StakingWallet) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *StakingWallet) GetWalletType() WalletType {
	if x != nil {
		return x.WalletType
	}
	return WalletType_WALLET_TYPE_INVALID
}

func (x *StakingWallet) GetAddressType() gincoincglobalv1.AddressType {
	if x != nil {
		return x.AddressType
	}
	return gincoincglobalv1.AddressType(0)
}

func (x *StakingWallet) GetState() WalletState {
	if x != nil {
		return x.State
	}
	return WalletState_WALLET_STATE_INVALID
}

func (x *StakingWallet) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *StakingWallet) GetStringBalance() string {
	if x != nil {
		return x.StringBalance
	}
	return ""
}

func (x *StakingWallet) GetSpendableBalance() float64 {
	if x != nil {
		return x.SpendableBalance
	}
	return 0
}

func (x *StakingWallet) GetStringSpendableBalance() string {
	if x != nil {
		return x.StringSpendableBalance
	}
	return ""
}

func (x *StakingWallet) GetStakingBalance() float64 {
	if x != nil {
		return x.StakingBalance
	}
	return 0
}

func (x *StakingWallet) GetStringStakingBalance() string {
	if x != nil {
		return x.StringStakingBalance
	}
	return ""
}

func (x *StakingWallet) GetClaimableRewardBalance() float64 {
	if x != nil {
		return x.ClaimableRewardBalance
	}
	return 0
}

func (x *StakingWallet) GetStringClaimableRewardBalance() string {
	if x != nil {
		return x.StringClaimableRewardBalance
	}
	return ""
}

func (x *StakingWallet) GetWithdrawableUnstakedBalance() float64 {
	if x != nil {
		return x.WithdrawableUnstakedBalance
	}
	return 0
}

func (x *StakingWallet) GetStringWithdrawableUnstakedBalance() string {
	if x != nil {
		return x.StringWithdrawableUnstakedBalance
	}
	return ""
}

func (x *StakingWallet) GetFrozenUnstakedBalance() float64 {
	if x != nil {
		return x.FrozenUnstakedBalance
	}
	return 0
}

func (x *StakingWallet) GetStringFrozenUnstakedBalance() string {
	if x != nil {
		return x.StringFrozenUnstakedBalance
	}
	return ""
}

func (x *StakingWallet) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *StakingWallet) GetActiveValidatorsCount() uint32 {
	if x != nil {
		return x.ActiveValidatorsCount
	}
	return 0
}

func (x *StakingWallet) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *StakingWallet) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// The NFT wallet model
type NFTWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId       string                       `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`                                                  // organization id
	WalletId      string                       `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`                                               // id
	Name          string                       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                       // name
	Coin          gincoincglobalv1.Coin        `protobuf:"varint,4,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`                                         // The type of asset
	WalletType    WalletType                   `protobuf:"varint,5,opt,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`      // type
	AddressType   gincoincglobalv1.AddressType `protobuf:"varint,6,opt,name=address_type,json=addressType,proto3,enum=gincoinc.global.v1.AddressType" json:"address_type,omitempty"` // type of address
	State         WalletState                  `protobuf:"varint,7,opt,name=state,proto3,enum=adamant.global.v1.WalletState" json:"state,omitempty"`                                 // state
	Address       string                       `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`                                                                 // address
	NftOwnerships []*NFTOwnership              `protobuf:"bytes,9,rep,name=nft_ownerships,json=nftOwnerships,proto3" json:"nft_ownerships,omitempty"`                                // nft ownership
	CreateTime    *timestamppb.Timestamp       `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                        // the time at which the wallet was created
	UpdateTime    *timestamppb.Timestamp       `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                        // the time at which the wallet was updated
}

func (x *NFTWallet) Reset() {
	*x = NFTWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTWallet) ProtoMessage() {}

func (x *NFTWallet) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTWallet.ProtoReflect.Descriptor instead.
func (*NFTWallet) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{3}
}

func (x *NFTWallet) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *NFTWallet) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *NFTWallet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NFTWallet) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *NFTWallet) GetWalletType() WalletType {
	if x != nil {
		return x.WalletType
	}
	return WalletType_WALLET_TYPE_INVALID
}

func (x *NFTWallet) GetAddressType() gincoincglobalv1.AddressType {
	if x != nil {
		return x.AddressType
	}
	return gincoincglobalv1.AddressType(0)
}

func (x *NFTWallet) GetState() WalletState {
	if x != nil {
		return x.State
	}
	return WalletState_WALLET_STATE_INVALID
}

func (x *NFTWallet) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *NFTWallet) GetNftOwnerships() []*NFTOwnership {
	if x != nil {
		return x.NftOwnerships
	}
	return nil
}

func (x *NFTWallet) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *NFTWallet) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type NFTOwnership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin gincoincglobalv1.Coin `protobuf:"varint,1,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
}

func (x *NFTOwnership) Reset() {
	*x = NFTOwnership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTOwnership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTOwnership) ProtoMessage() {}

func (x *NFTOwnership) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTOwnership.ProtoReflect.Descriptor instead.
func (*NFTOwnership) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{4}
}

func (x *NFTOwnership) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

// The model of proposal to update wallet information
type WalletProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposalType       WalletProposalType `protobuf:"varint,7,opt,name=proposal_type,json=proposalType,proto3,enum=adamant.global.v1.WalletProposalType" json:"proposal_type,omitempty"` // The type of the proposal
	RequesterAccountId string             `protobuf:"bytes,1,opt,name=requester_account_id,json=requesterAccountId,proto3" json:"requester_account_id,omitempty"`                        // The account id which create the proposal
	RequesterName      string             `protobuf:"bytes,2,opt,name=requester_name,json=requesterName,proto3" json:"requester_name,omitempty"`                                         // The name of the account which create the proposal
	ApproverAccountId  string             `protobuf:"bytes,3,opt,name=approver_account_id,json=approverAccountId,proto3" json:"approver_account_id,omitempty"`                           // The account id which approve the proposal
	ApproverName       string             `protobuf:"bytes,4,opt,name=approver_name,json=approverName,proto3" json:"approver_name,omitempty"`                                            // The name of the account which approve the proposal
	ProposedPolicy     string             `protobuf:"bytes,5,opt,name=proposed_policy,json=proposedPolicy,proto3" json:"proposed_policy,omitempty"`                                      // The proposed id of the policy which is trying
	// to be applied in the proposal
	ProposedValidators            []string `protobuf:"bytes,8,rep,name=proposed_validators,json=proposedValidators,proto3" json:"proposed_validators,omitempty"`                                       // The proposed list of ids of validator
	ProposedRequiredApprovalCount uint32   `protobuf:"varint,9,opt,name=proposed_required_approval_count,json=proposedRequiredApprovalCount,proto3" json:"proposed_required_approval_count,omitempty"` // The proposed number of approvals by validator
	IsReviewed                    bool     `protobuf:"varint,6,opt,name=is_reviewed,json=isReviewed,proto3" json:"is_reviewed,omitempty"`                                                              // The flag which indicates the proposal is reviewed or not
}

func (x *WalletProposal) Reset() {
	*x = WalletProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletProposal) ProtoMessage() {}

func (x *WalletProposal) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletProposal.ProtoReflect.Descriptor instead.
func (*WalletProposal) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{5}
}

func (x *WalletProposal) GetProposalType() WalletProposalType {
	if x != nil {
		return x.ProposalType
	}
	return WalletProposalType_WALLET_PROPOSAL_TYPE_INVALID
}

func (x *WalletProposal) GetRequesterAccountId() string {
	if x != nil {
		return x.RequesterAccountId
	}
	return ""
}

func (x *WalletProposal) GetRequesterName() string {
	if x != nil {
		return x.RequesterName
	}
	return ""
}

func (x *WalletProposal) GetApproverAccountId() string {
	if x != nil {
		return x.ApproverAccountId
	}
	return ""
}

func (x *WalletProposal) GetApproverName() string {
	if x != nil {
		return x.ApproverName
	}
	return ""
}

func (x *WalletProposal) GetProposedPolicy() string {
	if x != nil {
		return x.ProposedPolicy
	}
	return ""
}

func (x *WalletProposal) GetProposedValidators() []string {
	if x != nil {
		return x.ProposedValidators
	}
	return nil
}

func (x *WalletProposal) GetProposedRequiredApprovalCount() uint32 {
	if x != nil {
		return x.ProposedRequiredApprovalCount
	}
	return 0
}

func (x *WalletProposal) GetIsReviewed() bool {
	if x != nil {
		return x.IsReviewed
	}
	return false
}

// The model of wallet member
type WalletMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       string      `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                           // id
	AccountType     AccountType `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3,enum=adamant.global.v1.AccountType" json:"account_type,omitempty"` // The account type
	Name            string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                      // name
	Email           string      `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`                                                                    // email
	Role            RoleType    `protobuf:"varint,5,opt,name=role,proto3,enum=adamant.global.v1.RoleType" json:"role,omitempty"`                                     // The role type of account in organization
	IsKeyRegistered bool        `protobuf:"varint,6,opt,name=is_key_registered,json=isKeyRegistered,proto3" json:"is_key_registered,omitempty"`                      // The flag which indicates the member registered a key to wallet
	IsMaster        bool        `protobuf:"varint,7,opt,name=is_master,json=isMaster,proto3" json:"is_master,omitempty"`                                             // The flag which indicates the member is master user
	// (only XRP wallet)
	IsValidatedToCreateWallet bool `protobuf:"varint,8,opt,name=is_validated_to_create_wallet,json=isValidatedToCreateWallet,proto3" json:"is_validated_to_create_wallet,omitempty"` // The flag which indicates the member is validated to create wallet
}

func (x *WalletMember) Reset() {
	*x = WalletMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletMember) ProtoMessage() {}

func (x *WalletMember) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletMember.ProtoReflect.Descriptor instead.
func (*WalletMember) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{6}
}

func (x *WalletMember) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *WalletMember) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_ACCOUNT_TYPE_INVALID
}

func (x *WalletMember) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WalletMember) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *WalletMember) GetRole() RoleType {
	if x != nil {
		return x.Role
	}
	return RoleType_ROLE_TYPE_INVALID
}

func (x *WalletMember) GetIsKeyRegistered() bool {
	if x != nil {
		return x.IsKeyRegistered
	}
	return false
}

func (x *WalletMember) GetIsMaster() bool {
	if x != nil {
		return x.IsMaster
	}
	return false
}

func (x *WalletMember) GetIsValidatedToCreateWallet() bool {
	if x != nil {
		return x.IsValidatedToCreateWallet
	}
	return false
}

// The model of key pair
type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId    string      `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`                                              // The id of wallet
	AccountId   string      `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                           // The id of account which owns the key
	AccountType AccountType `protobuf:"varint,3,opt,name=account_type,json=accountType,proto3,enum=adamant.global.v1.AccountType" json:"account_type,omitempty"` // The account type of key owner
	KeyId       string      `protobuf:"bytes,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`                                                       // id
	KeyIndex    uint32      `protobuf:"varint,5,opt,name=key_index,json=keyIndex,proto3" json:"key_index,omitempty"`                                             // The index of key
	HdIndex     uint32      `protobuf:"varint,6,opt,name=hd_index,json=hdIndex,proto3" json:"hd_index,omitempty"`                                                // The index of hdkey
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{7}
}

func (x *Key) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *Key) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Key) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_ACCOUNT_TYPE_INVALID
}

func (x *Key) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *Key) GetKeyIndex() uint32 {
	if x != nil {
		return x.KeyIndex
	}
	return 0
}

func (x *Key) GetHdIndex() uint32 {
	if x != nil {
		return x.HdIndex
	}
	return 0
}

// The model of address
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string                       `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`                                               // The id of wallet
	AddressId     string                       `protobuf:"bytes,2,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`                                            // id
	Coin          gincoincglobalv1.Coin        `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`                                         // The type of coin
	Network       gincoincglobalv1.Network     `protobuf:"varint,14,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`                               // The network of coin
	Address       string                       `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`                                                                 // address
	Index         uint32                       `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`                                                                    // The index of address
	HdChange      uint32                       `protobuf:"varint,13,opt,name=hd_change,json=hdChange,proto3" json:"hd_change,omitempty"`                                             // The HD change of address
	Balance       float64                      `protobuf:"fixed64,6,opt,name=balance,proto3" json:"balance,omitempty"`                                                               // The number-typed balance corresponding to the address
	StringBalance string                       `protobuf:"bytes,7,opt,name=string_balance,json=stringBalance,proto3" json:"string_balance,omitempty"`                                // The string-typed balance corresponding to the address
	State         AddressState                 `protobuf:"varint,8,opt,name=state,proto3,enum=adamant.global.v1.AddressState" json:"state,omitempty"`                                // state
	AddressType   gincoincglobalv1.AddressType `protobuf:"varint,9,opt,name=address_type,json=addressType,proto3,enum=gincoinc.global.v1.AddressType" json:"address_type,omitempty"` // The type of address
	CreateTime    *timestamppb.Timestamp       `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                        // the time at which the address was created
	UpdateTime    *timestamppb.Timestamp       `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                        // the time at which the address was updated
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{8}
}

func (x *Address) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *Address) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

func (x *Address) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *Address) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Address) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Address) GetHdChange() uint32 {
	if x != nil {
		return x.HdChange
	}
	return 0
}

func (x *Address) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Address) GetStringBalance() string {
	if x != nil {
		return x.StringBalance
	}
	return ""
}

func (x *Address) GetState() AddressState {
	if x != nil {
		return x.State
	}
	return AddressState_ADDRESS_STATE_INVALID
}

func (x *Address) GetAddressType() gincoincglobalv1.AddressType {
	if x != nil {
		return x.AddressType
	}
	return gincoincglobalv1.AddressType(0)
}

func (x *Address) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Address) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// The model of AddressWithoutBalance
type AddressWithoutBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId    string                       `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`                                               // The id of wallet
	AddressId   string                       `protobuf:"bytes,2,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`                                            // id
	Coin        gincoincglobalv1.Coin        `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`                                         // The type of coin
	Network     gincoincglobalv1.Network     `protobuf:"varint,11,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`                               // The network of coin
	Address     string                       `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`                                                                 // address
	Index       uint32                       `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`                                                                    // The index of address
	HdChange    uint32                       `protobuf:"varint,10,opt,name=hd_change,json=hdChange,proto3" json:"hd_change,omitempty"`                                             // The HD change of address
	State       AddressState                 `protobuf:"varint,6,opt,name=state,proto3,enum=adamant.global.v1.AddressState" json:"state,omitempty"`                                // state
	AddressType gincoincglobalv1.AddressType `protobuf:"varint,7,opt,name=address_type,json=addressType,proto3,enum=gincoinc.global.v1.AddressType" json:"address_type,omitempty"` // The type of address
	CreateTime  *timestamppb.Timestamp       `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                         // the time at which the address was created
	UpdateTime  *timestamppb.Timestamp       `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                         // the time at which the address was updated
}

func (x *AddressWithoutBalance) Reset() {
	*x = AddressWithoutBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressWithoutBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressWithoutBalance) ProtoMessage() {}

func (x *AddressWithoutBalance) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressWithoutBalance.ProtoReflect.Descriptor instead.
func (*AddressWithoutBalance) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{9}
}

func (x *AddressWithoutBalance) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *AddressWithoutBalance) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

func (x *AddressWithoutBalance) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *AddressWithoutBalance) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *AddressWithoutBalance) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddressWithoutBalance) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AddressWithoutBalance) GetHdChange() uint32 {
	if x != nil {
		return x.HdChange
	}
	return 0
}

func (x *AddressWithoutBalance) GetState() AddressState {
	if x != nil {
		return x.State
	}
	return AddressState_ADDRESS_STATE_INVALID
}

func (x *AddressWithoutBalance) GetAddressType() gincoincglobalv1.AddressType {
	if x != nil {
		return x.AddressType
	}
	return gincoincglobalv1.AddressType(0)
}

func (x *AddressWithoutBalance) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *AddressWithoutBalance) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type FlushedAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId    string                       `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`                                                // The id of wallet
	AddressId   string                       `protobuf:"bytes,2,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`                                             // id
	Coin        gincoincglobalv1.Coin        `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`                                          // The type of coin
	Address     string                       `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`                                                                  // address
	Index       uint32                       `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`                                                                     // The index of address
	Value       float64                      `protobuf:"fixed64,6,opt,name=value,proto3" json:"value,omitempty"`                                                                    // The number-typed value corresponding to the address
	StringValue string                       `protobuf:"bytes,7,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`                                       // The string-typed string value corresponding to the address
	State       AddressState                 `protobuf:"varint,9,opt,name=state,proto3,enum=adamant.global.v1.AddressState" json:"state,omitempty"`                                 // state
	AddressType gincoincglobalv1.AddressType `protobuf:"varint,10,opt,name=address_type,json=addressType,proto3,enum=gincoinc.global.v1.AddressType" json:"address_type,omitempty"` // The type of address
}

func (x *FlushedAddress) Reset() {
	*x = FlushedAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushedAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushedAddress) ProtoMessage() {}

func (x *FlushedAddress) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushedAddress.ProtoReflect.Descriptor instead.
func (*FlushedAddress) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{10}
}

func (x *FlushedAddress) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *FlushedAddress) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

func (x *FlushedAddress) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *FlushedAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FlushedAddress) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *FlushedAddress) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *FlushedAddress) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *FlushedAddress) GetState() AddressState {
	if x != nil {
		return x.State
	}
	return AddressState_ADDRESS_STATE_INVALID
}

func (x *FlushedAddress) GetAddressType() gincoincglobalv1.AddressType {
	if x != nil {
		return x.AddressType
	}
	return gincoincglobalv1.AddressType(0)
}

// The model of address which hold ETH for ethereum wallet/address creation etc
type EthereumFeeAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address       string  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                                  // ethereum address
	Balance       float64 `protobuf:"fixed64,2,opt,name=balance,proto3" json:"balance,omitempty"`                                // The number-typed balance corresponding to the address
	StringBalance string  `protobuf:"bytes,3,opt,name=string_balance,json=stringBalance,proto3" json:"string_balance,omitempty"` // The string-typed balance corresponding to the address
}

func (x *EthereumFeeAddress) Reset() {
	*x = EthereumFeeAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumFeeAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumFeeAddress) ProtoMessage() {}

func (x *EthereumFeeAddress) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumFeeAddress.ProtoReflect.Descriptor instead.
func (*EthereumFeeAddress) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{11}
}

func (x *EthereumFeeAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *EthereumFeeAddress) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *EthereumFeeAddress) GetStringBalance() string {
	if x != nil {
		return x.StringBalance
	}
	return ""
}

type AddressWithBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address          string  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                                             // address
	Balance          float64 `protobuf:"fixed64,2,opt,name=balance,proto3" json:"balance,omitempty"`                                           // The number-typed balance corresponding to the address
	StringBalance    string  `protobuf:"bytes,3,opt,name=string_balance,json=stringBalance,proto3" json:"string_balance,omitempty"`            // The string-typed balance corresponding to the address
	FeeBalance       float64 `protobuf:"fixed64,4,opt,name=fee_balance,json=feeBalance,proto3" json:"fee_balance,omitempty"`                   // The number-typed fee balance corresponding to the address
	StringFeeBalance string  `protobuf:"bytes,5,opt,name=string_fee_balance,json=stringFeeBalance,proto3" json:"string_fee_balance,omitempty"` // The string-typed string fee balance corresponding to the address
}

func (x *AddressWithBalance) Reset() {
	*x = AddressWithBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressWithBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressWithBalance) ProtoMessage() {}

func (x *AddressWithBalance) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressWithBalance.ProtoReflect.Descriptor instead.
func (*AddressWithBalance) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{12}
}

func (x *AddressWithBalance) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddressWithBalance) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AddressWithBalance) GetStringBalance() string {
	if x != nil {
		return x.StringBalance
	}
	return ""
}

func (x *AddressWithBalance) GetFeeBalance() float64 {
	if x != nil {
		return x.FeeBalance
	}
	return 0
}

func (x *AddressWithBalance) GetStringFeeBalance() string {
	if x != nil {
		return x.StringFeeBalance
	}
	return ""
}

// The model of pre transaction
type PreTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreTransactionId string                   `protobuf:"bytes,1,opt,name=pre_transaction_id,json=preTransactionId,proto3" json:"pre_transaction_id,omitempty"` // id
	OwnerId          string                   `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`                              // organization id
	ExternalId       string                   `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`                     // external withdrawal id
	Coin             gincoincglobalv1.Coin    `protobuf:"varint,4,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`                     // The type of coin
	Network          gincoincglobalv1.Network `protobuf:"varint,5,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`            // Network
	Details          []*PreTransactionDetail  `protobuf:"bytes,6,rep,name=details,proto3" json:"details,omitempty"`                                             // Details about recipients
	State            PreTransactionState      `protobuf:"varint,7,opt,name=state,proto3,enum=adamant.global.v1.PreTransactionState" json:"state,omitempty"`     // The state of pre-transaction
	TransactionId    string                   `protobuf:"bytes,8,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`            // transaction id for which pre-transaction is used
	CreateTime       *timestamppb.Timestamp   `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                     // the time at which the pre transaction was created
	UpdateTime       *timestamppb.Timestamp   `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                    // the time at which the pre transaction was updated
}

func (x *PreTransaction) Reset() {
	*x = PreTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreTransaction) ProtoMessage() {}

func (x *PreTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreTransaction.ProtoReflect.Descriptor instead.
func (*PreTransaction) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{13}
}

func (x *PreTransaction) GetPreTransactionId() string {
	if x != nil {
		return x.PreTransactionId
	}
	return ""
}

func (x *PreTransaction) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *PreTransaction) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *PreTransaction) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *PreTransaction) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *PreTransaction) GetDetails() []*PreTransactionDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *PreTransaction) GetState() PreTransactionState {
	if x != nil {
		return x.State
	}
	return PreTransactionState_PRE_TRANSACTION_STATE_INVALID
}

func (x *PreTransaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PreTransaction) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *PreTransaction) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type PreTransactionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
}

func (x *PreTransactionDetail) Reset() {
	*x = PreTransactionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreTransactionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreTransactionDetail) ProtoMessage() {}

func (x *PreTransactionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreTransactionDetail.ProtoReflect.Descriptor instead.
func (*PreTransactionDetail) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{14}
}

func (x *PreTransactionDetail) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PreTransactionDetail) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

// The model of transaction
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string                   `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`                 // The id of wallet
	TransactionId string                   `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`  // id
	Coin          gincoincglobalv1.Coin    `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`           // The type of coin
	Network       gincoincglobalv1.Network `protobuf:"varint,47,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"` // The network of coin
	TxId          string                   `protobuf:"bytes,4,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`                             // txID
	Address       string                   `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`                                   // address
	Value         float64                  `protobuf:"fixed64,6,opt,name=value,proto3" json:"value,omitempty"`                                     // The number-typed amount of transaction
	StringValue   string                   `protobuf:"bytes,7,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`        // The string-typed amount of transaction
	JpyRate       float64                  `protobuf:"fixed64,9,opt,name=jpy_rate,json=jpyRate,proto3" json:"jpy_rate,omitempty"`                  // The rate of fiat
	Fee           float64                  `protobuf:"fixed64,10,opt,name=fee,proto3" json:"fee,omitempty"`                                        // The number-typed amount of transaction fee
	StringFee     string                   `protobuf:"bytes,11,opt,name=string_fee,json=stringFee,proto3" json:"string_fee,omitempty"`             // The string-typed amount of transaction fee
	FeeRate       uint64                   `protobuf:"varint,12,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`                  // The fee rate of transaction (only BTC and its forks.
	// unit: sat/Byte)
	State                          TransactionState                `protobuf:"varint,13,opt,name=state,proto3,enum=adamant.global.v1.TransactionState" json:"state,omitempty"`                                                    // state
	SignedKeys                     []*Key                          `protobuf:"bytes,14,rep,name=signed_keys,json=signedKeys,proto3" json:"signed_keys,omitempty"`                                                                 // The list of keys which signed to the transaction
	Members                        []*TransactionMember            `protobuf:"bytes,17,rep,name=members,proto3" json:"members,omitempty"`                                                                                         // members
	BitcoinSpecific                *BitcoinSpecific                `protobuf:"bytes,22,opt,name=bitcoin_specific,json=bitcoinSpecific,proto3" json:"bitcoin_specific,omitempty"`                                                  // The Bitcoin specific fields
	EthereumSpecific               *EthereumSpecific               `protobuf:"bytes,20,opt,name=ethereum_specific,json=ethereumSpecific,proto3" json:"ethereum_specific,omitempty"`                                               // The Ethereum specific fields
	LitecoinSpecific               *LitecoinSpecific               `protobuf:"bytes,23,opt,name=litecoin_specific,json=litecoinSpecific,proto3" json:"litecoin_specific,omitempty"`                                               // The Litecoin specific fields
	BitcoincashSpecific            *BitcoincashSpecific            `protobuf:"bytes,24,opt,name=bitcoincash_specific,json=bitcoincashSpecific,proto3" json:"bitcoincash_specific,omitempty"`                                      // The Bitcoin Cash specific fields
	XrpSpecific                    *XrpSpecific                    `protobuf:"bytes,21,opt,name=xrp_specific,json=xrpSpecific,proto3" json:"xrp_specific,omitempty"`                                                              // The XRP specific fields
	TronSpecific                   *TronSpecific                   `protobuf:"bytes,25,opt,name=tron_specific,json=tronSpecific,proto3" json:"tron_specific,omitempty"`                                                           // The Tron specific fields
	C0BanSpecific                  *C0BanSpecific                  `protobuf:"bytes,26,opt,name=c0ban_specific,json=c0banSpecific,proto3" json:"c0ban_specific,omitempty"`                                                        // The C0ban specific fields
	StellarSpecific                *StellarSpecific                `protobuf:"bytes,27,opt,name=stellar_specific,json=stellarSpecific,proto3" json:"stellar_specific,omitempty"`                                                  // The Stellar specific fields
	CardanoSpecific                *CardanoSpecific                `protobuf:"bytes,28,opt,name=cardano_specific,json=cardanoSpecific,proto3" json:"cardano_specific,omitempty"`                                                  // The Cardano specific fields
	SubstrateSpecific              *SubstrateSpecific              `protobuf:"bytes,29,opt,name=substrate_specific,json=substrateSpecific,proto3" json:"substrate_specific,omitempty"`                                            // The Substrate specific fields
	MonacoinSpecific               *MonacoinSpecific               `protobuf:"bytes,30,opt,name=monacoin_specific,json=monacoinSpecific,proto3" json:"monacoin_specific,omitempty"`                                               // The Monacoin specific fields
	NemSpecific                    *NemSpecific                    `protobuf:"bytes,31,opt,name=nem_specific,json=nemSpecific,proto3" json:"nem_specific,omitempty"`                                                              // The Nem specific fields
	IostSpecific                   *IOSTSpecific                   `protobuf:"bytes,32,opt,name=iost_specific,json=iostSpecific,proto3" json:"iost_specific,omitempty"`                                                           // The IOST specific fields
	PolygonSpecific                *PolygonSpecific                `protobuf:"bytes,33,opt,name=polygon_specific,json=polygonSpecific,proto3" json:"polygon_specific,omitempty"`                                                  // The Polygon specific fields
	KlaytnSpecific                 *KlaytnSpecific                 `protobuf:"bytes,34,opt,name=klaytn_specific,json=klaytnSpecific,proto3" json:"klaytn_specific,omitempty"`                                                     // The Klaytn specific fields
	SymbolSpecific                 *SymbolSpecific                 `protobuf:"bytes,35,opt,name=symbol_specific,json=symbolSpecific,proto3" json:"symbol_specific,omitempty"`                                                     // The Symbol specific fields
	AvalancheSpecific              *AvalancheSpecific              `protobuf:"bytes,36,opt,name=avalanche_specific,json=avalancheSpecific,proto3" json:"avalanche_specific,omitempty"`                                            // The Avalanche specific fields
	OasysSpecific                  *OasysSpecific                  `protobuf:"bytes,37,opt,name=oasys_specific,json=oasysSpecific,proto3" json:"oasys_specific,omitempty"`                                                        // The Oasys specific fields
	XdcSpecific                    *XdcSpecific                    `protobuf:"bytes,38,opt,name=xdc_specific,json=xdcSpecific,proto3" json:"xdc_specific,omitempty"`                                                              // The Xdc specific fields
	CosmosSpecific                 *CosmosSpecific                 `protobuf:"bytes,39,opt,name=cosmos_specific,json=cosmosSpecific,proto3" json:"cosmos_specific,omitempty"`                                                     // The Cosmos specific fields
	EthereumClassicSpecific        *EthereumClassicSpecific        `protobuf:"bytes,40,opt,name=ethereum_classic_specific,json=ethereumClassicSpecific,proto3" json:"ethereum_classic_specific,omitempty"`                        // The Ethereum Classic specific fields
	AlgorandSpecific               *AlgorandSpecific               `protobuf:"bytes,41,opt,name=algorand_specific,json=algorandSpecific,proto3" json:"algorand_specific,omitempty"`                                               // The Algorand specific fields
	HederaSpecific                 *HederaSpecific                 `protobuf:"bytes,42,opt,name=hedera_specific,json=hederaSpecific,proto3" json:"hedera_specific,omitempty"`                                                     // The Hedera specific fields
	JapanOpenChainSpecific         *JapanOpenChainSpecific         `protobuf:"bytes,43,opt,name=japan_open_chain_specific,json=japanOpenChainSpecific,proto3" json:"japan_open_chain_specific,omitempty"`                         // The Japan Open Chain specific fields
	SolanaSpecific                 *SolanaSpecific                 `protobuf:"bytes,44,opt,name=solana_specific,json=solanaSpecific,proto3" json:"solana_specific,omitempty"`                                                     // The Solana specific fields
	BnbSmartChainSpecific          *BNBSmartChainSpecific          `protobuf:"bytes,45,opt,name=bnb_smart_chain_specific,json=bnbSmartChainSpecific,proto3" json:"bnb_smart_chain_specific,omitempty"`                            // The BNB Smart Chain specific fields
	FlareSpecific                  *FlareSpecific                  `protobuf:"bytes,46,opt,name=flare_specific,json=flareSpecific,proto3" json:"flare_specific,omitempty"`                                                        // The Flare specific fields
	ArbitrumOneSpecific            *ArbitrumOneSpecific            `protobuf:"bytes,48,opt,name=arbitrum_one_specific,json=arbitrumOneSpecific,proto3" json:"arbitrum_one_specific,omitempty"`                                    // The Arbitrum specific fields
	AptosSpecific                  *AptosSpecific                  `protobuf:"bytes,49,opt,name=aptos_specific,json=aptosSpecific,proto3" json:"aptos_specific,omitempty"`                                                        // The Flare specific fields
	DogecoinSpecific               *DogecoinSpecific               `protobuf:"bytes,50,opt,name=dogecoin_specific,json=dogecoinSpecific,proto3" json:"dogecoin_specific,omitempty"`                                               // THe Doge specific fields
	AvalanchePlatformChainSpecific *AvalanchePlatformChainSpecific `protobuf:"bytes,51,opt,name=avalanche_platform_chain_specific,json=avalanchePlatformChainSpecific,proto3" json:"avalanche_platform_chain_specific,omitempty"` // The Avalanche Platform Chain specific fields
	QuorumSpecific                 *QuorumSpecific                 `protobuf:"bytes,52,opt,name=quorum_specific,json=quorumSpecific,proto3" json:"quorum_specific,omitempty"`                                                     // The Quorum specific fields
	TonSpecific                    *TonSpecific                    `protobuf:"bytes,53,opt,name=ton_specific,json=tonSpecific,proto3" json:"ton_specific,omitempty"`                                                              // The Ton specific fields
	SuiSpecific                    *SuiSpecific                    `protobuf:"bytes,54,opt,name=sui_specific,json=suiSpecific,proto3" json:"sui_specific,omitempty"`                                                              // The Sui specific fields
	CreateTime                     *timestamppb.Timestamp          `protobuf:"bytes,18,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                                                 // the time at which the transaction was created
	UpdateTime                     *timestamppb.Timestamp          `protobuf:"bytes,19,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                                                 // the time at which the transaction was updated
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{15}
}

func (x *Transaction) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *Transaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *Transaction) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *Transaction) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *Transaction) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *Transaction) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Transaction) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Transaction) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *Transaction) GetJpyRate() float64 {
	if x != nil {
		return x.JpyRate
	}
	return 0
}

func (x *Transaction) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *Transaction) GetStringFee() string {
	if x != nil {
		return x.StringFee
	}
	return ""
}

func (x *Transaction) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *Transaction) GetState() TransactionState {
	if x != nil {
		return x.State
	}
	return TransactionState_TRANSACTION_STATE_INVALID
}

func (x *Transaction) GetSignedKeys() []*Key {
	if x != nil {
		return x.SignedKeys
	}
	return nil
}

func (x *Transaction) GetMembers() []*TransactionMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Transaction) GetBitcoinSpecific() *BitcoinSpecific {
	if x != nil {
		return x.BitcoinSpecific
	}
	return nil
}

func (x *Transaction) GetEthereumSpecific() *EthereumSpecific {
	if x != nil {
		return x.EthereumSpecific
	}
	return nil
}

func (x *Transaction) GetLitecoinSpecific() *LitecoinSpecific {
	if x != nil {
		return x.LitecoinSpecific
	}
	return nil
}

func (x *Transaction) GetBitcoincashSpecific() *BitcoincashSpecific {
	if x != nil {
		return x.BitcoincashSpecific
	}
	return nil
}

func (x *Transaction) GetXrpSpecific() *XrpSpecific {
	if x != nil {
		return x.XrpSpecific
	}
	return nil
}

func (x *Transaction) GetTronSpecific() *TronSpecific {
	if x != nil {
		return x.TronSpecific
	}
	return nil
}

func (x *Transaction) GetC0BanSpecific() *C0BanSpecific {
	if x != nil {
		return x.C0BanSpecific
	}
	return nil
}

func (x *Transaction) GetStellarSpecific() *StellarSpecific {
	if x != nil {
		return x.StellarSpecific
	}
	return nil
}

func (x *Transaction) GetCardanoSpecific() *CardanoSpecific {
	if x != nil {
		return x.CardanoSpecific
	}
	return nil
}

func (x *Transaction) GetSubstrateSpecific() *SubstrateSpecific {
	if x != nil {
		return x.SubstrateSpecific
	}
	return nil
}

func (x *Transaction) GetMonacoinSpecific() *MonacoinSpecific {
	if x != nil {
		return x.MonacoinSpecific
	}
	return nil
}

func (x *Transaction) GetNemSpecific() *NemSpecific {
	if x != nil {
		return x.NemSpecific
	}
	return nil
}

func (x *Transaction) GetIostSpecific() *IOSTSpecific {
	if x != nil {
		return x.IostSpecific
	}
	return nil
}

func (x *Transaction) GetPolygonSpecific() *PolygonSpecific {
	if x != nil {
		return x.PolygonSpecific
	}
	return nil
}

func (x *Transaction) GetKlaytnSpecific() *KlaytnSpecific {
	if x != nil {
		return x.KlaytnSpecific
	}
	return nil
}

func (x *Transaction) GetSymbolSpecific() *SymbolSpecific {
	if x != nil {
		return x.SymbolSpecific
	}
	return nil
}

func (x *Transaction) GetAvalancheSpecific() *AvalancheSpecific {
	if x != nil {
		return x.AvalancheSpecific
	}
	return nil
}

func (x *Transaction) GetOasysSpecific() *OasysSpecific {
	if x != nil {
		return x.OasysSpecific
	}
	return nil
}

func (x *Transaction) GetXdcSpecific() *XdcSpecific {
	if x != nil {
		return x.XdcSpecific
	}
	return nil
}

func (x *Transaction) GetCosmosSpecific() *CosmosSpecific {
	if x != nil {
		return x.CosmosSpecific
	}
	return nil
}

func (x *Transaction) GetEthereumClassicSpecific() *EthereumClassicSpecific {
	if x != nil {
		return x.EthereumClassicSpecific
	}
	return nil
}

func (x *Transaction) GetAlgorandSpecific() *AlgorandSpecific {
	if x != nil {
		return x.AlgorandSpecific
	}
	return nil
}

func (x *Transaction) GetHederaSpecific() *HederaSpecific {
	if x != nil {
		return x.HederaSpecific
	}
	return nil
}

func (x *Transaction) GetJapanOpenChainSpecific() *JapanOpenChainSpecific {
	if x != nil {
		return x.JapanOpenChainSpecific
	}
	return nil
}

func (x *Transaction) GetSolanaSpecific() *SolanaSpecific {
	if x != nil {
		return x.SolanaSpecific
	}
	return nil
}

func (x *Transaction) GetBnbSmartChainSpecific() *BNBSmartChainSpecific {
	if x != nil {
		return x.BnbSmartChainSpecific
	}
	return nil
}

func (x *Transaction) GetFlareSpecific() *FlareSpecific {
	if x != nil {
		return x.FlareSpecific
	}
	return nil
}

func (x *Transaction) GetArbitrumOneSpecific() *ArbitrumOneSpecific {
	if x != nil {
		return x.ArbitrumOneSpecific
	}
	return nil
}

func (x *Transaction) GetAptosSpecific() *AptosSpecific {
	if x != nil {
		return x.AptosSpecific
	}
	return nil
}

func (x *Transaction) GetDogecoinSpecific() *DogecoinSpecific {
	if x != nil {
		return x.DogecoinSpecific
	}
	return nil
}

func (x *Transaction) GetAvalanchePlatformChainSpecific() *AvalanchePlatformChainSpecific {
	if x != nil {
		return x.AvalanchePlatformChainSpecific
	}
	return nil
}

func (x *Transaction) GetQuorumSpecific() *QuorumSpecific {
	if x != nil {
		return x.QuorumSpecific
	}
	return nil
}

func (x *Transaction) GetTonSpecific() *TonSpecific {
	if x != nil {
		return x.TonSpecific
	}
	return nil
}

func (x *Transaction) GetSuiSpecific() *SuiSpecific {
	if x != nil {
		return x.SuiSpecific
	}
	return nil
}

func (x *Transaction) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Transaction) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// The model of unconfirmed transaction
type UnconfirmedTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId                       string                          `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`                                                                        // The id of wallet
	TransactionId                  string                          `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`                                                         // id
	TxId                           string                          `protobuf:"bytes,5,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`                                                                                    // txID
	Value                          float64                         `protobuf:"fixed64,6,opt,name=value,proto3" json:"value,omitempty"`                                                                                            // The number-typed amount of transfer
	StringValue                    string                          `protobuf:"bytes,7,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`                                                               // The string-typed amount of transfer
	Address                        string                          `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`                                                                                          // The address of wallet to which the transfer send/receive
	Fee                            float64                         `protobuf:"fixed64,9,opt,name=fee,proto3" json:"fee,omitempty"`                                                                                                // The number-typed amount of transfer fee
	StringFee                      string                          `protobuf:"bytes,10,opt,name=string_fee,json=stringFee,proto3" json:"string_fee,omitempty"`                                                                    // The string-typed amount of transfer fee
	FeeRate                        uint64                          `protobuf:"varint,11,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`                                                                         // The fee rate of transaction (only BTC and its forks unit: sat/Byte)
	CreateTime                     *timestamppb.Timestamp          `protobuf:"bytes,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                                                 // the time at which the transfer was created
	BitcoinSpecific                *BitcoinSpecific                `protobuf:"bytes,13,opt,name=bitcoin_specific,json=bitcoinSpecific,proto3" json:"bitcoin_specific,omitempty"`                                                  // The Bitcoin specific fields
	LitecoinSpecific               *LitecoinSpecific               `protobuf:"bytes,14,opt,name=litecoin_specific,json=litecoinSpecific,proto3" json:"litecoin_specific,omitempty"`                                               // The Litecoin specific fields
	BitcoincashSpecific            *BitcoincashSpecific            `protobuf:"bytes,15,opt,name=bitcoincash_specific,json=bitcoincashSpecific,proto3" json:"bitcoincash_specific,omitempty"`                                      // The Bitcoin Cash specific fields
	C0BanSpecific                  *C0BanSpecific                  `protobuf:"bytes,16,opt,name=c0ban_specific,json=c0banSpecific,proto3" json:"c0ban_specific,omitempty"`                                                        // The C0ban specific fields
	CardanoSpecific                *CardanoSpecific                `protobuf:"bytes,17,opt,name=cardano_specific,json=cardanoSpecific,proto3" json:"cardano_specific,omitempty"`                                                  // The Cardano specific fields
	MonacoinSpecific               *MonacoinSpecific               `protobuf:"bytes,18,opt,name=monacoin_specific,json=monacoinSpecific,proto3" json:"monacoin_specific,omitempty"`                                               // The Monacoin specific fields
	AvalanchePlatformChainSpecific *AvalanchePlatformChainSpecific `protobuf:"bytes,19,opt,name=avalanche_platform_chain_specific,json=avalanchePlatformChainSpecific,proto3" json:"avalanche_platform_chain_specific,omitempty"` // The Avalanche Platform Chain specific fields
}

func (x *UnconfirmedTransaction) Reset() {
	*x = UnconfirmedTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnconfirmedTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnconfirmedTransaction) ProtoMessage() {}

func (x *UnconfirmedTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnconfirmedTransaction.ProtoReflect.Descriptor instead.
func (*UnconfirmedTransaction) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{16}
}

func (x *UnconfirmedTransaction) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *UnconfirmedTransaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *UnconfirmedTransaction) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *UnconfirmedTransaction) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UnconfirmedTransaction) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *UnconfirmedTransaction) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UnconfirmedTransaction) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *UnconfirmedTransaction) GetStringFee() string {
	if x != nil {
		return x.StringFee
	}
	return ""
}

func (x *UnconfirmedTransaction) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *UnconfirmedTransaction) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *UnconfirmedTransaction) GetBitcoinSpecific() *BitcoinSpecific {
	if x != nil {
		return x.BitcoinSpecific
	}
	return nil
}

func (x *UnconfirmedTransaction) GetLitecoinSpecific() *LitecoinSpecific {
	if x != nil {
		return x.LitecoinSpecific
	}
	return nil
}

func (x *UnconfirmedTransaction) GetBitcoincashSpecific() *BitcoincashSpecific {
	if x != nil {
		return x.BitcoincashSpecific
	}
	return nil
}

func (x *UnconfirmedTransaction) GetC0BanSpecific() *C0BanSpecific {
	if x != nil {
		return x.C0BanSpecific
	}
	return nil
}

func (x *UnconfirmedTransaction) GetCardanoSpecific() *CardanoSpecific {
	if x != nil {
		return x.CardanoSpecific
	}
	return nil
}

func (x *UnconfirmedTransaction) GetMonacoinSpecific() *MonacoinSpecific {
	if x != nil {
		return x.MonacoinSpecific
	}
	return nil
}

func (x *UnconfirmedTransaction) GetAvalanchePlatformChainSpecific() *AvalanchePlatformChainSpecific {
	if x != nil {
		return x.AvalanchePlatformChainSpecific
	}
	return nil
}

// The model of transaction member
type TransactionMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   string      `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                           // id
	AccountType AccountType `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3,enum=adamant.global.v1.AccountType" json:"account_type,omitempty"` // type
	Name        string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                      // name
	Email       string      `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`                                                                    // email
	Role        RoleType    `protobuf:"varint,5,opt,name=role,proto3,enum=adamant.global.v1.RoleType" json:"role,omitempty"`                                     // role
	Signed      bool        `protobuf:"varint,6,opt,name=signed,proto3" json:"signed,omitempty"`                                                                 // The flag which indicates the member signed to the transaction
	Validated   bool        `protobuf:"varint,7,opt,name=validated,proto3" json:"validated,omitempty"`                                                           // The flag which indicates the member validated to the transaction
}

func (x *TransactionMember) Reset() {
	*x = TransactionMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionMember) ProtoMessage() {}

func (x *TransactionMember) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionMember.ProtoReflect.Descriptor instead.
func (*TransactionMember) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{17}
}

func (x *TransactionMember) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TransactionMember) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_ACCOUNT_TYPE_INVALID
}

func (x *TransactionMember) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransactionMember) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *TransactionMember) GetRole() RoleType {
	if x != nil {
		return x.Role
	}
	return RoleType_ROLE_TYPE_INVALID
}

func (x *TransactionMember) GetSigned() bool {
	if x != nil {
		return x.Signed
	}
	return false
}

func (x *TransactionMember) GetValidated() bool {
	if x != nil {
		return x.Validated
	}
	return false
}

// The model of transaction input
type TxInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId          string                       `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	TxIndex       uint32                       `protobuf:"varint,2,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	Value         float64                      `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	StringValue   string                       `protobuf:"bytes,4,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	TxInputIndex  uint32                       `protobuf:"varint,5,opt,name=tx_input_index,json=txInputIndex,proto3" json:"tx_input_index,omitempty"`
	Address       string                       `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	WitnessScript string                       `protobuf:"bytes,7,opt,name=witness_script,json=witnessScript,proto3" json:"witness_script,omitempty"`
	NSequence     uint32                       `protobuf:"varint,8,opt,name=n_sequence,json=nSequence,proto3" json:"n_sequence,omitempty"`
	AddressType   gincoincglobalv1.AddressType `protobuf:"varint,9,opt,name=address_type,json=addressType,proto3,enum=gincoinc.global.v1.AddressType" json:"address_type,omitempty"`
}

func (x *TxInput) Reset() {
	*x = TxInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxInput) ProtoMessage() {}

func (x *TxInput) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxInput.ProtoReflect.Descriptor instead.
func (*TxInput) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{18}
}

func (x *TxInput) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *TxInput) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *TxInput) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TxInput) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *TxInput) GetTxInputIndex() uint32 {
	if x != nil {
		return x.TxInputIndex
	}
	return 0
}

func (x *TxInput) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TxInput) GetWitnessScript() string {
	if x != nil {
		return x.WitnessScript
	}
	return ""
}

func (x *TxInput) GetNSequence() uint32 {
	if x != nil {
		return x.NSequence
	}
	return 0
}

func (x *TxInput) GetAddressType() gincoincglobalv1.AddressType {
	if x != nil {
		return x.AddressType
	}
	return gincoincglobalv1.AddressType(0)
}

// The model of transaction output
type TxOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address       string  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Value         float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	StringValue   string  `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	IsChange      bool    `protobuf:"varint,4,opt,name=is_change,json=isChange,proto3" json:"is_change,omitempty"`
	TxOutputIndex uint32  `protobuf:"varint,5,opt,name=tx_output_index,json=txOutputIndex,proto3" json:"tx_output_index,omitempty"`
}

func (x *TxOutput) Reset() {
	*x = TxOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutput) ProtoMessage() {}

func (x *TxOutput) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutput.ProtoReflect.Descriptor instead.
func (*TxOutput) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{19}
}

func (x *TxOutput) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TxOutput) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TxOutput) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *TxOutput) GetIsChange() bool {
	if x != nil {
		return x.IsChange
	}
	return false
}

func (x *TxOutput) GetTxOutputIndex() uint32 {
	if x != nil {
		return x.TxOutputIndex
	}
	return 0
}

// The model of UTXO
type UTXO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId                           string                              `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Vout                           uint32                              `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`
	Value                          float64                             `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	StringValue                    string                              `protobuf:"bytes,4,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	Address                        string                              `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	TransactionId                  string                              `protobuf:"bytes,6,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	CardanoSpecific                *CardanoUTXOSpecific                `protobuf:"bytes,7,opt,name=cardano_specific,json=cardanoSpecific,proto3" json:"cardano_specific,omitempty"`                                                  // The Cardano specific fields
	AvalanchePlatformChainSpecific *AvalanchePlatformChainUTXOSpecific `protobuf:"bytes,8,opt,name=avalanche_platform_chain_specific,json=avalanchePlatformChainSpecific,proto3" json:"avalanche_platform_chain_specific,omitempty"` // The Avalanche Platform Chain specific fields
}

func (x *UTXO) Reset() {
	*x = UTXO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UTXO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTXO) ProtoMessage() {}

func (x *UTXO) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTXO.ProtoReflect.Descriptor instead.
func (*UTXO) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{20}
}

func (x *UTXO) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *UTXO) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

func (x *UTXO) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UTXO) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *UTXO) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UTXO) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *UTXO) GetCardanoSpecific() *CardanoUTXOSpecific {
	if x != nil {
		return x.CardanoSpecific
	}
	return nil
}

func (x *UTXO) GetAvalanchePlatformChainSpecific() *AvalanchePlatformChainUTXOSpecific {
	if x != nil {
		return x.AvalanchePlatformChainSpecific
	}
	return nil
}

// The model of Cardano specific fields of UTXO
type CardanoUTXOSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens []*CardanoCustomToken `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *CardanoUTXOSpecific) Reset() {
	*x = CardanoUTXOSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoUTXOSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoUTXOSpecific) ProtoMessage() {}

func (x *CardanoUTXOSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoUTXOSpecific.ProtoReflect.Descriptor instead.
func (*CardanoUTXOSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{21}
}

func (x *CardanoUTXOSpecific) GetTokens() []*CardanoCustomToken {
	if x != nil {
		return x.Tokens
	}
	return nil
}

// The model of Avalanche Platform Chain specific fields of UTXO
type AvalanchePlatformChainUTXOSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold uint32   `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Addresses []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *AvalanchePlatformChainUTXOSpecific) Reset() {
	*x = AvalanchePlatformChainUTXOSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvalanchePlatformChainUTXOSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvalanchePlatformChainUTXOSpecific) ProtoMessage() {}

func (x *AvalanchePlatformChainUTXOSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvalanchePlatformChainUTXOSpecific.ProtoReflect.Descriptor instead.
func (*AvalanchePlatformChainUTXOSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{22}
}

func (x *AvalanchePlatformChainUTXOSpecific) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *AvalanchePlatformChainUTXOSpecific) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

// The model of Cardano custom token
type CardanoCustomToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId  string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	AssetName string `protobuf:"bytes,2,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	Value     uint64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CardanoCustomToken) Reset() {
	*x = CardanoCustomToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoCustomToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoCustomToken) ProtoMessage() {}

func (x *CardanoCustomToken) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoCustomToken.ProtoReflect.Descriptor instead.
func (*CardanoCustomToken) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{23}
}

func (x *CardanoCustomToken) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *CardanoCustomToken) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *CardanoCustomToken) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// The model of Bitcoin specific fields of transaction
type BitcoinSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxInputs  []*TxInput  `protobuf:"bytes,1,rep,name=tx_inputs,json=txInputs,proto3" json:"tx_inputs,omitempty"`
	TxOutputs []*TxOutput `protobuf:"bytes,2,rep,name=tx_outputs,json=txOutputs,proto3" json:"tx_outputs,omitempty"`
}

func (x *BitcoinSpecific) Reset() {
	*x = BitcoinSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinSpecific) ProtoMessage() {}

func (x *BitcoinSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinSpecific.ProtoReflect.Descriptor instead.
func (*BitcoinSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{24}
}

func (x *BitcoinSpecific) GetTxInputs() []*TxInput {
	if x != nil {
		return x.TxInputs
	}
	return nil
}

func (x *BitcoinSpecific) GetTxOutputs() []*TxOutput {
	if x != nil {
		return x.TxOutputs
	}
	return nil
}

// The model of Litecoin specific fields of transaction
type LitecoinSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxInputs  []*TxInput  `protobuf:"bytes,1,rep,name=tx_inputs,json=txInputs,proto3" json:"tx_inputs,omitempty"`
	TxOutputs []*TxOutput `protobuf:"bytes,2,rep,name=tx_outputs,json=txOutputs,proto3" json:"tx_outputs,omitempty"`
}

func (x *LitecoinSpecific) Reset() {
	*x = LitecoinSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LitecoinSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LitecoinSpecific) ProtoMessage() {}

func (x *LitecoinSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LitecoinSpecific.ProtoReflect.Descriptor instead.
func (*LitecoinSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{25}
}

func (x *LitecoinSpecific) GetTxInputs() []*TxInput {
	if x != nil {
		return x.TxInputs
	}
	return nil
}

func (x *LitecoinSpecific) GetTxOutputs() []*TxOutput {
	if x != nil {
		return x.TxOutputs
	}
	return nil
}

// The model of Dogecoin specific fields of transaction
type DogecoinSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxInputs  []*TxInput  `protobuf:"bytes,1,rep,name=tx_inputs,json=txInputs,proto3" json:"tx_inputs,omitempty"`
	TxOutputs []*TxOutput `protobuf:"bytes,2,rep,name=tx_outputs,json=txOutputs,proto3" json:"tx_outputs,omitempty"`
}

func (x *DogecoinSpecific) Reset() {
	*x = DogecoinSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DogecoinSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DogecoinSpecific) ProtoMessage() {}

func (x *DogecoinSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DogecoinSpecific.ProtoReflect.Descriptor instead.
func (*DogecoinSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{26}
}

func (x *DogecoinSpecific) GetTxInputs() []*TxInput {
	if x != nil {
		return x.TxInputs
	}
	return nil
}

func (x *DogecoinSpecific) GetTxOutputs() []*TxOutput {
	if x != nil {
		return x.TxOutputs
	}
	return nil
}

// The model of BitcoinCash specific fields of transaction
type BitcoincashSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxInputs  []*TxInput  `protobuf:"bytes,1,rep,name=tx_inputs,json=txInputs,proto3" json:"tx_inputs,omitempty"`
	TxOutputs []*TxOutput `protobuf:"bytes,2,rep,name=tx_outputs,json=txOutputs,proto3" json:"tx_outputs,omitempty"`
}

func (x *BitcoincashSpecific) Reset() {
	*x = BitcoincashSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoincashSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoincashSpecific) ProtoMessage() {}

func (x *BitcoincashSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoincashSpecific.ProtoReflect.Descriptor instead.
func (*BitcoincashSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{27}
}

func (x *BitcoincashSpecific) GetTxInputs() []*TxInput {
	if x != nil {
		return x.TxInputs
	}
	return nil
}

func (x *BitcoincashSpecific) GetTxOutputs() []*TxOutput {
	if x != nil {
		return x.TxOutputs
	}
	return nil
}

// The model of Ethereum specific fields of transaction
type EthereumSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasLimit             uint64                       `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Nonce                uint64                       `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	IsNextNonce          bool                         `protobuf:"varint,3,opt,name=is_next_nonce,json=isNextNonce,proto3" json:"is_next_nonce,omitempty"`
	MethodIdType         EthereumContractMethodIDType `protobuf:"varint,4,opt,name=method_id_type,json=methodIdType,proto3,enum=adamant.global.v1.EthereumContractMethodIDType" json:"method_id_type,omitempty"`
	Expiration           uint64                       `protobuf:"varint,5,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Data                 string                       `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"` // data
	IsStakingTransaction bool                         `protobuf:"varint,7,opt,name=is_staking_transaction,json=isStakingTransaction,proto3" json:"is_staking_transaction,omitempty"`
	FromAddress          string                       `protobuf:"bytes,8,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	TokenAddress         string                       `protobuf:"bytes,9,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	ChainId              uint64                       `protobuf:"varint,10,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *EthereumSpecific) Reset() {
	*x = EthereumSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumSpecific) ProtoMessage() {}

func (x *EthereumSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumSpecific.ProtoReflect.Descriptor instead.
func (*EthereumSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{28}
}

func (x *EthereumSpecific) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *EthereumSpecific) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *EthereumSpecific) GetIsNextNonce() bool {
	if x != nil {
		return x.IsNextNonce
	}
	return false
}

func (x *EthereumSpecific) GetMethodIdType() EthereumContractMethodIDType {
	if x != nil {
		return x.MethodIdType
	}
	return EthereumContractMethodIDType_ETHEREUM_CONTRACT_METHOD_ID_TYPE_INVALID
}

func (x *EthereumSpecific) GetExpiration() uint64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *EthereumSpecific) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *EthereumSpecific) GetIsStakingTransaction() bool {
	if x != nil {
		return x.IsStakingTransaction
	}
	return false
}

func (x *EthereumSpecific) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *EthereumSpecific) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *EthereumSpecific) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

// The model of XRP specific fields of transaction
type XrpSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber       uint32                              `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	DestinationTag       uint32                              `protobuf:"varint,2,opt,name=destination_tag,json=destinationTag,proto3" json:"destination_tag,omitempty"`
	TxType               gincoincglobalv1.XRPTransactionType `protobuf:"varint,3,opt,name=tx_type,json=txType,proto3,enum=gincoinc.global.v1.XRPTransactionType" json:"tx_type,omitempty"`
	IsNextSequenceNumber bool                                `protobuf:"varint,4,opt,name=is_next_sequence_number,json=isNextSequenceNumber,proto3" json:"is_next_sequence_number,omitempty"`
	FromAddress          string                              `protobuf:"bytes,5,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (x *XrpSpecific) Reset() {
	*x = XrpSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XrpSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XrpSpecific) ProtoMessage() {}

func (x *XrpSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XrpSpecific.ProtoReflect.Descriptor instead.
func (*XrpSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{29}
}

func (x *XrpSpecific) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *XrpSpecific) GetDestinationTag() uint32 {
	if x != nil {
		return x.DestinationTag
	}
	return 0
}

func (x *XrpSpecific) GetTxType() gincoincglobalv1.XRPTransactionType {
	if x != nil {
		return x.TxType
	}
	return gincoincglobalv1.XRPTransactionType(0)
}

func (x *XrpSpecific) GetIsNextSequenceNumber() bool {
	if x != nil {
		return x.IsNextSequenceNumber
	}
	return false
}

func (x *XrpSpecific) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

// The model of Tron specific fields of transaction
type TronSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expiration  uint64 `protobuf:"varint,1,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Timestamp   uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	BlockId     string `protobuf:"bytes,3,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	FromAddress string `protobuf:"bytes,4,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (x *TronSpecific) Reset() {
	*x = TronSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TronSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TronSpecific) ProtoMessage() {}

func (x *TronSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TronSpecific.ProtoReflect.Descriptor instead.
func (*TronSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{30}
}

func (x *TronSpecific) GetExpiration() uint64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *TronSpecific) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TronSpecific) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *TronSpecific) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

// The model of C0ban specific fields of transaction
type C0BanSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxInputs  []*TxInput  `protobuf:"bytes,1,rep,name=tx_inputs,json=txInputs,proto3" json:"tx_inputs,omitempty"`
	TxOutputs []*TxOutput `protobuf:"bytes,2,rep,name=tx_outputs,json=txOutputs,proto3" json:"tx_outputs,omitempty"`
}

func (x *C0BanSpecific) Reset() {
	*x = C0BanSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C0BanSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C0BanSpecific) ProtoMessage() {}

func (x *C0BanSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C0BanSpecific.ProtoReflect.Descriptor instead.
func (*C0BanSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{31}
}

func (x *C0BanSpecific) GetTxInputs() []*TxInput {
	if x != nil {
		return x.TxInputs
	}
	return nil
}

func (x *C0BanSpecific) GetTxOutputs() []*TxOutput {
	if x != nil {
		return x.TxOutputs
	}
	return nil
}

// The model of Stellar specific fields of transaction
type StellarSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber       int64  `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	MemoId               uint64 `protobuf:"varint,2,opt,name=memo_id,json=memoId,proto3" json:"memo_id,omitempty"`
	IsNextSequenceNumber bool   `protobuf:"varint,3,opt,name=is_next_sequence_number,json=isNextSequenceNumber,proto3" json:"is_next_sequence_number,omitempty"`
}

func (x *StellarSpecific) Reset() {
	*x = StellarSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StellarSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StellarSpecific) ProtoMessage() {}

func (x *StellarSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StellarSpecific.ProtoReflect.Descriptor instead.
func (*StellarSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{32}
}

func (x *StellarSpecific) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *StellarSpecific) GetMemoId() uint64 {
	if x != nil {
		return x.MemoId
	}
	return 0
}

func (x *StellarSpecific) GetIsNextSequenceNumber() bool {
	if x != nil {
		return x.IsNextSequenceNumber
	}
	return false
}

// The model of Cardano specific fields of transaction
type CardanoSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxInputs  []*TxInput            `protobuf:"bytes,1,rep,name=tx_inputs,json=txInputs,proto3" json:"tx_inputs,omitempty"`
	TxOutputs []*TxOutput           `protobuf:"bytes,2,rep,name=tx_outputs,json=txOutputs,proto3" json:"tx_outputs,omitempty"`
	Tokens    []*CardanoCustomToken `protobuf:"bytes,3,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *CardanoSpecific) Reset() {
	*x = CardanoSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoSpecific) ProtoMessage() {}

func (x *CardanoSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoSpecific.ProtoReflect.Descriptor instead.
func (*CardanoSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{33}
}

func (x *CardanoSpecific) GetTxInputs() []*TxInput {
	if x != nil {
		return x.TxInputs
	}
	return nil
}

func (x *CardanoSpecific) GetTxOutputs() []*TxOutput {
	if x != nil {
		return x.TxOutputs
	}
	return nil
}

func (x *CardanoSpecific) GetTokens() []*CardanoCustomToken {
	if x != nil {
		return x.Tokens
	}
	return nil
}

// The model of Substrate specific fields of transaction
type SubstrateSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce                         uint64                          `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	IsNextNonce                   bool                            `protobuf:"varint,2,opt,name=is_next_nonce,json=isNextNonce,proto3" json:"is_next_nonce,omitempty"`
	SubstrateMultisigTransactions []*SubstrateMultisigTransaction `protobuf:"bytes,4,rep,name=substrate_multisig_transactions,json=substrateMultisigTransactions,proto3" json:"substrate_multisig_transactions,omitempty"`
	CallType                      SubstrateCallType               `protobuf:"varint,6,opt,name=call_type,json=callType,proto3,enum=adamant.global.v1.SubstrateCallType" json:"call_type,omitempty"`
}

func (x *SubstrateSpecific) Reset() {
	*x = SubstrateSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstrateSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstrateSpecific) ProtoMessage() {}

func (x *SubstrateSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstrateSpecific.ProtoReflect.Descriptor instead.
func (*SubstrateSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{34}
}

func (x *SubstrateSpecific) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SubstrateSpecific) GetIsNextNonce() bool {
	if x != nil {
		return x.IsNextNonce
	}
	return false
}

func (x *SubstrateSpecific) GetSubstrateMultisigTransactions() []*SubstrateMultisigTransaction {
	if x != nil {
		return x.SubstrateMultisigTransactions
	}
	return nil
}

func (x *SubstrateSpecific) GetCallType() SubstrateCallType {
	if x != nil {
		return x.CallType
	}
	return SubstrateCallType_SUBSTRATE_CALL_TYPE_INVALID
}

// The model of Monacoin specific fields of transaction
type MonacoinSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxInputs  []*TxInput  `protobuf:"bytes,1,rep,name=tx_inputs,json=txInputs,proto3" json:"tx_inputs,omitempty"`
	TxOutputs []*TxOutput `protobuf:"bytes,2,rep,name=tx_outputs,json=txOutputs,proto3" json:"tx_outputs,omitempty"`
}

func (x *MonacoinSpecific) Reset() {
	*x = MonacoinSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonacoinSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonacoinSpecific) ProtoMessage() {}

func (x *MonacoinSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonacoinSpecific.ProtoReflect.Descriptor instead.
func (*MonacoinSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{35}
}

func (x *MonacoinSpecific) GetTxInputs() []*TxInput {
	if x != nil {
		return x.TxInputs
	}
	return nil
}

func (x *MonacoinSpecific) GetTxOutputs() []*TxOutput {
	if x != nil {
		return x.TxOutputs
	}
	return nil
}

// The model of Substrate specific fields of transaction
type NemSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message                 string                              `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	TxType                  gincoincglobalv1.NemTransactionType `protobuf:"varint,2,opt,name=tx_type,json=txType,proto3,enum=gincoinc.global.v1.NemTransactionType" json:"tx_type,omitempty"`
	NemMultisigTransactions []*NemMultisigTransaction           `protobuf:"bytes,3,rep,name=nem_multisig_transactions,json=nemMultisigTransactions,proto3" json:"nem_multisig_transactions,omitempty"`
	Expiration              uint64                              `protobuf:"varint,4,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Timestamp               uint64                              `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *NemSpecific) Reset() {
	*x = NemSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NemSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NemSpecific) ProtoMessage() {}

func (x *NemSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NemSpecific.ProtoReflect.Descriptor instead.
func (*NemSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{36}
}

func (x *NemSpecific) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NemSpecific) GetTxType() gincoincglobalv1.NemTransactionType {
	if x != nil {
		return x.TxType
	}
	return gincoincglobalv1.NemTransactionType(0)
}

func (x *NemSpecific) GetNemMultisigTransactions() []*NemMultisigTransaction {
	if x != nil {
		return x.NemMultisigTransactions
	}
	return nil
}

func (x *NemSpecific) GetExpiration() uint64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *NemSpecific) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// The model of IOST specific fields of transaction
type IOSTSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memo       string         `protobuf:"bytes,1,opt,name=memo,proto3" json:"memo,omitempty"`
	Timestamp  uint64         `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Expiration uint64         `protobuf:"varint,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Type       IOSTActionType `protobuf:"varint,4,opt,name=type,proto3,enum=adamant.global.v1.IOSTActionType" json:"type,omitempty"`
}

func (x *IOSTSpecific) Reset() {
	*x = IOSTSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOSTSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOSTSpecific) ProtoMessage() {}

func (x *IOSTSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOSTSpecific.ProtoReflect.Descriptor instead.
func (*IOSTSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{37}
}

func (x *IOSTSpecific) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *IOSTSpecific) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *IOSTSpecific) GetExpiration() uint64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *IOSTSpecific) GetType() IOSTActionType {
	if x != nil {
		return x.Type
	}
	return IOSTActionType_IOST_ACTION_TYPE_INVALID
}

// The model of Polygon specific fields of transaction
type PolygonSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasLimit     uint64 `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Nonce        uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	IsNextNonce  bool   `protobuf:"varint,3,opt,name=is_next_nonce,json=isNextNonce,proto3" json:"is_next_nonce,omitempty"`
	Data         string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	FromAddress  string `protobuf:"bytes,5,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	TokenAddress string `protobuf:"bytes,6,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	ChainId      uint64 `protobuf:"varint,7,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *PolygonSpecific) Reset() {
	*x = PolygonSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolygonSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolygonSpecific) ProtoMessage() {}

func (x *PolygonSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolygonSpecific.ProtoReflect.Descriptor instead.
func (*PolygonSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{38}
}

func (x *PolygonSpecific) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *PolygonSpecific) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *PolygonSpecific) GetIsNextNonce() bool {
	if x != nil {
		return x.IsNextNonce
	}
	return false
}

func (x *PolygonSpecific) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *PolygonSpecific) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *PolygonSpecific) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *PolygonSpecific) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

// The model of Klaytn specific fields of transaction
type KlaytnSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasLimit    uint64 `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Nonce       uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	IsNextNonce bool   `protobuf:"varint,3,opt,name=is_next_nonce,json=isNextNonce,proto3" json:"is_next_nonce,omitempty"`
}

func (x *KlaytnSpecific) Reset() {
	*x = KlaytnSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KlaytnSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KlaytnSpecific) ProtoMessage() {}

func (x *KlaytnSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KlaytnSpecific.ProtoReflect.Descriptor instead.
func (*KlaytnSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{39}
}

func (x *KlaytnSpecific) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *KlaytnSpecific) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *KlaytnSpecific) GetIsNextNonce() bool {
	if x != nil {
		return x.IsNextNonce
	}
	return false
}

// The model of Substrate specific fields of transaction
type SymbolSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message                    string                                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	TxType                     gincoincglobalv1.SymbolTransactionType `protobuf:"varint,2,opt,name=tx_type,json=txType,proto3,enum=gincoinc.global.v1.SymbolTransactionType" json:"tx_type,omitempty"`
	SymbolMultisigTransactions []*SymbolMultisigTransaction           `protobuf:"bytes,3,rep,name=symbol_multisig_transactions,json=symbolMultisigTransactions,proto3" json:"symbol_multisig_transactions,omitempty"`
	Expiration                 uint64                                 `protobuf:"varint,4,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Timestamp                  uint64                                 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *SymbolSpecific) Reset() {
	*x = SymbolSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolSpecific) ProtoMessage() {}

func (x *SymbolSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolSpecific.ProtoReflect.Descriptor instead.
func (*SymbolSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{40}
}

func (x *SymbolSpecific) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SymbolSpecific) GetTxType() gincoincglobalv1.SymbolTransactionType {
	if x != nil {
		return x.TxType
	}
	return gincoincglobalv1.SymbolTransactionType(0)
}

func (x *SymbolSpecific) GetSymbolMultisigTransactions() []*SymbolMultisigTransaction {
	if x != nil {
		return x.SymbolMultisigTransactions
	}
	return nil
}

func (x *SymbolSpecific) GetExpiration() uint64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *SymbolSpecific) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// The model of Avalanche specific fields of transaction
type AvalancheSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasLimit             uint64                           `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Nonce                uint64                           `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	IsNextNonce          bool                             `protobuf:"varint,3,opt,name=is_next_nonce,json=isNextNonce,proto3" json:"is_next_nonce,omitempty"`
	AtomicTx             *AtomicTx                        `protobuf:"bytes,4,opt,name=atomic_tx,json=atomicTx,proto3" json:"atomic_tx,omitempty"`
	FromAddress          string                           `protobuf:"bytes,5,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	TokenAddress         string                           `protobuf:"bytes,6,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	ChainId              uint64                           `protobuf:"varint,7,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	MaxPriorityFeePerGas uint64                           `protobuf:"varint,8,opt,name=max_priority_fee_per_gas,json=maxPriorityFeePerGas,proto3" json:"max_priority_fee_per_gas,omitempty"`
	TxType               gincoincglobalv1.AvalancheTxType `protobuf:"varint,9,opt,name=tx_type,json=txType,proto3,enum=gincoinc.global.v1.AvalancheTxType" json:"tx_type,omitempty"`
}

func (x *AvalancheSpecific) Reset() {
	*x = AvalancheSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvalancheSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvalancheSpecific) ProtoMessage() {}

func (x *AvalancheSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvalancheSpecific.ProtoReflect.Descriptor instead.
func (*AvalancheSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{41}
}

func (x *AvalancheSpecific) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *AvalancheSpecific) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *AvalancheSpecific) GetIsNextNonce() bool {
	if x != nil {
		return x.IsNextNonce
	}
	return false
}

func (x *AvalancheSpecific) GetAtomicTx() *AtomicTx {
	if x != nil {
		return x.AtomicTx
	}
	return nil
}

func (x *AvalancheSpecific) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *AvalancheSpecific) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *AvalancheSpecific) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *AvalancheSpecific) GetMaxPriorityFeePerGas() uint64 {
	if x != nil {
		return x.MaxPriorityFeePerGas
	}
	return 0
}

func (x *AvalancheSpecific) GetTxType() gincoincglobalv1.AvalancheTxType {
	if x != nil {
		return x.TxType
	}
	return gincoincglobalv1.AvalancheTxType(0)
}

// The model of Oasys specific fields of transaction
type OasysSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasLimit     uint64 `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Nonce        uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	IsNextNonce  bool   `protobuf:"varint,3,opt,name=is_next_nonce,json=isNextNonce,proto3" json:"is_next_nonce,omitempty"`
	FromAddress  string `protobuf:"bytes,4,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	TokenAddress string `protobuf:"bytes,5,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	ChainId      uint64 `protobuf:"varint,6,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *OasysSpecific) Reset() {
	*x = OasysSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OasysSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OasysSpecific) ProtoMessage() {}

func (x *OasysSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OasysSpecific.ProtoReflect.Descriptor instead.
func (*OasysSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{42}
}

func (x *OasysSpecific) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *OasysSpecific) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *OasysSpecific) GetIsNextNonce() bool {
	if x != nil {
		return x.IsNextNonce
	}
	return false
}

func (x *OasysSpecific) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *OasysSpecific) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *OasysSpecific) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

// The model of Xdc specific fields of transaction
type XdcSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasLimit    uint64 `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Nonce       uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	IsNextNonce bool   `protobuf:"varint,3,opt,name=is_next_nonce,json=isNextNonce,proto3" json:"is_next_nonce,omitempty"`
}

func (x *XdcSpecific) Reset() {
	*x = XdcSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XdcSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XdcSpecific) ProtoMessage() {}

func (x *XdcSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XdcSpecific.ProtoReflect.Descriptor instead.
func (*XdcSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{43}
}

func (x *XdcSpecific) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *XdcSpecific) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *XdcSpecific) GetIsNextNonce() bool {
	if x != nil {
		return x.IsNextNonce
	}
	return false
}

// The model of Cosmos specific fields of transaction
type CosmosSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasLimit      uint64                         `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Nonce         uint64                         `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	IsNextNonce   bool                           `protobuf:"varint,3,opt,name=is_next_nonce,json=isNextNonce,proto3" json:"is_next_nonce,omitempty"`
	Type          gincoincglobalv1.CosmosMsgType `protobuf:"varint,4,opt,name=type,proto3,enum=gincoinc.global.v1.CosmosMsgType" json:"type,omitempty"`
	Memo          string                         `protobuf:"bytes,5,opt,name=memo,proto3" json:"memo,omitempty"`
	GasAdjustment float64                        `protobuf:"fixed64,6,opt,name=gas_adjustment,json=gasAdjustment,proto3" json:"gas_adjustment,omitempty"`
}

func (x *CosmosSpecific) Reset() {
	*x = CosmosSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CosmosSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosmosSpecific) ProtoMessage() {}

func (x *CosmosSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosmosSpecific.ProtoReflect.Descriptor instead.
func (*CosmosSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{44}
}

func (x *CosmosSpecific) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *CosmosSpecific) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *CosmosSpecific) GetIsNextNonce() bool {
	if x != nil {
		return x.IsNextNonce
	}
	return false
}

func (x *CosmosSpecific) GetType() gincoincglobalv1.CosmosMsgType {
	if x != nil {
		return x.Type
	}
	return gincoincglobalv1.CosmosMsgType(0)
}

func (x *CosmosSpecific) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CosmosSpecific) GetGasAdjustment() float64 {
	if x != nil {
		return x.GasAdjustment
	}
	return 0
}

// The model of Ethereum Classic specific fields of transaction
type EthereumClassicSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasLimit    uint64 `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Nonce       uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	IsNextNonce bool   `protobuf:"varint,3,opt,name=is_next_nonce,json=isNextNonce,proto3" json:"is_next_nonce,omitempty"`
}

func (x *EthereumClassicSpecific) Reset() {
	*x = EthereumClassicSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumClassicSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumClassicSpecific) ProtoMessage() {}

func (x *EthereumClassicSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumClassicSpecific.ProtoReflect.Descriptor instead.
func (*EthereumClassicSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{45}
}

func (x *EthereumClassicSpecific) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *EthereumClassicSpecific) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *EthereumClassicSpecific) GetIsNextNonce() bool {
	if x != nil {
		return x.IsNextNonce
	}
	return false
}

// The model of Algorand specific fields of transaction
type AlgorandSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasLimit    uint64 `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Nonce       uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	IsNextNonce bool   `protobuf:"varint,3,opt,name=is_next_nonce,json=isNextNonce,proto3" json:"is_next_nonce,omitempty"`
	Memo        string `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`
	FirstRound  uint64 `protobuf:"varint,5,opt,name=first_round,json=firstRound,proto3" json:"first_round,omitempty"`
	LastRound   uint64 `protobuf:"varint,6,opt,name=last_round,json=lastRound,proto3" json:"last_round,omitempty"`
	Expiration  uint64 `protobuf:"varint,7,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Timestamp   uint64 `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *AlgorandSpecific) Reset() {
	*x = AlgorandSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgorandSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorandSpecific) ProtoMessage() {}

func (x *AlgorandSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorandSpecific.ProtoReflect.Descriptor instead.
func (*AlgorandSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{46}
}

func (x *AlgorandSpecific) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *AlgorandSpecific) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *AlgorandSpecific) GetIsNextNonce() bool {
	if x != nil {
		return x.IsNextNonce
	}
	return false
}

func (x *AlgorandSpecific) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *AlgorandSpecific) GetFirstRound() uint64 {
	if x != nil {
		return x.FirstRound
	}
	return 0
}

func (x *AlgorandSpecific) GetLastRound() uint64 {
	if x != nil {
		return x.LastRound
	}
	return 0
}

func (x *AlgorandSpecific) GetExpiration() uint64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *AlgorandSpecific) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// The model of Hedera specific fields of transaction
type HederaSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memo       string `protobuf:"bytes,1,opt,name=memo,proto3" json:"memo,omitempty"`
	Timestamp  uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Expiration uint64 `protobuf:"varint,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *HederaSpecific) Reset() {
	*x = HederaSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HederaSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HederaSpecific) ProtoMessage() {}

func (x *HederaSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HederaSpecific.ProtoReflect.Descriptor instead.
func (*HederaSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{47}
}

func (x *HederaSpecific) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *HederaSpecific) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HederaSpecific) GetExpiration() uint64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

// The model of Japan Open Chain specific fields of transaction
type JapanOpenChainSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasLimit    uint64 `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Nonce       uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	IsNextNonce bool   `protobuf:"varint,3,opt,name=is_next_nonce,json=isNextNonce,proto3" json:"is_next_nonce,omitempty"`
}

func (x *JapanOpenChainSpecific) Reset() {
	*x = JapanOpenChainSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JapanOpenChainSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JapanOpenChainSpecific) ProtoMessage() {}

func (x *JapanOpenChainSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JapanOpenChainSpecific.ProtoReflect.Descriptor instead.
func (*JapanOpenChainSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{48}
}

func (x *JapanOpenChainSpecific) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *JapanOpenChainSpecific) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *JapanOpenChainSpecific) GetIsNextNonce() bool {
	if x != nil {
		return x.IsNextNonce
	}
	return false
}

// The model of Solana specific fields of transaction
type SolanaSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expiration           uint64                           `protobuf:"varint,1,opt,name=expiration,proto3" json:"expiration,omitempty"`
	EventType            gincoincglobalv1.SolanaEventType `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=gincoinc.global.v1.SolanaEventType" json:"event_type,omitempty"`
	FromAddress          string                           `protobuf:"bytes,3,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	RecentBlockhash      string                           `protobuf:"bytes,4,opt,name=recent_blockhash,json=recentBlockhash,proto3" json:"recent_blockhash,omitempty"`
	PriorityFeeUnitLimit uint32                           `protobuf:"varint,5,opt,name=priority_fee_unit_limit,json=priorityFeeUnitLimit,proto3" json:"priority_fee_unit_limit,omitempty"`
	CallerAddress        string                           `protobuf:"bytes,6,opt,name=caller_address,json=callerAddress,proto3" json:"caller_address,omitempty"`
}

func (x *SolanaSpecific) Reset() {
	*x = SolanaSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaSpecific) ProtoMessage() {}

func (x *SolanaSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaSpecific.ProtoReflect.Descriptor instead.
func (*SolanaSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{49}
}

func (x *SolanaSpecific) GetExpiration() uint64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *SolanaSpecific) GetEventType() gincoincglobalv1.SolanaEventType {
	if x != nil {
		return x.EventType
	}
	return gincoincglobalv1.SolanaEventType(0)
}

func (x *SolanaSpecific) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *SolanaSpecific) GetRecentBlockhash() string {
	if x != nil {
		return x.RecentBlockhash
	}
	return ""
}

func (x *SolanaSpecific) GetPriorityFeeUnitLimit() uint32 {
	if x != nil {
		return x.PriorityFeeUnitLimit
	}
	return 0
}

func (x *SolanaSpecific) GetCallerAddress() string {
	if x != nil {
		return x.CallerAddress
	}
	return ""
}

// The model of Aptos specific fields of transaction
type AptosSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasLimit    uint64 `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Nonce       uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	IsNextNonce bool   `protobuf:"varint,3,opt,name=is_next_nonce,json=isNextNonce,proto3" json:"is_next_nonce,omitempty"`
	Expiration  uint64 `protobuf:"varint,4,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *AptosSpecific) Reset() {
	*x = AptosSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosSpecific) ProtoMessage() {}

func (x *AptosSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosSpecific.ProtoReflect.Descriptor instead.
func (*AptosSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{50}
}

func (x *AptosSpecific) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *AptosSpecific) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *AptosSpecific) GetIsNextNonce() bool {
	if x != nil {
		return x.IsNextNonce
	}
	return false
}

func (x *AptosSpecific) GetExpiration() uint64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

// The model of BNB Smart Chain specific fields of transaction
type BNBSmartChainSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasLimit     uint64 `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Nonce        uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	IsNextNonce  bool   `protobuf:"varint,3,opt,name=is_next_nonce,json=isNextNonce,proto3" json:"is_next_nonce,omitempty"`
	FromAddress  string `protobuf:"bytes,4,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	TokenAddress string `protobuf:"bytes,5,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
}

func (x *BNBSmartChainSpecific) Reset() {
	*x = BNBSmartChainSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BNBSmartChainSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BNBSmartChainSpecific) ProtoMessage() {}

func (x *BNBSmartChainSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BNBSmartChainSpecific.ProtoReflect.Descriptor instead.
func (*BNBSmartChainSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{51}
}

func (x *BNBSmartChainSpecific) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *BNBSmartChainSpecific) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *BNBSmartChainSpecific) GetIsNextNonce() bool {
	if x != nil {
		return x.IsNextNonce
	}
	return false
}

func (x *BNBSmartChainSpecific) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *BNBSmartChainSpecific) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

// The model of Flare specific fields of transaction
type FlareSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasLimit    uint64 `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Nonce       uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	IsNextNonce bool   `protobuf:"varint,3,opt,name=is_next_nonce,json=isNextNonce,proto3" json:"is_next_nonce,omitempty"`
}

func (x *FlareSpecific) Reset() {
	*x = FlareSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlareSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlareSpecific) ProtoMessage() {}

func (x *FlareSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlareSpecific.ProtoReflect.Descriptor instead.
func (*FlareSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{52}
}

func (x *FlareSpecific) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *FlareSpecific) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *FlareSpecific) GetIsNextNonce() bool {
	if x != nil {
		return x.IsNextNonce
	}
	return false
}

type ArbitrumOneSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasLimit    uint64 `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Nonce       uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	IsNextNonce bool   `protobuf:"varint,3,opt,name=is_next_nonce,json=isNextNonce,proto3" json:"is_next_nonce,omitempty"`
	Data        string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"` // data
}

func (x *ArbitrumOneSpecific) Reset() {
	*x = ArbitrumOneSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArbitrumOneSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArbitrumOneSpecific) ProtoMessage() {}

func (x *ArbitrumOneSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArbitrumOneSpecific.ProtoReflect.Descriptor instead.
func (*ArbitrumOneSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{53}
}

func (x *ArbitrumOneSpecific) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *ArbitrumOneSpecific) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *ArbitrumOneSpecific) GetIsNextNonce() bool {
	if x != nil {
		return x.IsNextNonce
	}
	return false
}

func (x *ArbitrumOneSpecific) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type AtomicTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxType    gincoincglobalv1.AvalancheTxType `protobuf:"varint,1,opt,name=tx_type,json=txType,proto3,enum=gincoinc.global.v1.AvalancheTxType" json:"tx_type,omitempty"`
	TxInputs  []*AvalancheTxInput              `protobuf:"bytes,2,rep,name=tx_inputs,json=txInputs,proto3" json:"tx_inputs,omitempty"`
	TxOutputs []*AvalancheTxOutput             `protobuf:"bytes,3,rep,name=tx_outputs,json=txOutputs,proto3" json:"tx_outputs,omitempty"`
}

func (x *AtomicTx) Reset() {
	*x = AtomicTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtomicTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtomicTx) ProtoMessage() {}

func (x *AtomicTx) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtomicTx.ProtoReflect.Descriptor instead.
func (*AtomicTx) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{54}
}

func (x *AtomicTx) GetTxType() gincoincglobalv1.AvalancheTxType {
	if x != nil {
		return x.TxType
	}
	return gincoincglobalv1.AvalancheTxType(0)
}

func (x *AtomicTx) GetTxInputs() []*AvalancheTxInput {
	if x != nil {
		return x.TxInputs
	}
	return nil
}

func (x *AtomicTx) GetTxOutputs() []*AvalancheTxOutput {
	if x != nil {
		return x.TxOutputs
	}
	return nil
}

type AvalanchePlatformChainSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxType    gincoincglobalv1.AvalancheTxType `protobuf:"varint,1,opt,name=tx_type,json=txType,proto3,enum=gincoinc.global.v1.AvalancheTxType" json:"tx_type,omitempty"`
	TxInputs  []*AvalancheTxInput              `protobuf:"bytes,2,rep,name=tx_inputs,json=txInputs,proto3" json:"tx_inputs,omitempty"`
	TxOutputs []*AvalancheTxOutput             `protobuf:"bytes,3,rep,name=tx_outputs,json=txOutputs,proto3" json:"tx_outputs,omitempty"`
	StartTime uint64                           `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   uint64                           `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *AvalanchePlatformChainSpecific) Reset() {
	*x = AvalanchePlatformChainSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvalanchePlatformChainSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvalanchePlatformChainSpecific) ProtoMessage() {}

func (x *AvalanchePlatformChainSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvalanchePlatformChainSpecific.ProtoReflect.Descriptor instead.
func (*AvalanchePlatformChainSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{55}
}

func (x *AvalanchePlatformChainSpecific) GetTxType() gincoincglobalv1.AvalancheTxType {
	if x != nil {
		return x.TxType
	}
	return gincoincglobalv1.AvalancheTxType(0)
}

func (x *AvalanchePlatformChainSpecific) GetTxInputs() []*AvalancheTxInput {
	if x != nil {
		return x.TxInputs
	}
	return nil
}

func (x *AvalanchePlatformChainSpecific) GetTxOutputs() []*AvalancheTxOutput {
	if x != nil {
		return x.TxOutputs
	}
	return nil
}

func (x *AvalanchePlatformChainSpecific) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AvalanchePlatformChainSpecific) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type TonSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expiration     uint64 `protobuf:"varint,1,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Memo           string `protobuf:"bytes,2,opt,name=memo,proto3" json:"memo,omitempty"`
	SequenceNumber uint32 `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	FromAddress    string `protobuf:"bytes,4,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (x *TonSpecific) Reset() {
	*x = TonSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TonSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TonSpecific) ProtoMessage() {}

func (x *TonSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TonSpecific.ProtoReflect.Descriptor instead.
func (*TonSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{56}
}

func (x *TonSpecific) GetExpiration() uint64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *TonSpecific) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *TonSpecific) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *TonSpecific) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

type SuiSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendAll bool `protobuf:"varint,1,opt,name=send_all,json=sendAll,proto3" json:"send_all,omitempty"`
}

func (x *SuiSpecific) Reset() {
	*x = SuiSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiSpecific) ProtoMessage() {}

func (x *SuiSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiSpecific.ProtoReflect.Descriptor instead.
func (*SuiSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{57}
}

func (x *SuiSpecific) GetSendAll() bool {
	if x != nil {
		return x.SendAll
	}
	return false
}

type AvalancheTxInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId           string   `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	InputIndex     uint32   `protobuf:"varint,2,opt,name=input_index,json=inputIndex,proto3" json:"input_index,omitempty"`
	InputIndexType uint32   `protobuf:"varint,3,opt,name=input_index_type,json=inputIndexType,proto3" json:"input_index_type,omitempty"`
	Value          float64  `protobuf:"fixed64,4,opt,name=value,proto3" json:"value,omitempty"`
	StringValue    string   `protobuf:"bytes,5,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	AddressIndices []uint32 `protobuf:"varint,6,rep,packed,name=address_indices,json=addressIndices,proto3" json:"address_indices,omitempty"`
}

func (x *AvalancheTxInput) Reset() {
	*x = AvalancheTxInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvalancheTxInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvalancheTxInput) ProtoMessage() {}

func (x *AvalancheTxInput) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvalancheTxInput.ProtoReflect.Descriptor instead.
func (*AvalancheTxInput) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{58}
}

func (x *AvalancheTxInput) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *AvalancheTxInput) GetInputIndex() uint32 {
	if x != nil {
		return x.InputIndex
	}
	return 0
}

func (x *AvalancheTxInput) GetInputIndexType() uint32 {
	if x != nil {
		return x.InputIndexType
	}
	return 0
}

func (x *AvalancheTxInput) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AvalancheTxInput) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *AvalancheTxInput) GetAddressIndices() []uint32 {
	if x != nil {
		return x.AddressIndices
	}
	return nil
}

type AvalancheTxOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputIndex uint32   `protobuf:"varint,1,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	OutputType  uint32   `protobuf:"varint,2,opt,name=output_type,json=outputType,proto3" json:"output_type,omitempty"`
	Value       float64  `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	StringValue string   `protobuf:"bytes,4,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	Locktime    uint64   `protobuf:"varint,5,opt,name=locktime,proto3" json:"locktime,omitempty"`
	Threshold   uint32   `protobuf:"varint,6,opt,name=threshold,proto3" json:"threshold,omitempty"`
	IsChange    bool     `protobuf:"varint,7,opt,name=is_change,json=isChange,proto3" json:"is_change,omitempty"`
	Addresses   []string `protobuf:"bytes,8,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *AvalancheTxOutput) Reset() {
	*x = AvalancheTxOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvalancheTxOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvalancheTxOutput) ProtoMessage() {}

func (x *AvalancheTxOutput) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvalancheTxOutput.ProtoReflect.Descriptor instead.
func (*AvalancheTxOutput) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{59}
}

func (x *AvalancheTxOutput) GetOutputIndex() uint32 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *AvalancheTxOutput) GetOutputType() uint32 {
	if x != nil {
		return x.OutputType
	}
	return 0
}

func (x *AvalancheTxOutput) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AvalancheTxOutput) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *AvalancheTxOutput) GetLocktime() uint64 {
	if x != nil {
		return x.Locktime
	}
	return 0
}

func (x *AvalancheTxOutput) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *AvalancheTxOutput) GetIsChange() bool {
	if x != nil {
		return x.IsChange
	}
	return false
}

func (x *AvalancheTxOutput) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

// The model of Quorum specific fields of transaction
type QuorumSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasLimit     uint64 `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Nonce        uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	IsNextNonce  bool   `protobuf:"varint,3,opt,name=is_next_nonce,json=isNextNonce,proto3" json:"is_next_nonce,omitempty"`
	Data         string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	ChainId      uint64 `protobuf:"varint,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	FromAddress  string `protobuf:"bytes,6,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	TokenAddress string `protobuf:"bytes,7,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"` // ContractAddress
}

func (x *QuorumSpecific) Reset() {
	*x = QuorumSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuorumSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuorumSpecific) ProtoMessage() {}

func (x *QuorumSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuorumSpecific.ProtoReflect.Descriptor instead.
func (*QuorumSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{60}
}

func (x *QuorumSpecific) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *QuorumSpecific) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *QuorumSpecific) GetIsNextNonce() bool {
	if x != nil {
		return x.IsNextNonce
	}
	return false
}

func (x *QuorumSpecific) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *QuorumSpecific) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *QuorumSpecific) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *QuorumSpecific) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

// The model of Substrate specific fields of CreateTransaction
type CreateTransactionSubstrateSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId    string            `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	CallType         SubstrateCallType `protobuf:"varint,2,opt,name=call_type,json=callType,proto3,enum=adamant.global.v1.SubstrateCallType" json:"call_type,omitempty"`
	MultisigCallType SubstrateCallType `protobuf:"varint,3,opt,name=multisig_call_type,json=multisigCallType,proto3,enum=adamant.global.v1.SubstrateCallType" json:"multisig_call_type,omitempty"`
}

func (x *CreateTransactionSubstrateSpecific) Reset() {
	*x = CreateTransactionSubstrateSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionSubstrateSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionSubstrateSpecific) ProtoMessage() {}

func (x *CreateTransactionSubstrateSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionSubstrateSpecific.ProtoReflect.Descriptor instead.
func (*CreateTransactionSubstrateSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{61}
}

func (x *CreateTransactionSubstrateSpecific) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *CreateTransactionSubstrateSpecific) GetCallType() SubstrateCallType {
	if x != nil {
		return x.CallType
	}
	return SubstrateCallType_SUBSTRATE_CALL_TYPE_INVALID
}

func (x *CreateTransactionSubstrateSpecific) GetMultisigCallType() SubstrateCallType {
	if x != nil {
		return x.MultisigCallType
	}
	return SubstrateCallType_SUBSTRATE_CALL_TYPE_INVALID
}

// The model of Ethereum specific fields of CreateTransaction
type CreateTransactionWalletConnectSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallRequestType   WalletConnectCallRequestType `protobuf:"varint,1,opt,name=call_request_type,json=callRequestType,proto3,enum=adamant.global.v1.WalletConnectCallRequestType" json:"call_request_type,omitempty"`
	CallRequestParams string                       `protobuf:"bytes,2,opt,name=call_request_params,json=callRequestParams,proto3" json:"call_request_params,omitempty"`
}

func (x *CreateTransactionWalletConnectSpecific) Reset() {
	*x = CreateTransactionWalletConnectSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionWalletConnectSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionWalletConnectSpecific) ProtoMessage() {}

func (x *CreateTransactionWalletConnectSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionWalletConnectSpecific.ProtoReflect.Descriptor instead.
func (*CreateTransactionWalletConnectSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{62}
}

func (x *CreateTransactionWalletConnectSpecific) GetCallRequestType() WalletConnectCallRequestType {
	if x != nil {
		return x.CallRequestType
	}
	return WalletConnectCallRequestType_WALLET_CONNECT_CALL_REQUEST_TYPE_INVALID
}

func (x *CreateTransactionWalletConnectSpecific) GetCallRequestParams() string {
	if x != nil {
		return x.CallRequestParams
	}
	return ""
}

// The model of Nem specific fields of CreateTransaction
type CreateTransactionNemSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string                              `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	TxType        gincoincglobalv1.NemTransactionType `protobuf:"varint,2,opt,name=tx_type,json=txType,proto3,enum=gincoinc.global.v1.NemTransactionType" json:"tx_type,omitempty"`
	Message       string                              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp     uint64                              `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *CreateTransactionNemSpecific) Reset() {
	*x = CreateTransactionNemSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionNemSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionNemSpecific) ProtoMessage() {}

func (x *CreateTransactionNemSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionNemSpecific.ProtoReflect.Descriptor instead.
func (*CreateTransactionNemSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{63}
}

func (x *CreateTransactionNemSpecific) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *CreateTransactionNemSpecific) GetTxType() gincoincglobalv1.NemTransactionType {
	if x != nil {
		return x.TxType
	}
	return gincoincglobalv1.NemTransactionType(0)
}

func (x *CreateTransactionNemSpecific) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateTransactionNemSpecific) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// The model of IOST specific fields of CreateTransaction
type CreateTransactionIOSTSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memo      string `protobuf:"bytes,1,opt,name=memo,proto3" json:"memo,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// optional
	Type *IOSTActionType `protobuf:"varint,3,opt,name=type,proto3,enum=adamant.global.v1.IOSTActionType,oneof" json:"type,omitempty"`
}

func (x *CreateTransactionIOSTSpecific) Reset() {
	*x = CreateTransactionIOSTSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionIOSTSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionIOSTSpecific) ProtoMessage() {}

func (x *CreateTransactionIOSTSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionIOSTSpecific.ProtoReflect.Descriptor instead.
func (*CreateTransactionIOSTSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{64}
}

func (x *CreateTransactionIOSTSpecific) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateTransactionIOSTSpecific) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CreateTransactionIOSTSpecific) GetType() IOSTActionType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return IOSTActionType_IOST_ACTION_TYPE_INVALID
}

// The model of Symbol specific fields of CreateTransaction
type CreateTransactionSymbolSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string                                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	TxType        gincoincglobalv1.SymbolTransactionType `protobuf:"varint,2,opt,name=tx_type,json=txType,proto3,enum=gincoinc.global.v1.SymbolTransactionType" json:"tx_type,omitempty"`
	Message       string                                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp     uint64                                 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *CreateTransactionSymbolSpecific) Reset() {
	*x = CreateTransactionSymbolSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionSymbolSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionSymbolSpecific) ProtoMessage() {}

func (x *CreateTransactionSymbolSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionSymbolSpecific.ProtoReflect.Descriptor instead.
func (*CreateTransactionSymbolSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{65}
}

func (x *CreateTransactionSymbolSpecific) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *CreateTransactionSymbolSpecific) GetTxType() gincoincglobalv1.SymbolTransactionType {
	if x != nil {
		return x.TxType
	}
	return gincoincglobalv1.SymbolTransactionType(0)
}

func (x *CreateTransactionSymbolSpecific) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateTransactionSymbolSpecific) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// The model of Ethereum specific fields of CreateTransaction
type CreateTransactionEthereumSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data                     string                               `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	StakingRecipientWalletId *string                              `protobuf:"bytes,2,opt,name=staking_recipient_wallet_id,json=stakingRecipientWalletId,proto3,oneof" json:"staking_recipient_wallet_id,omitempty"`
	CallMethod               *gincoincglobalv1.EthereumCallMethod `protobuf:"varint,3,opt,name=call_method,json=callMethod,proto3,enum=gincoinc.global.v1.EthereumCallMethod,oneof" json:"call_method,omitempty"`
	UtilsAddress             *string                              `protobuf:"bytes,4,opt,name=utils_address,json=utilsAddress,proto3,oneof" json:"utils_address,omitempty"`
}

func (x *CreateTransactionEthereumSpecific) Reset() {
	*x = CreateTransactionEthereumSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionEthereumSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionEthereumSpecific) ProtoMessage() {}

func (x *CreateTransactionEthereumSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionEthereumSpecific.ProtoReflect.Descriptor instead.
func (*CreateTransactionEthereumSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{66}
}

func (x *CreateTransactionEthereumSpecific) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *CreateTransactionEthereumSpecific) GetStakingRecipientWalletId() string {
	if x != nil && x.StakingRecipientWalletId != nil {
		return *x.StakingRecipientWalletId
	}
	return ""
}

func (x *CreateTransactionEthereumSpecific) GetCallMethod() gincoincglobalv1.EthereumCallMethod {
	if x != nil && x.CallMethod != nil {
		return *x.CallMethod
	}
	return gincoincglobalv1.EthereumCallMethod(0)
}

func (x *CreateTransactionEthereumSpecific) GetUtilsAddress() string {
	if x != nil && x.UtilsAddress != nil {
		return *x.UtilsAddress
	}
	return ""
}

// The model of Cosmos specific fields of CreateTransaction
type CreateTransactionCosmosSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type gincoincglobalv1.CosmosMsgType `protobuf:"varint,1,opt,name=type,proto3,enum=gincoinc.global.v1.CosmosMsgType" json:"type,omitempty"`
	Memo string                         `protobuf:"bytes,2,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *CreateTransactionCosmosSpecific) Reset() {
	*x = CreateTransactionCosmosSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionCosmosSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionCosmosSpecific) ProtoMessage() {}

func (x *CreateTransactionCosmosSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionCosmosSpecific.ProtoReflect.Descriptor instead.
func (*CreateTransactionCosmosSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{67}
}

func (x *CreateTransactionCosmosSpecific) GetType() gincoincglobalv1.CosmosMsgType {
	if x != nil {
		return x.Type
	}
	return gincoincglobalv1.CosmosMsgType(0)
}

func (x *CreateTransactionCosmosSpecific) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

// The model of Algorand specific fields of CreateTransaction
type CreateTransactionAlgorandSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *CreateTransactionAlgorandSpecific) Reset() {
	*x = CreateTransactionAlgorandSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionAlgorandSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionAlgorandSpecific) ProtoMessage() {}

func (x *CreateTransactionAlgorandSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionAlgorandSpecific.ProtoReflect.Descriptor instead.
func (*CreateTransactionAlgorandSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{68}
}

func (x *CreateTransactionAlgorandSpecific) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// The model of Hedera specific fields of CreateTransaction
type CreateTransactionHederaSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memo      string `protobuf:"bytes,1,opt,name=memo,proto3" json:"memo,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *CreateTransactionHederaSpecific) Reset() {
	*x = CreateTransactionHederaSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionHederaSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionHederaSpecific) ProtoMessage() {}

func (x *CreateTransactionHederaSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionHederaSpecific.ProtoReflect.Descriptor instead.
func (*CreateTransactionHederaSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{69}
}

func (x *CreateTransactionHederaSpecific) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateTransactionHederaSpecific) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// The model of Solana specific fields of CreateTransaction
type CreateTransactionSolanaSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType gincoincglobalv1.SolanaEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=gincoinc.global.v1.SolanaEventType" json:"event_type,omitempty"`
}

func (x *CreateTransactionSolanaSpecific) Reset() {
	*x = CreateTransactionSolanaSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionSolanaSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionSolanaSpecific) ProtoMessage() {}

func (x *CreateTransactionSolanaSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionSolanaSpecific.ProtoReflect.Descriptor instead.
func (*CreateTransactionSolanaSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{70}
}

func (x *CreateTransactionSolanaSpecific) GetEventType() gincoincglobalv1.SolanaEventType {
	if x != nil {
		return x.EventType
	}
	return gincoincglobalv1.SolanaEventType(0)
}

// The model of Aptos specific fields of CreateTransaction
type CreateTransactionAptosSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expiration *uint64 `protobuf:"varint,1,opt,name=expiration,proto3,oneof" json:"expiration,omitempty"`
}

func (x *CreateTransactionAptosSpecific) Reset() {
	*x = CreateTransactionAptosSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionAptosSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionAptosSpecific) ProtoMessage() {}

func (x *CreateTransactionAptosSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionAptosSpecific.ProtoReflect.Descriptor instead.
func (*CreateTransactionAptosSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{71}
}

func (x *CreateTransactionAptosSpecific) GetExpiration() uint64 {
	if x != nil && x.Expiration != nil {
		return *x.Expiration
	}
	return 0
}

// The model of Avalanche specific fields of CreateTransaction
type CreateTransactionAvalancheSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxType           *gincoincglobalv1.AvalancheTxType `protobuf:"varint,1,opt,name=tx_type,json=txType,proto3,enum=gincoinc.global.v1.AvalancheTxType,oneof" json:"tx_type,omitempty"`
	ImportTxSpecific *ImportTxSpecific                 `protobuf:"bytes,2,opt,name=import_tx_specific,json=importTxSpecific,proto3,oneof" json:"import_tx_specific,omitempty"`
	StakingSpecific  *StakingSpecific                  `protobuf:"bytes,3,opt,name=staking_specific,json=stakingSpecific,proto3,oneof" json:"staking_specific,omitempty"`
}

func (x *CreateTransactionAvalancheSpecific) Reset() {
	*x = CreateTransactionAvalancheSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionAvalancheSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionAvalancheSpecific) ProtoMessage() {}

func (x *CreateTransactionAvalancheSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionAvalancheSpecific.ProtoReflect.Descriptor instead.
func (*CreateTransactionAvalancheSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{72}
}

func (x *CreateTransactionAvalancheSpecific) GetTxType() gincoincglobalv1.AvalancheTxType {
	if x != nil && x.TxType != nil {
		return *x.TxType
	}
	return gincoincglobalv1.AvalancheTxType(0)
}

func (x *CreateTransactionAvalancheSpecific) GetImportTxSpecific() *ImportTxSpecific {
	if x != nil {
		return x.ImportTxSpecific
	}
	return nil
}

func (x *CreateTransactionAvalancheSpecific) GetStakingSpecific() *StakingSpecific {
	if x != nil {
		return x.StakingSpecific
	}
	return nil
}

// The model of Ton specific fields of CreateTransaction
type CreateTransactionTonSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expiration uint64 `protobuf:"varint,1,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Memo       string `protobuf:"bytes,2,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *CreateTransactionTonSpecific) Reset() {
	*x = CreateTransactionTonSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionTonSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionTonSpecific) ProtoMessage() {}

func (x *CreateTransactionTonSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionTonSpecific.ProtoReflect.Descriptor instead.
func (*CreateTransactionTonSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{73}
}

func (x *CreateTransactionTonSpecific) GetExpiration() uint64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *CreateTransactionTonSpecific) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

// The model of NFTSpecific fields of CreateTransaction
type CreateTransactionNFTSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftCallMethod *gincoincglobalv1.NFTCallMethod `protobuf:"varint,1,opt,name=nft_call_method,json=nftCallMethod,proto3,enum=gincoinc.global.v1.NFTCallMethod,oneof" json:"nft_call_method,omitempty"`
	TokenIds      []string                        `protobuf:"bytes,2,rep,name=token_ids,json=tokenIds,proto3" json:"token_ids,omitempty"`
	MetadataJsons []string                        `protobuf:"bytes,3,rep,name=metadata_jsons,json=metadataJsons,proto3" json:"metadata_jsons,omitempty"`
}

func (x *CreateTransactionNFTSpecific) Reset() {
	*x = CreateTransactionNFTSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionNFTSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionNFTSpecific) ProtoMessage() {}

func (x *CreateTransactionNFTSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionNFTSpecific.ProtoReflect.Descriptor instead.
func (*CreateTransactionNFTSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{74}
}

func (x *CreateTransactionNFTSpecific) GetNftCallMethod() gincoincglobalv1.NFTCallMethod {
	if x != nil && x.NftCallMethod != nil {
		return *x.NftCallMethod
	}
	return gincoincglobalv1.NFTCallMethod(0)
}

func (x *CreateTransactionNFTSpecific) GetTokenIds() []string {
	if x != nil {
		return x.TokenIds
	}
	return nil
}

func (x *CreateTransactionNFTSpecific) GetMetadataJsons() []string {
	if x != nil {
		return x.MetadataJsons
	}
	return nil
}

type ImportTxSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *ImportTxSpecific) Reset() {
	*x = ImportTxSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportTxSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportTxSpecific) ProtoMessage() {}

func (x *ImportTxSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportTxSpecific.ProtoReflect.Descriptor instead.
func (*ImportTxSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{75}
}

func (x *ImportTxSpecific) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

type StakingSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime uint64 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   uint64 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *StakingSpecific) Reset() {
	*x = StakingSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingSpecific) ProtoMessage() {}

func (x *StakingSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingSpecific.ProtoReflect.Descriptor instead.
func (*StakingSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{76}
}

func (x *StakingSpecific) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *StakingSpecific) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// The model of SelectedUTXO fields of CreateTransaction
type SelectedUTXO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Vout uint32 `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`
}

func (x *SelectedUTXO) Reset() {
	*x = SelectedUTXO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectedUTXO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectedUTXO) ProtoMessage() {}

func (x *SelectedUTXO) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectedUTXO.ProtoReflect.Descriptor instead.
func (*SelectedUTXO) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{77}
}

func (x *SelectedUTXO) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *SelectedUTXO) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

// The model of substrate multisig transaction
type SubstrateMultisigTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId                       string                 `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`                // The id of wallet
	TransactionId                  string                 `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // id
	SubstrateMultisigTransactionId string                 `protobuf:"bytes,3,opt,name=substrate_multisig_transaction_id,json=substrateMultisigTransactionId,proto3" json:"substrate_multisig_transaction_id,omitempty"`
	AccountId                      string                 `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`       // AccountID
	TxId                           string                 `protobuf:"bytes,5,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`                      // txID
	ExtrinsicId                    string                 `protobuf:"bytes,6,opt,name=extrinsic_id,json=extrinsicId,proto3" json:"extrinsic_id,omitempty"` // ExtrinsicID
	JpyRate                        float64                `protobuf:"fixed64,7,opt,name=jpy_rate,json=jpyRate,proto3" json:"jpy_rate,omitempty"`           // The rate of fiat
	Fee                            float64                `protobuf:"fixed64,8,opt,name=fee,proto3" json:"fee,omitempty"`                                  // The number-typed amount of transaction fee
	StringFee                      string                 `protobuf:"bytes,9,opt,name=string_fee,json=stringFee,proto3" json:"string_fee,omitempty"`       // The string-typed amount of transaction fee
	Nonce                          uint64                 `protobuf:"varint,10,opt,name=nonce,proto3" json:"nonce,omitempty"`
	MultisigCallType               SubstrateCallType      `protobuf:"varint,11,opt,name=multisig_call_type,json=multisigCallType,proto3,enum=adamant.global.v1.SubstrateCallType" json:"multisig_call_type,omitempty"`
	State                          TransactionState       `protobuf:"varint,12,opt,name=state,proto3,enum=adamant.global.v1.TransactionState" json:"state,omitempty"` // state
	CreateTime                     *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`              // the time at which the transaction was created
	UpdateTime                     *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`              // the time at which the transaction was updated
	SectionIndex                   uint32                 `protobuf:"varint,15,opt,name=section_index,json=sectionIndex,proto3" json:"section_index,omitempty"`
	MethodIndex                    uint32                 `protobuf:"varint,16,opt,name=method_index,json=methodIndex,proto3" json:"method_index,omitempty"`
	CallSectionIndex               uint32                 `protobuf:"varint,17,opt,name=call_section_index,json=callSectionIndex,proto3" json:"call_section_index,omitempty"`
	CallMethodIndex                uint32                 `protobuf:"varint,18,opt,name=call_method_index,json=callMethodIndex,proto3" json:"call_method_index,omitempty"`
	MaxWeight                      uint64                 `protobuf:"varint,19,opt,name=max_weight,json=maxWeight,proto3" json:"max_weight,omitempty"`
	ProofSize                      uint64                 `protobuf:"varint,20,opt,name=proof_size,json=proofSize,proto3" json:"proof_size,omitempty"`
	Era                            uint64                 `protobuf:"varint,21,opt,name=era,proto3" json:"era,omitempty"`
	SpecVersion                    uint32                 `protobuf:"varint,22,opt,name=spec_version,json=specVersion,proto3" json:"spec_version,omitempty"`
	TransactionVersion             uint32                 `protobuf:"varint,23,opt,name=transaction_version,json=transactionVersion,proto3" json:"transaction_version,omitempty"`
	GenesisHash                    string                 `protobuf:"bytes,24,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty"`
}

func (x *SubstrateMultisigTransaction) Reset() {
	*x = SubstrateMultisigTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstrateMultisigTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstrateMultisigTransaction) ProtoMessage() {}

func (x *SubstrateMultisigTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstrateMultisigTransaction.ProtoReflect.Descriptor instead.
func (*SubstrateMultisigTransaction) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{78}
}

func (x *SubstrateMultisigTransaction) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *SubstrateMultisigTransaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *SubstrateMultisigTransaction) GetSubstrateMultisigTransactionId() string {
	if x != nil {
		return x.SubstrateMultisigTransactionId
	}
	return ""
}

func (x *SubstrateMultisigTransaction) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SubstrateMultisigTransaction) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *SubstrateMultisigTransaction) GetExtrinsicId() string {
	if x != nil {
		return x.ExtrinsicId
	}
	return ""
}

func (x *SubstrateMultisigTransaction) GetJpyRate() float64 {
	if x != nil {
		return x.JpyRate
	}
	return 0
}

func (x *SubstrateMultisigTransaction) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *SubstrateMultisigTransaction) GetStringFee() string {
	if x != nil {
		return x.StringFee
	}
	return ""
}

func (x *SubstrateMultisigTransaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SubstrateMultisigTransaction) GetMultisigCallType() SubstrateCallType {
	if x != nil {
		return x.MultisigCallType
	}
	return SubstrateCallType_SUBSTRATE_CALL_TYPE_INVALID
}

func (x *SubstrateMultisigTransaction) GetState() TransactionState {
	if x != nil {
		return x.State
	}
	return TransactionState_TRANSACTION_STATE_INVALID
}

func (x *SubstrateMultisigTransaction) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SubstrateMultisigTransaction) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *SubstrateMultisigTransaction) GetSectionIndex() uint32 {
	if x != nil {
		return x.SectionIndex
	}
	return 0
}

func (x *SubstrateMultisigTransaction) GetMethodIndex() uint32 {
	if x != nil {
		return x.MethodIndex
	}
	return 0
}

func (x *SubstrateMultisigTransaction) GetCallSectionIndex() uint32 {
	if x != nil {
		return x.CallSectionIndex
	}
	return 0
}

func (x *SubstrateMultisigTransaction) GetCallMethodIndex() uint32 {
	if x != nil {
		return x.CallMethodIndex
	}
	return 0
}

func (x *SubstrateMultisigTransaction) GetMaxWeight() uint64 {
	if x != nil {
		return x.MaxWeight
	}
	return 0
}

func (x *SubstrateMultisigTransaction) GetProofSize() uint64 {
	if x != nil {
		return x.ProofSize
	}
	return 0
}

func (x *SubstrateMultisigTransaction) GetEra() uint64 {
	if x != nil {
		return x.Era
	}
	return 0
}

func (x *SubstrateMultisigTransaction) GetSpecVersion() uint32 {
	if x != nil {
		return x.SpecVersion
	}
	return 0
}

func (x *SubstrateMultisigTransaction) GetTransactionVersion() uint32 {
	if x != nil {
		return x.TransactionVersion
	}
	return 0
}

func (x *SubstrateMultisigTransaction) GetGenesisHash() string {
	if x != nil {
		return x.GenesisHash
	}
	return ""
}

// The model of nem multisig transaction
type NemMultisigTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId                 string                              `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`                // The id of wallet
	TransactionId            string                              `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // id
	NemMultisigTransactionId string                              `protobuf:"bytes,3,opt,name=nem_multisig_transaction_id,json=nemMultisigTransactionId,proto3" json:"nem_multisig_transaction_id,omitempty"`
	AccountId                string                              `protobuf:"bytes,10,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // AccountID
	TxType                   gincoincglobalv1.NemTransactionType `protobuf:"varint,4,opt,name=tx_type,json=txType,proto3,enum=gincoinc.global.v1.NemTransactionType" json:"tx_type,omitempty"`
	Data                     string                              `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`                                            // The string-typed amount of transaction fee
	Signature                string                              `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`                                  // The string-typed amount of transaction fee
	State                    TransactionState                    `protobuf:"varint,7,opt,name=state,proto3,enum=adamant.global.v1.TransactionState" json:"state,omitempty"` // state
	CreateTime               *timestamppb.Timestamp              `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`              // the time at which the transaction was created
	UpdateTime               *timestamppb.Timestamp              `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`              // the time at which the transaction was updated
}

func (x *NemMultisigTransaction) Reset() {
	*x = NemMultisigTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NemMultisigTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NemMultisigTransaction) ProtoMessage() {}

func (x *NemMultisigTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NemMultisigTransaction.ProtoReflect.Descriptor instead.
func (*NemMultisigTransaction) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{79}
}

func (x *NemMultisigTransaction) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *NemMultisigTransaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *NemMultisigTransaction) GetNemMultisigTransactionId() string {
	if x != nil {
		return x.NemMultisigTransactionId
	}
	return ""
}

func (x *NemMultisigTransaction) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *NemMultisigTransaction) GetTxType() gincoincglobalv1.NemTransactionType {
	if x != nil {
		return x.TxType
	}
	return gincoincglobalv1.NemTransactionType(0)
}

func (x *NemMultisigTransaction) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *NemMultisigTransaction) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *NemMultisigTransaction) GetState() TransactionState {
	if x != nil {
		return x.State
	}
	return TransactionState_TRANSACTION_STATE_INVALID
}

func (x *NemMultisigTransaction) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *NemMultisigTransaction) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// The model of symbol multisig transaction
type SymbolMultisigTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId                    string                                 `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`                // The id of wallet
	TransactionId               string                                 `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // id
	SymbolMultisigTransactionId string                                 `protobuf:"bytes,3,opt,name=symbol_multisig_transaction_id,json=symbolMultisigTransactionId,proto3" json:"symbol_multisig_transaction_id,omitempty"`
	AccountId                   string                                 `protobuf:"bytes,10,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // AccountID
	TxType                      gincoincglobalv1.SymbolTransactionType `protobuf:"varint,4,opt,name=tx_type,json=txType,proto3,enum=gincoinc.global.v1.SymbolTransactionType" json:"tx_type,omitempty"`
	Data                        string                                 `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`                                            // The string-typed amount of transaction fee
	Signature                   string                                 `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`                                  // The string-typed amount of transaction fee
	State                       TransactionState                       `protobuf:"varint,7,opt,name=state,proto3,enum=adamant.global.v1.TransactionState" json:"state,omitempty"` // state
	CreateTime                  *timestamppb.Timestamp                 `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`              // the time at which the transaction was created
	UpdateTime                  *timestamppb.Timestamp                 `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`              // the time at which the transaction was updated
}

func (x *SymbolMultisigTransaction) Reset() {
	*x = SymbolMultisigTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolMultisigTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolMultisigTransaction) ProtoMessage() {}

func (x *SymbolMultisigTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolMultisigTransaction.ProtoReflect.Descriptor instead.
func (*SymbolMultisigTransaction) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{80}
}

func (x *SymbolMultisigTransaction) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *SymbolMultisigTransaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *SymbolMultisigTransaction) GetSymbolMultisigTransactionId() string {
	if x != nil {
		return x.SymbolMultisigTransactionId
	}
	return ""
}

func (x *SymbolMultisigTransaction) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SymbolMultisigTransaction) GetTxType() gincoincglobalv1.SymbolTransactionType {
	if x != nil {
		return x.TxType
	}
	return gincoincglobalv1.SymbolTransactionType(0)
}

func (x *SymbolMultisigTransaction) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *SymbolMultisigTransaction) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *SymbolMultisigTransaction) GetState() TransactionState {
	if x != nil {
		return x.State
	}
	return TransactionState_TRANSACTION_STATE_INVALID
}

func (x *SymbolMultisigTransaction) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SymbolMultisigTransaction) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// The model of information about signing
type SignInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string                   `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string                   `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	KeyId         string                   `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	HdAccount     uint32                   `protobuf:"varint,4,opt,name=hd_account,json=hdAccount,proto3" json:"hd_account,omitempty"`
	Coin          gincoincglobalv1.Coin    `protobuf:"varint,5,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	TxId          string                   `protobuf:"bytes,6,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	SignMessage   string                   `protobuf:"bytes,7,opt,name=sign_message,json=signMessage,proto3" json:"sign_message,omitempty"`
	HdChange      uint32                   `protobuf:"varint,8,opt,name=hd_change,json=hdChange,proto3" json:"hd_change,omitempty"`
	HdIndex       uint32                   `protobuf:"varint,9,opt,name=hd_index,json=hdIndex,proto3" json:"hd_index,omitempty"`
	SignTxInputs  []*SignTxInput           `protobuf:"bytes,10,rep,name=sign_tx_inputs,json=signTxInputs,proto3" json:"sign_tx_inputs,omitempty"`
	SignIndex     uint32                   `protobuf:"varint,11,opt,name=sign_index,json=signIndex,proto3" json:"sign_index,omitempty"`
	Network       gincoincglobalv1.Network `protobuf:"varint,12,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`
}

func (x *SignInfo) Reset() {
	*x = SignInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInfo) ProtoMessage() {}

func (x *SignInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInfo.ProtoReflect.Descriptor instead.
func (*SignInfo) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{81}
}

func (x *SignInfo) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *SignInfo) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *SignInfo) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SignInfo) GetHdAccount() uint32 {
	if x != nil {
		return x.HdAccount
	}
	return 0
}

func (x *SignInfo) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *SignInfo) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *SignInfo) GetSignMessage() string {
	if x != nil {
		return x.SignMessage
	}
	return ""
}

func (x *SignInfo) GetHdChange() uint32 {
	if x != nil {
		return x.HdChange
	}
	return 0
}

func (x *SignInfo) GetHdIndex() uint32 {
	if x != nil {
		return x.HdIndex
	}
	return 0
}

func (x *SignInfo) GetSignTxInputs() []*SignTxInput {
	if x != nil {
		return x.SignTxInputs
	}
	return nil
}

func (x *SignInfo) GetSignIndex() uint32 {
	if x != nil {
		return x.SignIndex
	}
	return 0
}

func (x *SignInfo) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

// The model of transaction input for signing
type SignTxInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxInputIndex uint32 `protobuf:"varint,1,opt,name=tx_input_index,json=txInputIndex,proto3" json:"tx_input_index,omitempty"`
	SignMessage  string `protobuf:"bytes,2,opt,name=sign_message,json=signMessage,proto3" json:"sign_message,omitempty"`
	HdChange     uint32 `protobuf:"varint,3,opt,name=hd_change,json=hdChange,proto3" json:"hd_change,omitempty"`
	HdIndex      uint32 `protobuf:"varint,4,opt,name=hd_index,json=hdIndex,proto3" json:"hd_index,omitempty"`
}

func (x *SignTxInput) Reset() {
	*x = SignTxInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignTxInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTxInput) ProtoMessage() {}

func (x *SignTxInput) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTxInput.ProtoReflect.Descriptor instead.
func (*SignTxInput) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{82}
}

func (x *SignTxInput) GetTxInputIndex() uint32 {
	if x != nil {
		return x.TxInputIndex
	}
	return 0
}

func (x *SignTxInput) GetSignMessage() string {
	if x != nil {
		return x.SignMessage
	}
	return ""
}

func (x *SignTxInput) GetHdChange() uint32 {
	if x != nil {
		return x.HdChange
	}
	return 0
}

func (x *SignTxInput) GetHdIndex() uint32 {
	if x != nil {
		return x.HdIndex
	}
	return 0
}

// The model of transfer
type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId         string                             `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`                                                                      // The id of wallet
	TransferId       string                             `protobuf:"bytes,2,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`                                                                // id
	Coin             gincoincglobalv1.Coin              `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`                                                                // coin
	Network          gincoincglobalv1.Network           `protobuf:"varint,26,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`                                                      // network
	TxId             string                             `protobuf:"bytes,4,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`                                                                                  // txID
	TransferType     gincoincglobalv1.TransferType      `protobuf:"varint,5,opt,name=transfer_type,json=transferType,proto3,enum=gincoinc.global.v1.TransferType" json:"transfer_type,omitempty"`                    // type
	Value            float64                            `protobuf:"fixed64,6,opt,name=value,proto3" json:"value,omitempty"`                                                                                          // The number-typed amount of transfer
	StringValue      string                             `protobuf:"bytes,7,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`                                                             // The string-typed amount of transfer
	JpyRate          float64                            `protobuf:"fixed64,9,opt,name=jpy_rate,json=jpyRate,proto3" json:"jpy_rate,omitempty"`                                                                       // The rate of fiat
	PartnerWalletId  string                             `protobuf:"bytes,10,opt,name=partner_wallet_id,json=partnerWalletId,proto3" json:"partner_wallet_id,omitempty"`                                              // The wallet id to which the transfer send/receive
	PartnerAddress   string                             `protobuf:"bytes,11,opt,name=partner_address,json=partnerAddress,proto3" json:"partner_address,omitempty"`                                                   // The address of wallet to which the transfer send/receive
	DestinationTag   uint32                             `protobuf:"varint,15,opt,name=destination_tag,json=destinationTag,proto3" json:"destination_tag,omitempty"`                                                  // destination tag (only XRP)
	MemoId           uint64                             `protobuf:"varint,17,opt,name=memo_id,json=memoId,proto3" json:"memo_id,omitempty"`                                                                          // memo id (only XLM)
	Message          string                             `protobuf:"bytes,18,opt,name=message,proto3" json:"message,omitempty"`                                                                                       // message (only NEM)
	Fee              float64                            `protobuf:"fixed64,19,opt,name=fee,proto3" json:"fee,omitempty"`                                                                                             // The number-typed amount of transfer fee
	StringFee        string                             `protobuf:"bytes,20,opt,name=string_fee,json=stringFee,proto3" json:"string_fee,omitempty"`                                                                  // The string-typed amount of transfer fee
	From             string                             `protobuf:"bytes,21,opt,name=from,proto3" json:"from,omitempty"`                                                                                             // from address
	To               string                             `protobuf:"bytes,22,opt,name=to,proto3" json:"to,omitempty"`                                                                                                 // to address
	State            gincoincglobalv1.TransactionState  `protobuf:"varint,12,opt,name=state,proto3,enum=gincoinc.global.v1.TransactionState" json:"state,omitempty"`                                                 // state
	Result           gincoincglobalv1.TransactionResult `protobuf:"varint,16,opt,name=result,proto3,enum=gincoinc.global.v1.TransactionResult" json:"result,omitempty"`                                              // result
	CreateTime       *timestamppb.Timestamp             `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                                               // the time at which the transfer was created
	UpdateTime       *timestamppb.Timestamp             `protobuf:"bytes,14,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                                               // the time at which the transfer was updated
	CosmosSpecific   *TransferCosmosSpecific            `protobuf:"bytes,23,opt,name=cosmos_specific,json=cosmosSpecific,proto3" json:"cosmos_specific,omitempty"`                                                   // cosmos_specific
	StakingEventType gincoincglobalv1.StakingEventType  `protobuf:"varint,24,opt,name=staking_event_type,json=stakingEventType,proto3,enum=gincoinc.global.v1.StakingEventType" json:"staking_event_type,omitempty"` // staking_event_type
	Method           string                             `protobuf:"bytes,25,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{83}
}

func (x *Transfer) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *Transfer) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *Transfer) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *Transfer) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *Transfer) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *Transfer) GetTransferType() gincoincglobalv1.TransferType {
	if x != nil {
		return x.TransferType
	}
	return gincoincglobalv1.TransferType(0)
}

func (x *Transfer) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Transfer) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *Transfer) GetJpyRate() float64 {
	if x != nil {
		return x.JpyRate
	}
	return 0
}

func (x *Transfer) GetPartnerWalletId() string {
	if x != nil {
		return x.PartnerWalletId
	}
	return ""
}

func (x *Transfer) GetPartnerAddress() string {
	if x != nil {
		return x.PartnerAddress
	}
	return ""
}

func (x *Transfer) GetDestinationTag() uint32 {
	if x != nil {
		return x.DestinationTag
	}
	return 0
}

func (x *Transfer) GetMemoId() uint64 {
	if x != nil {
		return x.MemoId
	}
	return 0
}

func (x *Transfer) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Transfer) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *Transfer) GetStringFee() string {
	if x != nil {
		return x.StringFee
	}
	return ""
}

func (x *Transfer) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Transfer) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Transfer) GetState() gincoincglobalv1.TransactionState {
	if x != nil {
		return x.State
	}
	return gincoincglobalv1.TransactionState(0)
}

func (x *Transfer) GetResult() gincoincglobalv1.TransactionResult {
	if x != nil {
		return x.Result
	}
	return gincoincglobalv1.TransactionResult(0)
}

func (x *Transfer) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Transfer) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Transfer) GetCosmosSpecific() *TransferCosmosSpecific {
	if x != nil {
		return x.CosmosSpecific
	}
	return nil
}

func (x *Transfer) GetStakingEventType() gincoincglobalv1.StakingEventType {
	if x != nil {
		return x.StakingEventType
	}
	return gincoincglobalv1.StakingEventType(0)
}

func (x *Transfer) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

type TransferCosmosSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           gincoincglobalv1.CosmosMsgType `protobuf:"varint,1,opt,name=type,proto3,enum=gincoinc.global.v1.CosmosMsgType" json:"type,omitempty"`
	DelegateAmount float64                        `protobuf:"fixed64,2,opt,name=delegate_amount,json=delegateAmount,proto3" json:"delegate_amount,omitempty"`
	RewardAmount   float64                        `protobuf:"fixed64,3,opt,name=reward_amount,json=rewardAmount,proto3" json:"reward_amount,omitempty"`
}

func (x *TransferCosmosSpecific) Reset() {
	*x = TransferCosmosSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferCosmosSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCosmosSpecific) ProtoMessage() {}

func (x *TransferCosmosSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCosmosSpecific.ProtoReflect.Descriptor instead.
func (*TransferCosmosSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{84}
}

func (x *TransferCosmosSpecific) GetType() gincoincglobalv1.CosmosMsgType {
	if x != nil {
		return x.Type
	}
	return gincoincglobalv1.CosmosMsgType(0)
}

func (x *TransferCosmosSpecific) GetDelegateAmount() float64 {
	if x != nil {
		return x.DelegateAmount
	}
	return 0
}

func (x *TransferCosmosSpecific) GetRewardAmount() float64 {
	if x != nil {
		return x.RewardAmount
	}
	return 0
}

// The model of transfer
type UncheckedTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId        string                             `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`                                                   // The id of wallet
	TransferId      string                             `protobuf:"bytes,2,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`                                             // id
	Coin            gincoincglobalv1.Coin              `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`                                             // coin
	TxId            string                             `protobuf:"bytes,4,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`                                                               // txID
	TransferType    gincoincglobalv1.TransferType      `protobuf:"varint,5,opt,name=transfer_type,json=transferType,proto3,enum=gincoinc.global.v1.TransferType" json:"transfer_type,omitempty"` // type
	State           gincoincglobalv1.TransactionState  `protobuf:"varint,6,opt,name=state,proto3,enum=gincoinc.global.v1.TransactionState" json:"state,omitempty"`                               // state
	Result          gincoincglobalv1.TransactionResult `protobuf:"varint,7,opt,name=result,proto3,enum=gincoinc.global.v1.TransactionResult" json:"result,omitempty"`                            // result
	Value           float64                            `protobuf:"fixed64,8,opt,name=value,proto3" json:"value,omitempty"`                                                                       // The number-typed amount of transfer
	StringValue     string                             `protobuf:"bytes,9,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`                                          // The string-typed amount of transfer
	JpyRate         float64                            `protobuf:"fixed64,10,opt,name=jpy_rate,json=jpyRate,proto3" json:"jpy_rate,omitempty"`                                                   // The rate of fiat
	PartnerWalletId string                             `protobuf:"bytes,11,opt,name=partner_wallet_id,json=partnerWalletId,proto3" json:"partner_wallet_id,omitempty"`                           // The wallet id to which the transfer send/receive
	PartnerAddress  string                             `protobuf:"bytes,12,opt,name=partner_address,json=partnerAddress,proto3" json:"partner_address,omitempty"`                                // The address of wallet to which the transfer send/receive
	DestinationTag  uint32                             `protobuf:"varint,13,opt,name=destination_tag,json=destinationTag,proto3" json:"destination_tag,omitempty"`                               // destination tag (only XRP)
	MemoId          uint64                             `protobuf:"varint,14,opt,name=memo_id,json=memoId,proto3" json:"memo_id,omitempty"`                                                       // memo id (only XLM)
	Message         string                             `protobuf:"bytes,18,opt,name=message,proto3" json:"message,omitempty"`                                                                    // message (only NEM)
	Fee             float64                            `protobuf:"fixed64,19,opt,name=fee,proto3" json:"fee,omitempty"`                                                                          // The number-typed amount of transfer fee
	StringFee       string                             `protobuf:"bytes,20,opt,name=string_fee,json=stringFee,proto3" json:"string_fee,omitempty"`                                               // The string-typed amount of transfer fee
	From            string                             `protobuf:"bytes,21,opt,name=from,proto3" json:"from,omitempty"`                                                                          // from address
	To              string                             `protobuf:"bytes,22,opt,name=to,proto3" json:"to,omitempty"`                                                                              // to address
	HasChecked      bool                               `protobuf:"varint,15,opt,name=has_checked,json=hasChecked,proto3" json:"has_checked,omitempty"`                                           // Whether the transfer has been checked or not
	CreateTime      *timestamppb.Timestamp             `protobuf:"bytes,16,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                            // the time at which the transfer was created
	UpdateTime      *timestamppb.Timestamp             `protobuf:"bytes,17,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                            // the time at which the transfer was updated
}

func (x *UncheckedTransfer) Reset() {
	*x = UncheckedTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UncheckedTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UncheckedTransfer) ProtoMessage() {}

func (x *UncheckedTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UncheckedTransfer.ProtoReflect.Descriptor instead.
func (*UncheckedTransfer) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{85}
}

func (x *UncheckedTransfer) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *UncheckedTransfer) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *UncheckedTransfer) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *UncheckedTransfer) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *UncheckedTransfer) GetTransferType() gincoincglobalv1.TransferType {
	if x != nil {
		return x.TransferType
	}
	return gincoincglobalv1.TransferType(0)
}

func (x *UncheckedTransfer) GetState() gincoincglobalv1.TransactionState {
	if x != nil {
		return x.State
	}
	return gincoincglobalv1.TransactionState(0)
}

func (x *UncheckedTransfer) GetResult() gincoincglobalv1.TransactionResult {
	if x != nil {
		return x.Result
	}
	return gincoincglobalv1.TransactionResult(0)
}

func (x *UncheckedTransfer) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UncheckedTransfer) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *UncheckedTransfer) GetJpyRate() float64 {
	if x != nil {
		return x.JpyRate
	}
	return 0
}

func (x *UncheckedTransfer) GetPartnerWalletId() string {
	if x != nil {
		return x.PartnerWalletId
	}
	return ""
}

func (x *UncheckedTransfer) GetPartnerAddress() string {
	if x != nil {
		return x.PartnerAddress
	}
	return ""
}

func (x *UncheckedTransfer) GetDestinationTag() uint32 {
	if x != nil {
		return x.DestinationTag
	}
	return 0
}

func (x *UncheckedTransfer) GetMemoId() uint64 {
	if x != nil {
		return x.MemoId
	}
	return 0
}

func (x *UncheckedTransfer) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UncheckedTransfer) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *UncheckedTransfer) GetStringFee() string {
	if x != nil {
		return x.StringFee
	}
	return ""
}

func (x *UncheckedTransfer) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *UncheckedTransfer) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *UncheckedTransfer) GetHasChecked() bool {
	if x != nil {
		return x.HasChecked
	}
	return false
}

func (x *UncheckedTransfer) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *UncheckedTransfer) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type EventTriggeredMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTriggeredMessageId   string                    `protobuf:"bytes,1,opt,name=event_triggered_message_id,json=eventTriggeredMessageId,proto3" json:"event_triggered_message_id,omitempty"`
	EventTriggeredMessageType EventTriggeredMessageType `protobuf:"varint,2,opt,name=event_triggered_message_type,json=eventTriggeredMessageType,proto3,enum=adamant.global.v1.EventTriggeredMessageType" json:"event_triggered_message_type,omitempty"`
	OwnerId                   string                    `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Destination               string                    `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	CreateTime                *timestamppb.Timestamp    `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime                *timestamppb.Timestamp    `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *EventTriggeredMessage) Reset() {
	*x = EventTriggeredMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTriggeredMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTriggeredMessage) ProtoMessage() {}

func (x *EventTriggeredMessage) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTriggeredMessage.ProtoReflect.Descriptor instead.
func (*EventTriggeredMessage) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{86}
}

func (x *EventTriggeredMessage) GetEventTriggeredMessageId() string {
	if x != nil {
		return x.EventTriggeredMessageId
	}
	return ""
}

func (x *EventTriggeredMessage) GetEventTriggeredMessageType() EventTriggeredMessageType {
	if x != nil {
		return x.EventTriggeredMessageType
	}
	return EventTriggeredMessageType_EVENT_TRIGGERED_MESSAGE_TYPE_INVALID
}

func (x *EventTriggeredMessage) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *EventTriggeredMessage) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *EventTriggeredMessage) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *EventTriggeredMessage) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// The model of fiat rate
type Rate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin gincoincglobalv1.Coin `protobuf:"varint,1,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	Jpy  float64               `protobuf:"fixed64,2,opt,name=jpy,proto3" json:"jpy,omitempty"`
}

func (x *Rate) Reset() {
	*x = Rate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rate) ProtoMessage() {}

func (x *Rate) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rate.ProtoReflect.Descriptor instead.
func (*Rate) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{87}
}

func (x *Rate) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *Rate) GetJpy() float64 {
	if x != nil {
		return x.Jpy
	}
	return 0
}

// The model of rate snapshot. the snapshot contains a set of rates
type RateSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateSnapshotId string           `protobuf:"bytes,1,opt,name=rate_snapshot_id,json=rateSnapshotId,proto3" json:"rate_snapshot_id,omitempty"`                                                // id
	Rates          map[uint32]*Rate `protobuf:"bytes,2,rep,name=rates,proto3" json:"rates,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // RatesEntry: map<k, v> / k: enum number of Coin, v: Rate
}

func (x *RateSnapshot) Reset() {
	*x = RateSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateSnapshot) ProtoMessage() {}

func (x *RateSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateSnapshot.ProtoReflect.Descriptor instead.
func (*RateSnapshot) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{88}
}

func (x *RateSnapshot) GetRateSnapshotId() string {
	if x != nil {
		return x.RateSnapshotId
	}
	return ""
}

func (x *RateSnapshot) GetRates() map[uint32]*Rate {
	if x != nil {
		return x.Rates
	}
	return nil
}

// The model which indicates corresponding account is deactivatable
type Deactivatability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Deactivatable bool   `protobuf:"varint,2,opt,name=deactivatable,proto3" json:"deactivatable,omitempty"`
}

func (x *Deactivatability) Reset() {
	*x = Deactivatability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deactivatability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deactivatability) ProtoMessage() {}

func (x *Deactivatability) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deactivatability.ProtoReflect.Descriptor instead.
func (*Deactivatability) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{89}
}

func (x *Deactivatability) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Deactivatability) GetDeactivatable() bool {
	if x != nil {
		return x.Deactivatable
	}
	return false
}

// The model of labeled address. labeled address is the address which is used to
// construct whitelist
type LabeledAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabeledAddressId string                   `protobuf:"bytes,1,opt,name=labeled_address_id,json=labeledAddressId,proto3" json:"labeled_address_id,omitempty"` // id
	Name             string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                   // name
	Coin             gincoincglobalv1.Coin    `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`                     // coin
	Address          string                   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`                                             // address
	Proposal         *LabeledAddressProposal  `protobuf:"bytes,5,opt,name=proposal,proto3" json:"proposal,omitempty"`                                           // The proposal about updating the labeled address
	CreateTime       *timestamppb.Timestamp   `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                     // the time at which the labeled address was created
	UpdateTime       *timestamppb.Timestamp   `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                     // the time at which the labeled address was updated
	Network          gincoincglobalv1.Network `protobuf:"varint,9,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`
	Message          string                   `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"` // message
}

func (x *LabeledAddress) Reset() {
	*x = LabeledAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabeledAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabeledAddress) ProtoMessage() {}

func (x *LabeledAddress) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabeledAddress.ProtoReflect.Descriptor instead.
func (*LabeledAddress) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{90}
}

func (x *LabeledAddress) GetLabeledAddressId() string {
	if x != nil {
		return x.LabeledAddressId
	}
	return ""
}

func (x *LabeledAddress) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LabeledAddress) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *LabeledAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *LabeledAddress) GetProposal() *LabeledAddressProposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *LabeledAddress) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *LabeledAddress) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *LabeledAddress) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *LabeledAddress) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// The model of proposal to update labeled address information
type LabeledAddressProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequesterAccountId string `protobuf:"bytes,1,opt,name=requester_account_id,json=requesterAccountId,proto3" json:"requester_account_id,omitempty"`
	RequesterName      string `protobuf:"bytes,2,opt,name=requester_name,json=requesterName,proto3" json:"requester_name,omitempty"`
	ApproverAccountId  string `protobuf:"bytes,3,opt,name=approver_account_id,json=approverAccountId,proto3" json:"approver_account_id,omitempty"`
	ApproverName       string `protobuf:"bytes,4,opt,name=approver_name,json=approverName,proto3" json:"approver_name,omitempty"`
	ProposedAddress    string `protobuf:"bytes,5,opt,name=proposed_address,json=proposedAddress,proto3" json:"proposed_address,omitempty"`
	AddressIsReviewed  bool   `protobuf:"varint,6,opt,name=address_is_reviewed,json=addressIsReviewed,proto3" json:"address_is_reviewed,omitempty"`
	ProposedMessage    string `protobuf:"bytes,7,opt,name=proposed_message,json=proposedMessage,proto3" json:"proposed_message,omitempty"`
}

func (x *LabeledAddressProposal) Reset() {
	*x = LabeledAddressProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabeledAddressProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabeledAddressProposal) ProtoMessage() {}

func (x *LabeledAddressProposal) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabeledAddressProposal.ProtoReflect.Descriptor instead.
func (*LabeledAddressProposal) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{91}
}

func (x *LabeledAddressProposal) GetRequesterAccountId() string {
	if x != nil {
		return x.RequesterAccountId
	}
	return ""
}

func (x *LabeledAddressProposal) GetRequesterName() string {
	if x != nil {
		return x.RequesterName
	}
	return ""
}

func (x *LabeledAddressProposal) GetApproverAccountId() string {
	if x != nil {
		return x.ApproverAccountId
	}
	return ""
}

func (x *LabeledAddressProposal) GetApproverName() string {
	if x != nil {
		return x.ApproverName
	}
	return ""
}

func (x *LabeledAddressProposal) GetProposedAddress() string {
	if x != nil {
		return x.ProposedAddress
	}
	return ""
}

func (x *LabeledAddressProposal) GetAddressIsReviewed() bool {
	if x != nil {
		return x.AddressIsReviewed
	}
	return false
}

func (x *LabeledAddressProposal) GetProposedMessage() string {
	if x != nil {
		return x.ProposedMessage
	}
	return ""
}

// The model of whitelist
type Whitelist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhitelistId string                   `protobuf:"bytes,1,opt,name=whitelist_id,json=whitelistId,proto3" json:"whitelist_id,omitempty"`       // id
	Name        string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                        // name
	Coin        gincoincglobalv1.Coin    `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`          // coin
	Network     gincoincglobalv1.Network `protobuf:"varint,8,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"` // network
	Addresses   []*LabeledAddress        `protobuf:"bytes,4,rep,name=addresses,proto3" json:"addresses,omitempty"`                              // The list of labeled addresses registered in the whitelist
	CreateTime  *timestamppb.Timestamp   `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`          // the time at which the whitelist was created
	UpdateTime  *timestamppb.Timestamp   `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`          // the time at which the whitelist was updated
}

func (x *Whitelist) Reset() {
	*x = Whitelist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Whitelist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Whitelist) ProtoMessage() {}

func (x *Whitelist) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Whitelist.ProtoReflect.Descriptor instead.
func (*Whitelist) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{92}
}

func (x *Whitelist) GetWhitelistId() string {
	if x != nil {
		return x.WhitelistId
	}
	return ""
}

func (x *Whitelist) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Whitelist) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *Whitelist) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *Whitelist) GetAddresses() []*LabeledAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Whitelist) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Whitelist) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// The model of transfer limit
type TransferLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferLimitId string                   `protobuf:"bytes,1,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"` // id
	Name            string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                // name
	Coin            gincoincglobalv1.Coin    `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`                  // coin
	Network         gincoincglobalv1.Network `protobuf:"varint,12,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`        // network
	HourlyLimit     int64                    `protobuf:"varint,4,opt,name=hourly_limit,json=hourlyLimit,proto3" json:"hourly_limit,omitempty"`              // The hourly limit of amount which the wallet can transfer (in JPY)
	DailyLimit      int64                    `protobuf:"varint,5,opt,name=daily_limit,json=dailyLimit,proto3" json:"daily_limit,omitempty"`                 // The daily limit of amount which the wallet can transfer (in JPY)
	OneTimeLimit    int64                    `protobuf:"varint,6,opt,name=one_time_limit,json=oneTimeLimit,proto3" json:"one_time_limit,omitempty"`         // The daily limit of amount which the wallet can transfer (in JPY)
	Proposal        *TransferLimitProposal   `protobuf:"bytes,7,opt,name=proposal,proto3" json:"proposal,omitempty"`                                        // The proposal about updating the transfer limit
	IsReviewed      bool                     `protobuf:"varint,8,opt,name=is_reviewed,json=isReviewed,proto3" json:"is_reviewed,omitempty"`                 // The flag which indicates the transfer limit is reviewed or not
	CreateTime      *timestamppb.Timestamp   `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                 // the time at which the whitelist was created
	UpdateTime      *timestamppb.Timestamp   `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                 // the time at which the whitelist was updated
}

func (x *TransferLimit) Reset() {
	*x = TransferLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferLimit) ProtoMessage() {}

func (x *TransferLimit) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferLimit.ProtoReflect.Descriptor instead.
func (*TransferLimit) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{93}
}

func (x *TransferLimit) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

func (x *TransferLimit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransferLimit) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *TransferLimit) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *TransferLimit) GetHourlyLimit() int64 {
	if x != nil {
		return x.HourlyLimit
	}
	return 0
}

func (x *TransferLimit) GetDailyLimit() int64 {
	if x != nil {
		return x.DailyLimit
	}
	return 0
}

func (x *TransferLimit) GetOneTimeLimit() int64 {
	if x != nil {
		return x.OneTimeLimit
	}
	return 0
}

func (x *TransferLimit) GetProposal() *TransferLimitProposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *TransferLimit) GetIsReviewed() bool {
	if x != nil {
		return x.IsReviewed
	}
	return false
}

func (x *TransferLimit) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *TransferLimit) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// The model of proposal to update transfer limit information
type TransferLimitProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequesterAccountId   string `protobuf:"bytes,1,opt,name=requester_account_id,json=requesterAccountId,proto3" json:"requester_account_id,omitempty"`
	RequesterName        string `protobuf:"bytes,2,opt,name=requester_name,json=requesterName,proto3" json:"requester_name,omitempty"`
	ApproverAccountId    string `protobuf:"bytes,3,opt,name=approver_account_id,json=approverAccountId,proto3" json:"approver_account_id,omitempty"`
	ApproverName         string `protobuf:"bytes,4,opt,name=approver_name,json=approverName,proto3" json:"approver_name,omitempty"`
	ProposedHourlyLimit  int64  `protobuf:"varint,5,opt,name=proposed_hourly_limit,json=proposedHourlyLimit,proto3" json:"proposed_hourly_limit,omitempty"`
	ProposedDailyLimit   int64  `protobuf:"varint,6,opt,name=proposed_daily_limit,json=proposedDailyLimit,proto3" json:"proposed_daily_limit,omitempty"`
	ProposedOneTimeLimit int64  `protobuf:"varint,7,opt,name=proposed_one_time_limit,json=proposedOneTimeLimit,proto3" json:"proposed_one_time_limit,omitempty"`
	IsReviewed           bool   `protobuf:"varint,8,opt,name=is_reviewed,json=isReviewed,proto3" json:"is_reviewed,omitempty"`
}

func (x *TransferLimitProposal) Reset() {
	*x = TransferLimitProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferLimitProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferLimitProposal) ProtoMessage() {}

func (x *TransferLimitProposal) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferLimitProposal.ProtoReflect.Descriptor instead.
func (*TransferLimitProposal) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{94}
}

func (x *TransferLimitProposal) GetRequesterAccountId() string {
	if x != nil {
		return x.RequesterAccountId
	}
	return ""
}

func (x *TransferLimitProposal) GetRequesterName() string {
	if x != nil {
		return x.RequesterName
	}
	return ""
}

func (x *TransferLimitProposal) GetApproverAccountId() string {
	if x != nil {
		return x.ApproverAccountId
	}
	return ""
}

func (x *TransferLimitProposal) GetApproverName() string {
	if x != nil {
		return x.ApproverName
	}
	return ""
}

func (x *TransferLimitProposal) GetProposedHourlyLimit() int64 {
	if x != nil {
		return x.ProposedHourlyLimit
	}
	return 0
}

func (x *TransferLimitProposal) GetProposedDailyLimit() int64 {
	if x != nil {
		return x.ProposedDailyLimit
	}
	return 0
}

func (x *TransferLimitProposal) GetProposedOneTimeLimit() int64 {
	if x != nil {
		return x.ProposedOneTimeLimit
	}
	return 0
}

func (x *TransferLimitProposal) GetIsReviewed() bool {
	if x != nil {
		return x.IsReviewed
	}
	return false
}

// The model of policy
type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId      string                   `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`                                          // id
	PolicyType    PolicyType               `protobuf:"varint,2,opt,name=policy_type,json=policyType,proto3,enum=adamant.global.v1.PolicyType" json:"policy_type,omitempty"` // type
	Name          string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                  // name
	IsBasePolicy  bool                     `protobuf:"varint,4,opt,name=is_base_policy,json=isBasePolicy,proto3" json:"is_base_policy,omitempty"`                           // The flag indicates the policy is default
	Coin          gincoincglobalv1.Coin    `protobuf:"varint,5,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`                                    // coin
	Network       gincoincglobalv1.Network `protobuf:"varint,12,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`                          // network
	Whitelist     *Whitelist               `protobuf:"bytes,6,opt,name=whitelist,proto3" json:"whitelist,omitempty"`                                                        // whitelist
	TransferLimit *TransferLimit           `protobuf:"bytes,7,opt,name=transfer_limit,json=transferLimit,proto3" json:"transfer_limit,omitempty"`                           // transfer limit
	Proposal      *PolicyProposal          `protobuf:"bytes,11,opt,name=proposal,proto3" json:"proposal,omitempty"`                                                         // // The proposal about updating the policy
	CreateTime    *timestamppb.Timestamp   `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                    // the time at which the policy was created
	UpdateTime    *timestamppb.Timestamp   `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                   // the time at which the policy was updated
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{95}
}

func (x *Policy) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *Policy) GetPolicyType() PolicyType {
	if x != nil {
		return x.PolicyType
	}
	return PolicyType_POLICY_TYPE_INVALID
}

func (x *Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy) GetIsBasePolicy() bool {
	if x != nil {
		return x.IsBasePolicy
	}
	return false
}

func (x *Policy) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *Policy) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *Policy) GetWhitelist() *Whitelist {
	if x != nil {
		return x.Whitelist
	}
	return nil
}

func (x *Policy) GetTransferLimit() *TransferLimit {
	if x != nil {
		return x.TransferLimit
	}
	return nil
}

func (x *Policy) GetProposal() *PolicyProposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *Policy) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Policy) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// The model of proposal to update policy information
type PolicyProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequesterAccountId string     `protobuf:"bytes,1,opt,name=requester_account_id,json=requesterAccountId,proto3" json:"requester_account_id,omitempty"`
	RequesterName      string     `protobuf:"bytes,2,opt,name=requester_name,json=requesterName,proto3" json:"requester_name,omitempty"`
	ApproverAccountId  string     `protobuf:"bytes,3,opt,name=approver_account_id,json=approverAccountId,proto3" json:"approver_account_id,omitempty"`
	ApproverName       string     `protobuf:"bytes,4,opt,name=approver_name,json=approverName,proto3" json:"approver_name,omitempty"`
	ProposedWhitelist  *Whitelist `protobuf:"bytes,5,opt,name=proposed_whitelist,json=proposedWhitelist,proto3" json:"proposed_whitelist,omitempty"`
	IsReviewed         bool       `protobuf:"varint,6,opt,name=is_reviewed,json=isReviewed,proto3" json:"is_reviewed,omitempty"`
}

func (x *PolicyProposal) Reset() {
	*x = PolicyProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyProposal) ProtoMessage() {}

func (x *PolicyProposal) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyProposal.ProtoReflect.Descriptor instead.
func (*PolicyProposal) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{96}
}

func (x *PolicyProposal) GetRequesterAccountId() string {
	if x != nil {
		return x.RequesterAccountId
	}
	return ""
}

func (x *PolicyProposal) GetRequesterName() string {
	if x != nil {
		return x.RequesterName
	}
	return ""
}

func (x *PolicyProposal) GetApproverAccountId() string {
	if x != nil {
		return x.ApproverAccountId
	}
	return ""
}

func (x *PolicyProposal) GetApproverName() string {
	if x != nil {
		return x.ApproverName
	}
	return ""
}

func (x *PolicyProposal) GetProposedWhitelist() *Whitelist {
	if x != nil {
		return x.ProposedWhitelist
	}
	return nil
}

func (x *PolicyProposal) GetIsReviewed() bool {
	if x != nil {
		return x.IsReviewed
	}
	return false
}

// The model of total balance by asset
type TotalBalanceByCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin              gincoincglobalv1.Coin    `protobuf:"varint,1,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	Network           gincoincglobalv1.Network `protobuf:"varint,4,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`
	ColdStringBalance string                   `protobuf:"bytes,2,opt,name=cold_string_balance,json=coldStringBalance,proto3" json:"cold_string_balance,omitempty"`
	HotStringBalance  string                   `protobuf:"bytes,3,opt,name=hot_string_balance,json=hotStringBalance,proto3" json:"hot_string_balance,omitempty"`
}

func (x *TotalBalanceByCoin) Reset() {
	*x = TotalBalanceByCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalBalanceByCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalBalanceByCoin) ProtoMessage() {}

func (x *TotalBalanceByCoin) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalBalanceByCoin.ProtoReflect.Descriptor instead.
func (*TotalBalanceByCoin) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{97}
}

func (x *TotalBalanceByCoin) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *TotalBalanceByCoin) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *TotalBalanceByCoin) GetColdStringBalance() string {
	if x != nil {
		return x.ColdStringBalance
	}
	return ""
}

func (x *TotalBalanceByCoin) GetHotStringBalance() string {
	if x != nil {
		return x.HotStringBalance
	}
	return ""
}

// The model of total balace
type TotalBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalBalances map[uint32]*TotalBalanceByCoin `protobuf:"bytes,1,rep,name=total_balances,json=totalBalances,proto3" json:"total_balances,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // map<k, v> ... k: enum number of Coin / v: TotalBalanceByCoin
}

func (x *TotalBalance) Reset() {
	*x = TotalBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalBalance) ProtoMessage() {}

func (x *TotalBalance) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalBalance.ProtoReflect.Descriptor instead.
func (*TotalBalance) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{98}
}

func (x *TotalBalance) GetTotalBalances() map[uint32]*TotalBalanceByCoin {
	if x != nil {
		return x.TotalBalances
	}
	return nil
}

// The model of balance snapshot
type BalanceSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime    *timestamppb.Timestamp         `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	TotalBalances map[uint32]*TotalBalanceByCoin `protobuf:"bytes,2,rep,name=total_balances,json=totalBalances,proto3" json:"total_balances,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // map<k, v> ... k: enum number of Coin / v: TotalBalanceByCoin
	Rates         map[uint32]*Rate               `protobuf:"bytes,3,rep,name=rates,proto3" json:"rates,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                                      // map<k, v> ... k: enum number of Coin / v: Rate
}

func (x *BalanceSnapshot) Reset() {
	*x = BalanceSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceSnapshot) ProtoMessage() {}

func (x *BalanceSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceSnapshot.ProtoReflect.Descriptor instead.
func (*BalanceSnapshot) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{99}
}

func (x *BalanceSnapshot) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *BalanceSnapshot) GetTotalBalances() map[uint32]*TotalBalanceByCoin {
	if x != nil {
		return x.TotalBalances
	}
	return nil
}

func (x *BalanceSnapshot) GetRates() map[uint32]*Rate {
	if x != nil {
		return x.Rates
	}
	return nil
}

type WalletBalanceSnapshotMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletBalanceSnapshotMap map[string]*ListWalletBalanceSnapshots `protobuf:"bytes,1,rep,name=wallet_balance_snapshot_map,json=walletBalanceSnapshotMap,proto3" json:"wallet_balance_snapshot_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // map<k, v> ... k: wallet id / v: ListWalletBalanceSnapshot
}

func (x *WalletBalanceSnapshotMap) Reset() {
	*x = WalletBalanceSnapshotMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletBalanceSnapshotMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletBalanceSnapshotMap) ProtoMessage() {}

func (x *WalletBalanceSnapshotMap) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletBalanceSnapshotMap.ProtoReflect.Descriptor instead.
func (*WalletBalanceSnapshotMap) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{100}
}

func (x *WalletBalanceSnapshotMap) GetWalletBalanceSnapshotMap() map[string]*ListWalletBalanceSnapshots {
	if x != nil {
		return x.WalletBalanceSnapshotMap
	}
	return nil
}

type ListWalletBalanceSnapshots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletBalanceSnapshots []*WalletBalanceSnapshot `protobuf:"bytes,1,rep,name=wallet_balance_snapshots,json=walletBalanceSnapshots,proto3" json:"wallet_balance_snapshots,omitempty"`
}

func (x *ListWalletBalanceSnapshots) Reset() {
	*x = ListWalletBalanceSnapshots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletBalanceSnapshots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletBalanceSnapshots) ProtoMessage() {}

func (x *ListWalletBalanceSnapshots) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletBalanceSnapshots.ProtoReflect.Descriptor instead.
func (*ListWalletBalanceSnapshots) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{101}
}

func (x *ListWalletBalanceSnapshots) GetWalletBalanceSnapshots() []*WalletBalanceSnapshot {
	if x != nil {
		return x.WalletBalanceSnapshots
	}
	return nil
}

// The model of wallet balance snapshot
type WalletBalanceSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	StringBalance string                 `protobuf:"bytes,2,opt,name=string_balance,json=stringBalance,proto3" json:"string_balance,omitempty"` // Wallet Balance
	Jpy           float64                `protobuf:"fixed64,3,opt,name=jpy,proto3" json:"jpy,omitempty"`                                        // JPY rate
}

func (x *WalletBalanceSnapshot) Reset() {
	*x = WalletBalanceSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletBalanceSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletBalanceSnapshot) ProtoMessage() {}

func (x *WalletBalanceSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletBalanceSnapshot.ProtoReflect.Descriptor instead.
func (*WalletBalanceSnapshot) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{102}
}

func (x *WalletBalanceSnapshot) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *WalletBalanceSnapshot) GetStringBalance() string {
	if x != nil {
		return x.StringBalance
	}
	return ""
}

func (x *WalletBalanceSnapshot) GetJpy() float64 {
	if x != nil {
		return x.Jpy
	}
	return 0
}

type TransferVolumeSnapshots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferVolumeSnapshotByTransferType map[int32]*ListTransferVolumeSnapshots `protobuf:"bytes,1,rep,name=transfer_volume_snapshot_by_transfer_type,json=transferVolumeSnapshotByTransferType,proto3" json:"transfer_volume_snapshot_by_transfer_type,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // map<k, v> ... k: transfer type / v:
}

func (x *TransferVolumeSnapshots) Reset() {
	*x = TransferVolumeSnapshots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferVolumeSnapshots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferVolumeSnapshots) ProtoMessage() {}

func (x *TransferVolumeSnapshots) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferVolumeSnapshots.ProtoReflect.Descriptor instead.
func (*TransferVolumeSnapshots) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{103}
}

func (x *TransferVolumeSnapshots) GetTransferVolumeSnapshotByTransferType() map[int32]*ListTransferVolumeSnapshots {
	if x != nil {
		return x.TransferVolumeSnapshotByTransferType
	}
	return nil
}

type ListTransferVolumeSnapshots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferVolumeSnapshots []*TransferVolumeSnapshot `protobuf:"bytes,1,rep,name=transfer_volume_snapshots,json=transferVolumeSnapshots,proto3" json:"transfer_volume_snapshots,omitempty"`
}

func (x *ListTransferVolumeSnapshots) Reset() {
	*x = ListTransferVolumeSnapshots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransferVolumeSnapshots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransferVolumeSnapshots) ProtoMessage() {}

func (x *ListTransferVolumeSnapshots) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransferVolumeSnapshots.ProtoReflect.Descriptor instead.
func (*ListTransferVolumeSnapshots) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{104}
}

func (x *ListTransferVolumeSnapshots) GetTransferVolumeSnapshots() []*TransferVolumeSnapshot {
	if x != nil {
		return x.TransferVolumeSnapshots
	}
	return nil
}

// The model of transfer volume snapshot
type TransferVolumeSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetTime           *timestamppb.Timestamp    `protobuf:"bytes,1,opt,name=target_time,json=targetTime,proto3" json:"target_time,omitempty"`
	TransferVolumeByCoin map[int32]*TransferVolume `protobuf:"bytes,2,rep,name=transfer_volume_by_coin,json=transferVolumeByCoin,proto3" json:"transfer_volume_by_coin,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // map<k, v> ... k: coin / v: TransferVolumeByCoin
}

func (x *TransferVolumeSnapshot) Reset() {
	*x = TransferVolumeSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferVolumeSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferVolumeSnapshot) ProtoMessage() {}

func (x *TransferVolumeSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferVolumeSnapshot.ProtoReflect.Descriptor instead.
func (*TransferVolumeSnapshot) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{105}
}

func (x *TransferVolumeSnapshot) GetTargetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TargetTime
	}
	return nil
}

func (x *TransferVolumeSnapshot) GetTransferVolumeByCoin() map[int32]*TransferVolume {
	if x != nil {
		return x.TransferVolumeByCoin
	}
	return nil
}

type TransferVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin                gincoincglobalv1.Coin         `protobuf:"varint,1,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`                                             // coin
	Network             gincoincglobalv1.Network      `protobuf:"varint,9,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`                                    // network
	HotStringVolume     string                        `protobuf:"bytes,2,opt,name=hot_string_volume,json=hotStringVolume,proto3" json:"hot_string_volume,omitempty"`                            // hot volume
	ColdStringVolume    string                        `protobuf:"bytes,3,opt,name=cold_string_volume,json=coldStringVolume,proto3" json:"cold_string_volume,omitempty"`                         // col volume
	HotStringJpyVolume  string                        `protobuf:"bytes,4,opt,name=hot_string_jpy_volume,json=hotStringJpyVolume,proto3" json:"hot_string_jpy_volume,omitempty"`                 // hot volume
	ColdStringJpyVolume string                        `protobuf:"bytes,5,opt,name=cold_string_jpy_volume,json=coldStringJpyVolume,proto3" json:"cold_string_jpy_volume,omitempty"`              // col volume
	HotNumber           int64                         `protobuf:"varint,6,opt,name=hot_number,json=hotNumber,proto3" json:"hot_number,omitempty"`                                               // hot transfer number volume
	ColdNumber          int64                         `protobuf:"varint,7,opt,name=cold_number,json=coldNumber,proto3" json:"cold_number,omitempty"`                                            // cold transfer number volume
	TransferType        gincoincglobalv1.TransferType `protobuf:"varint,8,opt,name=transfer_type,json=transferType,proto3,enum=gincoinc.global.v1.TransferType" json:"transfer_type,omitempty"` // transfer type
}

func (x *TransferVolume) Reset() {
	*x = TransferVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferVolume) ProtoMessage() {}

func (x *TransferVolume) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferVolume.ProtoReflect.Descriptor instead.
func (*TransferVolume) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{106}
}

func (x *TransferVolume) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *TransferVolume) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *TransferVolume) GetHotStringVolume() string {
	if x != nil {
		return x.HotStringVolume
	}
	return ""
}

func (x *TransferVolume) GetColdStringVolume() string {
	if x != nil {
		return x.ColdStringVolume
	}
	return ""
}

func (x *TransferVolume) GetHotStringJpyVolume() string {
	if x != nil {
		return x.HotStringJpyVolume
	}
	return ""
}

func (x *TransferVolume) GetColdStringJpyVolume() string {
	if x != nil {
		return x.ColdStringJpyVolume
	}
	return ""
}

func (x *TransferVolume) GetHotNumber() int64 {
	if x != nil {
		return x.HotNumber
	}
	return 0
}

func (x *TransferVolume) GetColdNumber() int64 {
	if x != nil {
		return x.ColdNumber
	}
	return 0
}

func (x *TransferVolume) GetTransferType() gincoincglobalv1.TransferType {
	if x != nil {
		return x.TransferType
	}
	return gincoincglobalv1.TransferType(0)
}

type WalletTransferVolumeSnapshots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletTransferVolumeSnapshotByWalletId map[string]*ListWalletTransferVolumeSnapshots `protobuf:"bytes,1,rep,name=wallet_transfer_volume_snapshot_by_wallet_id,json=walletTransferVolumeSnapshotByWalletId,proto3" json:"wallet_transfer_volume_snapshot_by_wallet_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // map<k, v> ... k: wallet id / v: ListWalletTransferVolumeSnapshots
}

func (x *WalletTransferVolumeSnapshots) Reset() {
	*x = WalletTransferVolumeSnapshots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletTransferVolumeSnapshots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletTransferVolumeSnapshots) ProtoMessage() {}

func (x *WalletTransferVolumeSnapshots) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletTransferVolumeSnapshots.ProtoReflect.Descriptor instead.
func (*WalletTransferVolumeSnapshots) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{107}
}

func (x *WalletTransferVolumeSnapshots) GetWalletTransferVolumeSnapshotByWalletId() map[string]*ListWalletTransferVolumeSnapshots {
	if x != nil {
		return x.WalletTransferVolumeSnapshotByWalletId
	}
	return nil
}

type ListWalletTransferVolumeSnapshots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletTransferVolumeSnapshots []*WalletTransferVolumeSnapshot `protobuf:"bytes,1,rep,name=wallet_transfer_volume_snapshots,json=walletTransferVolumeSnapshots,proto3" json:"wallet_transfer_volume_snapshots,omitempty"`
}

func (x *ListWalletTransferVolumeSnapshots) Reset() {
	*x = ListWalletTransferVolumeSnapshots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletTransferVolumeSnapshots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletTransferVolumeSnapshots) ProtoMessage() {}

func (x *ListWalletTransferVolumeSnapshots) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletTransferVolumeSnapshots.ProtoReflect.Descriptor instead.
func (*ListWalletTransferVolumeSnapshots) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{108}
}

func (x *ListWalletTransferVolumeSnapshots) GetWalletTransferVolumeSnapshots() []*WalletTransferVolumeSnapshot {
	if x != nil {
		return x.WalletTransferVolumeSnapshots
	}
	return nil
}

type WalletTransferVolumeSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetTime                         *timestamppb.Timestamp          `protobuf:"bytes,1,opt,name=target_time,json=targetTime,proto3" json:"target_time,omitempty"`
	WalletTransferVolumeByTransferType map[int32]*WalletTransferVolume `protobuf:"bytes,2,rep,name=wallet_transfer_volume_by_transfer_type,json=walletTransferVolumeByTransferType,proto3" json:"wallet_transfer_volume_by_transfer_type,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // map<k, v> ... k: transfer type / v:TransferVolumeByCoin
}

func (x *WalletTransferVolumeSnapshot) Reset() {
	*x = WalletTransferVolumeSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletTransferVolumeSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletTransferVolumeSnapshot) ProtoMessage() {}

func (x *WalletTransferVolumeSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletTransferVolumeSnapshot.ProtoReflect.Descriptor instead.
func (*WalletTransferVolumeSnapshot) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{109}
}

func (x *WalletTransferVolumeSnapshot) GetTargetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TargetTime
	}
	return nil
}

func (x *WalletTransferVolumeSnapshot) GetWalletTransferVolumeByTransferType() map[int32]*WalletTransferVolume {
	if x != nil {
		return x.WalletTransferVolumeByTransferType
	}
	return nil
}

type WalletTransferVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringVolume    string                        `protobuf:"bytes,1,opt,name=string_volume,json=stringVolume,proto3" json:"string_volume,omitempty"`                                       // coin volume
	StringJpyVolume string                        `protobuf:"bytes,2,opt,name=string_jpy_volume,json=stringJpyVolume,proto3" json:"string_jpy_volume,omitempty"`                            // hot volume
	Number          int64                         `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`                                                                      // transfer number volume
	TransferType    gincoincglobalv1.TransferType `protobuf:"varint,4,opt,name=transfer_type,json=transferType,proto3,enum=gincoinc.global.v1.TransferType" json:"transfer_type,omitempty"` // transfer type;
}

func (x *WalletTransferVolume) Reset() {
	*x = WalletTransferVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletTransferVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletTransferVolume) ProtoMessage() {}

func (x *WalletTransferVolume) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletTransferVolume.ProtoReflect.Descriptor instead.
func (*WalletTransferVolume) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{110}
}

func (x *WalletTransferVolume) GetStringVolume() string {
	if x != nil {
		return x.StringVolume
	}
	return ""
}

func (x *WalletTransferVolume) GetStringJpyVolume() string {
	if x != nil {
		return x.StringJpyVolume
	}
	return ""
}

func (x *WalletTransferVolume) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *WalletTransferVolume) GetTransferType() gincoincglobalv1.TransferType {
	if x != nil {
		return x.TransferType
	}
	return gincoincglobalv1.TransferType(0)
}

// The model of confirmation
type Confirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin         gincoincglobalv1.Coin `protobuf:"varint,1,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	Confirmation uint32                `protobuf:"varint,2,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
}

func (x *Confirmation) Reset() {
	*x = Confirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Confirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Confirmation) ProtoMessage() {}

func (x *Confirmation) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Confirmation.ProtoReflect.Descriptor instead.
func (*Confirmation) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{111}
}

func (x *Confirmation) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *Confirmation) GetConfirmation() uint32 {
	if x != nil {
		return x.Confirmation
	}
	return 0
}

type WalletFlushSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId             string                   `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Coin                gincoincglobalv1.Coin    `protobuf:"varint,2,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	Network             gincoincglobalv1.Network `protobuf:"varint,6,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`
	DestinationWalletId string                   `protobuf:"bytes,3,opt,name=destination_wallet_id,json=destinationWalletId,proto3" json:"destination_wallet_id,omitempty"`
	CreateTime          *timestamppb.Timestamp   `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime          *timestamppb.Timestamp   `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	FlushThreshold      float64                  `protobuf:"fixed64,7,opt,name=flush_threshold,json=flushThreshold,proto3" json:"flush_threshold,omitempty"`
}

func (x *WalletFlushSetting) Reset() {
	*x = WalletFlushSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletFlushSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletFlushSetting) ProtoMessage() {}

func (x *WalletFlushSetting) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletFlushSetting.ProtoReflect.Descriptor instead.
func (*WalletFlushSetting) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{112}
}

func (x *WalletFlushSetting) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *WalletFlushSetting) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *WalletFlushSetting) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *WalletFlushSetting) GetDestinationWalletId() string {
	if x != nil {
		return x.DestinationWalletId
	}
	return ""
}

func (x *WalletFlushSetting) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *WalletFlushSetting) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *WalletFlushSetting) GetFlushThreshold() float64 {
	if x != nil {
		return x.FlushThreshold
	}
	return 0
}

type CompensationFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringValue string                 `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	IsSpent     bool                   `protobuf:"varint,2,opt,name=is_spent,json=isSpent,proto3" json:"is_spent,omitempty"`
	CreateTime  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *CompensationFee) Reset() {
	*x = CompensationFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompensationFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompensationFee) ProtoMessage() {}

func (x *CompensationFee) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompensationFee.ProtoReflect.Descriptor instead.
func (*CompensationFee) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{113}
}

func (x *CompensationFee) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *CompensationFee) GetIsSpent() bool {
	if x != nil {
		return x.IsSpent
	}
	return false
}

func (x *CompensationFee) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type WalletGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletGroupId string                   `protobuf:"bytes,1,opt,name=wallet_group_id,json=walletGroupId,proto3" json:"wallet_group_id,omitempty"`
	Name          string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Coin          gincoincglobalv1.Coin    `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	Network       gincoincglobalv1.Network `protobuf:"varint,8,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`
	Wallets       []*Wallet                `protobuf:"bytes,4,rep,name=wallets,proto3" json:"wallets,omitempty"`
	WatchOnly     bool                     `protobuf:"varint,7,opt,name=watch_only,json=watchOnly,proto3" json:"watch_only,omitempty"`
	CreateTime    *timestamppb.Timestamp   `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    *timestamppb.Timestamp   `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *WalletGroup) Reset() {
	*x = WalletGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletGroup) ProtoMessage() {}

func (x *WalletGroup) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletGroup.ProtoReflect.Descriptor instead.
func (*WalletGroup) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{114}
}

func (x *WalletGroup) GetWalletGroupId() string {
	if x != nil {
		return x.WalletGroupId
	}
	return ""
}

func (x *WalletGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WalletGroup) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *WalletGroup) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *WalletGroup) GetWallets() []*Wallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

func (x *WalletGroup) GetWatchOnly() bool {
	if x != nil {
		return x.WatchOnly
	}
	return false
}

func (x *WalletGroup) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *WalletGroup) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type RequestTxOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
}

func (x *RequestTxOutput) Reset() {
	*x = RequestTxOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTxOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTxOutput) ProtoMessage() {}

func (x *RequestTxOutput) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTxOutput.ProtoReflect.Descriptor instead.
func (*RequestTxOutput) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{115}
}

func (x *RequestTxOutput) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RequestTxOutput) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

type RequestSignedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signatures []*RequestSignature `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *RequestSignedInfo) Reset() {
	*x = RequestSignedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSignedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSignedInfo) ProtoMessage() {}

func (x *RequestSignedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSignedInfo.ProtoReflect.Descriptor instead.
func (*RequestSignedInfo) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{116}
}

func (x *RequestSignedInfo) GetSignatures() []*RequestSignature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type RequestSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignIndex uint32 `protobuf:"varint,1,opt,name=sign_index,json=signIndex,proto3" json:"sign_index,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	HdIndex   uint32 `protobuf:"varint,3,opt,name=hd_index,json=hdIndex,proto3" json:"hd_index,omitempty"`
}

func (x *RequestSignature) Reset() {
	*x = RequestSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSignature) ProtoMessage() {}

func (x *RequestSignature) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSignature.ProtoReflect.Descriptor instead.
func (*RequestSignature) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{117}
}

func (x *RequestSignature) GetSignIndex() uint32 {
	if x != nil {
		return x.SignIndex
	}
	return 0
}

func (x *RequestSignature) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *RequestSignature) GetHdIndex() uint32 {
	if x != nil {
		return x.HdIndex
	}
	return 0
}

type RequestTransferLimitEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferLimitType  TransferLimitType `protobuf:"varint,1,opt,name=transfer_limit_type,json=transferLimitType,proto3,enum=adamant.global.v1.TransferLimitType" json:"transfer_limit_type,omitempty"`
	TransferLimitValue int64             `protobuf:"varint,2,opt,name=transfer_limit_value,json=transferLimitValue,proto3" json:"transfer_limit_value,omitempty"`
}

func (x *RequestTransferLimitEntry) Reset() {
	*x = RequestTransferLimitEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTransferLimitEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTransferLimitEntry) ProtoMessage() {}

func (x *RequestTransferLimitEntry) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTransferLimitEntry.ProtoReflect.Descriptor instead.
func (*RequestTransferLimitEntry) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{118}
}

func (x *RequestTransferLimitEntry) GetTransferLimitType() TransferLimitType {
	if x != nil {
		return x.TransferLimitType
	}
	return TransferLimitType_TRANSFER_LIMIT_TYPE_INVALID
}

func (x *RequestTransferLimitEntry) GetTransferLimitValue() int64 {
	if x != nil {
		return x.TransferLimitValue
	}
	return 0
}

type RequestRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin gincoincglobalv1.Coin `protobuf:"varint,1,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"` // The id of coin
	Jpy  float64               `protobuf:"fixed64,2,opt,name=jpy,proto3" json:"jpy,omitempty"`                               // The rate of JPY
}

func (x *RequestRate) Reset() {
	*x = RequestRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRate) ProtoMessage() {}

func (x *RequestRate) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRate.ProtoReflect.Descriptor instead.
func (*RequestRate) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{119}
}

func (x *RequestRate) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *RequestRate) GetJpy() float64 {
	if x != nil {
		return x.Jpy
	}
	return 0
}

type SubstrateChildAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string  `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	AccountId     string  `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Address       string  `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Balance       float64 `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance,omitempty"`
	StringBalance string  `protobuf:"bytes,5,opt,name=string_balance,json=stringBalance,proto3" json:"string_balance,omitempty"`
}

func (x *SubstrateChildAddress) Reset() {
	*x = SubstrateChildAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstrateChildAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstrateChildAddress) ProtoMessage() {}

func (x *SubstrateChildAddress) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstrateChildAddress.ProtoReflect.Descriptor instead.
func (*SubstrateChildAddress) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{120}
}

func (x *SubstrateChildAddress) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *SubstrateChildAddress) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SubstrateChildAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SubstrateChildAddress) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *SubstrateChildAddress) GetStringBalance() string {
	if x != nil {
		return x.StringBalance
	}
	return ""
}

type SymbolChildAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string  `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	AccountId     string  `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Address       string  `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Balance       float64 `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance,omitempty"`
	StringBalance string  `protobuf:"bytes,5,opt,name=string_balance,json=stringBalance,proto3" json:"string_balance,omitempty"`
}

func (x *SymbolChildAddress) Reset() {
	*x = SymbolChildAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolChildAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolChildAddress) ProtoMessage() {}

func (x *SymbolChildAddress) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolChildAddress.ProtoReflect.Descriptor instead.
func (*SymbolChildAddress) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{121}
}

func (x *SymbolChildAddress) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *SymbolChildAddress) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SymbolChildAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SymbolChildAddress) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *SymbolChildAddress) GetStringBalance() string {
	if x != nil {
		return x.StringBalance
	}
	return ""
}

type IOSTChildAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId    string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	AccountId   string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountName string `protobuf:"bytes,3,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
}

func (x *IOSTChildAccount) Reset() {
	*x = IOSTChildAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOSTChildAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOSTChildAccount) ProtoMessage() {}

func (x *IOSTChildAccount) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOSTChildAccount.ProtoReflect.Descriptor instead.
func (*IOSTChildAccount) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{122}
}

func (x *IOSTChildAccount) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *IOSTChildAccount) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *IOSTChildAccount) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

// The model of IOST caller account
type IOSTCallerAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountName   string  `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`       // iost account name
	Balance       float64 `protobuf:"fixed64,2,opt,name=balance,proto3" json:"balance,omitempty"`                                // The number-typed balance corresponding to the account
	StringBalance string  `protobuf:"bytes,3,opt,name=string_balance,json=stringBalance,proto3" json:"string_balance,omitempty"` // The string-typed balance corresponding to the account
}

func (x *IOSTCallerAccount) Reset() {
	*x = IOSTCallerAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOSTCallerAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOSTCallerAccount) ProtoMessage() {}

func (x *IOSTCallerAccount) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOSTCallerAccount.ProtoReflect.Descriptor instead.
func (*IOSTCallerAccount) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{123}
}

func (x *IOSTCallerAccount) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *IOSTCallerAccount) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *IOSTCallerAccount) GetStringBalance() string {
	if x != nil {
		return x.StringBalance
	}
	return ""
}

// The model of caller account
type CallerAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address       string                   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                                  // Klaytn address
	Balance       float64                  `protobuf:"fixed64,2,opt,name=balance,proto3" json:"balance,omitempty"`                                // The number-typed balance corresponding to the address
	StringBalance string                   `protobuf:"bytes,3,opt,name=string_balance,json=stringBalance,proto3" json:"string_balance,omitempty"` // The string-typed balance corresponding to the address
	Coin          gincoincglobalv1.Coin    `protobuf:"varint,4,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`          // The type of asset
	Network       gincoincglobalv1.Network `protobuf:"varint,5,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"` // The network of asset
}

func (x *CallerAddress) Reset() {
	*x = CallerAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallerAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallerAddress) ProtoMessage() {}

func (x *CallerAddress) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallerAddress.ProtoReflect.Descriptor instead.
func (*CallerAddress) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{124}
}

func (x *CallerAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CallerAddress) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CallerAddress) GetStringBalance() string {
	if x != nil {
		return x.StringBalance
	}
	return ""
}

func (x *CallerAddress) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *CallerAddress) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

type FeeDepositAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address       string                   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                                  // address
	Balance       float64                  `protobuf:"fixed64,2,opt,name=balance,proto3" json:"balance,omitempty"`                                // The number-typed balance corresponding to the address
	StringBalance string                   `protobuf:"bytes,3,opt,name=string_balance,json=stringBalance,proto3" json:"string_balance,omitempty"` // The string-typed balance corresponding to the address
	Coin          gincoincglobalv1.Coin    `protobuf:"varint,4,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`          // The type of asset
	Network       gincoincglobalv1.Network `protobuf:"varint,5,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"` // The network of asset
}

func (x *FeeDepositAddress) Reset() {
	*x = FeeDepositAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeDepositAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeDepositAddress) ProtoMessage() {}

func (x *FeeDepositAddress) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeDepositAddress.ProtoReflect.Descriptor instead.
func (*FeeDepositAddress) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{125}
}

func (x *FeeDepositAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FeeDepositAddress) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *FeeDepositAddress) GetStringBalance() string {
	if x != nil {
		return x.StringBalance
	}
	return ""
}

func (x *FeeDepositAddress) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *FeeDepositAddress) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

type CosmosDelegation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorAddress string  `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	DelegateAmount   float64 `protobuf:"fixed64,2,opt,name=delegate_amount,json=delegateAmount,proto3" json:"delegate_amount,omitempty"`
	RewardAmount     float64 `protobuf:"fixed64,3,opt,name=reward_amount,json=rewardAmount,proto3" json:"reward_amount,omitempty"`
}

func (x *CosmosDelegation) Reset() {
	*x = CosmosDelegation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CosmosDelegation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosmosDelegation) ProtoMessage() {}

func (x *CosmosDelegation) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosmosDelegation.ProtoReflect.Descriptor instead.
func (*CosmosDelegation) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{126}
}

func (x *CosmosDelegation) GetValidatorAddress() string {
	if x != nil {
		return x.ValidatorAddress
	}
	return ""
}

func (x *CosmosDelegation) GetDelegateAmount() float64 {
	if x != nil {
		return x.DelegateAmount
	}
	return 0
}

func (x *CosmosDelegation) GetRewardAmount() float64 {
	if x != nil {
		return x.RewardAmount
	}
	return 0
}

// The model of StakingHistory
type StakingHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakingHistoryId  string                            `protobuf:"bytes,1,opt,name=staking_history_id,json=stakingHistoryId,proto3" json:"staking_history_id,omitempty"`                     // id
	OwnerId           string                            `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`                                                  // owner id
	WalletId          string                            `protobuf:"bytes,3,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`                                               // wallet id
	Coin              gincoincglobalv1.Coin             `protobuf:"varint,4,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`                                         // coin
	ValidatorId       string                            `protobuf:"bytes,5,opt,name=validator_id,json=validatorId,proto3" json:"validator_id,omitempty"`                                      // validator id
	TxId              string                            `protobuf:"bytes,6,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`                                                           // txID
	TxIndex           uint32                            `protobuf:"varint,7,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`                                                 // tx index
	BlockHash         string                            `protobuf:"bytes,8,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`                                            // block hash
	Value             float64                           `protobuf:"fixed64,9,opt,name=value,proto3" json:"value,omitempty"`                                                                   // The number-typed amount of staking
	StringValue       string                            `protobuf:"bytes,10,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`                                     // The string-typed amount of staking
	EventType         gincoincglobalv1.StakingEventType `protobuf:"varint,11,opt,name=event_type,json=eventType,proto3,enum=gincoinc.global.v1.StakingEventType" json:"event_type,omitempty"` // event type
	EventId           string                            `protobuf:"bytes,15,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`                                                 // event id
	EthereumSpecific  *StakingHistoryEthereumSpecific   `protobuf:"bytes,14,opt,name=ethereum_specific,json=ethereumSpecific,proto3" json:"ethereum_specific,omitempty"`                      // The Ethereum specific fields
	AvalancheSpecific *StakingHistoryAvalancheSpecific  `protobuf:"bytes,16,opt,name=avalanche_specific,json=avalancheSpecific,proto3" json:"avalanche_specific,omitempty"`                   // The Avalanche specific fields
	CreateTime        *timestamppb.Timestamp            `protobuf:"bytes,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                        // the time at which the staking history was created
	UpdateTime        *timestamppb.Timestamp            `protobuf:"bytes,13,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                        // the time at which the staking history was updated
}

func (x *StakingHistory) Reset() {
	*x = StakingHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingHistory) ProtoMessage() {}

func (x *StakingHistory) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingHistory.ProtoReflect.Descriptor instead.
func (*StakingHistory) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{127}
}

func (x *StakingHistory) GetStakingHistoryId() string {
	if x != nil {
		return x.StakingHistoryId
	}
	return ""
}

func (x *StakingHistory) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *StakingHistory) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *StakingHistory) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *StakingHistory) GetValidatorId() string {
	if x != nil {
		return x.ValidatorId
	}
	return ""
}

func (x *StakingHistory) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *StakingHistory) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *StakingHistory) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *StakingHistory) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *StakingHistory) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *StakingHistory) GetEventType() gincoincglobalv1.StakingEventType {
	if x != nil {
		return x.EventType
	}
	return gincoincglobalv1.StakingEventType(0)
}

func (x *StakingHistory) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *StakingHistory) GetEthereumSpecific() *StakingHistoryEthereumSpecific {
	if x != nil {
		return x.EthereumSpecific
	}
	return nil
}

func (x *StakingHistory) GetAvalancheSpecific() *StakingHistoryAvalancheSpecific {
	if x != nil {
		return x.AvalancheSpecific
	}
	return nil
}

func (x *StakingHistory) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *StakingHistory) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// The model of Ethereum specific fields of StakingHistory
type StakingHistoryEthereumSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId         string                                      `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`                                                                 // event id
	Address         string                                      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`                                                                                // receiver address
	WithdrawalIndex uint64                                      `protobuf:"varint,3,opt,name=withdrawal_index,json=withdrawalIndex,proto3" json:"withdrawal_index,omitempty"`                                        // withdrawal index
	ValidatorIndex  uint64                                      `protobuf:"varint,4,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty"`                                           // validator index
	BlockNumber     uint64                                      `protobuf:"varint,5,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`                                                    // block number
	BlockTime       *timestamppb.Timestamp                      `protobuf:"bytes,6,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`                                                           // block time
	HistoryType     gincoincglobalv1.EthereumStakingHistoryType `protobuf:"varint,7,opt,name=history_type,json=historyType,proto3,enum=gincoinc.global.v1.EthereumStakingHistoryType" json:"history_type,omitempty"` // ethereum staking history type
}

func (x *StakingHistoryEthereumSpecific) Reset() {
	*x = StakingHistoryEthereumSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingHistoryEthereumSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingHistoryEthereumSpecific) ProtoMessage() {}

func (x *StakingHistoryEthereumSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingHistoryEthereumSpecific.ProtoReflect.Descriptor instead.
func (*StakingHistoryEthereumSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{128}
}

func (x *StakingHistoryEthereumSpecific) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *StakingHistoryEthereumSpecific) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *StakingHistoryEthereumSpecific) GetWithdrawalIndex() uint64 {
	if x != nil {
		return x.WithdrawalIndex
	}
	return 0
}

func (x *StakingHistoryEthereumSpecific) GetValidatorIndex() uint64 {
	if x != nil {
		return x.ValidatorIndex
	}
	return 0
}

func (x *StakingHistoryEthereumSpecific) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *StakingHistoryEthereumSpecific) GetBlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTime
	}
	return nil
}

func (x *StakingHistoryEthereumSpecific) GetHistoryType() gincoincglobalv1.EthereumStakingHistoryType {
	if x != nil {
		return x.HistoryType
	}
	return gincoincglobalv1.EthereumStakingHistoryType(0)
}

// The model of Avalanche specific fields of StakingHistory
type StakingHistoryAvalancheSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime             uint64   `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime               uint64   `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	RewardsOwnerThreshold uint64   `protobuf:"varint,3,opt,name=rewards_owner_threshold,json=rewardsOwnerThreshold,proto3" json:"rewards_owner_threshold,omitempty"`
	RewardsOwnerAddresses []string `protobuf:"bytes,4,rep,name=rewards_owner_addresses,json=rewardsOwnerAddresses,proto3" json:"rewards_owner_addresses,omitempty"`
}

func (x *StakingHistoryAvalancheSpecific) Reset() {
	*x = StakingHistoryAvalancheSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingHistoryAvalancheSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingHistoryAvalancheSpecific) ProtoMessage() {}

func (x *StakingHistoryAvalancheSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingHistoryAvalancheSpecific.ProtoReflect.Descriptor instead.
func (*StakingHistoryAvalancheSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{129}
}

func (x *StakingHistoryAvalancheSpecific) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *StakingHistoryAvalancheSpecific) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *StakingHistoryAvalancheSpecific) GetRewardsOwnerThreshold() uint64 {
	if x != nil {
		return x.RewardsOwnerThreshold
	}
	return 0
}

func (x *StakingHistoryAvalancheSpecific) GetRewardsOwnerAddresses() []string {
	if x != nil {
		return x.RewardsOwnerAddresses
	}
	return nil
}

// The model of StakingValidator
type StakingValidator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakingValidatorId string                                  `protobuf:"bytes,1,opt,name=staking_validator_id,json=stakingValidatorId,proto3" json:"staking_validator_id,omitempty"` // id
	OwnerId            string                                  `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`                                    // owner id
	WalletId           string                                  `protobuf:"bytes,3,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`                                 // wallet id
	Coin               gincoincglobalv1.Coin                   `protobuf:"varint,4,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`                           // coin
	ValidatorId        string                                  `protobuf:"bytes,5,opt,name=validator_id,json=validatorId,proto3" json:"validator_id,omitempty"`                        // validator id
	RecipientWalletId  string                                  `protobuf:"bytes,6,opt,name=recipient_wallet_id,json=recipientWalletId,proto3" json:"recipient_wallet_id,omitempty"`    // recipient wallet id
	Status             gincoincglobalv1.StakingValidatorStatus `protobuf:"varint,7,opt,name=status,proto3,enum=gincoinc.global.v1.StakingValidatorStatus" json:"status,omitempty"`     // status
	Value              float64                                 `protobuf:"fixed64,8,opt,name=value,proto3" json:"value,omitempty"`                                                     // The number-typed amount of staking
	StringValue        string                                  `protobuf:"bytes,9,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`                        // The string-typed amount of staking
	ExpirationTime     int64                                   `protobuf:"varint,10,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`             // expiration time
	CreateTime         *timestamppb.Timestamp                  `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                          // the time at which the staking validator was created
	UpdateTime         *timestamppb.Timestamp                  `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                          // the time at which the staking validator was updated
}

func (x *StakingValidator) Reset() {
	*x = StakingValidator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingValidator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingValidator) ProtoMessage() {}

func (x *StakingValidator) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingValidator.ProtoReflect.Descriptor instead.
func (*StakingValidator) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{130}
}

func (x *StakingValidator) GetStakingValidatorId() string {
	if x != nil {
		return x.StakingValidatorId
	}
	return ""
}

func (x *StakingValidator) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *StakingValidator) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *StakingValidator) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *StakingValidator) GetValidatorId() string {
	if x != nil {
		return x.ValidatorId
	}
	return ""
}

func (x *StakingValidator) GetRecipientWalletId() string {
	if x != nil {
		return x.RecipientWalletId
	}
	return ""
}

func (x *StakingValidator) GetStatus() gincoincglobalv1.StakingValidatorStatus {
	if x != nil {
		return x.Status
	}
	return gincoincglobalv1.StakingValidatorStatus(0)
}

func (x *StakingValidator) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *StakingValidator) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *StakingValidator) GetExpirationTime() int64 {
	if x != nil {
		return x.ExpirationTime
	}
	return 0
}

func (x *StakingValidator) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *StakingValidator) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// The model of NFT
type NFT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetType         AssetType `protobuf:"varint,1,opt,name=asset_type,json=assetType,proto3,enum=adamant.global.v1.AssetType" json:"asset_type,omitempty"`
	Name              string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol            string    `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	TokenId           string    `protobuf:"bytes,4,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TokenUri          string    `protobuf:"bytes,5,opt,name=token_uri,json=tokenUri,proto3" json:"token_uri,omitempty"`
	TokenData         string    `protobuf:"bytes,6,opt,name=token_data,json=tokenData,proto3" json:"token_data,omitempty"`
	TokenJsonMetadata string    `protobuf:"bytes,7,opt,name=token_json_metadata,json=tokenJsonMetadata,proto3" json:"token_json_metadata,omitempty"`
}

func (x *NFT) Reset() {
	*x = NFT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFT) ProtoMessage() {}

func (x *NFT) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFT.ProtoReflect.Descriptor instead.
func (*NFT) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{131}
}

func (x *NFT) GetAssetType() AssetType {
	if x != nil {
		return x.AssetType
	}
	return AssetType_ASSET_TYPE_INVALID
}

func (x *NFT) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NFT) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *NFT) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *NFT) GetTokenUri() string {
	if x != nil {
		return x.TokenUri
	}
	return ""
}

func (x *NFT) GetTokenData() string {
	if x != nil {
		return x.TokenData
	}
	return ""
}

func (x *NFT) GetTokenJsonMetadata() string {
	if x != nil {
		return x.TokenJsonMetadata
	}
	return ""
}

// The model of PreTransactionThreshold
type PreTransactionThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreTransactionThresholdId string                           `protobuf:"bytes,1,opt,name=pre_transaction_threshold_id,json=preTransactionThresholdId,proto3" json:"pre_transaction_threshold_id,omitempty"`
	Coin                      gincoincglobalv1.Coin            `protobuf:"varint,2,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	Network                   gincoincglobalv1.Network         `protobuf:"varint,3,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`
	Value                     float64                          `protobuf:"fixed64,4,opt,name=value,proto3" json:"value,omitempty"`
	Proposal                  *PreTransactionThresholdProposal `protobuf:"bytes,5,opt,name=proposal,proto3" json:"proposal,omitempty"`
	CreateTime                *timestamppb.Timestamp           `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime                *timestamppb.Timestamp           `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *PreTransactionThreshold) Reset() {
	*x = PreTransactionThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreTransactionThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreTransactionThreshold) ProtoMessage() {}

func (x *PreTransactionThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreTransactionThreshold.ProtoReflect.Descriptor instead.
func (*PreTransactionThreshold) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{132}
}

func (x *PreTransactionThreshold) GetPreTransactionThresholdId() string {
	if x != nil {
		return x.PreTransactionThresholdId
	}
	return ""
}

func (x *PreTransactionThreshold) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *PreTransactionThreshold) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *PreTransactionThreshold) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PreTransactionThreshold) GetProposal() *PreTransactionThresholdProposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *PreTransactionThreshold) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *PreTransactionThreshold) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type PreTransactionThresholdProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreTransactionThresholdId string  `protobuf:"bytes,1,opt,name=pre_transaction_threshold_id,json=preTransactionThresholdId,proto3" json:"pre_transaction_threshold_id,omitempty"`
	ProposalId                string  `protobuf:"bytes,2,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	RequesterAccountId        string  `protobuf:"bytes,3,opt,name=requester_account_id,json=requesterAccountId,proto3" json:"requester_account_id,omitempty"`
	RequesterName             string  `protobuf:"bytes,4,opt,name=requester_name,json=requesterName,proto3" json:"requester_name,omitempty"`
	ApproverAccountId         string  `protobuf:"bytes,5,opt,name=approver_account_id,json=approverAccountId,proto3" json:"approver_account_id,omitempty"`
	ApproverName              string  `protobuf:"bytes,6,opt,name=approver_name,json=approverName,proto3" json:"approver_name,omitempty"`
	ProposedValue             float64 `protobuf:"fixed64,7,opt,name=proposed_value,json=proposedValue,proto3" json:"proposed_value,omitempty"`
	IsReviewed                bool    `protobuf:"varint,8,opt,name=is_reviewed,json=isReviewed,proto3" json:"is_reviewed,omitempty"`
}

func (x *PreTransactionThresholdProposal) Reset() {
	*x = PreTransactionThresholdProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreTransactionThresholdProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreTransactionThresholdProposal) ProtoMessage() {}

func (x *PreTransactionThresholdProposal) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreTransactionThresholdProposal.ProtoReflect.Descriptor instead.
func (*PreTransactionThresholdProposal) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{133}
}

func (x *PreTransactionThresholdProposal) GetPreTransactionThresholdId() string {
	if x != nil {
		return x.PreTransactionThresholdId
	}
	return ""
}

func (x *PreTransactionThresholdProposal) GetProposalId() string {
	if x != nil {
		return x.ProposalId
	}
	return ""
}

func (x *PreTransactionThresholdProposal) GetRequesterAccountId() string {
	if x != nil {
		return x.RequesterAccountId
	}
	return ""
}

func (x *PreTransactionThresholdProposal) GetRequesterName() string {
	if x != nil {
		return x.RequesterName
	}
	return ""
}

func (x *PreTransactionThresholdProposal) GetApproverAccountId() string {
	if x != nil {
		return x.ApproverAccountId
	}
	return ""
}

func (x *PreTransactionThresholdProposal) GetApproverName() string {
	if x != nil {
		return x.ApproverName
	}
	return ""
}

func (x *PreTransactionThresholdProposal) GetProposedValue() float64 {
	if x != nil {
		return x.ProposedValue
	}
	return 0
}

func (x *PreTransactionThresholdProposal) GetIsReviewed() bool {
	if x != nil {
		return x.IsReviewed
	}
	return false
}

type BlacklistAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlacklistAddressId string                    `protobuf:"bytes,1,opt,name=blacklist_address_id,json=blacklistAddressId,proto3" json:"blacklist_address_id,omitempty"`
	AppliedProposalId  string                    `protobuf:"bytes,2,opt,name=applied_proposal_id,json=appliedProposalId,proto3" json:"applied_proposal_id,omitempty"`
	PendingProposalId  string                    `protobuf:"bytes,13,opt,name=pending_proposal_id,json=pendingProposalId,proto3" json:"pending_proposal_id,omitempty"`
	Network            gincoincglobalv1.Network  `protobuf:"varint,3,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`
	Address            string                    `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	IsActivated        bool                      `protobuf:"varint,5,opt,name=is_activated,json=isActivated,proto3" json:"is_activated,omitempty"`
	Status             BlacklistAddressStatus    `protobuf:"varint,6,opt,name=status,proto3,enum=adamant.global.v1.BlacklistAddressStatus" json:"status,omitempty"`
	ExternalId         string                    `protobuf:"bytes,7,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	CreateTime         *timestamppb.Timestamp    `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime         *timestamppb.Timestamp    `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	FileId             *string                   `protobuf:"bytes,10,opt,name=file_id,json=fileId,proto3,oneof" json:"file_id,omitempty"`
	FileName           *string                   `protobuf:"bytes,11,opt,name=file_name,json=fileName,proto3,oneof" json:"file_name,omitempty"`
	AppliedProposal    *BlacklistAddressProposal `protobuf:"bytes,12,opt,name=applied_proposal,json=appliedProposal,proto3,oneof" json:"applied_proposal,omitempty"`
	PendingProposal    *BlacklistAddressProposal `protobuf:"bytes,14,opt,name=pending_proposal,json=pendingProposal,proto3,oneof" json:"pending_proposal,omitempty"`
}

func (x *BlacklistAddress) Reset() {
	*x = BlacklistAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlacklistAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlacklistAddress) ProtoMessage() {}

func (x *BlacklistAddress) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlacklistAddress.ProtoReflect.Descriptor instead.
func (*BlacklistAddress) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{134}
}

func (x *BlacklistAddress) GetBlacklistAddressId() string {
	if x != nil {
		return x.BlacklistAddressId
	}
	return ""
}

func (x *BlacklistAddress) GetAppliedProposalId() string {
	if x != nil {
		return x.AppliedProposalId
	}
	return ""
}

func (x *BlacklistAddress) GetPendingProposalId() string {
	if x != nil {
		return x.PendingProposalId
	}
	return ""
}

func (x *BlacklistAddress) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *BlacklistAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BlacklistAddress) GetIsActivated() bool {
	if x != nil {
		return x.IsActivated
	}
	return false
}

func (x *BlacklistAddress) GetStatus() BlacklistAddressStatus {
	if x != nil {
		return x.Status
	}
	return BlacklistAddressStatus_BLACKLIST_ADDRESS_STATUS_INVALID
}

func (x *BlacklistAddress) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *BlacklistAddress) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *BlacklistAddress) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *BlacklistAddress) GetFileId() string {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return ""
}

func (x *BlacklistAddress) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *BlacklistAddress) GetAppliedProposal() *BlacklistAddressProposal {
	if x != nil {
		return x.AppliedProposal
	}
	return nil
}

func (x *BlacklistAddress) GetPendingProposal() *BlacklistAddressProposal {
	if x != nil {
		return x.PendingProposal
	}
	return nil
}

type BlacklistAddressProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlacklistAddressProposalId string                `protobuf:"bytes,1,opt,name=blacklist_address_proposal_id,json=blacklistAddressProposalId,proto3" json:"blacklist_address_proposal_id,omitempty"`
	BlacklistAddressId         string                `protobuf:"bytes,2,opt,name=blacklist_address_id,json=blacklistAddressId,proto3" json:"blacklist_address_id,omitempty"`
	RequesterAccountId         string                `protobuf:"bytes,3,opt,name=requester_account_id,json=requesterAccountId,proto3" json:"requester_account_id,omitempty"`
	RequesterName              string                `protobuf:"bytes,4,opt,name=requester_name,json=requesterName,proto3" json:"requester_name,omitempty"`
	ApproverAccountId          string                `protobuf:"bytes,5,opt,name=approver_account_id,json=approverAccountId,proto3" json:"approver_account_id,omitempty"`
	ApproverName               string                `protobuf:"bytes,6,opt,name=approver_name,json=approverName,proto3" json:"approver_name,omitempty"`
	Diff                       *BlacklistAddressDiff `protobuf:"bytes,7,opt,name=diff,proto3" json:"diff,omitempty"`
}

func (x *BlacklistAddressProposal) Reset() {
	*x = BlacklistAddressProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlacklistAddressProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlacklistAddressProposal) ProtoMessage() {}

func (x *BlacklistAddressProposal) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlacklistAddressProposal.ProtoReflect.Descriptor instead.
func (*BlacklistAddressProposal) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{135}
}

func (x *BlacklistAddressProposal) GetBlacklistAddressProposalId() string {
	if x != nil {
		return x.BlacklistAddressProposalId
	}
	return ""
}

func (x *BlacklistAddressProposal) GetBlacklistAddressId() string {
	if x != nil {
		return x.BlacklistAddressId
	}
	return ""
}

func (x *BlacklistAddressProposal) GetRequesterAccountId() string {
	if x != nil {
		return x.RequesterAccountId
	}
	return ""
}

func (x *BlacklistAddressProposal) GetRequesterName() string {
	if x != nil {
		return x.RequesterName
	}
	return ""
}

func (x *BlacklistAddressProposal) GetApproverAccountId() string {
	if x != nil {
		return x.ApproverAccountId
	}
	return ""
}

func (x *BlacklistAddressProposal) GetApproverName() string {
	if x != nil {
		return x.ApproverName
	}
	return ""
}

func (x *BlacklistAddressProposal) GetDiff() *BlacklistAddressDiff {
	if x != nil {
		return x.Diff
	}
	return nil
}

type BlacklistAddressDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsActivated bool `protobuf:"varint,1,opt,name=is_activated,json=isActivated,proto3" json:"is_activated,omitempty"`
}

func (x *BlacklistAddressDiff) Reset() {
	*x = BlacklistAddressDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlacklistAddressDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlacklistAddressDiff) ProtoMessage() {}

func (x *BlacklistAddressDiff) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlacklistAddressDiff.ProtoReflect.Descriptor instead.
func (*BlacklistAddressDiff) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{136}
}

func (x *BlacklistAddressDiff) GetIsActivated() bool {
	if x != nil {
		return x.IsActivated
	}
	return false
}

type BlacklistAddressFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId             string                   `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileName           string                   `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Network            gincoincglobalv1.Network `protobuf:"varint,3,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`
	Status             BlacklistAddressStatus   `protobuf:"varint,4,opt,name=status,proto3,enum=adamant.global.v1.BlacklistAddressStatus" json:"status,omitempty"`
	AddressCount       uint32                   `protobuf:"varint,5,opt,name=address_count,json=addressCount,proto3" json:"address_count,omitempty"`
	RequesterAccountId string                   `protobuf:"bytes,6,opt,name=requester_account_id,json=requesterAccountId,proto3" json:"requester_account_id,omitempty"`
	RequesterName      string                   `protobuf:"bytes,7,opt,name=requester_name,json=requesterName,proto3" json:"requester_name,omitempty"`
	ApproverAccountId  string                   `protobuf:"bytes,8,opt,name=approver_account_id,json=approverAccountId,proto3" json:"approver_account_id,omitempty"`
	ApproverName       string                   `protobuf:"bytes,9,opt,name=approver_name,json=approverName,proto3" json:"approver_name,omitempty"`
	CreateTime         *timestamppb.Timestamp   `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime         *timestamppb.Timestamp   `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *BlacklistAddressFile) Reset() {
	*x = BlacklistAddressFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlacklistAddressFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlacklistAddressFile) ProtoMessage() {}

func (x *BlacklistAddressFile) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlacklistAddressFile.ProtoReflect.Descriptor instead.
func (*BlacklistAddressFile) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{137}
}

func (x *BlacklistAddressFile) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *BlacklistAddressFile) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *BlacklistAddressFile) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *BlacklistAddressFile) GetStatus() BlacklistAddressStatus {
	if x != nil {
		return x.Status
	}
	return BlacklistAddressStatus_BLACKLIST_ADDRESS_STATUS_INVALID
}

func (x *BlacklistAddressFile) GetAddressCount() uint32 {
	if x != nil {
		return x.AddressCount
	}
	return 0
}

func (x *BlacklistAddressFile) GetRequesterAccountId() string {
	if x != nil {
		return x.RequesterAccountId
	}
	return ""
}

func (x *BlacklistAddressFile) GetRequesterName() string {
	if x != nil {
		return x.RequesterName
	}
	return ""
}

func (x *BlacklistAddressFile) GetApproverAccountId() string {
	if x != nil {
		return x.ApproverAccountId
	}
	return ""
}

func (x *BlacklistAddressFile) GetApproverName() string {
	if x != nil {
		return x.ApproverName
	}
	return ""
}

func (x *BlacklistAddressFile) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *BlacklistAddressFile) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// The model of SUI specific fields for CreateTransaction
type CreateTransactionSuiSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendAll bool `protobuf:"varint,1,opt,name=send_all,json=sendAll,proto3" json:"send_all,omitempty"`
}

func (x *CreateTransactionSuiSpecific) Reset() {
	*x = CreateTransactionSuiSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionSuiSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionSuiSpecific) ProtoMessage() {}

func (x *CreateTransactionSuiSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionSuiSpecific.ProtoReflect.Descriptor instead.
func (*CreateTransactionSuiSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP(), []int{138}
}

func (x *CreateTransactionSuiSpecific) GetSendAll() bool {
	if x != nil {
		return x.SendAll
	}
	return false
}

var File_gincoinc_adamant_global_v1_adamantglobalv1_model_proto protoreflect.FileDescriptor

var file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDesc = []byte{
	0x0a, 0x36, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x35, 0x67, 0x69, 0x6e,
	0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x09, 0x0a,
	0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x64, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6d, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x17, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x6d, 0x69, 0x74,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x82, 0x08,
	0x0a, 0x14, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x64, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67,
	0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6d, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x01, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xa9, 0x09, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x3e,
	0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x38, 0x0a, 0x18, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x16, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x42, 0x0a, 0x1d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x24, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x21, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f,
	0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x55, 0x6e,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a,
	0x1e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x75,
	0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9b,
	0x04, 0x0a, 0x09, 0x4e, 0x46, 0x54, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e,
	0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67,
	0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x6e, 0x66,
	0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x46, 0x54, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x0d, 0x6e, 0x66, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x0c,
	0x4e, 0x46, 0x54, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2c, 0x0a, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e,
	0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22, 0xce, 0x03, 0x0a, 0x0e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x4a, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x47, 0x0a, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x22, 0xd6, 0x02, 0x0a, 0x0c,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x1d, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x68, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xad, 0x04, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0c,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfa, 0x03, 0x0a, 0x15, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x35,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x0e, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x6e,
	0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6f, 0x0a, 0x12, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x46, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x12, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x65, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x66, 0x65, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x65, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x81, 0x04, 0x0a, 0x0e, 0x50,
	0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e,
	0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x41, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x53,
	0x0a, 0x14, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xe0, 0x1a, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e,
	0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x13, 0x0a, 0x05,
	0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x70, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6a, 0x70, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x65, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x3e, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x4d, 0x0a, 0x10, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69,
	0x74, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0f, 0x62,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x50,
	0x0a, 0x11, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x10,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x12, 0x50, 0x0a, 0x11, 0x6c, 0x69, 0x74, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x74, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x52, 0x10, 0x6c, 0x69, 0x74, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x59, 0x0a, 0x14, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x61, 0x73,
	0x68, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x13, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x63, 0x61, 0x73, 0x68, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x41, 0x0a,
	0x0c, 0x78, 0x72, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x72, 0x70, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x52, 0x0b, 0x78, 0x72, 0x70, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x12, 0x44, 0x0a, 0x0d, 0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0c, 0x74, 0x72, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x30, 0x62, 0x61, 0x6e, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x30, 0x62, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x52, 0x0d, 0x63, 0x30, 0x62, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12,
	0x4d, 0x0a, 0x10, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x65, 0x6c, 0x6c, 0x61, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0f, 0x73,
	0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x4d,
	0x0a, 0x10, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0f, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x53, 0x0a,
	0x12, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52,
	0x11, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x50, 0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x61, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x61, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x52, 0x10, 0x6d, 0x6f, 0x6e, 0x61, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x12, 0x41, 0x0a, 0x0c, 0x6e, 0x65, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0b, 0x6e, 0x65, 0x6d, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x44, 0x0a, 0x0d, 0x69, 0x6f, 0x73, 0x74, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x4f, 0x53, 0x54, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52,
	0x0c, 0x69, 0x6f, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x4d, 0x0a,
	0x10, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x79,
	0x67, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0f, 0x70, 0x6f, 0x6c,
	0x79, 0x67, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x4a, 0x0a, 0x0f,
	0x6b, 0x6c, 0x61, 0x79, 0x74, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x6c, 0x61, 0x79, 0x74, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0e, 0x6b, 0x6c, 0x61, 0x79, 0x74, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x52, 0x0e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x12, 0x53, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x11, 0x61, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x47, 0x0a, 0x0e, 0x6f, 0x61, 0x73,
	0x79, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x61, 0x73, 0x79, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x52, 0x0d, 0x6f, 0x61, 0x73, 0x79, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x41, 0x0a, 0x0c, 0x78, 0x64, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x64, 0x63,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0b, 0x78, 0x64, 0x63, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x52, 0x0e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x12, 0x66, 0x0a, 0x19, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x52, 0x17, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x63, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x50, 0x0a, 0x11, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x10, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x61, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x4a, 0x0a, 0x0f, 0x68,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x64, 0x65, 0x72, 0x61, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x64, 0x0a, 0x19, 0x6a, 0x61, 0x70, 0x61, 0x6e,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4a,
	0x61, 0x70, 0x61, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x16, 0x6a, 0x61, 0x70, 0x61, 0x6e, 0x4f, 0x70, 0x65, 0x6e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x4a, 0x0a,
	0x0f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0e, 0x73, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x61, 0x0a, 0x18, 0x62, 0x6e, 0x62,
	0x5f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x4e, 0x42, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x15, 0x62, 0x6e, 0x62, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x47, 0x0a, 0x0e,
	0x66, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x72, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0d, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x5a, 0x0a, 0x15, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x75,
	0x6d, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x75,
	0x6d, 0x4f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x13, 0x61, 0x72,
	0x62, 0x69, 0x74, 0x72, 0x75, 0x6d, 0x4f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x12, 0x47, 0x0a, 0x0e, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x74, 0x6f, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0d, 0x61, 0x70, 0x74,
	0x6f, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x50, 0x0a, 0x11, 0x64, 0x6f,
	0x67, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x67, 0x65, 0x63, 0x6f,
	0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x10, 0x64, 0x6f, 0x67, 0x65,
	0x63, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x7c, 0x0a, 0x21,
	0x61, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x1e, 0x61, 0x76, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x4a, 0x0a, 0x0f, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x41, 0x0a, 0x0c, 0x74, 0x6f, 0x6e, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0b, 0x74, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x75, 0x69,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52,
	0x0b, 0x73, 0x75, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x3b, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb1, 0x07, 0x0a, 0x16, 0x55, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x66, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x52, 0x0f, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x50, 0x0a, 0x11, 0x6c, 0x69, 0x74, 0x65, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x10, 0x6c, 0x69, 0x74, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x59, 0x0a, 0x14, 0x62, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x63, 0x61, 0x73, 0x68, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x13, 0x62,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x30, 0x62, 0x61, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x30, 0x62, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0d, 0x63, 0x30,
	0x62, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x4d, 0x0a, 0x10, 0x63,
	0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x50, 0x0a, 0x11, 0x6d, 0x6f,
	0x6e, 0x61, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x61, 0x63, 0x6f,
	0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x10, 0x6d, 0x6f, 0x6e, 0x61,
	0x63, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x7c, 0x0a, 0x21,
	0x61, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x1e, 0x61, 0x76, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x22, 0x86, 0x02, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2f, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x22, 0xbc, 0x02, 0x0a, 0x07, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x78, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x74, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x42,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x08, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xd0, 0x03, 0x0a, 0x04, 0x55, 0x54, 0x58, 0x4f,
	0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x76, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x55, 0x54, 0x58, 0x4f, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x80, 0x01, 0x0a, 0x21, 0x61, 0x76, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x54,
	0x58, 0x4f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x1e, 0x61, 0x76, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x22, 0x54, 0x0a, 0x13, 0x43, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x55, 0x54, 0x58, 0x4f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x22, 0x60, 0x0a, 0x22, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x54, 0x58, 0x4f, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x22, 0x66, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x42,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x37,
	0x0a, 0x09, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08, 0x74,
	0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x09, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x74, 0x65, 0x63, 0x6f, 0x69, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08, 0x74, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x09, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x87, 0x01,
	0x0a, 0x10, 0x44, 0x6f, 0x67, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x08, 0x74, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x74,
	0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x09, 0x74, 0x78,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x13, 0x42, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x63, 0x61, 0x73, 0x68, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12,
	0x37, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08,
	0x74, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x09, 0x74, 0x78, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x22, 0x8d, 0x03, 0x0a, 0x10, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x55, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x69,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x22, 0xfa, 0x01, 0x0a, 0x0b, 0x58, 0x72, 0x70, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69,
	0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x52, 0x50,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x4e, 0x65, 0x78, 0x74,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x84,
	0x01, 0x0a, 0x0d, 0x43, 0x30, 0x62, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x12, 0x37, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x08, 0x74, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x78, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x09, 0x74, 0x78, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x69, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x78,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08, 0x74, 0x78, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x52, 0x09, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x3d, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x89,
	0x02, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x77,
	0x0a, 0x1f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x69, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1d, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x10, 0x4d,
	0x6f, 0x6e, 0x61, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12,
	0x37, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08,
	0x74, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x09, 0x74, 0x78, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x0b, 0x4e, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f,
	0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x65, 0x0a, 0x19, 0x6e, 0x65, 0x6d, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x6d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x6e,
	0x65, 0x6d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x97, 0x01, 0x0a, 0x0c, 0x49, 0x4f, 0x53, 0x54, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x4f, 0x53, 0x54, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xdf,
	0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x4e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x22, 0x67, 0x0a, 0x0e, 0x4b, 0x6c, 0x61, 0x79, 0x74, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x4e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x0e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69,
	0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6e, 0x0a, 0x1c, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xfd, 0x02, 0x0a, 0x11, 0x41, 0x76, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x78, 0x74,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f,
	0x74, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x6f,
	0x6d, 0x69, 0x63, 0x54, 0x78, 0x52, 0x08, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x54, 0x78, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x74, 0x78,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67, 0x69,
	0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0d, 0x4f, 0x61, 0x73,
	0x79, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61,
	0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67,
	0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x0b, 0x58, 0x64, 0x63, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x4e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x0e, 0x43,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12,
	0x25, 0x0a, 0x0e, 0x67, 0x61, 0x73, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x67, 0x61, 0x73, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x70, 0x0a, 0x17, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e,
	0x65, 0x78, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x10, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x62, 0x0a, 0x0e, 0x48, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6f, 0x0a, 0x16, 0x4a, 0x61,
	0x70, 0x61, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x0e,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x35, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x86,
	0x01, 0x0a, 0x0d, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65,
	0x78, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x15, 0x42, 0x4e, 0x42, 0x53,
	0x6d, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e,
	0x65, 0x78, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x66, 0x0a, 0x0d, 0x46, 0x6c, 0x61, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e,
	0x65, 0x78, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x41, 0x72, 0x62,
	0x69, 0x74, 0x72, 0x75, 0x6d, 0x4f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65,
	0x78, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcf, 0x01, 0x0a, 0x08,
	0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x54, 0x78, 0x12, 0x3c, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x6e, 0x63,
	0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08,
	0x74, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x09, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x9f, 0x02,
	0x0a, 0x1e, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x12, 0x3c, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40,
	0x0a, 0x09, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x54,
	0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08, 0x74, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x43, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x09, 0x74, 0x78, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x8d, 0x01, 0x0a, 0x0b, 0x54, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x28, 0x0a, 0x0b, 0x53, 0x75, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x22, 0xd4, 0x01, 0x0a, 0x10, 0x41, 0x76,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x13,
	0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x78, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x22, 0x85, 0x02, 0x0a, 0x11, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x54, 0x78,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x22, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb5,
	0x01, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x5b, 0x0a, 0x11, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x6d, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x96, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x4f, 0x53,
	0x54, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x4f,
	0x53, 0x54, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xc4, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x74,
	0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67,
	0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xb5, 0x02, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x42, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x18, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x67, 0x69, 0x6e,
	0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x75, 0x74,
	0x69, 0x6c, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x1e, 0x0a,
	0x1c, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x6c, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x22, 0x41, 0x0a,
	0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x53, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x64, 0x65, 0x72, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x65, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67,
	0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x54, 0x0a, 0x1e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x23,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xcb, 0x02, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x41, 0x0a, 0x07, 0x74, 0x78, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x6e,
	0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x12,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x78, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x01, 0x52,
	0x10, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x78, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x48, 0x02, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x78, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x74, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x22, 0x52, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x22, 0xc6, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x46, 0x54, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x4e, 0x0a, 0x0f, 0x6e, 0x66, 0x74, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x46, 0x54, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x66, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6a,
	0x73, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x66,
	0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x27, 0x0a,
	0x10, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x78, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55,
	0x54, 0x58, 0x4f, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x22, 0xd8, 0x07, 0x0a,
	0x1c, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x49, 0x0a, 0x21, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x74,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69,
	0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x70, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6a, 0x70, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x72, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x72, 0x61,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0xe2, 0x03, 0x0a, 0x16, 0x4e, 0x65, 0x6d, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x6e, 0x65, 0x6d, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6e, 0x65, 0x6d,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x6d, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xee, 0x03, 0x0a,
	0x19, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x1e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbe, 0x03,
	0x0a, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f,
	0x69, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x64,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x64, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e,
	0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f,
	0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x8e,
	0x01, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x9c, 0x08, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f,
	0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63,
	0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x78, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x69,
	0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x70, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6a, 0x70, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x1b, 0x0a,
	0x07, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f,
	0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52,
	0x0a, 0x0f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x52, 0x0e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x52, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x9d,
	0x01, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69,
	0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcf,
	0x06, 0x0a, 0x11, 0x55, 0x6e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67,
	0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x69,
	0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f,
	0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6a, 0x70, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x6a, 0x70, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x07, 0x6d, 0x65, 0x6d,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66,
	0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x65,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xfa, 0x02, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x1c, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x19, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x46, 0x0a,
	0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x70, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x6a, 0x70, 0x79, 0x22, 0xcd, 0x01, 0x0a, 0x0c, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64,
	0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x61, 0x74,
	0x65, 0x73, 0x1a, 0x51, 0x0a, 0x0a, 0x52, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x10, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xac,
	0x03, 0x0a, 0x0e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcc, 0x02,
	0x0a, 0x16, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x73, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe2, 0x02, 0x0a,
	0x09, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12,
	0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xff, 0x03, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x75, 0x72,
	0x6c, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x83, 0x03, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x30, 0x0a,
	0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x22, 0xc2, 0x04, 0x0a, 0x06, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63,
	0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e,
	0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x3a, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xac,
	0x02, 0x0a, 0x0e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x4b, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x64, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x22, 0xd7, 0x01,
	0x0a, 0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f,
	0x69, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6c,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x6f, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x9a, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x67, 0x0a,
	0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1, 0x03, 0x0a, 0x0f, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x66, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x9a, 0x01, 0x02, 0x18, 0x01,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x4d, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x9a, 0x01, 0x02, 0x18, 0x01, 0x52, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x67,
	0x0a, 0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a, 0x0a, 0x52, 0x61, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xab, 0x02, 0x0a, 0x18, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x92, 0x01, 0x0a, 0x1b, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x9a, 0x01, 0x02,
	0x18, 0x01, 0x52, 0x18, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x7a, 0x0a, 0x1d,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x18, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x16, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x15,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x70, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6a, 0x70, 0x79, 0x22, 0xdd, 0x02, 0x0a, 0x17,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x29, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x9a, 0x01, 0x02, 0x18, 0x01, 0x52, 0x24, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x1a, 0x87, 0x01, 0x0a, 0x29, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x01, 0x0a, 0x1b,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x19, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x22, 0xbd, 0x02, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x3b, 0x0a,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x17, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x62, 0x79,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x1a, 0x6a, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xbe, 0x03, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x6f,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x6a, 0x70, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4a, 0x70,
	0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x6f, 0x6c, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x70, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4a, 0x70, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x68, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xf8, 0x02, 0x0a, 0x1d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0xc4, 0x01, 0x0a, 0x2c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x2e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x79, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x9a,
	0x01, 0x02, 0x18, 0x01, 0x52, 0x26, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x42, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x8f, 0x01, 0x0a,
	0x2b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x79, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d,
	0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x12, 0x78, 0x0a, 0x20, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x1d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0x8a,
	0x03, 0x0a, 0x1c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x3b, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0xac, 0x01, 0x0a,
	0x27, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x22, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x7e, 0x0a, 0x27, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x01, 0x0a, 0x14,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x70, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4a, 0x70, 0x79, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x60, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f,
	0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xeb, 0x02, 0x0a, 0x12, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e,
	0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69,
	0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x32, 0x0a,
	0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x6c, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xfc, 0x02, 0x0a, 0x0b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x35, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x33, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x60, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x78, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x03, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x62, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x73, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb8, 0x01,
	0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x60, 0x0a, 0x13, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x22, 0x02, 0x28, 0x00, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x69, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x12, 0x20, 0x0a, 0x03, 0x6a, 0x70, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e,
	0xfa, 0x42, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x03,
	0x6a, 0x70, 0x79, 0x22, 0xae, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x12, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x71, 0x0a, 0x10, 0x49, 0x4f, 0x53, 0x54, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x11, 0x49, 0x4f, 0x53, 0x54, 0x43, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xcf,
	0x01, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63,
	0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e,
	0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x22, 0xd3, 0x01, 0x0a, 0x11, 0x46, 0x65, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12,
	0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xec, 0x05, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67,
	0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x11, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x61, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x11, 0x61, 0x76, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xda, 0x02, 0x0a, 0x1e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x51, 0x0a, 0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x1f, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x15, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x22, 0x9d, 0x04, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xf5, 0x01, 0x0a, 0x03, 0x4e, 0x46, 0x54, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0x73, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9f, 0x03, 0x0a, 0x17, 0x50, 0x72, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x4e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf9, 0x02, 0x0a, 0x1f, 0x50,
	0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x3f,
	0x0a, 0x1c, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x22, 0xb4, 0x06, 0x0a, 0x10, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x5b, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x10,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x22, 0xfa, 0x02,
	0x0a, 0x18, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x1d, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x44, 0x69, 0x66, 0x66, 0x52, 0x04, 0x64, 0x69, 0x66, 0x66, 0x22, 0x39, 0x0a, 0x14, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x69,
	0x66, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x22, 0x93, 0x04, 0x0a, 0x14, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x41, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x1c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x69, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x65, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x2a, 0x3a, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x43, 0x37, 0x32, 0x31,
	0x10, 0x01, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x47, 0x69, 0x6e, 0x63, 0x6f, 0x49, 0x6e, 0x63, 0x2f, 0x67, 0x65, 0x77, 0x2d, 0x6b, 0x6d,
	0x70, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescOnce sync.Once
	file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescData = file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDesc
)

func file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescGZIP() []byte {
	file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescOnce.Do(func() {
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescData)
	})
	return file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDescData
}

var file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes = make([]protoimpl.MessageInfo, 148)
var file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_goTypes = []interface{}{
	(AssetType)(0),                                   // 0: adamant.global.v1.AssetType
	(*Wallet)(nil),                                   // 1: adamant.global.v1.Wallet
	(*WalletWithoutBalance)(nil),                     // 2: adamant.global.v1.WalletWithoutBalance
	(*StakingWallet)(nil),                            // 3: adamant.global.v1.StakingWallet
	(*NFTWallet)(nil),                                // 4: adamant.global.v1.NFTWallet
	(*NFTOwnership)(nil),                             // 5: adamant.global.v1.NFTOwnership
	(*WalletProposal)(nil),                           // 6: adamant.global.v1.WalletProposal
	(*WalletMember)(nil),                             // 7: adamant.global.v1.WalletMember
	(*Key)(nil),                                      // 8: adamant.global.v1.Key
	(*Address)(nil),                                  // 9: adamant.global.v1.Address
	(*AddressWithoutBalance)(nil),                    // 10: adamant.global.v1.AddressWithoutBalance
	(*FlushedAddress)(nil),                           // 11: adamant.global.v1.FlushedAddress
	(*EthereumFeeAddress)(nil),                       // 12: adamant.global.v1.EthereumFeeAddress
	(*AddressWithBalance)(nil),                       // 13: adamant.global.v1.AddressWithBalance
	(*PreTransaction)(nil),                           // 14: adamant.global.v1.PreTransaction
	(*PreTransactionDetail)(nil),                     // 15: adamant.global.v1.PreTransactionDetail
	(*Transaction)(nil),                              // 16: adamant.global.v1.Transaction
	(*UnconfirmedTransaction)(nil),                   // 17: adamant.global.v1.UnconfirmedTransaction
	(*TransactionMember)(nil),                        // 18: adamant.global.v1.TransactionMember
	(*TxInput)(nil),                                  // 19: adamant.global.v1.TxInput
	(*TxOutput)(nil),                                 // 20: adamant.global.v1.TxOutput
	(*UTXO)(nil),                                     // 21: adamant.global.v1.UTXO
	(*CardanoUTXOSpecific)(nil),                      // 22: adamant.global.v1.CardanoUTXOSpecific
	(*AvalanchePlatformChainUTXOSpecific)(nil),       // 23: adamant.global.v1.AvalanchePlatformChainUTXOSpecific
	(*CardanoCustomToken)(nil),                       // 24: adamant.global.v1.CardanoCustomToken
	(*BitcoinSpecific)(nil),                          // 25: adamant.global.v1.BitcoinSpecific
	(*LitecoinSpecific)(nil),                         // 26: adamant.global.v1.LitecoinSpecific
	(*DogecoinSpecific)(nil),                         // 27: adamant.global.v1.DogecoinSpecific
	(*BitcoincashSpecific)(nil),                      // 28: adamant.global.v1.BitcoincashSpecific
	(*EthereumSpecific)(nil),                         // 29: adamant.global.v1.EthereumSpecific
	(*XrpSpecific)(nil),                              // 30: adamant.global.v1.XrpSpecific
	(*TronSpecific)(nil),                             // 31: adamant.global.v1.TronSpecific
	(*C0BanSpecific)(nil),                            // 32: adamant.global.v1.C0banSpecific
	(*StellarSpecific)(nil),                          // 33: adamant.global.v1.StellarSpecific
	(*CardanoSpecific)(nil),                          // 34: adamant.global.v1.CardanoSpecific
	(*SubstrateSpecific)(nil),                        // 35: adamant.global.v1.SubstrateSpecific
	(*MonacoinSpecific)(nil),                         // 36: adamant.global.v1.MonacoinSpecific
	(*NemSpecific)(nil),                              // 37: adamant.global.v1.NemSpecific
	(*IOSTSpecific)(nil),                             // 38: adamant.global.v1.IOSTSpecific
	(*PolygonSpecific)(nil),                          // 39: adamant.global.v1.PolygonSpecific
	(*KlaytnSpecific)(nil),                           // 40: adamant.global.v1.KlaytnSpecific
	(*SymbolSpecific)(nil),                           // 41: adamant.global.v1.SymbolSpecific
	(*AvalancheSpecific)(nil),                        // 42: adamant.global.v1.AvalancheSpecific
	(*OasysSpecific)(nil),                            // 43: adamant.global.v1.OasysSpecific
	(*XdcSpecific)(nil),                              // 44: adamant.global.v1.XdcSpecific
	(*CosmosSpecific)(nil),                           // 45: adamant.global.v1.CosmosSpecific
	(*EthereumClassicSpecific)(nil),                  // 46: adamant.global.v1.EthereumClassicSpecific
	(*AlgorandSpecific)(nil),                         // 47: adamant.global.v1.AlgorandSpecific
	(*HederaSpecific)(nil),                           // 48: adamant.global.v1.HederaSpecific
	(*JapanOpenChainSpecific)(nil),                   // 49: adamant.global.v1.JapanOpenChainSpecific
	(*SolanaSpecific)(nil),                           // 50: adamant.global.v1.SolanaSpecific
	(*AptosSpecific)(nil),                            // 51: adamant.global.v1.AptosSpecific
	(*BNBSmartChainSpecific)(nil),                    // 52: adamant.global.v1.BNBSmartChainSpecific
	(*FlareSpecific)(nil),                            // 53: adamant.global.v1.FlareSpecific
	(*ArbitrumOneSpecific)(nil),                      // 54: adamant.global.v1.ArbitrumOneSpecific
	(*AtomicTx)(nil),                                 // 55: adamant.global.v1.AtomicTx
	(*AvalanchePlatformChainSpecific)(nil),           // 56: adamant.global.v1.AvalanchePlatformChainSpecific
	(*TonSpecific)(nil),                              // 57: adamant.global.v1.TonSpecific
	(*SuiSpecific)(nil),                              // 58: adamant.global.v1.SuiSpecific
	(*AvalancheTxInput)(nil),                         // 59: adamant.global.v1.AvalancheTxInput
	(*AvalancheTxOutput)(nil),                        // 60: adamant.global.v1.AvalancheTxOutput
	(*QuorumSpecific)(nil),                           // 61: adamant.global.v1.QuorumSpecific
	(*CreateTransactionSubstrateSpecific)(nil),       // 62: adamant.global.v1.CreateTransactionSubstrateSpecific
	(*CreateTransactionWalletConnectSpecific)(nil),   // 63: adamant.global.v1.CreateTransactionWalletConnectSpecific
	(*CreateTransactionNemSpecific)(nil),             // 64: adamant.global.v1.CreateTransactionNemSpecific
	(*CreateTransactionIOSTSpecific)(nil),            // 65: adamant.global.v1.CreateTransactionIOSTSpecific
	(*CreateTransactionSymbolSpecific)(nil),          // 66: adamant.global.v1.CreateTransactionSymbolSpecific
	(*CreateTransactionEthereumSpecific)(nil),        // 67: adamant.global.v1.CreateTransactionEthereumSpecific
	(*CreateTransactionCosmosSpecific)(nil),          // 68: adamant.global.v1.CreateTransactionCosmosSpecific
	(*CreateTransactionAlgorandSpecific)(nil),        // 69: adamant.global.v1.CreateTransactionAlgorandSpecific
	(*CreateTransactionHederaSpecific)(nil),          // 70: adamant.global.v1.CreateTransactionHederaSpecific
	(*CreateTransactionSolanaSpecific)(nil),          // 71: adamant.global.v1.CreateTransactionSolanaSpecific
	(*CreateTransactionAptosSpecific)(nil),           // 72: adamant.global.v1.CreateTransactionAptosSpecific
	(*CreateTransactionAvalancheSpecific)(nil),       // 73: adamant.global.v1.CreateTransactionAvalancheSpecific
	(*CreateTransactionTonSpecific)(nil),             // 74: adamant.global.v1.CreateTransactionTonSpecific
	(*CreateTransactionNFTSpecific)(nil),             // 75: adamant.global.v1.CreateTransactionNFTSpecific
	(*ImportTxSpecific)(nil),                         // 76: adamant.global.v1.ImportTxSpecific
	(*StakingSpecific)(nil),                          // 77: adamant.global.v1.StakingSpecific
	(*SelectedUTXO)(nil),                             // 78: adamant.global.v1.SelectedUTXO
	(*SubstrateMultisigTransaction)(nil),             // 79: adamant.global.v1.SubstrateMultisigTransaction
	(*NemMultisigTransaction)(nil),                   // 80: adamant.global.v1.NemMultisigTransaction
	(*SymbolMultisigTransaction)(nil),                // 81: adamant.global.v1.SymbolMultisigTransaction
	(*SignInfo)(nil),                                 // 82: adamant.global.v1.SignInfo
	(*SignTxInput)(nil),                              // 83: adamant.global.v1.SignTxInput
	(*Transfer)(nil),                                 // 84: adamant.global.v1.Transfer
	(*TransferCosmosSpecific)(nil),                   // 85: adamant.global.v1.TransferCosmosSpecific
	(*UncheckedTransfer)(nil),                        // 86: adamant.global.v1.UncheckedTransfer
	(*EventTriggeredMessage)(nil),                    // 87: adamant.global.v1.EventTriggeredMessage
	(*Rate)(nil),                                     // 88: adamant.global.v1.Rate
	(*RateSnapshot)(nil),                             // 89: adamant.global.v1.RateSnapshot
	(*Deactivatability)(nil),                         // 90: adamant.global.v1.Deactivatability
	(*LabeledAddress)(nil),                           // 91: adamant.global.v1.LabeledAddress
	(*LabeledAddressProposal)(nil),                   // 92: adamant.global.v1.LabeledAddressProposal
	(*Whitelist)(nil),                                // 93: adamant.global.v1.Whitelist
	(*TransferLimit)(nil),                            // 94: adamant.global.v1.TransferLimit
	(*TransferLimitProposal)(nil),                    // 95: adamant.global.v1.TransferLimitProposal
	(*Policy)(nil),                                   // 96: adamant.global.v1.Policy
	(*PolicyProposal)(nil),                           // 97: adamant.global.v1.PolicyProposal
	(*TotalBalanceByCoin)(nil),                       // 98: adamant.global.v1.TotalBalanceByCoin
	(*TotalBalance)(nil),                             // 99: adamant.global.v1.TotalBalance
	(*BalanceSnapshot)(nil),                          // 100: adamant.global.v1.BalanceSnapshot
	(*WalletBalanceSnapshotMap)(nil),                 // 101: adamant.global.v1.WalletBalanceSnapshotMap
	(*ListWalletBalanceSnapshots)(nil),               // 102: adamant.global.v1.ListWalletBalanceSnapshots
	(*WalletBalanceSnapshot)(nil),                    // 103: adamant.global.v1.WalletBalanceSnapshot
	(*TransferVolumeSnapshots)(nil),                  // 104: adamant.global.v1.TransferVolumeSnapshots
	(*ListTransferVolumeSnapshots)(nil),              // 105: adamant.global.v1.ListTransferVolumeSnapshots
	(*TransferVolumeSnapshot)(nil),                   // 106: adamant.global.v1.TransferVolumeSnapshot
	(*TransferVolume)(nil),                           // 107: adamant.global.v1.TransferVolume
	(*WalletTransferVolumeSnapshots)(nil),            // 108: adamant.global.v1.WalletTransferVolumeSnapshots
	(*ListWalletTransferVolumeSnapshots)(nil),        // 109: adamant.global.v1.ListWalletTransferVolumeSnapshots
	(*WalletTransferVolumeSnapshot)(nil),             // 110: adamant.global.v1.WalletTransferVolumeSnapshot
	(*WalletTransferVolume)(nil),                     // 111: adamant.global.v1.WalletTransferVolume
	(*Confirmation)(nil),                             // 112: adamant.global.v1.Confirmation
	(*WalletFlushSetting)(nil),                       // 113: adamant.global.v1.WalletFlushSetting
	(*CompensationFee)(nil),                          // 114: adamant.global.v1.CompensationFee
	(*WalletGroup)(nil),                              // 115: adamant.global.v1.WalletGroup
	(*RequestTxOutput)(nil),                          // 116: adamant.global.v1.RequestTxOutput
	(*RequestSignedInfo)(nil),                        // 117: adamant.global.v1.RequestSignedInfo
	(*RequestSignature)(nil),                         // 118: adamant.global.v1.RequestSignature
	(*RequestTransferLimitEntry)(nil),                // 119: adamant.global.v1.RequestTransferLimitEntry
	(*RequestRate)(nil),                              // 120: adamant.global.v1.RequestRate
	(*SubstrateChildAddress)(nil),                    // 121: adamant.global.v1.SubstrateChildAddress
	(*SymbolChildAddress)(nil),                       // 122: adamant.global.v1.SymbolChildAddress
	(*IOSTChildAccount)(nil),                         // 123: adamant.global.v1.IOSTChildAccount
	(*IOSTCallerAccount)(nil),                        // 124: adamant.global.v1.IOSTCallerAccount
	(*CallerAddress)(nil),                            // 125: adamant.global.v1.CallerAddress
	(*FeeDepositAddress)(nil),                        // 126: adamant.global.v1.FeeDepositAddress
	(*CosmosDelegation)(nil),                         // 127: adamant.global.v1.CosmosDelegation
	(*StakingHistory)(nil),                           // 128: adamant.global.v1.StakingHistory
	(*StakingHistoryEthereumSpecific)(nil),           // 129: adamant.global.v1.StakingHistoryEthereumSpecific
	(*StakingHistoryAvalancheSpecific)(nil),          // 130: adamant.global.v1.StakingHistoryAvalancheSpecific
	(*StakingValidator)(nil),                         // 131: adamant.global.v1.StakingValidator
	(*NFT)(nil),                                      // 132: adamant.global.v1.NFT
	(*PreTransactionThreshold)(nil),                  // 133: adamant.global.v1.PreTransactionThreshold
	(*PreTransactionThresholdProposal)(nil),          // 134: adamant.global.v1.PreTransactionThresholdProposal
	(*BlacklistAddress)(nil),                         // 135: adamant.global.v1.BlacklistAddress
	(*BlacklistAddressProposal)(nil),                 // 136: adamant.global.v1.BlacklistAddressProposal
	(*BlacklistAddressDiff)(nil),                     // 137: adamant.global.v1.BlacklistAddressDiff
	(*BlacklistAddressFile)(nil),                     // 138: adamant.global.v1.BlacklistAddressFile
	(*CreateTransactionSuiSpecific)(nil),             // 139: adamant.global.v1.CreateTransactionSuiSpecific
	nil,                                              // 140: adamant.global.v1.RateSnapshot.RatesEntry
	nil,                                              // 141: adamant.global.v1.TotalBalance.TotalBalancesEntry
	nil,                                              // 142: adamant.global.v1.BalanceSnapshot.TotalBalancesEntry
	nil,                                              // 143: adamant.global.v1.BalanceSnapshot.RatesEntry
	nil,                                              // 144: adamant.global.v1.WalletBalanceSnapshotMap.WalletBalanceSnapshotMapEntry
	nil,                                              // 145: adamant.global.v1.TransferVolumeSnapshots.TransferVolumeSnapshotByTransferTypeEntry
	nil,                                              // 146: adamant.global.v1.TransferVolumeSnapshot.TransferVolumeByCoinEntry
	nil,                                              // 147: adamant.global.v1.WalletTransferVolumeSnapshots.WalletTransferVolumeSnapshotByWalletIdEntry
	nil,                                              // 148: adamant.global.v1.WalletTransferVolumeSnapshot.WalletTransferVolumeByTransferTypeEntry
	(gincoincglobalv1.Coin)(0),                       // 149: gincoinc.global.v1.Coin
	(gincoincglobalv1.Network)(0),                    // 150: gincoinc.global.v1.Network
	(WalletType)(0),                                  // 151: adamant.global.v1.WalletType
	(gincoincglobalv1.AddressType)(0),                // 152: gincoinc.global.v1.AddressType
	(WalletState)(0),                                 // 153: adamant.global.v1.WalletState
	(*timestamppb.Timestamp)(nil),                    // 154: google.protobuf.Timestamp
	(WalletProposalType)(0),                          // 155: adamant.global.v1.WalletProposalType
	(AccountType)(0),                                 // 156: adamant.global.v1.AccountType
	(RoleType)(0),                                    // 157: adamant.global.v1.RoleType
	(AddressState)(0),                                // 158: adamant.global.v1.AddressState
	(PreTransactionState)(0),                         // 159: adamant.global.v1.PreTransactionState
	(TransactionState)(0),                            // 160: adamant.global.v1.TransactionState
	(EthereumContractMethodIDType)(0),                // 161: adamant.global.v1.EthereumContractMethodIDType
	(gincoincglobalv1.XRPTransactionType)(0),         // 162: gincoinc.global.v1.XRPTransactionType
	(SubstrateCallType)(0),                           // 163: adamant.global.v1.SubstrateCallType
	(gincoincglobalv1.NemTransactionType)(0),         // 164: gincoinc.global.v1.NemTransactionType
	(IOSTActionType)(0),                              // 165: adamant.global.v1.IOSTActionType
	(gincoincglobalv1.SymbolTransactionType)(0),      // 166: gincoinc.global.v1.SymbolTransactionType
	(gincoincglobalv1.AvalancheTxType)(0),            // 167: gincoinc.global.v1.AvalancheTxType
	(gincoincglobalv1.CosmosMsgType)(0),              // 168: gincoinc.global.v1.CosmosMsgType
	(gincoincglobalv1.SolanaEventType)(0),            // 169: gincoinc.global.v1.SolanaEventType
	(WalletConnectCallRequestType)(0),                // 170: adamant.global.v1.WalletConnectCallRequestType
	(gincoincglobalv1.EthereumCallMethod)(0),         // 171: gincoinc.global.v1.EthereumCallMethod
	(gincoincglobalv1.NFTCallMethod)(0),              // 172: gincoinc.global.v1.NFTCallMethod
	(gincoincglobalv1.TransferType)(0),               // 173: gincoinc.global.v1.TransferType
	(gincoincglobalv1.TransactionState)(0),           // 174: gincoinc.global.v1.TransactionState
	(gincoincglobalv1.TransactionResult)(0),          // 175: gincoinc.global.v1.TransactionResult
	(gincoincglobalv1.StakingEventType)(0),           // 176: gincoinc.global.v1.StakingEventType
	(EventTriggeredMessageType)(0),                   // 177: adamant.global.v1.EventTriggeredMessageType
	(PolicyType)(0),                                  // 178: adamant.global.v1.PolicyType
	(TransferLimitType)(0),                           // 179: adamant.global.v1.TransferLimitType
	(gincoincglobalv1.EthereumStakingHistoryType)(0), // 180: gincoinc.global.v1.EthereumStakingHistoryType
	(gincoincglobalv1.StakingValidatorStatus)(0),     // 181: gincoinc.global.v1.StakingValidatorStatus
	(BlacklistAddressStatus)(0),                      // 182: adamant.global.v1.BlacklistAddressStatus
}
var file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_depIdxs = []int32{
	149, // 0: adamant.global.v1.Wallet.coin:type_name -> gincoinc.global.v1.Coin
	150, // 1: adamant.global.v1.Wallet.network:type_name -> gincoinc.global.v1.Network
	151, // 2: adamant.global.v1.Wallet.wallet_type:type_name -> adamant.global.v1.WalletType
	152, // 3: adamant.global.v1.Wallet.address_type:type_name -> gincoinc.global.v1.AddressType
	153, // 4: adamant.global.v1.Wallet.state:type_name -> adamant.global.v1.WalletState
	8,   // 5: adamant.global.v1.Wallet.keys:type_name -> adamant.global.v1.Key
	7,   // 6: adamant.global.v1.Wallet.members:type_name -> adamant.global.v1.WalletMember
	6,   // 7: adamant.global.v1.Wallet.proposal:type_name -> adamant.global.v1.WalletProposal
	154, // 8: adamant.global.v1.Wallet.create_time:type_name -> google.protobuf.Timestamp
	154, // 9: adamant.global.v1.Wallet.update_time:type_name -> google.protobuf.Timestamp
	149, // 10: adamant.global.v1.WalletWithoutBalance.coin:type_name -> gincoinc.global.v1.Coin
	150, // 11: adamant.global.v1.WalletWithoutBalance.network:type_name -> gincoinc.global.v1.Network
	151, // 12: adamant.global.v1.WalletWithoutBalance.wallet_type:type_name -> adamant.global.v1.WalletType
	152, // 13: adamant.global.v1.WalletWithoutBalance.address_type:type_name -> gincoinc.global.v1.AddressType
	153, // 14: adamant.global.v1.WalletWithoutBalance.state:type_name -> adamant.global.v1.WalletState
	8,   // 15: adamant.global.v1.WalletWithoutBalance.keys:type_name -> adamant.global.v1.Key
	7,   // 16: adamant.global.v1.WalletWithoutBalance.members:type_name -> adamant.global.v1.WalletMember
	6,   // 17: adamant.global.v1.WalletWithoutBalance.proposal:type_name -> adamant.global.v1.WalletProposal
	154, // 18: adamant.global.v1.WalletWithoutBalance.create_time:type_name -> google.protobuf.Timestamp
	154, // 19: adamant.global.v1.WalletWithoutBalance.update_time:type_name -> google.protobuf.Timestamp
	149, // 20: adamant.global.v1.StakingWallet.coin:type_name -> gincoinc.global.v1.Coin
	151, // 21: adamant.global.v1.StakingWallet.wallet_type:type_name -> adamant.global.v1.WalletType
	152, // 22: adamant.global.v1.StakingWallet.address_type:type_name -> gincoinc.global.v1.AddressType
	153, // 23: adamant.global.v1.StakingWallet.state:type_name -> adamant.global.v1.WalletState
	154, // 24: adamant.global.v1.StakingWallet.create_time:type_name -> google.protobuf.Timestamp
	154, // 25: adamant.global.v1.StakingWallet.update_time:type_name -> google.protobuf.Timestamp
	149, // 26: adamant.global.v1.NFTWallet.coin:type_name -> gincoinc.global.v1.Coin
	151, // 27: adamant.global.v1.NFTWallet.wallet_type:type_name -> adamant.global.v1.WalletType
	152, // 28: adamant.global.v1.NFTWallet.address_type:type_name -> gincoinc.global.v1.AddressType
	153, // 29: adamant.global.v1.NFTWallet.state:type_name -> adamant.global.v1.WalletState
	5,   // 30: adamant.global.v1.NFTWallet.nft_ownerships:type_name -> adamant.global.v1.NFTOwnership
	154, // 31: adamant.global.v1.NFTWallet.create_time:type_name -> google.protobuf.Timestamp
	154, // 32: adamant.global.v1.NFTWallet.update_time:type_name -> google.protobuf.Timestamp
	149, // 33: adamant.global.v1.NFTOwnership.coin:type_name -> gincoinc.global.v1.Coin
	155, // 34: adamant.global.v1.WalletProposal.proposal_type:type_name -> adamant.global.v1.WalletProposalType
	156, // 35: adamant.global.v1.WalletMember.account_type:type_name -> adamant.global.v1.AccountType
	157, // 36: adamant.global.v1.WalletMember.role:type_name -> adamant.global.v1.RoleType
	156, // 37: adamant.global.v1.Key.account_type:type_name -> adamant.global.v1.AccountType
	149, // 38: adamant.global.v1.Address.coin:type_name -> gincoinc.global.v1.Coin
	150, // 39: adamant.global.v1.Address.network:type_name -> gincoinc.global.v1.Network
	158, // 40: adamant.global.v1.Address.state:type_name -> adamant.global.v1.AddressState
	152, // 41: adamant.global.v1.Address.address_type:type_name -> gincoinc.global.v1.AddressType
	154, // 42: adamant.global.v1.Address.create_time:type_name -> google.protobuf.Timestamp
	154, // 43: adamant.global.v1.Address.update_time:type_name -> google.protobuf.Timestamp
	149, // 44: adamant.global.v1.AddressWithoutBalance.coin:type_name -> gincoinc.global.v1.Coin
	150, // 45: adamant.global.v1.AddressWithoutBalance.network:type_name -> gincoinc.global.v1.Network
	158, // 46: adamant.global.v1.AddressWithoutBalance.state:type_name -> adamant.global.v1.AddressState
	152, // 47: adamant.global.v1.AddressWithoutBalance.address_type:type_name -> gincoinc.global.v1.AddressType
	154, // 48: adamant.global.v1.AddressWithoutBalance.create_time:type_name -> google.protobuf.Timestamp
	154, // 49: adamant.global.v1.AddressWithoutBalance.update_time:type_name -> google.protobuf.Timestamp
	149, // 50: adamant.global.v1.FlushedAddress.coin:type_name -> gincoinc.global.v1.Coin
	158, // 51: adamant.global.v1.FlushedAddress.state:type_name -> adamant.global.v1.AddressState
	152, // 52: adamant.global.v1.FlushedAddress.address_type:type_name -> gincoinc.global.v1.AddressType
	149, // 53: adamant.global.v1.PreTransaction.coin:type_name -> gincoinc.global.v1.Coin
	150, // 54: adamant.global.v1.PreTransaction.network:type_name -> gincoinc.global.v1.Network
	15,  // 55: adamant.global.v1.PreTransaction.details:type_name -> adamant.global.v1.PreTransactionDetail
	159, // 56: adamant.global.v1.PreTransaction.state:type_name -> adamant.global.v1.PreTransactionState
	154, // 57: adamant.global.v1.PreTransaction.create_time:type_name -> google.protobuf.Timestamp
	154, // 58: adamant.global.v1.PreTransaction.update_time:type_name -> google.protobuf.Timestamp
	149, // 59: adamant.global.v1.Transaction.coin:type_name -> gincoinc.global.v1.Coin
	150, // 60: adamant.global.v1.Transaction.network:type_name -> gincoinc.global.v1.Network
	160, // 61: adamant.global.v1.Transaction.state:type_name -> adamant.global.v1.TransactionState
	8,   // 62: adamant.global.v1.Transaction.signed_keys:type_name -> adamant.global.v1.Key
	18,  // 63: adamant.global.v1.Transaction.members:type_name -> adamant.global.v1.TransactionMember
	25,  // 64: adamant.global.v1.Transaction.bitcoin_specific:type_name -> adamant.global.v1.BitcoinSpecific
	29,  // 65: adamant.global.v1.Transaction.ethereum_specific:type_name -> adamant.global.v1.EthereumSpecific
	26,  // 66: adamant.global.v1.Transaction.litecoin_specific:type_name -> adamant.global.v1.LitecoinSpecific
	28,  // 67: adamant.global.v1.Transaction.bitcoincash_specific:type_name -> adamant.global.v1.BitcoincashSpecific
	30,  // 68: adamant.global.v1.Transaction.xrp_specific:type_name -> adamant.global.v1.XrpSpecific
	31,  // 69: adamant.global.v1.Transaction.tron_specific:type_name -> adamant.global.v1.TronSpecific
	32,  // 70: adamant.global.v1.Transaction.c0ban_specific:type_name -> adamant.global.v1.C0banSpecific
	33,  // 71: adamant.global.v1.Transaction.stellar_specific:type_name -> adamant.global.v1.StellarSpecific
	34,  // 72: adamant.global.v1.Transaction.cardano_specific:type_name -> adamant.global.v1.CardanoSpecific
	35,  // 73: adamant.global.v1.Transaction.substrate_specific:type_name -> adamant.global.v1.SubstrateSpecific
	36,  // 74: adamant.global.v1.Transaction.monacoin_specific:type_name -> adamant.global.v1.MonacoinSpecific
	37,  // 75: adamant.global.v1.Transaction.nem_specific:type_name -> adamant.global.v1.NemSpecific
	38,  // 76: adamant.global.v1.Transaction.iost_specific:type_name -> adamant.global.v1.IOSTSpecific
	39,  // 77: adamant.global.v1.Transaction.polygon_specific:type_name -> adamant.global.v1.PolygonSpecific
	40,  // 78: adamant.global.v1.Transaction.klaytn_specific:type_name -> adamant.global.v1.KlaytnSpecific
	41,  // 79: adamant.global.v1.Transaction.symbol_specific:type_name -> adamant.global.v1.SymbolSpecific
	42,  // 80: adamant.global.v1.Transaction.avalanche_specific:type_name -> adamant.global.v1.AvalancheSpecific
	43,  // 81: adamant.global.v1.Transaction.oasys_specific:type_name -> adamant.global.v1.OasysSpecific
	44,  // 82: adamant.global.v1.Transaction.xdc_specific:type_name -> adamant.global.v1.XdcSpecific
	45,  // 83: adamant.global.v1.Transaction.cosmos_specific:type_name -> adamant.global.v1.CosmosSpecific
	46,  // 84: adamant.global.v1.Transaction.ethereum_classic_specific:type_name -> adamant.global.v1.EthereumClassicSpecific
	47,  // 85: adamant.global.v1.Transaction.algorand_specific:type_name -> adamant.global.v1.AlgorandSpecific
	48,  // 86: adamant.global.v1.Transaction.hedera_specific:type_name -> adamant.global.v1.HederaSpecific
	49,  // 87: adamant.global.v1.Transaction.japan_open_chain_specific:type_name -> adamant.global.v1.JapanOpenChainSpecific
	50,  // 88: adamant.global.v1.Transaction.solana_specific:type_name -> adamant.global.v1.SolanaSpecific
	52,  // 89: adamant.global.v1.Transaction.bnb_smart_chain_specific:type_name -> adamant.global.v1.BNBSmartChainSpecific
	53,  // 90: adamant.global.v1.Transaction.flare_specific:type_name -> adamant.global.v1.FlareSpecific
	54,  // 91: adamant.global.v1.Transaction.arbitrum_one_specific:type_name -> adamant.global.v1.ArbitrumOneSpecific
	51,  // 92: adamant.global.v1.Transaction.aptos_specific:type_name -> adamant.global.v1.AptosSpecific
	27,  // 93: adamant.global.v1.Transaction.dogecoin_specific:type_name -> adamant.global.v1.DogecoinSpecific
	56,  // 94: adamant.global.v1.Transaction.avalanche_platform_chain_specific:type_name -> adamant.global.v1.AvalanchePlatformChainSpecific
	61,  // 95: adamant.global.v1.Transaction.quorum_specific:type_name -> adamant.global.v1.QuorumSpecific
	57,  // 96: adamant.global.v1.Transaction.ton_specific:type_name -> adamant.global.v1.TonSpecific
	58,  // 97: adamant.global.v1.Transaction.sui_specific:type_name -> adamant.global.v1.SuiSpecific
	154, // 98: adamant.global.v1.Transaction.create_time:type_name -> google.protobuf.Timestamp
	154, // 99: adamant.global.v1.Transaction.update_time:type_name -> google.protobuf.Timestamp
	154, // 100: adamant.global.v1.UnconfirmedTransaction.create_time:type_name -> google.protobuf.Timestamp
	25,  // 101: adamant.global.v1.UnconfirmedTransaction.bitcoin_specific:type_name -> adamant.global.v1.BitcoinSpecific
	26,  // 102: adamant.global.v1.UnconfirmedTransaction.litecoin_specific:type_name -> adamant.global.v1.LitecoinSpecific
	28,  // 103: adamant.global.v1.UnconfirmedTransaction.bitcoincash_specific:type_name -> adamant.global.v1.BitcoincashSpecific
	32,  // 104: adamant.global.v1.UnconfirmedTransaction.c0ban_specific:type_name -> adamant.global.v1.C0banSpecific
	34,  // 105: adamant.global.v1.UnconfirmedTransaction.cardano_specific:type_name -> adamant.global.v1.CardanoSpecific
	36,  // 106: adamant.global.v1.UnconfirmedTransaction.monacoin_specific:type_name -> adamant.global.v1.MonacoinSpecific
	56,  // 107: adamant.global.v1.UnconfirmedTransaction.avalanche_platform_chain_specific:type_name -> adamant.global.v1.AvalanchePlatformChainSpecific
	156, // 108: adamant.global.v1.TransactionMember.account_type:type_name -> adamant.global.v1.AccountType
	157, // 109: adamant.global.v1.TransactionMember.role:type_name -> adamant.global.v1.RoleType
	152, // 110: adamant.global.v1.TxInput.address_type:type_name -> gincoinc.global.v1.AddressType
	22,  // 111: adamant.global.v1.UTXO.cardano_specific:type_name -> adamant.global.v1.CardanoUTXOSpecific
	23,  // 112: adamant.global.v1.UTXO.avalanche_platform_chain_specific:type_name -> adamant.global.v1.AvalanchePlatformChainUTXOSpecific
	24,  // 113: adamant.global.v1.CardanoUTXOSpecific.tokens:type_name -> adamant.global.v1.CardanoCustomToken
	19,  // 114: adamant.global.v1.BitcoinSpecific.tx_inputs:type_name -> adamant.global.v1.TxInput
	20,  // 115: adamant.global.v1.BitcoinSpecific.tx_outputs:type_name -> adamant.global.v1.TxOutput
	19,  // 116: adamant.global.v1.LitecoinSpecific.tx_inputs:type_name -> adamant.global.v1.TxInput
	20,  // 117: adamant.global.v1.LitecoinSpecific.tx_outputs:type_name -> adamant.global.v1.TxOutput
	19,  // 118: adamant.global.v1.DogecoinSpecific.tx_inputs:type_name -> adamant.global.v1.TxInput
	20,  // 119: adamant.global.v1.DogecoinSpecific.tx_outputs:type_name -> adamant.global.v1.TxOutput
	19,  // 120: adamant.global.v1.BitcoincashSpecific.tx_inputs:type_name -> adamant.global.v1.TxInput
	20,  // 121: adamant.global.v1.BitcoincashSpecific.tx_outputs:type_name -> adamant.global.v1.TxOutput
	161, // 122: adamant.global.v1.EthereumSpecific.method_id_type:type_name -> adamant.global.v1.EthereumContractMethodIDType
	162, // 123: adamant.global.v1.XrpSpecific.tx_type:type_name -> gincoinc.global.v1.XRPTransactionType
	19,  // 124: adamant.global.v1.C0banSpecific.tx_inputs:type_name -> adamant.global.v1.TxInput
	20,  // 125: adamant.global.v1.C0banSpecific.tx_outputs:type_name -> adamant.global.v1.TxOutput
	19,  // 126: adamant.global.v1.CardanoSpecific.tx_inputs:type_name -> adamant.global.v1.TxInput
	20,  // 127: adamant.global.v1.CardanoSpecific.tx_outputs:type_name -> adamant.global.v1.TxOutput
	24,  // 128: adamant.global.v1.CardanoSpecific.tokens:type_name -> adamant.global.v1.CardanoCustomToken
	79,  // 129: adamant.global.v1.SubstrateSpecific.substrate_multisig_transactions:type_name -> adamant.global.v1.SubstrateMultisigTransaction
	163, // 130: adamant.global.v1.SubstrateSpecific.call_type:type_name -> adamant.global.v1.SubstrateCallType
	19,  // 131: adamant.global.v1.MonacoinSpecific.tx_inputs:type_name -> adamant.global.v1.TxInput
	20,  // 132: adamant.global.v1.MonacoinSpecific.tx_outputs:type_name -> adamant.global.v1.TxOutput
	164, // 133: adamant.global.v1.NemSpecific.tx_type:type_name -> gincoinc.global.v1.NemTransactionType
	80,  // 134: adamant.global.v1.NemSpecific.nem_multisig_transactions:type_name -> adamant.global.v1.NemMultisigTransaction
	165, // 135: adamant.global.v1.IOSTSpecific.type:type_name -> adamant.global.v1.IOSTActionType
	166, // 136: adamant.global.v1.SymbolSpecific.tx_type:type_name -> gincoinc.global.v1.SymbolTransactionType
	81,  // 137: adamant.global.v1.SymbolSpecific.symbol_multisig_transactions:type_name -> adamant.global.v1.SymbolMultisigTransaction
	55,  // 138: adamant.global.v1.AvalancheSpecific.atomic_tx:type_name -> adamant.global.v1.AtomicTx
	167, // 139: adamant.global.v1.AvalancheSpecific.tx_type:type_name -> gincoinc.global.v1.AvalancheTxType
	168, // 140: adamant.global.v1.CosmosSpecific.type:type_name -> gincoinc.global.v1.CosmosMsgType
	169, // 141: adamant.global.v1.SolanaSpecific.event_type:type_name -> gincoinc.global.v1.SolanaEventType
	167, // 142: adamant.global.v1.AtomicTx.tx_type:type_name -> gincoinc.global.v1.AvalancheTxType
	59,  // 143: adamant.global.v1.AtomicTx.tx_inputs:type_name -> adamant.global.v1.AvalancheTxInput
	60,  // 144: adamant.global.v1.AtomicTx.tx_outputs:type_name -> adamant.global.v1.AvalancheTxOutput
	167, // 145: adamant.global.v1.AvalanchePlatformChainSpecific.tx_type:type_name -> gincoinc.global.v1.AvalancheTxType
	59,  // 146: adamant.global.v1.AvalanchePlatformChainSpecific.tx_inputs:type_name -> adamant.global.v1.AvalancheTxInput
	60,  // 147: adamant.global.v1.AvalanchePlatformChainSpecific.tx_outputs:type_name -> adamant.global.v1.AvalancheTxOutput
	163, // 148: adamant.global.v1.CreateTransactionSubstrateSpecific.call_type:type_name -> adamant.global.v1.SubstrateCallType
	163, // 149: adamant.global.v1.CreateTransactionSubstrateSpecific.multisig_call_type:type_name -> adamant.global.v1.SubstrateCallType
	170, // 150: adamant.global.v1.CreateTransactionWalletConnectSpecific.call_request_type:type_name -> adamant.global.v1.WalletConnectCallRequestType
	164, // 151: adamant.global.v1.CreateTransactionNemSpecific.tx_type:type_name -> gincoinc.global.v1.NemTransactionType
	165, // 152: adamant.global.v1.CreateTransactionIOSTSpecific.type:type_name -> adamant.global.v1.IOSTActionType
	166, // 153: adamant.global.v1.CreateTransactionSymbolSpecific.tx_type:type_name -> gincoinc.global.v1.SymbolTransactionType
	171, // 154: adamant.global.v1.CreateTransactionEthereumSpecific.call_method:type_name -> gincoinc.global.v1.EthereumCallMethod
	168, // 155: adamant.global.v1.CreateTransactionCosmosSpecific.type:type_name -> gincoinc.global.v1.CosmosMsgType
	169, // 156: adamant.global.v1.CreateTransactionSolanaSpecific.event_type:type_name -> gincoinc.global.v1.SolanaEventType
	167, // 157: adamant.global.v1.CreateTransactionAvalancheSpecific.tx_type:type_name -> gincoinc.global.v1.AvalancheTxType
	76,  // 158: adamant.global.v1.CreateTransactionAvalancheSpecific.import_tx_specific:type_name -> adamant.global.v1.ImportTxSpecific
	77,  // 159: adamant.global.v1.CreateTransactionAvalancheSpecific.staking_specific:type_name -> adamant.global.v1.StakingSpecific
	172, // 160: adamant.global.v1.CreateTransactionNFTSpecific.nft_call_method:type_name -> gincoinc.global.v1.NFTCallMethod
	163, // 161: adamant.global.v1.SubstrateMultisigTransaction.multisig_call_type:type_name -> adamant.global.v1.SubstrateCallType
	160, // 162: adamant.global.v1.SubstrateMultisigTransaction.state:type_name -> adamant.global.v1.TransactionState
	154, // 163: adamant.global.v1.SubstrateMultisigTransaction.create_time:type_name -> google.protobuf.Timestamp
	154, // 164: adamant.global.v1.SubstrateMultisigTransaction.update_time:type_name -> google.protobuf.Timestamp
	164, // 165: adamant.global.v1.NemMultisigTransaction.tx_type:type_name -> gincoinc.global.v1.NemTransactionType
	160, // 166: adamant.global.v1.NemMultisigTransaction.state:type_name -> adamant.global.v1.TransactionState
	154, // 167: adamant.global.v1.NemMultisigTransaction.create_time:type_name -> google.protobuf.Timestamp
	154, // 168: adamant.global.v1.NemMultisigTransaction.update_time:type_name -> google.protobuf.Timestamp
	166, // 169: adamant.global.v1.SymbolMultisigTransaction.tx_type:type_name -> gincoinc.global.v1.SymbolTransactionType
	160, // 170: adamant.global.v1.SymbolMultisigTransaction.state:type_name -> adamant.global.v1.TransactionState
	154, // 171: adamant.global.v1.SymbolMultisigTransaction.create_time:type_name -> google.protobuf.Timestamp
	154, // 172: adamant.global.v1.SymbolMultisigTransaction.update_time:type_name -> google.protobuf.Timestamp
	149, // 173: adamant.global.v1.SignInfo.coin:type_name -> gincoinc.global.v1.Coin
	83,  // 174: adamant.global.v1.SignInfo.sign_tx_inputs:type_name -> adamant.global.v1.SignTxInput
	150, // 175: adamant.global.v1.SignInfo.network:type_name -> gincoinc.global.v1.Network
	149, // 176: adamant.global.v1.Transfer.coin:type_name -> gincoinc.global.v1.Coin
	150, // 177: adamant.global.v1.Transfer.network:type_name -> gincoinc.global.v1.Network
	173, // 178: adamant.global.v1.Transfer.transfer_type:type_name -> gincoinc.global.v1.TransferType
	174, // 179: adamant.global.v1.Transfer.state:type_name -> gincoinc.global.v1.TransactionState
	175, // 180: adamant.global.v1.Transfer.result:type_name -> gincoinc.global.v1.TransactionResult
	154, // 181: adamant.global.v1.Transfer.create_time:type_name -> google.protobuf.Timestamp
	154, // 182: adamant.global.v1.Transfer.update_time:type_name -> google.protobuf.Timestamp
	85,  // 183: adamant.global.v1.Transfer.cosmos_specific:type_name -> adamant.global.v1.TransferCosmosSpecific
	176, // 184: adamant.global.v1.Transfer.staking_event_type:type_name -> gincoinc.global.v1.StakingEventType
	168, // 185: adamant.global.v1.TransferCosmosSpecific.type:type_name -> gincoinc.global.v1.CosmosMsgType
	149, // 186: adamant.global.v1.UncheckedTransfer.coin:type_name -> gincoinc.global.v1.Coin
	173, // 187: adamant.global.v1.UncheckedTransfer.transfer_type:type_name -> gincoinc.global.v1.TransferType
	174, // 188: adamant.global.v1.UncheckedTransfer.state:type_name -> gincoinc.global.v1.TransactionState
	175, // 189: adamant.global.v1.UncheckedTransfer.result:type_name -> gincoinc.global.v1.TransactionResult
	154, // 190: adamant.global.v1.UncheckedTransfer.create_time:type_name -> google.protobuf.Timestamp
	154, // 191: adamant.global.v1.UncheckedTransfer.update_time:type_name -> google.protobuf.Timestamp
	177, // 192: adamant.global.v1.EventTriggeredMessage.event_triggered_message_type:type_name -> adamant.global.v1.EventTriggeredMessageType
	154, // 193: adamant.global.v1.EventTriggeredMessage.create_time:type_name -> google.protobuf.Timestamp
	154, // 194: adamant.global.v1.EventTriggeredMessage.update_time:type_name -> google.protobuf.Timestamp
	149, // 195: adamant.global.v1.Rate.coin:type_name -> gincoinc.global.v1.Coin
	140, // 196: adamant.global.v1.RateSnapshot.rates:type_name -> adamant.global.v1.RateSnapshot.RatesEntry
	149, // 197: adamant.global.v1.LabeledAddress.coin:type_name -> gincoinc.global.v1.Coin
	92,  // 198: adamant.global.v1.LabeledAddress.proposal:type_name -> adamant.global.v1.LabeledAddressProposal
	154, // 199: adamant.global.v1.LabeledAddress.create_time:type_name -> google.protobuf.Timestamp
	154, // 200: adamant.global.v1.LabeledAddress.update_time:type_name -> google.protobuf.Timestamp
	150, // 201: adamant.global.v1.LabeledAddress.network:type_name -> gincoinc.global.v1.Network
	149, // 202: adamant.global.v1.Whitelist.coin:type_name -> gincoinc.global.v1.Coin
	150, // 203: adamant.global.v1.Whitelist.network:type_name -> gincoinc.global.v1.Network
	91,  // 204: adamant.global.v1.Whitelist.addresses:type_name -> adamant.global.v1.LabeledAddress
	154, // 205: adamant.global.v1.Whitelist.create_time:type_name -> google.protobuf.Timestamp
	154, // 206: adamant.global.v1.Whitelist.update_time:type_name -> google.protobuf.Timestamp
	149, // 207: adamant.global.v1.TransferLimit.coin:type_name -> gincoinc.global.v1.Coin
	150, // 208: adamant.global.v1.TransferLimit.network:type_name -> gincoinc.global.v1.Network
	95,  // 209: adamant.global.v1.TransferLimit.proposal:type_name -> adamant.global.v1.TransferLimitProposal
	154, // 210: adamant.global.v1.TransferLimit.create_time:type_name -> google.protobuf.Timestamp
	154, // 211: adamant.global.v1.TransferLimit.update_time:type_name -> google.protobuf.Timestamp
	178, // 212: adamant.global.v1.Policy.policy_type:type_name -> adamant.global.v1.PolicyType
	149, // 213: adamant.global.v1.Policy.coin:type_name -> gincoinc.global.v1.Coin
	150, // 214: adamant.global.v1.Policy.network:type_name -> gincoinc.global.v1.Network
	93,  // 215: adamant.global.v1.Policy.whitelist:type_name -> adamant.global.v1.Whitelist
	94,  // 216: adamant.global.v1.Policy.transfer_limit:type_name -> adamant.global.v1.TransferLimit
	97,  // 217: adamant.global.v1.Policy.proposal:type_name -> adamant.global.v1.PolicyProposal
	154, // 218: adamant.global.v1.Policy.create_time:type_name -> google.protobuf.Timestamp
	154, // 219: adamant.global.v1.Policy.update_time:type_name -> google.protobuf.Timestamp
	93,  // 220: adamant.global.v1.PolicyProposal.proposed_whitelist:type_name -> adamant.global.v1.Whitelist
	149, // 221: adamant.global.v1.TotalBalanceByCoin.coin:type_name -> gincoinc.global.v1.Coin
	150, // 222: adamant.global.v1.TotalBalanceByCoin.network:type_name -> gincoinc.global.v1.Network
	141, // 223: adamant.global.v1.TotalBalance.total_balances:type_name -> adamant.global.v1.TotalBalance.TotalBalancesEntry
	154, // 224: adamant.global.v1.BalanceSnapshot.create_time:type_name -> google.protobuf.Timestamp
	142, // 225: adamant.global.v1.BalanceSnapshot.total_balances:type_name -> adamant.global.v1.BalanceSnapshot.TotalBalancesEntry
	143, // 226: adamant.global.v1.BalanceSnapshot.rates:type_name -> adamant.global.v1.BalanceSnapshot.RatesEntry
	144, // 227: adamant.global.v1.WalletBalanceSnapshotMap.wallet_balance_snapshot_map:type_name -> adamant.global.v1.WalletBalanceSnapshotMap.WalletBalanceSnapshotMapEntry
	103, // 228: adamant.global.v1.ListWalletBalanceSnapshots.wallet_balance_snapshots:type_name -> adamant.global.v1.WalletBalanceSnapshot
	154, // 229: adamant.global.v1.WalletBalanceSnapshot.create_time:type_name -> google.protobuf.Timestamp
	145, // 230: adamant.global.v1.TransferVolumeSnapshots.transfer_volume_snapshot_by_transfer_type:type_name -> adamant.global.v1.TransferVolumeSnapshots.TransferVolumeSnapshotByTransferTypeEntry
	106, // 231: adamant.global.v1.ListTransferVolumeSnapshots.transfer_volume_snapshots:type_name -> adamant.global.v1.TransferVolumeSnapshot
	154, // 232: adamant.global.v1.TransferVolumeSnapshot.target_time:type_name -> google.protobuf.Timestamp
	146, // 233: adamant.global.v1.TransferVolumeSnapshot.transfer_volume_by_coin:type_name -> adamant.global.v1.TransferVolumeSnapshot.TransferVolumeByCoinEntry
	149, // 234: adamant.global.v1.TransferVolume.coin:type_name -> gincoinc.global.v1.Coin
	150, // 235: adamant.global.v1.TransferVolume.network:type_name -> gincoinc.global.v1.Network
	173, // 236: adamant.global.v1.TransferVolume.transfer_type:type_name -> gincoinc.global.v1.TransferType
	147, // 237: adamant.global.v1.WalletTransferVolumeSnapshots.wallet_transfer_volume_snapshot_by_wallet_id:type_name -> adamant.global.v1.WalletTransferVolumeSnapshots.WalletTransferVolumeSnapshotByWalletIdEntry
	110, // 238: adamant.global.v1.ListWalletTransferVolumeSnapshots.wallet_transfer_volume_snapshots:type_name -> adamant.global.v1.WalletTransferVolumeSnapshot
	154, // 239: adamant.global.v1.WalletTransferVolumeSnapshot.target_time:type_name -> google.protobuf.Timestamp
	148, // 240: adamant.global.v1.WalletTransferVolumeSnapshot.wallet_transfer_volume_by_transfer_type:type_name -> adamant.global.v1.WalletTransferVolumeSnapshot.WalletTransferVolumeByTransferTypeEntry
	173, // 241: adamant.global.v1.WalletTransferVolume.transfer_type:type_name -> gincoinc.global.v1.TransferType
	149, // 242: adamant.global.v1.Confirmation.coin:type_name -> gincoinc.global.v1.Coin
	149, // 243: adamant.global.v1.WalletFlushSetting.coin:type_name -> gincoinc.global.v1.Coin
	150, // 244: adamant.global.v1.WalletFlushSetting.network:type_name -> gincoinc.global.v1.Network
	154, // 245: adamant.global.v1.WalletFlushSetting.create_time:type_name -> google.protobuf.Timestamp
	154, // 246: adamant.global.v1.WalletFlushSetting.update_time:type_name -> google.protobuf.Timestamp
	154, // 247: adamant.global.v1.CompensationFee.create_time:type_name -> google.protobuf.Timestamp
	149, // 248: adamant.global.v1.WalletGroup.coin:type_name -> gincoinc.global.v1.Coin
	150, // 249: adamant.global.v1.WalletGroup.network:type_name -> gincoinc.global.v1.Network
	1,   // 250: adamant.global.v1.WalletGroup.wallets:type_name -> adamant.global.v1.Wallet
	154, // 251: adamant.global.v1.WalletGroup.create_time:type_name -> google.protobuf.Timestamp
	154, // 252: adamant.global.v1.WalletGroup.update_time:type_name -> google.protobuf.Timestamp
	118, // 253: adamant.global.v1.RequestSignedInfo.signatures:type_name -> adamant.global.v1.RequestSignature
	179, // 254: adamant.global.v1.RequestTransferLimitEntry.transfer_limit_type:type_name -> adamant.global.v1.TransferLimitType
	149, // 255: adamant.global.v1.RequestRate.coin:type_name -> gincoinc.global.v1.Coin
	149, // 256: adamant.global.v1.CallerAddress.coin:type_name -> gincoinc.global.v1.Coin
	150, // 257: adamant.global.v1.CallerAddress.network:type_name -> gincoinc.global.v1.Network
	149, // 258: adamant.global.v1.FeeDepositAddress.coin:type_name -> gincoinc.global.v1.Coin
	150, // 259: adamant.global.v1.FeeDepositAddress.network:type_name -> gincoinc.global.v1.Network
	149, // 260: adamant.global.v1.StakingHistory.coin:type_name -> gincoinc.global.v1.Coin
	176, // 261: adamant.global.v1.StakingHistory.event_type:type_name -> gincoinc.global.v1.StakingEventType
	129, // 262: adamant.global.v1.StakingHistory.ethereum_specific:type_name -> adamant.global.v1.StakingHistoryEthereumSpecific
	130, // 263: adamant.global.v1.StakingHistory.avalanche_specific:type_name -> adamant.global.v1.StakingHistoryAvalancheSpecific
	154, // 264: adamant.global.v1.StakingHistory.create_time:type_name -> google.protobuf.Timestamp
	154, // 265: adamant.global.v1.StakingHistory.update_time:type_name -> google.protobuf.Timestamp
	154, // 266: adamant.global.v1.StakingHistoryEthereumSpecific.block_time:type_name -> google.protobuf.Timestamp
	180, // 267: adamant.global.v1.StakingHistoryEthereumSpecific.history_type:type_name -> gincoinc.global.v1.EthereumStakingHistoryType
	149, // 268: adamant.global.v1.StakingValidator.coin:type_name -> gincoinc.global.v1.Coin
	181, // 269: adamant.global.v1.StakingValidator.status:type_name -> gincoinc.global.v1.StakingValidatorStatus
	154, // 270: adamant.global.v1.StakingValidator.create_time:type_name -> google.protobuf.Timestamp
	154, // 271: adamant.global.v1.StakingValidator.update_time:type_name -> google.protobuf.Timestamp
	0,   // 272: adamant.global.v1.NFT.asset_type:type_name -> adamant.global.v1.AssetType
	149, // 273: adamant.global.v1.PreTransactionThreshold.coin:type_name -> gincoinc.global.v1.Coin
	150, // 274: adamant.global.v1.PreTransactionThreshold.network:type_name -> gincoinc.global.v1.Network
	134, // 275: adamant.global.v1.PreTransactionThreshold.proposal:type_name -> adamant.global.v1.PreTransactionThresholdProposal
	154, // 276: adamant.global.v1.PreTransactionThreshold.create_time:type_name -> google.protobuf.Timestamp
	154, // 277: adamant.global.v1.PreTransactionThreshold.update_time:type_name -> google.protobuf.Timestamp
	150, // 278: adamant.global.v1.BlacklistAddress.network:type_name -> gincoinc.global.v1.Network
	182, // 279: adamant.global.v1.BlacklistAddress.status:type_name -> adamant.global.v1.BlacklistAddressStatus
	154, // 280: adamant.global.v1.BlacklistAddress.create_time:type_name -> google.protobuf.Timestamp
	154, // 281: adamant.global.v1.BlacklistAddress.update_time:type_name -> google.protobuf.Timestamp
	136, // 282: adamant.global.v1.BlacklistAddress.applied_proposal:type_name -> adamant.global.v1.BlacklistAddressProposal
	136, // 283: adamant.global.v1.BlacklistAddress.pending_proposal:type_name -> adamant.global.v1.BlacklistAddressProposal
	137, // 284: adamant.global.v1.BlacklistAddressProposal.diff:type_name -> adamant.global.v1.BlacklistAddressDiff
	150, // 285: adamant.global.v1.BlacklistAddressFile.network:type_name -> gincoinc.global.v1.Network
	182, // 286: adamant.global.v1.BlacklistAddressFile.status:type_name -> adamant.global.v1.BlacklistAddressStatus
	154, // 287: adamant.global.v1.BlacklistAddressFile.create_time:type_name -> google.protobuf.Timestamp
	154, // 288: adamant.global.v1.BlacklistAddressFile.update_time:type_name -> google.protobuf.Timestamp
	88,  // 289: adamant.global.v1.RateSnapshot.RatesEntry.value:type_name -> adamant.global.v1.Rate
	98,  // 290: adamant.global.v1.TotalBalance.TotalBalancesEntry.value:type_name -> adamant.global.v1.TotalBalanceByCoin
	98,  // 291: adamant.global.v1.BalanceSnapshot.TotalBalancesEntry.value:type_name -> adamant.global.v1.TotalBalanceByCoin
	88,  // 292: adamant.global.v1.BalanceSnapshot.RatesEntry.value:type_name -> adamant.global.v1.Rate
	102, // 293: adamant.global.v1.WalletBalanceSnapshotMap.WalletBalanceSnapshotMapEntry.value:type_name -> adamant.global.v1.ListWalletBalanceSnapshots
	105, // 294: adamant.global.v1.TransferVolumeSnapshots.TransferVolumeSnapshotByTransferTypeEntry.value:type_name -> adamant.global.v1.ListTransferVolumeSnapshots
	107, // 295: adamant.global.v1.TransferVolumeSnapshot.TransferVolumeByCoinEntry.value:type_name -> adamant.global.v1.TransferVolume
	109, // 296: adamant.global.v1.WalletTransferVolumeSnapshots.WalletTransferVolumeSnapshotByWalletIdEntry.value:type_name -> adamant.global.v1.ListWalletTransferVolumeSnapshots
	111, // 297: adamant.global.v1.WalletTransferVolumeSnapshot.WalletTransferVolumeByTransferTypeEntry.value:type_name -> adamant.global.v1.WalletTransferVolume
	298, // [298:298] is the sub-list for method output_type
	298, // [298:298] is the sub-list for method input_type
	298, // [298:298] is the sub-list for extension type_name
	298, // [298:298] is the sub-list for extension extendee
	0,   // [0:298] is the sub-list for field type_name
}

func init() { file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_init() }
func file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_init() {
	if File_gincoinc_adamant_global_v1_adamantglobalv1_model_proto != nil {
		return
	}
	file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletWithoutBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTOwnership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressWithoutBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushedAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumFeeAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressWithBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreTransactionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnconfirmedTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UTXO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoUTXOSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvalanchePlatformChainUTXOSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoCustomToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoinSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LitecoinSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DogecoinSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoincashSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XrpSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TronSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C0BanSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StellarSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardanoSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstrateSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonacoinSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NemSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IOSTSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolygonSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KlaytnSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvalancheSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OasysSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XdcSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CosmosSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumClassicSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgorandSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HederaSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JapanOpenChainSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BNBSmartChainSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlareSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArbitrumOneSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtomicTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvalanchePlatformChainSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TonSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvalancheTxInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvalancheTxOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuorumSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionSubstrateSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionWalletConnectSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionNemSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionIOSTSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionSymbolSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionEthereumSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionCosmosSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionAlgorandSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionHederaSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionSolanaSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionAptosSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionAvalancheSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionTonSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionNFTSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportTxSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectedUTXO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstrateMultisigTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NemMultisigTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolMultisigTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignTxInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferCosmosSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UncheckedTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTriggeredMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deactivatability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabeledAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabeledAddressProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Whitelist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferLimitProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalBalanceByCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletBalanceSnapshotMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletBalanceSnapshots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletBalanceSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferVolumeSnapshots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransferVolumeSnapshots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferVolumeSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletTransferVolumeSnapshots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletTransferVolumeSnapshots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletTransferVolumeSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletTransferVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Confirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletFlushSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompensationFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTxOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSignedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTransferLimitEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstrateChildAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolChildAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IOSTChildAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IOSTCallerAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallerAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeDepositAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CosmosDelegation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingHistoryEthereumSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingHistoryAvalancheSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingValidator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreTransactionThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreTransactionThresholdProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlacklistAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlacklistAddressProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlacklistAddressDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlacklistAddressFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionSuiSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[66].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[71].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[72].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[74].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes[134].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   148,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_goTypes,
		DependencyIndexes: file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_depIdxs,
		EnumInfos:         file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_enumTypes,
		MessageInfos:      file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_msgTypes,
	}.Build()
	File_gincoinc_adamant_global_v1_adamantglobalv1_model_proto = out.File
	file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_rawDesc = nil
	file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_goTypes = nil
	file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_depIdxs = nil
}
