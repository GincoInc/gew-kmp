// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: gincoinc/adamant/global/v1/adamantglobalv1/global_api.proto

package adamantglobalv1

import (
	gincoincglobalv1 "github.com/GincoInc/gew-kmp/gen/gincoinc/global/v1/gincoincglobalv1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApproveWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *ApproveWalletRequest) Reset() {
	*x = ApproveWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveWalletRequest) ProtoMessage() {}

func (x *ApproveWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveWalletRequest.ProtoReflect.Descriptor instead.
func (*ApproveWalletRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{0}
}

func (x *ApproveWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type ApproveTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *ApproveTransactionRequest) Reset() {
	*x = ApproveTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveTransactionRequest) ProtoMessage() {}

func (x *ApproveTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveTransactionRequest.ProtoReflect.Descriptor instead.
func (*ApproveTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{1}
}

func (x *ApproveTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ApproveTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type CreateWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletName string                `protobuf:"bytes,1,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	Coin       gincoincglobalv1.Coin `protobuf:"varint,2,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	// optional
	Network     *gincoincglobalv1.Network    `protobuf:"varint,13,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
	WalletType  WalletType                   `protobuf:"varint,3,opt,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`
	AddressType gincoincglobalv1.AddressType `protobuf:"varint,4,opt,name=address_type,json=addressType,proto3,enum=gincoinc.global.v1.AddressType" json:"address_type,omitempty"`
	// and must be m <= n
	M                     uint32   `protobuf:"varint,5,opt,name=m,proto3" json:"m,omitempty"`
	N                     uint32   `protobuf:"varint,6,opt,name=n,proto3" json:"n,omitempty"`
	Members               []string `protobuf:"bytes,7,rep,name=members,proto3" json:"members,omitempty"`
	RequiredApprovalCount uint32   `protobuf:"varint,10,opt,name=required_approval_count,json=requiredApprovalCount,proto3" json:"required_approval_count,omitempty"`
	// optional
	PolicyId string `protobuf:"bytes,8,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// required when create receive only wallet
	DestinationWalletId string `protobuf:"bytes,9,opt,name=destination_wallet_id,json=destinationWalletId,proto3" json:"destination_wallet_id,omitempty"`
	WatchOnly           bool   `protobuf:"varint,11,opt,name=watch_only,json=watchOnly,proto3" json:"watch_only,omitempty"`
	// optional
	InheritWalletId string `protobuf:"bytes,12,opt,name=inherit_wallet_id,json=inheritWalletId,proto3" json:"inherit_wallet_id,omitempty"`
}

func (x *CreateWalletRequest) Reset() {
	*x = CreateWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletRequest) ProtoMessage() {}

func (x *CreateWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletRequest.ProtoReflect.Descriptor instead.
func (*CreateWalletRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{2}
}

func (x *CreateWalletRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *CreateWalletRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *CreateWalletRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *CreateWalletRequest) GetWalletType() WalletType {
	if x != nil {
		return x.WalletType
	}
	return WalletType_WALLET_TYPE_INVALID
}

func (x *CreateWalletRequest) GetAddressType() gincoincglobalv1.AddressType {
	if x != nil {
		return x.AddressType
	}
	return gincoincglobalv1.AddressType(0)
}

func (x *CreateWalletRequest) GetM() uint32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *CreateWalletRequest) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *CreateWalletRequest) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CreateWalletRequest) GetRequiredApprovalCount() uint32 {
	if x != nil {
		return x.RequiredApprovalCount
	}
	return 0
}

func (x *CreateWalletRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *CreateWalletRequest) GetDestinationWalletId() string {
	if x != nil {
		return x.DestinationWalletId
	}
	return ""
}

func (x *CreateWalletRequest) GetWatchOnly() bool {
	if x != nil {
		return x.WatchOnly
	}
	return false
}

func (x *CreateWalletRequest) GetInheritWalletId() string {
	if x != nil {
		return x.InheritWalletId
	}
	return ""
}

type CreateWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *CreateWalletResponse) Reset() {
	*x = CreateWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletResponse) ProtoMessage() {}

func (x *CreateWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletResponse.ProtoReflect.Descriptor instead.
func (*CreateWalletResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{3}
}

func (x *CreateWalletResponse) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type GetWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"` // The id of wallet
}

func (x *GetWalletRequest) Reset() {
	*x = GetWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletRequest) ProtoMessage() {}

func (x *GetWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletRequest.ProtoReflect.Descriptor instead.
func (*GetWalletRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{4}
}

func (x *GetWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type BatchGetWalletsWithoutBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIds []string `protobuf:"bytes,1,rep,name=wallet_ids,json=walletIds,proto3" json:"wallet_ids,omitempty"`
}

func (x *BatchGetWalletsWithoutBalanceRequest) Reset() {
	*x = BatchGetWalletsWithoutBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetWalletsWithoutBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetWalletsWithoutBalanceRequest) ProtoMessage() {}

func (x *BatchGetWalletsWithoutBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetWalletsWithoutBalanceRequest.ProtoReflect.Descriptor instead.
func (*BatchGetWalletsWithoutBalanceRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{5}
}

func (x *BatchGetWalletsWithoutBalanceRequest) GetWalletIds() []string {
	if x != nil {
		return x.WalletIds
	}
	return nil
}

type BatchGetWalletsWithoutBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallets []*WalletWithoutBalance `protobuf:"bytes,1,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (x *BatchGetWalletsWithoutBalanceResponse) Reset() {
	*x = BatchGetWalletsWithoutBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetWalletsWithoutBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetWalletsWithoutBalanceResponse) ProtoMessage() {}

func (x *BatchGetWalletsWithoutBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetWalletsWithoutBalanceResponse.ProtoReflect.Descriptor instead.
func (*BatchGetWalletsWithoutBalanceResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{6}
}

func (x *BatchGetWalletsWithoutBalanceResponse) GetWallets() []*WalletWithoutBalance {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type CancelWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *CancelWalletRequest) Reset() {
	*x = CancelWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelWalletRequest) ProtoMessage() {}

func (x *CancelWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelWalletRequest.ProtoReflect.Descriptor instead.
func (*CancelWalletRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{7}
}

func (x *CancelWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type ArchiveWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *ArchiveWalletRequest) Reset() {
	*x = ArchiveWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveWalletRequest) ProtoMessage() {}

func (x *ArchiveWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveWalletRequest.ProtoReflect.Descriptor instead.
func (*ArchiveWalletRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{8}
}

func (x *ArchiveWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type UnArchiveWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *UnArchiveWalletRequest) Reset() {
	*x = UnArchiveWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnArchiveWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnArchiveWalletRequest) ProtoMessage() {}

func (x *UnArchiveWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnArchiveWalletRequest.ProtoReflect.Descriptor instead.
func (*UnArchiveWalletRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{9}
}

func (x *UnArchiveWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type ListWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListWalletsRequest) Reset() {
	*x = ListWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletsRequest) ProtoMessage() {}

func (x *ListWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletsRequest.ProtoReflect.Descriptor instead.
func (*ListWalletsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{10}
}

func (x *ListWalletsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListWalletsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListWalletsByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType ListFilterType `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	// optional
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// optional
	WalletName string `protobuf:"bytes,3,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// optional
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// optional
	WatchOnly bool `protobuf:"varint,10,opt,name=watch_only,json=watchOnly,proto3" json:"watch_only,omitempty"`
	// optional
	OnlyIsStakingAvailable *bool `protobuf:"varint,11,opt,name=only_is_staking_available,json=onlyIsStakingAvailable,proto3,oneof" json:"only_is_staking_available,omitempty"`
	// optional
	Coin gincoincglobalv1.Coin `protobuf:"varint,5,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	// optional
	Network     *gincoincglobalv1.Network `protobuf:"varint,12,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
	WalletType  []WalletType              `protobuf:"varint,6,rep,packed,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`
	WalletState []WalletState             `protobuf:"varint,7,rep,packed,name=wallet_state,json=walletState,proto3,enum=adamant.global.v1.WalletState" json:"wallet_state,omitempty"`
	// optional
	PageSize uint32 `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// optional
	PageToken string `protobuf:"bytes,9,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListWalletsByFilterRequest) Reset() {
	*x = ListWalletsByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletsByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletsByFilterRequest) ProtoMessage() {}

func (x *ListWalletsByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletsByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListWalletsByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{11}
}

func (x *ListWalletsByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListWalletsByFilterRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListWalletsByFilterRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *ListWalletsByFilterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ListWalletsByFilterRequest) GetWatchOnly() bool {
	if x != nil {
		return x.WatchOnly
	}
	return false
}

func (x *ListWalletsByFilterRequest) GetOnlyIsStakingAvailable() bool {
	if x != nil && x.OnlyIsStakingAvailable != nil {
		return *x.OnlyIsStakingAvailable
	}
	return false
}

func (x *ListWalletsByFilterRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *ListWalletsByFilterRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *ListWalletsByFilterRequest) GetWalletType() []WalletType {
	if x != nil {
		return x.WalletType
	}
	return nil
}

func (x *ListWalletsByFilterRequest) GetWalletState() []WalletState {
	if x != nil {
		return x.WalletState
	}
	return nil
}

func (x *ListWalletsByFilterRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListWalletsByFilterRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListWalletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallets       []*Wallet `protobuf:"bytes,1,rep,name=wallets,proto3" json:"wallets,omitempty"`
	NextPageToken string    `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListWalletsResponse) Reset() {
	*x = ListWalletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletsResponse) ProtoMessage() {}

func (x *ListWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletsResponse.ProtoReflect.Descriptor instead.
func (*ListWalletsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{12}
}

func (x *ListWalletsResponse) GetWallets() []*Wallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

func (x *ListWalletsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListBaseWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBaseWalletsRequest) Reset() {
	*x = ListBaseWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBaseWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBaseWalletsRequest) ProtoMessage() {}

func (x *ListBaseWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBaseWalletsRequest.ProtoReflect.Descriptor instead.
func (*ListBaseWalletsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{13}
}

type ListBaseWalletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallets []*WalletWithoutBalance `protobuf:"bytes,1,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (x *ListBaseWalletsResponse) Reset() {
	*x = ListBaseWalletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBaseWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBaseWalletsResponse) ProtoMessage() {}

func (x *ListBaseWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBaseWalletsResponse.ProtoReflect.Descriptor instead.
func (*ListBaseWalletsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{14}
}

func (x *ListBaseWalletsResponse) GetWallets() []*WalletWithoutBalance {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type ListStakingWalletsByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType ListFilterType `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	// optional
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// optional
	WalletName string `protobuf:"bytes,3,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// optional
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// optional
	Coin        gincoincglobalv1.Coin `protobuf:"varint,5,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	WalletType  []WalletType          `protobuf:"varint,6,rep,packed,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`
	WalletState []WalletState         `protobuf:"varint,7,rep,packed,name=wallet_state,json=walletState,proto3,enum=adamant.global.v1.WalletState" json:"wallet_state,omitempty"`
	// optional
	PageSize uint32 `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// optional
	PageToken string `protobuf:"bytes,9,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListStakingWalletsByFilterRequest) Reset() {
	*x = ListStakingWalletsByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStakingWalletsByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStakingWalletsByFilterRequest) ProtoMessage() {}

func (x *ListStakingWalletsByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStakingWalletsByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListStakingWalletsByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{15}
}

func (x *ListStakingWalletsByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListStakingWalletsByFilterRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListStakingWalletsByFilterRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *ListStakingWalletsByFilterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ListStakingWalletsByFilterRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *ListStakingWalletsByFilterRequest) GetWalletType() []WalletType {
	if x != nil {
		return x.WalletType
	}
	return nil
}

func (x *ListStakingWalletsByFilterRequest) GetWalletState() []WalletState {
	if x != nil {
		return x.WalletState
	}
	return nil
}

func (x *ListStakingWalletsByFilterRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListStakingWalletsByFilterRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListStakingWalletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakingWallets []*StakingWallet `protobuf:"bytes,1,rep,name=staking_wallets,json=stakingWallets,proto3" json:"staking_wallets,omitempty"`
	NextPageToken  string           `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListStakingWalletsResponse) Reset() {
	*x = ListStakingWalletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStakingWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStakingWalletsResponse) ProtoMessage() {}

func (x *ListStakingWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStakingWalletsResponse.ProtoReflect.Descriptor instead.
func (*ListStakingWalletsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{16}
}

func (x *ListStakingWalletsResponse) GetStakingWallets() []*StakingWallet {
	if x != nil {
		return x.StakingWallets
	}
	return nil
}

func (x *ListStakingWalletsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListNFTWalletsByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType ListFilterType `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	// optional
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// optional
	WalletName string `protobuf:"bytes,3,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// optional
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// optional
	Coin        gincoincglobalv1.Coin `protobuf:"varint,5,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	WalletType  []WalletType          `protobuf:"varint,6,rep,packed,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`
	WalletState []WalletState         `protobuf:"varint,7,rep,packed,name=wallet_state,json=walletState,proto3,enum=adamant.global.v1.WalletState" json:"wallet_state,omitempty"`
	// optional
	PageSize uint32 `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// optional
	PageToken string `protobuf:"bytes,9,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListNFTWalletsByFilterRequest) Reset() {
	*x = ListNFTWalletsByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNFTWalletsByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNFTWalletsByFilterRequest) ProtoMessage() {}

func (x *ListNFTWalletsByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNFTWalletsByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListNFTWalletsByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{17}
}

func (x *ListNFTWalletsByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListNFTWalletsByFilterRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListNFTWalletsByFilterRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *ListNFTWalletsByFilterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ListNFTWalletsByFilterRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *ListNFTWalletsByFilterRequest) GetWalletType() []WalletType {
	if x != nil {
		return x.WalletType
	}
	return nil
}

func (x *ListNFTWalletsByFilterRequest) GetWalletState() []WalletState {
	if x != nil {
		return x.WalletState
	}
	return nil
}

func (x *ListNFTWalletsByFilterRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNFTWalletsByFilterRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListNFTWalletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftWallets    []*NFTWallet `protobuf:"bytes,1,rep,name=nft_wallets,json=nftWallets,proto3" json:"nft_wallets,omitempty"`
	NextPageToken string       `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNFTWalletsResponse) Reset() {
	*x = ListNFTWalletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNFTWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNFTWalletsResponse) ProtoMessage() {}

func (x *ListNFTWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNFTWalletsResponse.ProtoReflect.Descriptor instead.
func (*ListNFTWalletsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{18}
}

func (x *ListNFTWalletsResponse) GetNftWallets() []*NFTWallet {
	if x != nil {
		return x.NftWallets
	}
	return nil
}

func (x *ListNFTWalletsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateWalletNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateWalletNameRequest) Reset() {
	*x = UpdateWalletNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWalletNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWalletNameRequest) ProtoMessage() {}

func (x *UpdateWalletNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWalletNameRequest.ProtoReflect.Descriptor instead.
func (*UpdateWalletNameRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateWalletNameRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *UpdateWalletNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateWalletValidationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId                 string   `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	NewValidatorIds          []string `protobuf:"bytes,2,rep,name=new_validator_ids,json=newValidatorIds,proto3" json:"new_validator_ids,omitempty"`
	NewRequiredApprovalCount uint32   `protobuf:"varint,3,opt,name=new_required_approval_count,json=newRequiredApprovalCount,proto3" json:"new_required_approval_count,omitempty"`
}

func (x *UpdateWalletValidationRequest) Reset() {
	*x = UpdateWalletValidationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWalletValidationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWalletValidationRequest) ProtoMessage() {}

func (x *UpdateWalletValidationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWalletValidationRequest.ProtoReflect.Descriptor instead.
func (*UpdateWalletValidationRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateWalletValidationRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *UpdateWalletValidationRequest) GetNewValidatorIds() []string {
	if x != nil {
		return x.NewValidatorIds
	}
	return nil
}

func (x *UpdateWalletValidationRequest) GetNewRequiredApprovalCount() uint32 {
	if x != nil {
		return x.NewRequiredApprovalCount
	}
	return 0
}

type UpdateWalletPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	PolicyId string `protobuf:"bytes,2,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
}

func (x *UpdateWalletPolicyRequest) Reset() {
	*x = UpdateWalletPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWalletPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWalletPolicyRequest) ProtoMessage() {}

func (x *UpdateWalletPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWalletPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateWalletPolicyRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateWalletPolicyRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *UpdateWalletPolicyRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type ReviewWalletProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Approve  bool   `protobuf:"varint,2,opt,name=approve,proto3" json:"approve,omitempty"`
}

func (x *ReviewWalletProposalRequest) Reset() {
	*x = ReviewWalletProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewWalletProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewWalletProposalRequest) ProtoMessage() {}

func (x *ReviewWalletProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewWalletProposalRequest.ProtoReflect.Descriptor instead.
func (*ReviewWalletProposalRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{22}
}

func (x *ReviewWalletProposalRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ReviewWalletProposalRequest) GetApprove() bool {
	if x != nil {
		return x.Approve
	}
	return false
}

type ExistsWalletByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ExistsWalletByNameRequest) Reset() {
	*x = ExistsWalletByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsWalletByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsWalletByNameRequest) ProtoMessage() {}

func (x *ExistsWalletByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsWalletByNameRequest.ProtoReflect.Descriptor instead.
func (*ExistsWalletByNameRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{23}
}

func (x *ExistsWalletByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ExistsWalletByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *ExistsWalletByNameResponse) Reset() {
	*x = ExistsWalletByNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsWalletByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsWalletByNameResponse) ProtoMessage() {}

func (x *ExistsWalletByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsWalletByNameResponse.ProtoReflect.Descriptor instead.
func (*ExistsWalletByNameResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{24}
}

func (x *ExistsWalletByNameResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type ExistsWalletGroupByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ExistsWalletGroupByNameRequest) Reset() {
	*x = ExistsWalletGroupByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsWalletGroupByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsWalletGroupByNameRequest) ProtoMessage() {}

func (x *ExistsWalletGroupByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsWalletGroupByNameRequest.ProtoReflect.Descriptor instead.
func (*ExistsWalletGroupByNameRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{25}
}

func (x *ExistsWalletGroupByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ExistsWalletGroupByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *ExistsWalletGroupByNameResponse) Reset() {
	*x = ExistsWalletGroupByNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsWalletGroupByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsWalletGroupByNameResponse) ProtoMessage() {}

func (x *ExistsWalletGroupByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsWalletGroupByNameResponse.ProtoReflect.Descriptor instead.
func (*ExistsWalletGroupByNameResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{26}
}

func (x *ExistsWalletGroupByNameResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type ExistsEnableWalletByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ExistsEnableWalletByNameRequest) Reset() {
	*x = ExistsEnableWalletByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsEnableWalletByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsEnableWalletByNameRequest) ProtoMessage() {}

func (x *ExistsEnableWalletByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsEnableWalletByNameRequest.ProtoReflect.Descriptor instead.
func (*ExistsEnableWalletByNameRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{27}
}

func (x *ExistsEnableWalletByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ExistsEnableWalletByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *ExistsEnableWalletByNameResponse) Reset() {
	*x = ExistsEnableWalletByNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsEnableWalletByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsEnableWalletByNameResponse) ProtoMessage() {}

func (x *ExistsEnableWalletByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsEnableWalletByNameResponse.ProtoReflect.Descriptor instead.
func (*ExistsEnableWalletByNameResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{28}
}

func (x *ExistsEnableWalletByNameResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type FlushBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *FlushBalanceRequest) Reset() {
	*x = FlushBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushBalanceRequest) ProtoMessage() {}

func (x *FlushBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushBalanceRequest.ProtoReflect.Descriptor instead.
func (*FlushBalanceRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{29}
}

func (x *FlushBalanceRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type FlushBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlushedAddresses []*FlushedAddress `protobuf:"bytes,1,rep,name=flushed_addresses,json=flushedAddresses,proto3" json:"flushed_addresses,omitempty"`
}

func (x *FlushBalanceResponse) Reset() {
	*x = FlushBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushBalanceResponse) ProtoMessage() {}

func (x *FlushBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushBalanceResponse.ProtoReflect.Descriptor instead.
func (*FlushBalanceResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{30}
}

func (x *FlushBalanceResponse) GetFlushedAddresses() []*FlushedAddress {
	if x != nil {
		return x.FlushedAddresses
	}
	return nil
}

type ListWalletFlushSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletFlushSettings []*WalletFlushSetting `protobuf:"bytes,1,rep,name=wallet_flush_settings,json=walletFlushSettings,proto3" json:"wallet_flush_settings,omitempty"`
}

func (x *ListWalletFlushSettingsResponse) Reset() {
	*x = ListWalletFlushSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletFlushSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletFlushSettingsResponse) ProtoMessage() {}

func (x *ListWalletFlushSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletFlushSettingsResponse.ProtoReflect.Descriptor instead.
func (*ListWalletFlushSettingsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{31}
}

func (x *ListWalletFlushSettingsResponse) GetWalletFlushSettings() []*WalletFlushSetting {
	if x != nil {
		return x.WalletFlushSettings
	}
	return nil
}

type UpdateWalletFlushSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin                gincoincglobalv1.Coin     `protobuf:"varint,1,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	Network             *gincoincglobalv1.Network `protobuf:"varint,3,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
	DestinationWalletId string                    `protobuf:"bytes,2,opt,name=destination_wallet_id,json=destinationWalletId,proto3" json:"destination_wallet_id,omitempty"`
	FlushThreshold      float64                   `protobuf:"fixed64,4,opt,name=flush_threshold,json=flushThreshold,proto3" json:"flush_threshold,omitempty"`
}

func (x *UpdateWalletFlushSettingRequest) Reset() {
	*x = UpdateWalletFlushSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWalletFlushSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWalletFlushSettingRequest) ProtoMessage() {}

func (x *UpdateWalletFlushSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWalletFlushSettingRequest.ProtoReflect.Descriptor instead.
func (*UpdateWalletFlushSettingRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateWalletFlushSettingRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *UpdateWalletFlushSettingRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *UpdateWalletFlushSettingRequest) GetDestinationWalletId() string {
	if x != nil {
		return x.DestinationWalletId
	}
	return ""
}

func (x *UpdateWalletFlushSettingRequest) GetFlushThreshold() float64 {
	if x != nil {
		return x.FlushThreshold
	}
	return 0
}

type ListCompensationFeeHistoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ListCompensationFeeHistoriesRequest) Reset() {
	*x = ListCompensationFeeHistoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompensationFeeHistoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompensationFeeHistoriesRequest) ProtoMessage() {}

func (x *ListCompensationFeeHistoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompensationFeeHistoriesRequest.ProtoReflect.Descriptor instead.
func (*ListCompensationFeeHistoriesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{33}
}

func (x *ListCompensationFeeHistoriesRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListCompensationFeeHistoriesRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ListCompensationFeeHistoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompensationFees []*CompensationFee `protobuf:"bytes,1,rep,name=compensation_fees,json=compensationFees,proto3" json:"compensation_fees,omitempty"`
}

func (x *ListCompensationFeeHistoriesResponse) Reset() {
	*x = ListCompensationFeeHistoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompensationFeeHistoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompensationFeeHistoriesResponse) ProtoMessage() {}

func (x *ListCompensationFeeHistoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompensationFeeHistoriesResponse.ProtoReflect.Descriptor instead.
func (*ListCompensationFeeHistoriesResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{34}
}

func (x *ListCompensationFeeHistoriesResponse) GetCompensationFees() []*CompensationFee {
	if x != nil {
		return x.CompensationFees
	}
	return nil
}

type ListUTXOsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *ListUTXOsRequest) Reset() {
	*x = ListUTXOsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUTXOsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUTXOsRequest) ProtoMessage() {}

func (x *ListUTXOsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUTXOsRequest.ProtoReflect.Descriptor instead.
func (*ListUTXOsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{35}
}

func (x *ListUTXOsRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type ListUTXOsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Utxos []*UTXO `protobuf:"bytes,1,rep,name=utxos,proto3" json:"utxos,omitempty"`
}

func (x *ListUTXOsResponse) Reset() {
	*x = ListUTXOsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUTXOsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUTXOsResponse) ProtoMessage() {}

func (x *ListUTXOsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUTXOsResponse.ProtoReflect.Descriptor instead.
func (*ListUTXOsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{36}
}

func (x *ListUTXOsResponse) GetUtxos() []*UTXO {
	if x != nil {
		return x.Utxos
	}
	return nil
}

type UpdateShouldCheckRemittanceFlagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId              string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	ShouldCheckRemittance bool   `protobuf:"varint,2,opt,name=should_check_remittance,json=shouldCheckRemittance,proto3" json:"should_check_remittance,omitempty"`
}

func (x *UpdateShouldCheckRemittanceFlagRequest) Reset() {
	*x = UpdateShouldCheckRemittanceFlagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateShouldCheckRemittanceFlagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShouldCheckRemittanceFlagRequest) ProtoMessage() {}

func (x *UpdateShouldCheckRemittanceFlagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShouldCheckRemittanceFlagRequest.ProtoReflect.Descriptor instead.
func (*UpdateShouldCheckRemittanceFlagRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateShouldCheckRemittanceFlagRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *UpdateShouldCheckRemittanceFlagRequest) GetShouldCheckRemittance() bool {
	if x != nil {
		return x.ShouldCheckRemittance
	}
	return false
}

type CreateWalletGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Coin      gincoincglobalv1.Coin     `protobuf:"varint,2,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	Network   *gincoincglobalv1.Network `protobuf:"varint,5,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
	WalletIds []string                  `protobuf:"bytes,3,rep,name=wallet_ids,json=walletIds,proto3" json:"wallet_ids,omitempty"`
	WatchOnly bool                      `protobuf:"varint,4,opt,name=watch_only,json=watchOnly,proto3" json:"watch_only,omitempty"`
}

func (x *CreateWalletGroupRequest) Reset() {
	*x = CreateWalletGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletGroupRequest) ProtoMessage() {}

func (x *CreateWalletGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateWalletGroupRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{38}
}

func (x *CreateWalletGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateWalletGroupRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *CreateWalletGroupRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *CreateWalletGroupRequest) GetWalletIds() []string {
	if x != nil {
		return x.WalletIds
	}
	return nil
}

func (x *CreateWalletGroupRequest) GetWatchOnly() bool {
	if x != nil {
		return x.WatchOnly
	}
	return false
}

type CreateWalletGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletGroupId string `protobuf:"bytes,1,opt,name=wallet_group_id,json=walletGroupId,proto3" json:"wallet_group_id,omitempty"`
}

func (x *CreateWalletGroupResponse) Reset() {
	*x = CreateWalletGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletGroupResponse) ProtoMessage() {}

func (x *CreateWalletGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateWalletGroupResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{39}
}

func (x *CreateWalletGroupResponse) GetWalletGroupId() string {
	if x != nil {
		return x.WalletGroupId
	}
	return ""
}

type UpdateWalletGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletGroupId string   `protobuf:"bytes,1,opt,name=wallet_group_id,json=walletGroupId,proto3" json:"wallet_group_id,omitempty"`
	WalletIds     []string `protobuf:"bytes,2,rep,name=wallet_ids,json=walletIds,proto3" json:"wallet_ids,omitempty"`
}

func (x *UpdateWalletGroupRequest) Reset() {
	*x = UpdateWalletGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWalletGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWalletGroupRequest) ProtoMessage() {}

func (x *UpdateWalletGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWalletGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateWalletGroupRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateWalletGroupRequest) GetWalletGroupId() string {
	if x != nil {
		return x.WalletGroupId
	}
	return ""
}

func (x *UpdateWalletGroupRequest) GetWalletIds() []string {
	if x != nil {
		return x.WalletIds
	}
	return nil
}

type UpdateWalletGroupNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletGroupId string `protobuf:"bytes,1,opt,name=wallet_group_id,json=walletGroupId,proto3" json:"wallet_group_id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateWalletGroupNameRequest) Reset() {
	*x = UpdateWalletGroupNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWalletGroupNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWalletGroupNameRequest) ProtoMessage() {}

func (x *UpdateWalletGroupNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWalletGroupNameRequest.ProtoReflect.Descriptor instead.
func (*UpdateWalletGroupNameRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateWalletGroupNameRequest) GetWalletGroupId() string {
	if x != nil {
		return x.WalletGroupId
	}
	return ""
}

func (x *UpdateWalletGroupNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetWalletGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletGroupId string `protobuf:"bytes,1,opt,name=wallet_group_id,json=walletGroupId,proto3" json:"wallet_group_id,omitempty"`
}

func (x *GetWalletGroupRequest) Reset() {
	*x = GetWalletGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletGroupRequest) ProtoMessage() {}

func (x *GetWalletGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletGroupRequest.ProtoReflect.Descriptor instead.
func (*GetWalletGroupRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{42}
}

func (x *GetWalletGroupRequest) GetWalletGroupId() string {
	if x != nil {
		return x.WalletGroupId
	}
	return ""
}

type ListWalletGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatchOnly bool   `protobuf:"varint,3,opt,name=watch_only,json=watchOnly,proto3" json:"watch_only,omitempty"`
	PageSize  uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListWalletGroupsRequest) Reset() {
	*x = ListWalletGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletGroupsRequest) ProtoMessage() {}

func (x *ListWalletGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListWalletGroupsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{43}
}

func (x *ListWalletGroupsRequest) GetWatchOnly() bool {
	if x != nil {
		return x.WatchOnly
	}
	return false
}

func (x *ListWalletGroupsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListWalletGroupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListWalletGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletGroups  []*WalletGroup `protobuf:"bytes,1,rep,name=wallet_groups,json=walletGroups,proto3" json:"wallet_groups,omitempty"`
	NextPageToken string         `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListWalletGroupsResponse) Reset() {
	*x = ListWalletGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletGroupsResponse) ProtoMessage() {}

func (x *ListWalletGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListWalletGroupsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{44}
}

func (x *ListWalletGroupsResponse) GetWalletGroups() []*WalletGroup {
	if x != nil {
		return x.WalletGroups
	}
	return nil
}

func (x *ListWalletGroupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateDestinationWalletIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId            string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	DestinationWalletId string `protobuf:"bytes,2,opt,name=destination_wallet_id,json=destinationWalletId,proto3" json:"destination_wallet_id,omitempty"`
}

func (x *UpdateDestinationWalletIDRequest) Reset() {
	*x = UpdateDestinationWalletIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDestinationWalletIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDestinationWalletIDRequest) ProtoMessage() {}

func (x *UpdateDestinationWalletIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDestinationWalletIDRequest.ProtoReflect.Descriptor instead.
func (*UpdateDestinationWalletIDRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateDestinationWalletIDRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *UpdateDestinationWalletIDRequest) GetDestinationWalletId() string {
	if x != nil {
		return x.DestinationWalletId
	}
	return ""
}

type EnableUTXORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TxId     string `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Vout     uint32 `protobuf:"varint,3,opt,name=vout,proto3" json:"vout,omitempty"`
}

func (x *EnableUTXORequest) Reset() {
	*x = EnableUTXORequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableUTXORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableUTXORequest) ProtoMessage() {}

func (x *EnableUTXORequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableUTXORequest.ProtoReflect.Descriptor instead.
func (*EnableUTXORequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{46}
}

func (x *EnableUTXORequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *EnableUTXORequest) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *EnableUTXORequest) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

type DisableUTXORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TxId     string `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Vout     uint32 `protobuf:"varint,3,opt,name=vout,proto3" json:"vout,omitempty"`
}

func (x *DisableUTXORequest) Reset() {
	*x = DisableUTXORequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableUTXORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableUTXORequest) ProtoMessage() {}

func (x *DisableUTXORequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableUTXORequest.ProtoReflect.Descriptor instead.
func (*DisableUTXORequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{47}
}

func (x *DisableUTXORequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *DisableUTXORequest) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *DisableUTXORequest) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

type UpdateWalletIsStakingAvailableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId           string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	IsStakingAvailable bool   `protobuf:"varint,2,opt,name=is_staking_available,json=isStakingAvailable,proto3" json:"is_staking_available,omitempty"`
}

func (x *UpdateWalletIsStakingAvailableRequest) Reset() {
	*x = UpdateWalletIsStakingAvailableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWalletIsStakingAvailableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWalletIsStakingAvailableRequest) ProtoMessage() {}

func (x *UpdateWalletIsStakingAvailableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWalletIsStakingAvailableRequest.ProtoReflect.Descriptor instead.
func (*UpdateWalletIsStakingAvailableRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateWalletIsStakingAvailableRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *UpdateWalletIsStakingAvailableRequest) GetIsStakingAvailable() bool {
	if x != nil {
		return x.IsStakingAvailable
	}
	return false
}

type RefreshStakingWalletClaimableRewardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *RefreshStakingWalletClaimableRewardRequest) Reset() {
	*x = RefreshStakingWalletClaimableRewardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshStakingWalletClaimableRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshStakingWalletClaimableRewardRequest) ProtoMessage() {}

func (x *RefreshStakingWalletClaimableRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshStakingWalletClaimableRewardRequest.ProtoReflect.Descriptor instead.
func (*RefreshStakingWalletClaimableRewardRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{49}
}

func (x *RefreshStakingWalletClaimableRewardRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type RefreshStakingWalletClaimableRewardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClaimableReward       float64 `protobuf:"fixed64,1,opt,name=claimable_reward,json=claimableReward,proto3" json:"claimable_reward,omitempty"`
	StringClaimableReward string  `protobuf:"bytes,2,opt,name=string_claimable_reward,json=stringClaimableReward,proto3" json:"string_claimable_reward,omitempty"`
}

func (x *RefreshStakingWalletClaimableRewardResponse) Reset() {
	*x = RefreshStakingWalletClaimableRewardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshStakingWalletClaimableRewardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshStakingWalletClaimableRewardResponse) ProtoMessage() {}

func (x *RefreshStakingWalletClaimableRewardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshStakingWalletClaimableRewardResponse.ProtoReflect.Descriptor instead.
func (*RefreshStakingWalletClaimableRewardResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{50}
}

func (x *RefreshStakingWalletClaimableRewardResponse) GetClaimableReward() float64 {
	if x != nil {
		return x.ClaimableReward
	}
	return 0
}

func (x *RefreshStakingWalletClaimableRewardResponse) GetStringClaimableReward() string {
	if x != nil {
		return x.StringClaimableReward
	}
	return ""
}

type RegisterKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	PubKey   string `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (x *RegisterKeyRequest) Reset() {
	*x = RegisterKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterKeyRequest) ProtoMessage() {}

func (x *RegisterKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterKeyRequest.ProtoReflect.Descriptor instead.
func (*RegisterKeyRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{51}
}

func (x *RegisterKeyRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *RegisterKeyRequest) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

type RegisterKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *RegisterKeyResponse) Reset() {
	*x = RegisterKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterKeyResponse) ProtoMessage() {}

func (x *RegisterKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterKeyResponse.ProtoReflect.Descriptor instead.
func (*RegisterKeyResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{52}
}

func (x *RegisterKeyResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type GetSignerPubKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	KeyId    string `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *GetSignerPubKeyRequest) Reset() {
	*x = GetSignerPubKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignerPubKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignerPubKeyRequest) ProtoMessage() {}

func (x *GetSignerPubKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignerPubKeyRequest.ProtoReflect.Descriptor instead.
func (*GetSignerPubKeyRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{53}
}

func (x *GetSignerPubKeyRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetSignerPubKeyRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type GetSignerPubKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey string `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (x *GetSignerPubKeyResponse) Reset() {
	*x = GetSignerPubKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignerPubKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignerPubKeyResponse) ProtoMessage() {}

func (x *GetSignerPubKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignerPubKeyResponse.ProtoReflect.Descriptor instead.
func (*GetSignerPubKeyResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{54}
}

func (x *GetSignerPubKeyResponse) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

type CreateAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"` // The id of wallet
	FeeRate  uint64 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`   // for contract wallet
}

func (x *CreateAddressRequest) Reset() {
	*x = CreateAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressRequest) ProtoMessage() {}

func (x *CreateAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressRequest.ProtoReflect.Descriptor instead.
func (*CreateAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{55}
}

func (x *CreateAddressRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *CreateAddressRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

type CreateAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressId string `protobuf:"bytes,1,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"` // The id of created address
}

func (x *CreateAddressResponse) Reset() {
	*x = CreateAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressResponse) ProtoMessage() {}

func (x *CreateAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressResponse.ProtoReflect.Descriptor instead.
func (*CreateAddressResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{56}
}

func (x *CreateAddressResponse) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

type GetAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId  string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	AddressId string `protobuf:"bytes,2,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
}

func (x *GetAddressRequest) Reset() {
	*x = GetAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressRequest) ProtoMessage() {}

func (x *GetAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressRequest.ProtoReflect.Descriptor instead.
func (*GetAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{57}
}

func (x *GetAddressRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetAddressRequest) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

type GetAddressByAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetAddressByAddressRequest) Reset() {
	*x = GetAddressByAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressByAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressByAddressRequest) ProtoMessage() {}

func (x *GetAddressByAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressByAddressRequest.ProtoReflect.Descriptor instead.
func (*GetAddressByAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{58}
}

func (x *GetAddressByAddressRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetAddressByAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetAddressByAddressCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string                `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Coin    gincoincglobalv1.Coin `protobuf:"varint,2,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
}

func (x *GetAddressByAddressCoinRequest) Reset() {
	*x = GetAddressByAddressCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressByAddressCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressByAddressCoinRequest) ProtoMessage() {}

func (x *GetAddressByAddressCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressByAddressCoinRequest.ProtoReflect.Descriptor instead.
func (*GetAddressByAddressCoinRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{59}
}

func (x *GetAddressByAddressCoinRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetAddressByAddressCoinRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

type GetAddressByIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Index    uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *GetAddressByIndexRequest) Reset() {
	*x = GetAddressByIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressByIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressByIndexRequest) ProtoMessage() {}

func (x *GetAddressByIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressByIndexRequest.ProtoReflect.Descriptor instead.
func (*GetAddressByIndexRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{60}
}

func (x *GetAddressByIndexRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetAddressByIndexRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type GetAddressWithoutBalanceByIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Index    uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *GetAddressWithoutBalanceByIndexRequest) Reset() {
	*x = GetAddressWithoutBalanceByIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressWithoutBalanceByIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressWithoutBalanceByIndexRequest) ProtoMessage() {}

func (x *GetAddressWithoutBalanceByIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressWithoutBalanceByIndexRequest.ProtoReflect.Descriptor instead.
func (*GetAddressWithoutBalanceByIndexRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{61}
}

func (x *GetAddressWithoutBalanceByIndexRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetAddressWithoutBalanceByIndexRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type ListAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId   string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	OmitChange bool   `protobuf:"varint,2,opt,name=omit_change,json=omitChange,proto3" json:"omit_change,omitempty"`
	PageSize   uint32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken  string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListAddressesRequest) Reset() {
	*x = ListAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressesRequest) ProtoMessage() {}

func (x *ListAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressesRequest.ProtoReflect.Descriptor instead.
func (*ListAddressesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{62}
}

func (x *ListAddressesRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListAddressesRequest) GetOmitChange() bool {
	if x != nil {
		return x.OmitChange
	}
	return false
}

func (x *ListAddressesRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAddressesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListAddressesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses     []*Address `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	NextPageToken string     `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListAddressesResponse) Reset() {
	*x = ListAddressesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAddressesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressesResponse) ProtoMessage() {}

func (x *ListAddressesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressesResponse.ProtoReflect.Descriptor instead.
func (*ListAddressesResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{63}
}

func (x *ListAddressesResponse) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *ListAddressesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListAddressesWithBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *ListAddressesWithBalanceRequest) Reset() {
	*x = ListAddressesWithBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAddressesWithBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressesWithBalanceRequest) ProtoMessage() {}

func (x *ListAddressesWithBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressesWithBalanceRequest.ProtoReflect.Descriptor instead.
func (*ListAddressesWithBalanceRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{64}
}

func (x *ListAddressesWithBalanceRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type ListAddressesWithBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []*AddressWithBalance `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *ListAddressesWithBalanceResponse) Reset() {
	*x = ListAddressesWithBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAddressesWithBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressesWithBalanceResponse) ProtoMessage() {}

func (x *ListAddressesWithBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressesWithBalanceResponse.ProtoReflect.Descriptor instead.
func (*ListAddressesWithBalanceResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{65}
}

func (x *ListAddressesWithBalanceResponse) GetAddresses() []*AddressWithBalance {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type UpdateAddressBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *UpdateAddressBalanceRequest) Reset() {
	*x = UpdateAddressBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAddressBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddressBalanceRequest) ProtoMessage() {}

func (x *UpdateAddressBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddressBalanceRequest.ProtoReflect.Descriptor instead.
func (*UpdateAddressBalanceRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{66}
}

func (x *UpdateAddressBalanceRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *UpdateAddressBalanceRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ListAddressesWithoutBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId   string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	OmitChange bool   `protobuf:"varint,2,opt,name=omit_change,json=omitChange,proto3" json:"omit_change,omitempty"`
	PageSize   uint32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken  string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListAddressesWithoutBalanceRequest) Reset() {
	*x = ListAddressesWithoutBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAddressesWithoutBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressesWithoutBalanceRequest) ProtoMessage() {}

func (x *ListAddressesWithoutBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressesWithoutBalanceRequest.ProtoReflect.Descriptor instead.
func (*ListAddressesWithoutBalanceRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{67}
}

func (x *ListAddressesWithoutBalanceRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListAddressesWithoutBalanceRequest) GetOmitChange() bool {
	if x != nil {
		return x.OmitChange
	}
	return false
}

func (x *ListAddressesWithoutBalanceRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAddressesWithoutBalanceRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListAddressesWithoutBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses     []*AddressWithoutBalance `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	NextPageToken string                   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListAddressesWithoutBalanceResponse) Reset() {
	*x = ListAddressesWithoutBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAddressesWithoutBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressesWithoutBalanceResponse) ProtoMessage() {}

func (x *ListAddressesWithoutBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressesWithoutBalanceResponse.ProtoReflect.Descriptor instead.
func (*ListAddressesWithoutBalanceResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{68}
}

func (x *ListAddressesWithoutBalanceResponse) GetAddresses() []*AddressWithoutBalance {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *ListAddressesWithoutBalanceResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetEthereumFeeAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEthereumFeeAddressRequest) Reset() {
	*x = GetEthereumFeeAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEthereumFeeAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEthereumFeeAddressRequest) ProtoMessage() {}

func (x *GetEthereumFeeAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEthereumFeeAddressRequest.ProtoReflect.Descriptor instead.
func (*GetEthereumFeeAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{69}
}

type DeleteAllWatchOnlyAddressesByWalletIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *DeleteAllWatchOnlyAddressesByWalletIDRequest) Reset() {
	*x = DeleteAllWatchOnlyAddressesByWalletIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllWatchOnlyAddressesByWalletIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllWatchOnlyAddressesByWalletIDRequest) ProtoMessage() {}

func (x *DeleteAllWatchOnlyAddressesByWalletIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllWatchOnlyAddressesByWalletIDRequest.ProtoReflect.Descriptor instead.
func (*DeleteAllWatchOnlyAddressesByWalletIDRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{70}
}

func (x *DeleteAllWatchOnlyAddressesByWalletIDRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type ImportAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId        string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Address         string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	IsChangeAddress bool   `protobuf:"varint,3,opt,name=is_change_address,json=isChangeAddress,proto3" json:"is_change_address,omitempty"`
}

func (x *ImportAddressRequest) Reset() {
	*x = ImportAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportAddressRequest) ProtoMessage() {}

func (x *ImportAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportAddressRequest.ProtoReflect.Descriptor instead.
func (*ImportAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{71}
}

func (x *ImportAddressRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ImportAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ImportAddressRequest) GetIsChangeAddress() bool {
	if x != nil {
		return x.IsChangeAddress
	}
	return false
}

type CreatePreTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin       gincoincglobalv1.Coin    `protobuf:"varint,1,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	Network    gincoincglobalv1.Network `protobuf:"varint,2,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`
	ExternalId string                   `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// Use single format for single recipient transaction and multi-recipient transaction
	Details []*PreTransactionDetail `protobuf:"bytes,4,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *CreatePreTransactionRequest) Reset() {
	*x = CreatePreTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePreTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePreTransactionRequest) ProtoMessage() {}

func (x *CreatePreTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePreTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreatePreTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{72}
}

func (x *CreatePreTransactionRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *CreatePreTransactionRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *CreatePreTransactionRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *CreatePreTransactionRequest) GetDetails() []*PreTransactionDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type CreatePreTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreTransactionId string `protobuf:"bytes,1,opt,name=pre_transaction_id,json=preTransactionId,proto3" json:"pre_transaction_id,omitempty"`
}

func (x *CreatePreTransactionResponse) Reset() {
	*x = CreatePreTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePreTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePreTransactionResponse) ProtoMessage() {}

func (x *CreatePreTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePreTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreatePreTransactionResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{73}
}

func (x *CreatePreTransactionResponse) GetPreTransactionId() string {
	if x != nil {
		return x.PreTransactionId
	}
	return ""
}

type ApprovePreTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreTransactionId string `protobuf:"bytes,1,opt,name=pre_transaction_id,json=preTransactionId,proto3" json:"pre_transaction_id,omitempty"`
}

func (x *ApprovePreTransactionRequest) Reset() {
	*x = ApprovePreTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovePreTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovePreTransactionRequest) ProtoMessage() {}

func (x *ApprovePreTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovePreTransactionRequest.ProtoReflect.Descriptor instead.
func (*ApprovePreTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{74}
}

func (x *ApprovePreTransactionRequest) GetPreTransactionId() string {
	if x != nil {
		return x.PreTransactionId
	}
	return ""
}

type RejectPreTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreTransactionId string `protobuf:"bytes,1,opt,name=pre_transaction_id,json=preTransactionId,proto3" json:"pre_transaction_id,omitempty"`
}

func (x *RejectPreTransactionRequest) Reset() {
	*x = RejectPreTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectPreTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectPreTransactionRequest) ProtoMessage() {}

func (x *RejectPreTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectPreTransactionRequest.ProtoReflect.Descriptor instead.
func (*RejectPreTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{75}
}

func (x *RejectPreTransactionRequest) GetPreTransactionId() string {
	if x != nil {
		return x.PreTransactionId
	}
	return ""
}

type CancelPreTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreTransactionId string `protobuf:"bytes,1,opt,name=pre_transaction_id,json=preTransactionId,proto3" json:"pre_transaction_id,omitempty"`
}

func (x *CancelPreTransactionRequest) Reset() {
	*x = CancelPreTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelPreTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelPreTransactionRequest) ProtoMessage() {}

func (x *CancelPreTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelPreTransactionRequest.ProtoReflect.Descriptor instead.
func (*CancelPreTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{76}
}

func (x *CancelPreTransactionRequest) GetPreTransactionId() string {
	if x != nil {
		return x.PreTransactionId
	}
	return ""
}

type ListPreTransactionsByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType          ListFilterType            `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	PreTransactionId    *string                   `protobuf:"bytes,2,opt,name=pre_transaction_id,json=preTransactionId,proto3,oneof" json:"pre_transaction_id,omitempty"`
	ExternalId          *string                   `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3,oneof" json:"external_id,omitempty"`
	Coin                *gincoincglobalv1.Coin    `protobuf:"varint,4,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin,oneof" json:"coin,omitempty"`
	Network             *gincoincglobalv1.Network `protobuf:"varint,5,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
	PreTransactionState []PreTransactionState     `protobuf:"varint,6,rep,packed,name=pre_transaction_state,json=preTransactionState,proto3,enum=adamant.global.v1.PreTransactionState" json:"pre_transaction_state,omitempty"`
	StartTime           *timestamppb.Timestamp    `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime             *timestamppb.Timestamp    `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	PageSize            *uint32                   `protobuf:"varint,9,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken           *string                   `protobuf:"bytes,10,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
}

func (x *ListPreTransactionsByFilterRequest) Reset() {
	*x = ListPreTransactionsByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPreTransactionsByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPreTransactionsByFilterRequest) ProtoMessage() {}

func (x *ListPreTransactionsByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPreTransactionsByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListPreTransactionsByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{77}
}

func (x *ListPreTransactionsByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListPreTransactionsByFilterRequest) GetPreTransactionId() string {
	if x != nil && x.PreTransactionId != nil {
		return *x.PreTransactionId
	}
	return ""
}

func (x *ListPreTransactionsByFilterRequest) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *ListPreTransactionsByFilterRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil && x.Coin != nil {
		return *x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *ListPreTransactionsByFilterRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *ListPreTransactionsByFilterRequest) GetPreTransactionState() []PreTransactionState {
	if x != nil {
		return x.PreTransactionState
	}
	return nil
}

func (x *ListPreTransactionsByFilterRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListPreTransactionsByFilterRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ListPreTransactionsByFilterRequest) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListPreTransactionsByFilterRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type ListPreTransactionsByFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreTransactions []*PreTransaction `protobuf:"bytes,1,rep,name=pre_transactions,json=preTransactions,proto3" json:"pre_transactions,omitempty"`
	NextPageToken   string            `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListPreTransactionsByFilterResponse) Reset() {
	*x = ListPreTransactionsByFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPreTransactionsByFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPreTransactionsByFilterResponse) ProtoMessage() {}

func (x *ListPreTransactionsByFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPreTransactionsByFilterResponse.ProtoReflect.Descriptor instead.
func (*ListPreTransactionsByFilterResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{78}
}

func (x *ListPreTransactionsByFilterResponse) GetPreTransactions() []*PreTransaction {
	if x != nil {
		return x.PreTransactions
	}
	return nil
}

func (x *ListPreTransactionsByFilterResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId              string                                  `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	FeeRate               uint64                                  `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	TxOutputs             []*RequestTxOutput                      `protobuf:"bytes,3,rep,name=tx_outputs,json=txOutputs,proto3" json:"tx_outputs,omitempty"`
	Address               string                                  `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	DestinationTag        uint32                                  `protobuf:"varint,5,opt,name=destination_tag,json=destinationTag,proto3" json:"destination_tag,omitempty"`
	MemoId                uint64                                  `protobuf:"varint,6,opt,name=memo_id,json=memoId,proto3" json:"memo_id,omitempty"`
	StringValue           string                                  `protobuf:"bytes,7,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	SubstrateSpecific     *CreateTransactionSubstrateSpecific     `protobuf:"bytes,8,opt,name=substrate_specific,json=substrateSpecific,proto3" json:"substrate_specific,omitempty"`
	WalletConnectSpecific *CreateTransactionWalletConnectSpecific `protobuf:"bytes,9,opt,name=wallet_connect_specific,json=walletConnectSpecific,proto3" json:"wallet_connect_specific,omitempty"`
	NemSpecific           *CreateTransactionNemSpecific           `protobuf:"bytes,10,opt,name=nem_specific,json=nemSpecific,proto3" json:"nem_specific,omitempty"`
	IostSpecific          *CreateTransactionIOSTSpecific          `protobuf:"bytes,11,opt,name=iost_specific,json=iostSpecific,proto3" json:"iost_specific,omitempty"`
	XymSpecific           *CreateTransactionSymbolSpecific        `protobuf:"bytes,12,opt,name=xym_specific,json=xymSpecific,proto3" json:"xym_specific,omitempty"`
	EthereumSpecific      *CreateTransactionEthereumSpecific      `protobuf:"bytes,13,opt,name=ethereum_specific,json=ethereumSpecific,proto3" json:"ethereum_specific,omitempty"`
	CosmosSpecific        *CreateTransactionCosmosSpecific        `protobuf:"bytes,14,opt,name=cosmos_specific,json=cosmosSpecific,proto3" json:"cosmos_specific,omitempty"`
	AlgorandSpecific      *CreateTransactionAlgorandSpecific      `protobuf:"bytes,15,opt,name=algorand_specific,json=algorandSpecific,proto3" json:"algorand_specific,omitempty"`
	HederaSpecific        *CreateTransactionHederaSpecific        `protobuf:"bytes,16,opt,name=hedera_specific,json=hederaSpecific,proto3" json:"hedera_specific,omitempty"`
	SolanaSpecific        *CreateTransactionSolanaSpecific        `protobuf:"bytes,17,opt,name=solana_specific,json=solanaSpecific,proto3" json:"solana_specific,omitempty"`
	AptosSpecific         *CreateTransactionAptosSpecific         `protobuf:"bytes,19,opt,name=aptos_specific,json=aptosSpecific,proto3" json:"aptos_specific,omitempty"`
	AvalancheSpecific     *CreateTransactionAvalancheSpecific     `protobuf:"bytes,20,opt,name=avalanche_specific,json=avalancheSpecific,proto3" json:"avalanche_specific,omitempty"`
	NftSpecific           *CreateTransactionNFTSpecific           `protobuf:"bytes,22,opt,name=nft_specific,json=nftSpecific,proto3" json:"nft_specific,omitempty"`
	UtxoSpecific          *UtxoSpecific                           `protobuf:"bytes,18,opt,name=utxo_specific,json=utxoSpecific,proto3" json:"utxo_specific,omitempty"`
	PreTransactionId      *string                                 `protobuf:"bytes,21,opt,name=pre_transaction_id,json=preTransactionId,proto3,oneof" json:"pre_transaction_id,omitempty"`
}

func (x *CreateTransactionRequest) Reset() {
	*x = CreateTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionRequest) ProtoMessage() {}

func (x *CreateTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{79}
}

func (x *CreateTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *CreateTransactionRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *CreateTransactionRequest) GetTxOutputs() []*RequestTxOutput {
	if x != nil {
		return x.TxOutputs
	}
	return nil
}

func (x *CreateTransactionRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateTransactionRequest) GetDestinationTag() uint32 {
	if x != nil {
		return x.DestinationTag
	}
	return 0
}

func (x *CreateTransactionRequest) GetMemoId() uint64 {
	if x != nil {
		return x.MemoId
	}
	return 0
}

func (x *CreateTransactionRequest) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *CreateTransactionRequest) GetSubstrateSpecific() *CreateTransactionSubstrateSpecific {
	if x != nil {
		return x.SubstrateSpecific
	}
	return nil
}

func (x *CreateTransactionRequest) GetWalletConnectSpecific() *CreateTransactionWalletConnectSpecific {
	if x != nil {
		return x.WalletConnectSpecific
	}
	return nil
}

func (x *CreateTransactionRequest) GetNemSpecific() *CreateTransactionNemSpecific {
	if x != nil {
		return x.NemSpecific
	}
	return nil
}

func (x *CreateTransactionRequest) GetIostSpecific() *CreateTransactionIOSTSpecific {
	if x != nil {
		return x.IostSpecific
	}
	return nil
}

func (x *CreateTransactionRequest) GetXymSpecific() *CreateTransactionSymbolSpecific {
	if x != nil {
		return x.XymSpecific
	}
	return nil
}

func (x *CreateTransactionRequest) GetEthereumSpecific() *CreateTransactionEthereumSpecific {
	if x != nil {
		return x.EthereumSpecific
	}
	return nil
}

func (x *CreateTransactionRequest) GetCosmosSpecific() *CreateTransactionCosmosSpecific {
	if x != nil {
		return x.CosmosSpecific
	}
	return nil
}

func (x *CreateTransactionRequest) GetAlgorandSpecific() *CreateTransactionAlgorandSpecific {
	if x != nil {
		return x.AlgorandSpecific
	}
	return nil
}

func (x *CreateTransactionRequest) GetHederaSpecific() *CreateTransactionHederaSpecific {
	if x != nil {
		return x.HederaSpecific
	}
	return nil
}

func (x *CreateTransactionRequest) GetSolanaSpecific() *CreateTransactionSolanaSpecific {
	if x != nil {
		return x.SolanaSpecific
	}
	return nil
}

func (x *CreateTransactionRequest) GetAptosSpecific() *CreateTransactionAptosSpecific {
	if x != nil {
		return x.AptosSpecific
	}
	return nil
}

func (x *CreateTransactionRequest) GetAvalancheSpecific() *CreateTransactionAvalancheSpecific {
	if x != nil {
		return x.AvalancheSpecific
	}
	return nil
}

func (x *CreateTransactionRequest) GetNftSpecific() *CreateTransactionNFTSpecific {
	if x != nil {
		return x.NftSpecific
	}
	return nil
}

func (x *CreateTransactionRequest) GetUtxoSpecific() *UtxoSpecific {
	if x != nil {
		return x.UtxoSpecific
	}
	return nil
}

func (x *CreateTransactionRequest) GetPreTransactionId() string {
	if x != nil && x.PreTransactionId != nil {
		return *x.PreTransactionId
	}
	return ""
}

type CreateTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *CreateTransactionResponse) Reset() {
	*x = CreateTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionResponse) ProtoMessage() {}

func (x *CreateTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreateTransactionResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{80}
}

func (x *CreateTransactionResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type CreateXRPInitTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"` // feature: bool require_dest
}

func (x *CreateXRPInitTransactionsRequest) Reset() {
	*x = CreateXRPInitTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateXRPInitTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateXRPInitTransactionsRequest) ProtoMessage() {}

func (x *CreateXRPInitTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateXRPInitTransactionsRequest.ProtoReflect.Descriptor instead.
func (*CreateXRPInitTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{81}
}

func (x *CreateXRPInitTransactionsRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type CreateInitTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId     string                         `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	IostSpecific *CreateTransactionIOSTSpecific `protobuf:"bytes,2,opt,name=iost_specific,json=iostSpecific,proto3" json:"iost_specific,omitempty"`
}

func (x *CreateInitTransactionRequest) Reset() {
	*x = CreateInitTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInitTransactionRequest) ProtoMessage() {}

func (x *CreateInitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInitTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateInitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{82}
}

func (x *CreateInitTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *CreateInitTransactionRequest) GetIostSpecific() *CreateTransactionIOSTSpecific {
	if x != nil {
		return x.IostSpecific
	}
	return nil
}

type CreateContractCreationTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId             string                                `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	FeeRate              uint64                                `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	Bytecode             string                                `protobuf:"bytes,3,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
	ContractCreationType gincoincglobalv1.ContractCreationType `protobuf:"varint,4,opt,name=contract_creation_type,json=contractCreationType,proto3,enum=gincoinc.global.v1.ContractCreationType" json:"contract_creation_type,omitempty"`
	ContractAddress      *string                               `protobuf:"bytes,5,opt,name=contract_address,json=contractAddress,proto3,oneof" json:"contract_address,omitempty"`
}

func (x *CreateContractCreationTransactionRequest) Reset() {
	*x = CreateContractCreationTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContractCreationTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContractCreationTransactionRequest) ProtoMessage() {}

func (x *CreateContractCreationTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContractCreationTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateContractCreationTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{83}
}

func (x *CreateContractCreationTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *CreateContractCreationTransactionRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *CreateContractCreationTransactionRequest) GetBytecode() string {
	if x != nil {
		return x.Bytecode
	}
	return ""
}

func (x *CreateContractCreationTransactionRequest) GetContractCreationType() gincoincglobalv1.ContractCreationType {
	if x != nil {
		return x.ContractCreationType
	}
	return gincoincglobalv1.ContractCreationType(0)
}

func (x *CreateContractCreationTransactionRequest) GetContractAddress() string {
	if x != nil && x.ContractAddress != nil {
		return *x.ContractAddress
	}
	return ""
}

type CreateContractCreationTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *CreateContractCreationTransactionResponse) Reset() {
	*x = CreateContractCreationTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContractCreationTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContractCreationTransactionResponse) ProtoMessage() {}

func (x *CreateContractCreationTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContractCreationTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreateContractCreationTransactionResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{84}
}

func (x *CreateContractCreationTransactionResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type SignTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string             `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string             `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	KeyId         string             `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	SignedInfo    *RequestSignedInfo `protobuf:"bytes,4,opt,name=signed_info,json=signedInfo,proto3" json:"signed_info,omitempty"`
}

func (x *SignTransactionRequest) Reset() {
	*x = SignTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTransactionRequest) ProtoMessage() {}

func (x *SignTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTransactionRequest.ProtoReflect.Descriptor instead.
func (*SignTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{85}
}

func (x *SignTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *SignTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *SignTransactionRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SignTransactionRequest) GetSignedInfo() *RequestSignedInfo {
	if x != nil {
		return x.SignedInfo
	}
	return nil
}

type SignXRPInitTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId   string               `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	KeyId      string               `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	SignedInfo []*RequestSignedInfo `protobuf:"bytes,4,rep,name=signed_info,json=signedInfo,proto3" json:"signed_info,omitempty"`
}

func (x *SignXRPInitTransactionsRequest) Reset() {
	*x = SignXRPInitTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignXRPInitTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignXRPInitTransactionsRequest) ProtoMessage() {}

func (x *SignXRPInitTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignXRPInitTransactionsRequest.ProtoReflect.Descriptor instead.
func (*SignXRPInitTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{86}
}

func (x *SignXRPInitTransactionsRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *SignXRPInitTransactionsRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SignXRPInitTransactionsRequest) GetSignedInfo() []*RequestSignedInfo {
	if x != nil {
		return x.SignedInfo
	}
	return nil
}

type SignInitTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId   string               `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	KeyId      string               `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	SignedInfo []*RequestSignedInfo `protobuf:"bytes,4,rep,name=signed_info,json=signedInfo,proto3" json:"signed_info,omitempty"`
}

func (x *SignInitTransactionRequest) Reset() {
	*x = SignInitTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInitTransactionRequest) ProtoMessage() {}

func (x *SignInitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInitTransactionRequest.ProtoReflect.Descriptor instead.
func (*SignInitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{87}
}

func (x *SignInitTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *SignInitTransactionRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SignInitTransactionRequest) GetSignedInfo() []*RequestSignedInfo {
	if x != nil {
		return x.SignedInfo
	}
	return nil
}

type SendTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string       `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string       `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	ExecutorType  ExecutorType `protobuf:"varint,3,opt,name=executor_type,json=executorType,proto3,enum=adamant.global.v1.ExecutorType" json:"executor_type,omitempty"`
}

func (x *SendTransactionRequest) Reset() {
	*x = SendTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTransactionRequest) ProtoMessage() {}

func (x *SendTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTransactionRequest.ProtoReflect.Descriptor instead.
func (*SendTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{88}
}

func (x *SendTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *SendTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *SendTransactionRequest) GetExecutorType() ExecutorType {
	if x != nil {
		return x.ExecutorType
	}
	return ExecutorType_EXECUTOR_TYPE_INVALID
}

type SendTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *SendTransactionResponse) Reset() {
	*x = SendTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTransactionResponse) ProtoMessage() {}

func (x *SendTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTransactionResponse.ProtoReflect.Descriptor instead.
func (*SendTransactionResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{89}
}

func (x *SendTransactionResponse) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

type ResendTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string       `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string       `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	ExecutorType  ExecutorType `protobuf:"varint,3,opt,name=executor_type,json=executorType,proto3,enum=adamant.global.v1.ExecutorType" json:"executor_type,omitempty"`
}

func (x *ResendTransactionRequest) Reset() {
	*x = ResendTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendTransactionRequest) ProtoMessage() {}

func (x *ResendTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendTransactionRequest.ProtoReflect.Descriptor instead.
func (*ResendTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{90}
}

func (x *ResendTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ResendTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *ResendTransactionRequest) GetExecutorType() ExecutorType {
	if x != nil {
		return x.ExecutorType
	}
	return ExecutorType_EXECUTOR_TYPE_INVALID
}

type ResendTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *ResendTransactionResponse) Reset() {
	*x = ResendTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendTransactionResponse) ProtoMessage() {}

func (x *ResendTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendTransactionResponse.ProtoReflect.Descriptor instead.
func (*ResendTransactionResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{91}
}

func (x *ResendTransactionResponse) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

type SendXRPInitTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *SendXRPInitTransactionsRequest) Reset() {
	*x = SendXRPInitTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendXRPInitTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendXRPInitTransactionsRequest) ProtoMessage() {}

func (x *SendXRPInitTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendXRPInitTransactionsRequest.ProtoReflect.Descriptor instead.
func (*SendXRPInitTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{92}
}

func (x *SendXRPInitTransactionsRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type SendXRPInitTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxIds []string `protobuf:"bytes,1,rep,name=tx_ids,json=txIds,proto3" json:"tx_ids,omitempty"`
}

func (x *SendXRPInitTransactionsResponse) Reset() {
	*x = SendXRPInitTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendXRPInitTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendXRPInitTransactionsResponse) ProtoMessage() {}

func (x *SendXRPInitTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendXRPInitTransactionsResponse.ProtoReflect.Descriptor instead.
func (*SendXRPInitTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{93}
}

func (x *SendXRPInitTransactionsResponse) GetTxIds() []string {
	if x != nil {
		return x.TxIds
	}
	return nil
}

type SendInitTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId     string       `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	ExecutorType ExecutorType `protobuf:"varint,2,opt,name=executor_type,json=executorType,proto3,enum=adamant.global.v1.ExecutorType" json:"executor_type,omitempty"`
}

func (x *SendInitTransactionRequest) Reset() {
	*x = SendInitTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendInitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendInitTransactionRequest) ProtoMessage() {}

func (x *SendInitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendInitTransactionRequest.ProtoReflect.Descriptor instead.
func (*SendInitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{94}
}

func (x *SendInitTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *SendInitTransactionRequest) GetExecutorType() ExecutorType {
	if x != nil {
		return x.ExecutorType
	}
	return ExecutorType_EXECUTOR_TYPE_INVALID
}

type SendInitTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxIds []string `protobuf:"bytes,1,rep,name=tx_ids,json=txIds,proto3" json:"tx_ids,omitempty"`
}

func (x *SendInitTransactionResponse) Reset() {
	*x = SendInitTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendInitTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendInitTransactionResponse) ProtoMessage() {}

func (x *SendInitTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendInitTransactionResponse.ProtoReflect.Descriptor instead.
func (*SendInitTransactionResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{95}
}

func (x *SendInitTransactionResponse) GetTxIds() []string {
	if x != nil {
		return x.TxIds
	}
	return nil
}

type CancelTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *CancelTransactionRequest) Reset() {
	*x = CancelTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTransactionRequest) ProtoMessage() {}

func (x *CancelTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTransactionRequest.ProtoReflect.Descriptor instead.
func (*CancelTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{96}
}

func (x *CancelTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *CancelTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type ReplaceTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	FeeRate       uint64 `protobuf:"varint,3,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
}

func (x *ReplaceTransactionRequest) Reset() {
	*x = ReplaceTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceTransactionRequest) ProtoMessage() {}

func (x *ReplaceTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceTransactionRequest.ProtoReflect.Descriptor instead.
func (*ReplaceTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{97}
}

func (x *ReplaceTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ReplaceTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *ReplaceTransactionRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

type ReplaceTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *ReplaceTransactionResponse) Reset() {
	*x = ReplaceTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceTransactionResponse) ProtoMessage() {}

func (x *ReplaceTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceTransactionResponse.ProtoReflect.Descriptor instead.
func (*ReplaceTransactionResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{98}
}

func (x *ReplaceTransactionResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type IsTransactionReplaceableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *IsTransactionReplaceableRequest) Reset() {
	*x = IsTransactionReplaceableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsTransactionReplaceableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsTransactionReplaceableRequest) ProtoMessage() {}

func (x *IsTransactionReplaceableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsTransactionReplaceableRequest.ProtoReflect.Descriptor instead.
func (*IsTransactionReplaceableRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{99}
}

func (x *IsTransactionReplaceableRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *IsTransactionReplaceableRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type IsTransactionReplaceableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTransactionReplacable bool `protobuf:"varint,1,opt,name=is_transaction_replacable,json=isTransactionReplacable,proto3" json:"is_transaction_replacable,omitempty"`
}

func (x *IsTransactionReplaceableResponse) Reset() {
	*x = IsTransactionReplaceableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsTransactionReplaceableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsTransactionReplaceableResponse) ProtoMessage() {}

func (x *IsTransactionReplaceableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsTransactionReplaceableResponse.ProtoReflect.Descriptor instead.
func (*IsTransactionReplaceableResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{100}
}

func (x *IsTransactionReplaceableResponse) GetIsTransactionReplacable() bool {
	if x != nil {
		return x.IsTransactionReplacable
	}
	return false
}

type GetTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *GetTransactionRequest) Reset() {
	*x = GetTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionRequest) ProtoMessage() {}

func (x *GetTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{101}
}

func (x *GetTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type GetTransactionByTxIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TxId     string `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *GetTransactionByTxIDRequest) Reset() {
	*x = GetTransactionByTxIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionByTxIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionByTxIDRequest) ProtoMessage() {}

func (x *GetTransactionByTxIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionByTxIDRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionByTxIDRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{102}
}

func (x *GetTransactionByTxIDRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetTransactionByTxIDRequest) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

type ListTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId  string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	PageSize  uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListTransactionsRequest) Reset() {
	*x = ListTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionsRequest) ProtoMessage() {}

func (x *ListTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionsRequest.ProtoReflect.Descriptor instead.
func (*ListTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{103}
}

func (x *ListTransactionsRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListTransactionsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTransactionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListTransactionsByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType ListFilterType `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	// optional
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// optional
	WalletId string `protobuf:"bytes,12,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// optional
	WalletName string `protobuf:"bytes,3,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// optional
	AddressName string `protobuf:"bytes,4,opt,name=address_name,json=addressName,proto3" json:"address_name,omitempty"`
	// optional
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// optional
	Txid string `protobuf:"bytes,6,opt,name=txid,proto3" json:"txid,omitempty"`
	// optional
	Coin gincoincglobalv1.Coin `protobuf:"varint,7,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	// optional
	Network          *gincoincglobalv1.Network `protobuf:"varint,13,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
	WalletType       []WalletType              `protobuf:"varint,8,rep,packed,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`
	TransactionState []TransactionState        `protobuf:"varint,9,rep,packed,name=transaction_state,json=transactionState,proto3,enum=adamant.global.v1.TransactionState" json:"transaction_state,omitempty"`
	// optional
	PageSize uint32 `protobuf:"varint,10,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// optional
	PageToken string `protobuf:"bytes,11,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListTransactionsByFilterRequest) Reset() {
	*x = ListTransactionsByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransactionsByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionsByFilterRequest) ProtoMessage() {}

func (x *ListTransactionsByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionsByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListTransactionsByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{104}
}

func (x *ListTransactionsByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListTransactionsByFilterRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *ListTransactionsByFilterRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListTransactionsByFilterRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *ListTransactionsByFilterRequest) GetAddressName() string {
	if x != nil {
		return x.AddressName
	}
	return ""
}

func (x *ListTransactionsByFilterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ListTransactionsByFilterRequest) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *ListTransactionsByFilterRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *ListTransactionsByFilterRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *ListTransactionsByFilterRequest) GetWalletType() []WalletType {
	if x != nil {
		return x.WalletType
	}
	return nil
}

func (x *ListTransactionsByFilterRequest) GetTransactionState() []TransactionState {
	if x != nil {
		return x.TransactionState
	}
	return nil
}

func (x *ListTransactionsByFilterRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTransactionsByFilterRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions  []*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	NextPageToken string         `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListTransactionsResponse) Reset() {
	*x = ListTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionsResponse) ProtoMessage() {}

func (x *ListTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionsResponse.ProtoReflect.Descriptor instead.
func (*ListTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{105}
}

func (x *ListTransactionsResponse) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *ListTransactionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListUnconfirmedTransactionsByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType ListFilterType `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	// optional
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// optional
	WalletId string `protobuf:"bytes,3,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// optional
	WalletName string `protobuf:"bytes,4,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// optional
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// optional
	Txid string `protobuf:"bytes,6,opt,name=txid,proto3" json:"txid,omitempty"`
	// optional
	Coin gincoincglobalv1.Coin `protobuf:"varint,7,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	// optional
	Network    *gincoincglobalv1.Network `protobuf:"varint,8,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
	WalletType []WalletType              `protobuf:"varint,9,rep,packed,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`
	// optional
	PageSize uint32 `protobuf:"varint,10,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// optional
	PageToken string `protobuf:"bytes,11,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// optional
	StartTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// optional
	EndTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *ListUnconfirmedTransactionsByFilterRequest) Reset() {
	*x = ListUnconfirmedTransactionsByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnconfirmedTransactionsByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnconfirmedTransactionsByFilterRequest) ProtoMessage() {}

func (x *ListUnconfirmedTransactionsByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnconfirmedTransactionsByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListUnconfirmedTransactionsByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{106}
}

func (x *ListUnconfirmedTransactionsByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListUnconfirmedTransactionsByFilterRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *ListUnconfirmedTransactionsByFilterRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListUnconfirmedTransactionsByFilterRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *ListUnconfirmedTransactionsByFilterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ListUnconfirmedTransactionsByFilterRequest) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *ListUnconfirmedTransactionsByFilterRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *ListUnconfirmedTransactionsByFilterRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *ListUnconfirmedTransactionsByFilterRequest) GetWalletType() []WalletType {
	if x != nil {
		return x.WalletType
	}
	return nil
}

func (x *ListUnconfirmedTransactionsByFilterRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListUnconfirmedTransactionsByFilterRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListUnconfirmedTransactionsByFilterRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListUnconfirmedTransactionsByFilterRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type ListUnconfirmedTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnconfirmedTransactions []*UnconfirmedTransaction `protobuf:"bytes,1,rep,name=unconfirmed_transactions,json=unconfirmedTransactions,proto3" json:"unconfirmed_transactions,omitempty"` // Array of unconfirmed transaction objects
	NextPageToken           string                    `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`                             // The token for requesting the next page
}

func (x *ListUnconfirmedTransactionsResponse) Reset() {
	*x = ListUnconfirmedTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnconfirmedTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnconfirmedTransactionsResponse) ProtoMessage() {}

func (x *ListUnconfirmedTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnconfirmedTransactionsResponse.ProtoReflect.Descriptor instead.
func (*ListUnconfirmedTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{107}
}

func (x *ListUnconfirmedTransactionsResponse) GetUnconfirmedTransactions() []*UnconfirmedTransaction {
	if x != nil {
		return x.UnconfirmedTransactions
	}
	return nil
}

func (x *ListUnconfirmedTransactionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetSignInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *GetSignInfoRequest) Reset() {
	*x = GetSignInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignInfoRequest) ProtoMessage() {}

func (x *GetSignInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignInfoRequest.ProtoReflect.Descriptor instead.
func (*GetSignInfoRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{108}
}

func (x *GetSignInfoRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetSignInfoRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type ListSignInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *ListSignInfoRequest) Reset() {
	*x = ListSignInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSignInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSignInfoRequest) ProtoMessage() {}

func (x *ListSignInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSignInfoRequest.ProtoReflect.Descriptor instead.
func (*ListSignInfoRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{109}
}

func (x *ListSignInfoRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListSignInfoRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type ListSignInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignInfoList []*SignInfo `protobuf:"bytes,1,rep,name=sign_info_list,json=signInfoList,proto3" json:"sign_info_list,omitempty"`
}

func (x *ListSignInfoResponse) Reset() {
	*x = ListSignInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSignInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSignInfoResponse) ProtoMessage() {}

func (x *ListSignInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSignInfoResponse.ProtoReflect.Descriptor instead.
func (*ListSignInfoResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{110}
}

func (x *ListSignInfoResponse) GetSignInfoList() []*SignInfo {
	if x != nil {
		return x.SignInfoList
	}
	return nil
}

type ListXRPInitSignInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *ListXRPInitSignInfoRequest) Reset() {
	*x = ListXRPInitSignInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListXRPInitSignInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListXRPInitSignInfoRequest) ProtoMessage() {}

func (x *ListXRPInitSignInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListXRPInitSignInfoRequest.ProtoReflect.Descriptor instead.
func (*ListXRPInitSignInfoRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{111}
}

func (x *ListXRPInitSignInfoRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type ListXRPInitSignInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignInfoList []*SignInfo `protobuf:"bytes,1,rep,name=sign_info_list,json=signInfoList,proto3" json:"sign_info_list,omitempty"`
}

func (x *ListXRPInitSignInfoResponse) Reset() {
	*x = ListXRPInitSignInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListXRPInitSignInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListXRPInitSignInfoResponse) ProtoMessage() {}

func (x *ListXRPInitSignInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListXRPInitSignInfoResponse.ProtoReflect.Descriptor instead.
func (*ListXRPInitSignInfoResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{112}
}

func (x *ListXRPInitSignInfoResponse) GetSignInfoList() []*SignInfo {
	if x != nil {
		return x.SignInfoList
	}
	return nil
}

type ListInitSignInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *ListInitSignInfoRequest) Reset() {
	*x = ListInitSignInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInitSignInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInitSignInfoRequest) ProtoMessage() {}

func (x *ListInitSignInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInitSignInfoRequest.ProtoReflect.Descriptor instead.
func (*ListInitSignInfoRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{113}
}

func (x *ListInitSignInfoRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type ListTransfersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId  string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`    // The id of wallet
	PageSize  uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`   // indicate how many objects to return in a single response
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"` // retrieve the next page
}

func (x *ListTransfersRequest) Reset() {
	*x = ListTransfersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransfersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransfersRequest) ProtoMessage() {}

func (x *ListTransfersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransfersRequest.ProtoReflect.Descriptor instead.
func (*ListTransfersRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{114}
}

func (x *ListTransfersRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListTransfersRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTransfersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListTransfersByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType ListFilterType `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	// optional
	TransferId string `protobuf:"bytes,2,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	// optional
	WalletId string `protobuf:"bytes,13,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// optional
	WalletName string `protobuf:"bytes,3,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// optional
	AddressName string `protobuf:"bytes,4,opt,name=address_name,json=addressName,proto3" json:"address_name,omitempty"`
	// optional
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// optional
	Txid string `protobuf:"bytes,6,opt,name=txid,proto3" json:"txid,omitempty"`
	// optional
	WatchOnly bool `protobuf:"varint,12,opt,name=watch_only,json=watchOnly,proto3" json:"watch_only,omitempty"`
	// optional
	Coin       gincoincglobalv1.Coin `protobuf:"varint,7,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	WalletType []WalletType          `protobuf:"varint,8,rep,packed,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`
	// optional
	TransferType gincoincglobalv1.TransferType `protobuf:"varint,9,opt,name=transfer_type,json=transferType,proto3,enum=gincoinc.global.v1.TransferType" json:"transfer_type,omitempty"`
	// optional
	PageSize uint32 `protobuf:"varint,10,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// optional
	PageToken string `protobuf:"bytes,11,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// optional
	StartTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// optional
	EndTime *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// optional
	Network *gincoincglobalv1.Network `protobuf:"varint,16,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
}

func (x *ListTransfersByFilterRequest) Reset() {
	*x = ListTransfersByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransfersByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransfersByFilterRequest) ProtoMessage() {}

func (x *ListTransfersByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransfersByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListTransfersByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{115}
}

func (x *ListTransfersByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListTransfersByFilterRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *ListTransfersByFilterRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListTransfersByFilterRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *ListTransfersByFilterRequest) GetAddressName() string {
	if x != nil {
		return x.AddressName
	}
	return ""
}

func (x *ListTransfersByFilterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ListTransfersByFilterRequest) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *ListTransfersByFilterRequest) GetWatchOnly() bool {
	if x != nil {
		return x.WatchOnly
	}
	return false
}

func (x *ListTransfersByFilterRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *ListTransfersByFilterRequest) GetWalletType() []WalletType {
	if x != nil {
		return x.WalletType
	}
	return nil
}

func (x *ListTransfersByFilterRequest) GetTransferType() gincoincglobalv1.TransferType {
	if x != nil {
		return x.TransferType
	}
	return gincoincglobalv1.TransferType(0)
}

func (x *ListTransfersByFilterRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTransfersByFilterRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListTransfersByFilterRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListTransfersByFilterRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ListTransfersByFilterRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

type ListTransfersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transfers     []*Transfer `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`                                // Array of transfer objects
	NextPageToken string      `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"` // The token for requesting the next page
}

func (x *ListTransfersResponse) Reset() {
	*x = ListTransfersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransfersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransfersResponse) ProtoMessage() {}

func (x *ListTransfersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransfersResponse.ProtoReflect.Descriptor instead.
func (*ListTransfersResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{116}
}

func (x *ListTransfersResponse) GetTransfers() []*Transfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

func (x *ListTransfersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListUncheckedTransfersByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasChecked bool         `protobuf:"varint,1,opt,name=has_checked,json=hasChecked,proto3" json:"has_checked,omitempty"`
	WalletType []WalletType `protobuf:"varint,2,rep,packed,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`
	PageSize   uint32       `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`   // indicate how many objects to return in a single response
	PageToken  string       `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"` // retrieve the next page
	// optional
	FilterType ListFilterType `protobuf:"varint,5,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	// optional
	TransferId string `protobuf:"bytes,6,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	// optional
	WalletId string `protobuf:"bytes,7,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// optional
	WalletName string `protobuf:"bytes,8,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// optional
	Address string `protobuf:"bytes,9,opt,name=address,proto3" json:"address,omitempty"`
	// optional
	Txid string `protobuf:"bytes,10,opt,name=txid,proto3" json:"txid,omitempty"`
	// optional
	Coin gincoincglobalv1.Coin `protobuf:"varint,11,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	// optional
	TransferType gincoincglobalv1.TransferType `protobuf:"varint,12,opt,name=transfer_type,json=transferType,proto3,enum=gincoinc.global.v1.TransferType" json:"transfer_type,omitempty"`
	// optional
	StartTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// optional
	EndTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// optional
	Network *gincoincglobalv1.Network `protobuf:"varint,15,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
}

func (x *ListUncheckedTransfersByFilterRequest) Reset() {
	*x = ListUncheckedTransfersByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUncheckedTransfersByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUncheckedTransfersByFilterRequest) ProtoMessage() {}

func (x *ListUncheckedTransfersByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUncheckedTransfersByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListUncheckedTransfersByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{117}
}

func (x *ListUncheckedTransfersByFilterRequest) GetHasChecked() bool {
	if x != nil {
		return x.HasChecked
	}
	return false
}

func (x *ListUncheckedTransfersByFilterRequest) GetWalletType() []WalletType {
	if x != nil {
		return x.WalletType
	}
	return nil
}

func (x *ListUncheckedTransfersByFilterRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListUncheckedTransfersByFilterRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListUncheckedTransfersByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListUncheckedTransfersByFilterRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *ListUncheckedTransfersByFilterRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListUncheckedTransfersByFilterRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *ListUncheckedTransfersByFilterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ListUncheckedTransfersByFilterRequest) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *ListUncheckedTransfersByFilterRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *ListUncheckedTransfersByFilterRequest) GetTransferType() gincoincglobalv1.TransferType {
	if x != nil {
		return x.TransferType
	}
	return gincoincglobalv1.TransferType(0)
}

func (x *ListUncheckedTransfersByFilterRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListUncheckedTransfersByFilterRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ListUncheckedTransfersByFilterRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

type UpdateUncheckedTransferHasCheckedFlagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId            string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	UncheckedTransferId string `protobuf:"bytes,2,opt,name=unchecked_transfer_id,json=uncheckedTransferId,proto3" json:"unchecked_transfer_id,omitempty"`
}

func (x *UpdateUncheckedTransferHasCheckedFlagRequest) Reset() {
	*x = UpdateUncheckedTransferHasCheckedFlagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUncheckedTransferHasCheckedFlagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUncheckedTransferHasCheckedFlagRequest) ProtoMessage() {}

func (x *UpdateUncheckedTransferHasCheckedFlagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUncheckedTransferHasCheckedFlagRequest.ProtoReflect.Descriptor instead.
func (*UpdateUncheckedTransferHasCheckedFlagRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{118}
}

func (x *UpdateUncheckedTransferHasCheckedFlagRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *UpdateUncheckedTransferHasCheckedFlagRequest) GetUncheckedTransferId() string {
	if x != nil {
		return x.UncheckedTransferId
	}
	return ""
}

type ListUncheckedTransfersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UncheckedTransfers []*UncheckedTransfer `protobuf:"bytes,1,rep,name=unchecked_transfers,json=uncheckedTransfers,proto3" json:"unchecked_transfers,omitempty"` // Array of transfer objects
	NextPageToken      string               `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`              // The token for requesting the next page
}

func (x *ListUncheckedTransfersResponse) Reset() {
	*x = ListUncheckedTransfersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUncheckedTransfersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUncheckedTransfersResponse) ProtoMessage() {}

func (x *ListUncheckedTransfersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUncheckedTransfersResponse.ProtoReflect.Descriptor instead.
func (*ListUncheckedTransfersResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{119}
}

func (x *ListUncheckedTransfersResponse) GetUncheckedTransfers() []*UncheckedTransfer {
	if x != nil {
		return x.UncheckedTransfers
	}
	return nil
}

func (x *ListUncheckedTransfersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListEventTriggeredMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListEventTriggeredMessagesRequest) Reset() {
	*x = ListEventTriggeredMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventTriggeredMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventTriggeredMessagesRequest) ProtoMessage() {}

func (x *ListEventTriggeredMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventTriggeredMessagesRequest.ProtoReflect.Descriptor instead.
func (*ListEventTriggeredMessagesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{120}
}

type ListEventTriggeredMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTriggeredMessages []*EventTriggeredMessage `protobuf:"bytes,1,rep,name=event_triggered_messages,json=eventTriggeredMessages,proto3" json:"event_triggered_messages,omitempty"`
}

func (x *ListEventTriggeredMessagesResponse) Reset() {
	*x = ListEventTriggeredMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventTriggeredMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventTriggeredMessagesResponse) ProtoMessage() {}

func (x *ListEventTriggeredMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventTriggeredMessagesResponse.ProtoReflect.Descriptor instead.
func (*ListEventTriggeredMessagesResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{121}
}

func (x *ListEventTriggeredMessagesResponse) GetEventTriggeredMessages() []*EventTriggeredMessage {
	if x != nil {
		return x.EventTriggeredMessages
	}
	return nil
}

type CreateEventTriggeredMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTriggeredMessageType EventTriggeredMessageType `protobuf:"varint,1,opt,name=event_triggered_message_type,json=eventTriggeredMessageType,proto3,enum=adamant.global.v1.EventTriggeredMessageType" json:"event_triggered_message_type,omitempty"`
	Destination               string                    `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *CreateEventTriggeredMessageRequest) Reset() {
	*x = CreateEventTriggeredMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventTriggeredMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventTriggeredMessageRequest) ProtoMessage() {}

func (x *CreateEventTriggeredMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventTriggeredMessageRequest.ProtoReflect.Descriptor instead.
func (*CreateEventTriggeredMessageRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{122}
}

func (x *CreateEventTriggeredMessageRequest) GetEventTriggeredMessageType() EventTriggeredMessageType {
	if x != nil {
		return x.EventTriggeredMessageType
	}
	return EventTriggeredMessageType_EVENT_TRIGGERED_MESSAGE_TYPE_INVALID
}

func (x *CreateEventTriggeredMessageRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

type CreateEventTriggeredMessageResponce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTriggeredMessageId string `protobuf:"bytes,1,opt,name=event_triggered_message_id,json=eventTriggeredMessageId,proto3" json:"event_triggered_message_id,omitempty"`
}

func (x *CreateEventTriggeredMessageResponce) Reset() {
	*x = CreateEventTriggeredMessageResponce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventTriggeredMessageResponce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventTriggeredMessageResponce) ProtoMessage() {}

func (x *CreateEventTriggeredMessageResponce) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventTriggeredMessageResponce.ProtoReflect.Descriptor instead.
func (*CreateEventTriggeredMessageResponce) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{123}
}

func (x *CreateEventTriggeredMessageResponce) GetEventTriggeredMessageId() string {
	if x != nil {
		return x.EventTriggeredMessageId
	}
	return ""
}

type UpdateEventTriggeredMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTriggeredMessageId string `protobuf:"bytes,1,opt,name=event_triggered_message_id,json=eventTriggeredMessageId,proto3" json:"event_triggered_message_id,omitempty"`
	Destination             string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *UpdateEventTriggeredMessageRequest) Reset() {
	*x = UpdateEventTriggeredMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEventTriggeredMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventTriggeredMessageRequest) ProtoMessage() {}

func (x *UpdateEventTriggeredMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventTriggeredMessageRequest.ProtoReflect.Descriptor instead.
func (*UpdateEventTriggeredMessageRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{124}
}

func (x *UpdateEventTriggeredMessageRequest) GetEventTriggeredMessageId() string {
	if x != nil {
		return x.EventTriggeredMessageId
	}
	return ""
}

func (x *UpdateEventTriggeredMessageRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

type DeleteEventTriggeredMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTriggeredMessageId string `protobuf:"bytes,1,opt,name=event_triggered_message_id,json=eventTriggeredMessageId,proto3" json:"event_triggered_message_id,omitempty"`
}

func (x *DeleteEventTriggeredMessageRequest) Reset() {
	*x = DeleteEventTriggeredMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEventTriggeredMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEventTriggeredMessageRequest) ProtoMessage() {}

func (x *DeleteEventTriggeredMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEventTriggeredMessageRequest.ProtoReflect.Descriptor instead.
func (*DeleteEventTriggeredMessageRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{125}
}

func (x *DeleteEventTriggeredMessageRequest) GetEventTriggeredMessageId() string {
	if x != nil {
		return x.EventTriggeredMessageId
	}
	return ""
}

type GetRateSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateSnapshotId string `protobuf:"bytes,1,opt,name=rate_snapshot_id,json=rateSnapshotId,proto3" json:"rate_snapshot_id,omitempty"` // The id of rate-snapshot
}

func (x *GetRateSnapshotRequest) Reset() {
	*x = GetRateSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRateSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRateSnapshotRequest) ProtoMessage() {}

func (x *GetRateSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRateSnapshotRequest.ProtoReflect.Descriptor instead.
func (*GetRateSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{126}
}

func (x *GetRateSnapshotRequest) GetRateSnapshotId() string {
	if x != nil {
		return x.RateSnapshotId
	}
	return ""
}

type GetLatestRateSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLatestRateSnapshotRequest) Reset() {
	*x = GetLatestRateSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestRateSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestRateSnapshotRequest) ProtoMessage() {}

func (x *GetLatestRateSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestRateSnapshotRequest.ProtoReflect.Descriptor instead.
func (*GetLatestRateSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{127}
}

type SetRatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rates []*RequestRate `protobuf:"bytes,1,rep,name=rates,proto3" json:"rates,omitempty"` // Array of rate objects
}

func (x *SetRatesRequest) Reset() {
	*x = SetRatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRatesRequest) ProtoMessage() {}

func (x *SetRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRatesRequest.ProtoReflect.Descriptor instead.
func (*SetRatesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{128}
}

func (x *SetRatesRequest) GetRates() []*RequestRate {
	if x != nil {
		return x.Rates
	}
	return nil
}

type SetDefaultRatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetDefaultRatesRequest) Reset() {
	*x = SetDefaultRatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultRatesRequest) ProtoMessage() {}

func (x *SetDefaultRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultRatesRequest.ProtoReflect.Descriptor instead.
func (*SetDefaultRatesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{129}
}

type SetRatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateSnapshotId string `protobuf:"bytes,1,opt,name=rate_snapshot_id,json=rateSnapshotId,proto3" json:"rate_snapshot_id,omitempty"` // The id of rate-snapshot
}

func (x *SetRatesResponse) Reset() {
	*x = SetRatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRatesResponse) ProtoMessage() {}

func (x *SetRatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRatesResponse.ProtoReflect.Descriptor instead.
func (*SetRatesResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{130}
}

func (x *SetRatesResponse) GetRateSnapshotId() string {
	if x != nil {
		return x.RateSnapshotId
	}
	return ""
}

type SetDefaultRatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateSnapshotIds []string `protobuf:"bytes,1,rep,name=rate_snapshot_ids,json=rateSnapshotIds,proto3" json:"rate_snapshot_ids,omitempty"` // Array of ids of rate-snapshots
}

func (x *SetDefaultRatesResponse) Reset() {
	*x = SetDefaultRatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultRatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultRatesResponse) ProtoMessage() {}

func (x *SetDefaultRatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultRatesResponse.ProtoReflect.Descriptor instead.
func (*SetDefaultRatesResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{131}
}

func (x *SetDefaultRatesResponse) GetRateSnapshotIds() []string {
	if x != nil {
		return x.RateSnapshotIds
	}
	return nil
}

type GetSpendableBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *GetSpendableBalanceRequest) Reset() {
	*x = GetSpendableBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpendableBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpendableBalanceRequest) ProtoMessage() {}

func (x *GetSpendableBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpendableBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetSpendableBalanceRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{132}
}

func (x *GetSpendableBalanceRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type GetSpendableBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalSpendableBalance         float64 `protobuf:"fixed64,1,opt,name=total_spendable_balance,json=totalSpendableBalance,proto3" json:"total_spendable_balance,omitempty"`
	StringTotalSpendableBalance   string  `protobuf:"bytes,2,opt,name=string_total_spendable_balance,json=stringTotalSpendableBalance,proto3" json:"string_total_spendable_balance,omitempty"`
	DailySpendableBalance         float64 `protobuf:"fixed64,3,opt,name=daily_spendable_balance,json=dailySpendableBalance,proto3" json:"daily_spendable_balance,omitempty"`
	StringDailySpendableBalance   string  `protobuf:"bytes,4,opt,name=string_daily_spendable_balance,json=stringDailySpendableBalance,proto3" json:"string_daily_spendable_balance,omitempty"`
	HourlySpendableBalance        float64 `protobuf:"fixed64,5,opt,name=hourly_spendable_balance,json=hourlySpendableBalance,proto3" json:"hourly_spendable_balance,omitempty"`
	StringHourlySpendableBalance  string  `protobuf:"bytes,6,opt,name=string_hourly_spendable_balance,json=stringHourlySpendableBalance,proto3" json:"string_hourly_spendable_balance,omitempty"`
	OneTimeSpendableBalance       float64 `protobuf:"fixed64,7,opt,name=one_time_spendable_balance,json=oneTimeSpendableBalance,proto3" json:"one_time_spendable_balance,omitempty"`
	StringOneTimeSpendableBalance string  `protobuf:"bytes,8,opt,name=string_one_time_spendable_balance,json=stringOneTimeSpendableBalance,proto3" json:"string_one_time_spendable_balance,omitempty"`
}

func (x *GetSpendableBalanceResponse) Reset() {
	*x = GetSpendableBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpendableBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpendableBalanceResponse) ProtoMessage() {}

func (x *GetSpendableBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpendableBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetSpendableBalanceResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{133}
}

func (x *GetSpendableBalanceResponse) GetTotalSpendableBalance() float64 {
	if x != nil {
		return x.TotalSpendableBalance
	}
	return 0
}

func (x *GetSpendableBalanceResponse) GetStringTotalSpendableBalance() string {
	if x != nil {
		return x.StringTotalSpendableBalance
	}
	return ""
}

func (x *GetSpendableBalanceResponse) GetDailySpendableBalance() float64 {
	if x != nil {
		return x.DailySpendableBalance
	}
	return 0
}

func (x *GetSpendableBalanceResponse) GetStringDailySpendableBalance() string {
	if x != nil {
		return x.StringDailySpendableBalance
	}
	return ""
}

func (x *GetSpendableBalanceResponse) GetHourlySpendableBalance() float64 {
	if x != nil {
		return x.HourlySpendableBalance
	}
	return 0
}

func (x *GetSpendableBalanceResponse) GetStringHourlySpendableBalance() string {
	if x != nil {
		return x.StringHourlySpendableBalance
	}
	return ""
}

func (x *GetSpendableBalanceResponse) GetOneTimeSpendableBalance() float64 {
	if x != nil {
		return x.OneTimeSpendableBalance
	}
	return 0
}

func (x *GetSpendableBalanceResponse) GetStringOneTimeSpendableBalance() string {
	if x != nil {
		return x.StringOneTimeSpendableBalance
	}
	return ""
}

type GetTotalBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatchOnly bool `protobuf:"varint,1,opt,name=watch_only,json=watchOnly,proto3" json:"watch_only,omitempty"`
}

func (x *GetTotalBalanceRequest) Reset() {
	*x = GetTotalBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTotalBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTotalBalanceRequest) ProtoMessage() {}

func (x *GetTotalBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTotalBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetTotalBalanceRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{134}
}

func (x *GetTotalBalanceRequest) GetWatchOnly() bool {
	if x != nil {
		return x.WatchOnly
	}
	return false
}

type ListBalanceSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatchOnly bool                   `protobuf:"varint,3,opt,name=watch_only,json=watchOnly,proto3" json:"watch_only,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *ListBalanceSnapshotsRequest) Reset() {
	*x = ListBalanceSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBalanceSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBalanceSnapshotsRequest) ProtoMessage() {}

func (x *ListBalanceSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBalanceSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*ListBalanceSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{135}
}

func (x *ListBalanceSnapshotsRequest) GetWatchOnly() bool {
	if x != nil {
		return x.WatchOnly
	}
	return false
}

func (x *ListBalanceSnapshotsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListBalanceSnapshotsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type ListBalanceSnapshotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BalanceSnapshots []*BalanceSnapshot `protobuf:"bytes,1,rep,name=balance_snapshots,json=balanceSnapshots,proto3" json:"balance_snapshots,omitempty"`
}

func (x *ListBalanceSnapshotsResponse) Reset() {
	*x = ListBalanceSnapshotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBalanceSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBalanceSnapshotsResponse) ProtoMessage() {}

func (x *ListBalanceSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBalanceSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*ListBalanceSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{136}
}

func (x *ListBalanceSnapshotsResponse) GetBalanceSnapshots() []*BalanceSnapshot {
	if x != nil {
		return x.BalanceSnapshots
	}
	return nil
}

type ListWalletBalanceSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIds []string               `protobuf:"bytes,1,rep,name=wallet_ids,json=walletIds,proto3" json:"wallet_ids,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *ListWalletBalanceSnapshotsRequest) Reset() {
	*x = ListWalletBalanceSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletBalanceSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletBalanceSnapshotsRequest) ProtoMessage() {}

func (x *ListWalletBalanceSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletBalanceSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*ListWalletBalanceSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{137}
}

func (x *ListWalletBalanceSnapshotsRequest) GetWalletIds() []string {
	if x != nil {
		return x.WalletIds
	}
	return nil
}

func (x *ListWalletBalanceSnapshotsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListWalletBalanceSnapshotsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type ListWalletBalanceSnapshotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletBalanceSnapshotMap *WalletBalanceSnapshotMap `protobuf:"bytes,1,opt,name=wallet_balance_snapshot_map,json=walletBalanceSnapshotMap,proto3" json:"wallet_balance_snapshot_map,omitempty"`
}

func (x *ListWalletBalanceSnapshotsResponse) Reset() {
	*x = ListWalletBalanceSnapshotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletBalanceSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletBalanceSnapshotsResponse) ProtoMessage() {}

func (x *ListWalletBalanceSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletBalanceSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*ListWalletBalanceSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{138}
}

func (x *ListWalletBalanceSnapshotsResponse) GetWalletBalanceSnapshotMap() *WalletBalanceSnapshotMap {
	if x != nil {
		return x.WalletBalanceSnapshotMap
	}
	return nil
}

type ListTransferVolumeSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatchOnly bool                   `protobuf:"varint,1,opt,name=watch_only,json=watchOnly,proto3" json:"watch_only,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *ListTransferVolumeSnapshotsRequest) Reset() {
	*x = ListTransferVolumeSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransferVolumeSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransferVolumeSnapshotsRequest) ProtoMessage() {}

func (x *ListTransferVolumeSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransferVolumeSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*ListTransferVolumeSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{139}
}

func (x *ListTransferVolumeSnapshotsRequest) GetWatchOnly() bool {
	if x != nil {
		return x.WatchOnly
	}
	return false
}

func (x *ListTransferVolumeSnapshotsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListTransferVolumeSnapshotsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type ListTransferVolumeSnapshotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferVolumeSnapshots *TransferVolumeSnapshots `protobuf:"bytes,1,opt,name=transfer_volume_snapshots,json=transferVolumeSnapshots,proto3" json:"transfer_volume_snapshots,omitempty"`
}

func (x *ListTransferVolumeSnapshotsResponse) Reset() {
	*x = ListTransferVolumeSnapshotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransferVolumeSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransferVolumeSnapshotsResponse) ProtoMessage() {}

func (x *ListTransferVolumeSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransferVolumeSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*ListTransferVolumeSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{140}
}

func (x *ListTransferVolumeSnapshotsResponse) GetTransferVolumeSnapshots() *TransferVolumeSnapshots {
	if x != nil {
		return x.TransferVolumeSnapshots
	}
	return nil
}

type ListWalletTransferVolumeSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIds []string               `protobuf:"bytes,1,rep,name=wallet_ids,json=walletIds,proto3" json:"wallet_ids,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *ListWalletTransferVolumeSnapshotsRequest) Reset() {
	*x = ListWalletTransferVolumeSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletTransferVolumeSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletTransferVolumeSnapshotsRequest) ProtoMessage() {}

func (x *ListWalletTransferVolumeSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletTransferVolumeSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*ListWalletTransferVolumeSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{141}
}

func (x *ListWalletTransferVolumeSnapshotsRequest) GetWalletIds() []string {
	if x != nil {
		return x.WalletIds
	}
	return nil
}

func (x *ListWalletTransferVolumeSnapshotsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListWalletTransferVolumeSnapshotsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type ListWalletTransferVolumeSnapshotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletTransferVolumeSnapshots *WalletTransferVolumeSnapshots `protobuf:"bytes,1,opt,name=wallet_transfer_volume_snapshots,json=walletTransferVolumeSnapshots,proto3" json:"wallet_transfer_volume_snapshots,omitempty"`
}

func (x *ListWalletTransferVolumeSnapshotsResponse) Reset() {
	*x = ListWalletTransferVolumeSnapshotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletTransferVolumeSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletTransferVolumeSnapshotsResponse) ProtoMessage() {}

func (x *ListWalletTransferVolumeSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletTransferVolumeSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*ListWalletTransferVolumeSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{142}
}

func (x *ListWalletTransferVolumeSnapshotsResponse) GetWalletTransferVolumeSnapshots() *WalletTransferVolumeSnapshots {
	if x != nil {
		return x.WalletTransferVolumeSnapshots
	}
	return nil
}

type CalculateFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId          string                         `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	FeeRate           uint64                         `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	TxOutputs         []*RequestTxOutput             `protobuf:"bytes,3,rep,name=tx_outputs,json=txOutputs,proto3" json:"tx_outputs,omitempty"`
	Address           string                         `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	DestinationTag    uint32                         `protobuf:"varint,5,opt,name=destination_tag,json=destinationTag,proto3" json:"destination_tag,omitempty"`
	StringValue       string                         `protobuf:"bytes,6,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	SubstrateSpecific *CalculateFeeSubstrateSpecific `protobuf:"bytes,7,opt,name=substrate_specific,json=substrateSpecific,proto3" json:"substrate_specific,omitempty"`
	NemSpecific       *CalculateFeeNemSpecific       `protobuf:"bytes,8,opt,name=nem_specific,json=nemSpecific,proto3" json:"nem_specific,omitempty"`
	SymbolSpecific    *CalculateFeeSymbolSpecific    `protobuf:"bytes,9,opt,name=symbol_specific,json=symbolSpecific,proto3" json:"symbol_specific,omitempty"`
	EthereumSpecific  *CalculateFeeEthereumSpecific  `protobuf:"bytes,10,opt,name=ethereum_specific,json=ethereumSpecific,proto3" json:"ethereum_specific,omitempty"`
	CosmosSpecific    *CalculateFeeCosmosSpecific    `protobuf:"bytes,11,opt,name=cosmos_specific,json=cosmosSpecific,proto3" json:"cosmos_specific,omitempty"`
	HederaSpecific    *CalculateFeeHederaSpecific    `protobuf:"bytes,12,opt,name=hedera_specific,json=hederaSpecific,proto3" json:"hedera_specific,omitempty"`
	RbfSpecific       *CalculateFeeRbfSpecific       `protobuf:"bytes,13,opt,name=rbf_specific,json=rbfSpecific,proto3" json:"rbf_specific,omitempty"`
	UtxoSpecific      *UtxoSpecific                  `protobuf:"bytes,14,opt,name=utxo_specific,json=utxoSpecific,proto3" json:"utxo_specific,omitempty"`
	SolanaSpecific    *CalculateFeeSolanaSpecific    `protobuf:"bytes,15,opt,name=solana_specific,json=solanaSpecific,proto3" json:"solana_specific,omitempty"`
	AvalancheSpecific *CalculateFeeAvalancheSpecific `protobuf:"bytes,16,opt,name=avalanche_specific,json=avalancheSpecific,proto3" json:"avalanche_specific,omitempty"`
}

func (x *CalculateFeeRequest) Reset() {
	*x = CalculateFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateFeeRequest) ProtoMessage() {}

func (x *CalculateFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateFeeRequest.ProtoReflect.Descriptor instead.
func (*CalculateFeeRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{143}
}

func (x *CalculateFeeRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *CalculateFeeRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *CalculateFeeRequest) GetTxOutputs() []*RequestTxOutput {
	if x != nil {
		return x.TxOutputs
	}
	return nil
}

func (x *CalculateFeeRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CalculateFeeRequest) GetDestinationTag() uint32 {
	if x != nil {
		return x.DestinationTag
	}
	return 0
}

func (x *CalculateFeeRequest) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *CalculateFeeRequest) GetSubstrateSpecific() *CalculateFeeSubstrateSpecific {
	if x != nil {
		return x.SubstrateSpecific
	}
	return nil
}

func (x *CalculateFeeRequest) GetNemSpecific() *CalculateFeeNemSpecific {
	if x != nil {
		return x.NemSpecific
	}
	return nil
}

func (x *CalculateFeeRequest) GetSymbolSpecific() *CalculateFeeSymbolSpecific {
	if x != nil {
		return x.SymbolSpecific
	}
	return nil
}

func (x *CalculateFeeRequest) GetEthereumSpecific() *CalculateFeeEthereumSpecific {
	if x != nil {
		return x.EthereumSpecific
	}
	return nil
}

func (x *CalculateFeeRequest) GetCosmosSpecific() *CalculateFeeCosmosSpecific {
	if x != nil {
		return x.CosmosSpecific
	}
	return nil
}

func (x *CalculateFeeRequest) GetHederaSpecific() *CalculateFeeHederaSpecific {
	if x != nil {
		return x.HederaSpecific
	}
	return nil
}

func (x *CalculateFeeRequest) GetRbfSpecific() *CalculateFeeRbfSpecific {
	if x != nil {
		return x.RbfSpecific
	}
	return nil
}

func (x *CalculateFeeRequest) GetUtxoSpecific() *UtxoSpecific {
	if x != nil {
		return x.UtxoSpecific
	}
	return nil
}

func (x *CalculateFeeRequest) GetSolanaSpecific() *CalculateFeeSolanaSpecific {
	if x != nil {
		return x.SolanaSpecific
	}
	return nil
}

func (x *CalculateFeeRequest) GetAvalancheSpecific() *CalculateFeeAvalancheSpecific {
	if x != nil {
		return x.AvalancheSpecific
	}
	return nil
}

// The model of Substrate specific fields of CreateTransaction
type CalculateFeeSubstrateSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallType         SubstrateCallType `protobuf:"varint,1,opt,name=call_type,json=callType,proto3,enum=adamant.global.v1.SubstrateCallType" json:"call_type,omitempty"`
	MultisigCallType SubstrateCallType `protobuf:"varint,2,opt,name=multisig_call_type,json=multisigCallType,proto3,enum=adamant.global.v1.SubstrateCallType" json:"multisig_call_type,omitempty"`
}

func (x *CalculateFeeSubstrateSpecific) Reset() {
	*x = CalculateFeeSubstrateSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateFeeSubstrateSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateFeeSubstrateSpecific) ProtoMessage() {}

func (x *CalculateFeeSubstrateSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateFeeSubstrateSpecific.ProtoReflect.Descriptor instead.
func (*CalculateFeeSubstrateSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{144}
}

func (x *CalculateFeeSubstrateSpecific) GetCallType() SubstrateCallType {
	if x != nil {
		return x.CallType
	}
	return SubstrateCallType_SUBSTRATE_CALL_TYPE_INVALID
}

func (x *CalculateFeeSubstrateSpecific) GetMultisigCallType() SubstrateCallType {
	if x != nil {
		return x.MultisigCallType
	}
	return SubstrateCallType_SUBSTRATE_CALL_TYPE_INVALID
}

// The model of Nem specific fields of CalculateFee
type CalculateFeeNemSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CalculateFeeNemSpecific) Reset() {
	*x = CalculateFeeNemSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateFeeNemSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateFeeNemSpecific) ProtoMessage() {}

func (x *CalculateFeeNemSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateFeeNemSpecific.ProtoReflect.Descriptor instead.
func (*CalculateFeeNemSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{145}
}

func (x *CalculateFeeNemSpecific) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// The model of Symbol specific fields of CalculateFee
type CalculateFeeSymbolSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CalculateFeeSymbolSpecific) Reset() {
	*x = CalculateFeeSymbolSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateFeeSymbolSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateFeeSymbolSpecific) ProtoMessage() {}

func (x *CalculateFeeSymbolSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateFeeSymbolSpecific.ProtoReflect.Descriptor instead.
func (*CalculateFeeSymbolSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{146}
}

func (x *CalculateFeeSymbolSpecific) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// The model of Ethereum specific fields of CalculateFee
type CalculateFeeEthereumSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// optional
	IsStakingTransaction *bool `protobuf:"varint,2,opt,name=is_staking_transaction,json=isStakingTransaction,proto3,oneof" json:"is_staking_transaction,omitempty"`
}

func (x *CalculateFeeEthereumSpecific) Reset() {
	*x = CalculateFeeEthereumSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateFeeEthereumSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateFeeEthereumSpecific) ProtoMessage() {}

func (x *CalculateFeeEthereumSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateFeeEthereumSpecific.ProtoReflect.Descriptor instead.
func (*CalculateFeeEthereumSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{147}
}

func (x *CalculateFeeEthereumSpecific) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *CalculateFeeEthereumSpecific) GetIsStakingTransaction() bool {
	if x != nil && x.IsStakingTransaction != nil {
		return *x.IsStakingTransaction
	}
	return false
}

// The model of Cosmos specific fields of CalculateFee
type CalculateFeeCosmosSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type gincoincglobalv1.CosmosMsgType `protobuf:"varint,1,opt,name=type,proto3,enum=gincoinc.global.v1.CosmosMsgType" json:"type,omitempty"`
	Memo string                         `protobuf:"bytes,2,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *CalculateFeeCosmosSpecific) Reset() {
	*x = CalculateFeeCosmosSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateFeeCosmosSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateFeeCosmosSpecific) ProtoMessage() {}

func (x *CalculateFeeCosmosSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateFeeCosmosSpecific.ProtoReflect.Descriptor instead.
func (*CalculateFeeCosmosSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{148}
}

func (x *CalculateFeeCosmosSpecific) GetType() gincoincglobalv1.CosmosMsgType {
	if x != nil {
		return x.Type
	}
	return gincoincglobalv1.CosmosMsgType(0)
}

func (x *CalculateFeeCosmosSpecific) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

// The model of Hedera specific fields of CalculateFee
type CalculateFeeHederaSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memo string `protobuf:"bytes,1,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *CalculateFeeHederaSpecific) Reset() {
	*x = CalculateFeeHederaSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateFeeHederaSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateFeeHederaSpecific) ProtoMessage() {}

func (x *CalculateFeeHederaSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateFeeHederaSpecific.ProtoReflect.Descriptor instead.
func (*CalculateFeeHederaSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{149}
}

func (x *CalculateFeeHederaSpecific) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

// The model of Solana specific fields of CalculateFee
type CalculateFeeSolanaSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType gincoincglobalv1.SolanaEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=gincoinc.global.v1.SolanaEventType" json:"event_type,omitempty"`
}

func (x *CalculateFeeSolanaSpecific) Reset() {
	*x = CalculateFeeSolanaSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateFeeSolanaSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateFeeSolanaSpecific) ProtoMessage() {}

func (x *CalculateFeeSolanaSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateFeeSolanaSpecific.ProtoReflect.Descriptor instead.
func (*CalculateFeeSolanaSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{150}
}

func (x *CalculateFeeSolanaSpecific) GetEventType() gincoincglobalv1.SolanaEventType {
	if x != nil {
		return x.EventType
	}
	return gincoincglobalv1.SolanaEventType(0)
}

// The model of RBF specific fields of CalculateFee
type CalculateFeeRbfSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *CalculateFeeRbfSpecific) Reset() {
	*x = CalculateFeeRbfSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateFeeRbfSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateFeeRbfSpecific) ProtoMessage() {}

func (x *CalculateFeeRbfSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateFeeRbfSpecific.ProtoReflect.Descriptor instead.
func (*CalculateFeeRbfSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{151}
}

func (x *CalculateFeeRbfSpecific) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

// The model of Utxo specific fields of CalculateFee
type UtxoSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectedUtxos []*SelectedUTXO `protobuf:"bytes,1,rep,name=selected_utxos,json=selectedUtxos,proto3" json:"selected_utxos,omitempty"`
}

func (x *UtxoSpecific) Reset() {
	*x = UtxoSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtxoSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoSpecific) ProtoMessage() {}

func (x *UtxoSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoSpecific.ProtoReflect.Descriptor instead.
func (*UtxoSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{152}
}

func (x *UtxoSpecific) GetSelectedUtxos() []*SelectedUTXO {
	if x != nil {
		return x.SelectedUtxos
	}
	return nil
}

// The model of Avalanche specific fields of CalculateFee
type CalculateFeeAvalancheSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxType *gincoincglobalv1.AvalancheTxType `protobuf:"varint,1,opt,name=tx_type,json=txType,proto3,enum=gincoinc.global.v1.AvalancheTxType,oneof" json:"tx_type,omitempty"`
}

func (x *CalculateFeeAvalancheSpecific) Reset() {
	*x = CalculateFeeAvalancheSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateFeeAvalancheSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateFeeAvalancheSpecific) ProtoMessage() {}

func (x *CalculateFeeAvalancheSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateFeeAvalancheSpecific.ProtoReflect.Descriptor instead.
func (*CalculateFeeAvalancheSpecific) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{153}
}

func (x *CalculateFeeAvalancheSpecific) GetTxType() gincoincglobalv1.AvalancheTxType {
	if x != nil && x.TxType != nil {
		return *x.TxType
	}
	return gincoincglobalv1.AvalancheTxType(0)
}

type CalculateFeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fee       float64 `protobuf:"fixed64,1,opt,name=fee,proto3" json:"fee,omitempty"`
	StringFee string  `protobuf:"bytes,2,opt,name=string_fee,json=stringFee,proto3" json:"string_fee,omitempty"`
}

func (x *CalculateFeeResponse) Reset() {
	*x = CalculateFeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateFeeResponse) ProtoMessage() {}

func (x *CalculateFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateFeeResponse.ProtoReflect.Descriptor instead.
func (*CalculateFeeResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{154}
}

func (x *CalculateFeeResponse) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *CalculateFeeResponse) GetStringFee() string {
	if x != nil {
		return x.StringFee
	}
	return ""
}

type GetMembersDeactivatabilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMembersDeactivatabilitiesRequest) Reset() {
	*x = GetMembersDeactivatabilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMembersDeactivatabilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMembersDeactivatabilitiesRequest) ProtoMessage() {}

func (x *GetMembersDeactivatabilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMembersDeactivatabilitiesRequest.ProtoReflect.Descriptor instead.
func (*GetMembersDeactivatabilitiesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{155}
}

type GetMembersDeactivatabilitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deactivatabilities []*Deactivatability `protobuf:"bytes,1,rep,name=deactivatabilities,proto3" json:"deactivatabilities,omitempty"`
}

func (x *GetMembersDeactivatabilitiesResponse) Reset() {
	*x = GetMembersDeactivatabilitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMembersDeactivatabilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMembersDeactivatabilitiesResponse) ProtoMessage() {}

func (x *GetMembersDeactivatabilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMembersDeactivatabilitiesResponse.ProtoReflect.Descriptor instead.
func (*GetMembersDeactivatabilitiesResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{156}
}

func (x *GetMembersDeactivatabilitiesResponse) GetDeactivatabilities() []*Deactivatability {
	if x != nil {
		return x.Deactivatabilities
	}
	return nil
}

type GetRecommendedFeeRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin    gincoincglobalv1.Coin     `protobuf:"varint,1,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	Network *gincoincglobalv1.Network `protobuf:"varint,2,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
}

func (x *GetRecommendedFeeRateRequest) Reset() {
	*x = GetRecommendedFeeRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecommendedFeeRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendedFeeRateRequest) ProtoMessage() {}

func (x *GetRecommendedFeeRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendedFeeRateRequest.ProtoReflect.Descriptor instead.
func (*GetRecommendedFeeRateRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{157}
}

func (x *GetRecommendedFeeRateRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *GetRecommendedFeeRateRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

type GetRecommendedFeeRateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fastest uint64 `protobuf:"varint,1,opt,name=fastest,proto3" json:"fastest,omitempty"`
	Fast    uint64 `protobuf:"varint,2,opt,name=fast,proto3" json:"fast,omitempty"`
	Average uint64 `protobuf:"varint,3,opt,name=average,proto3" json:"average,omitempty"`
	SafeLow uint64 `protobuf:"varint,4,opt,name=safe_low,json=safeLow,proto3" json:"safe_low,omitempty"`
}

func (x *GetRecommendedFeeRateResponse) Reset() {
	*x = GetRecommendedFeeRateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecommendedFeeRateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendedFeeRateResponse) ProtoMessage() {}

func (x *GetRecommendedFeeRateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendedFeeRateResponse.ProtoReflect.Descriptor instead.
func (*GetRecommendedFeeRateResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{158}
}

func (x *GetRecommendedFeeRateResponse) GetFastest() uint64 {
	if x != nil {
		return x.Fastest
	}
	return 0
}

func (x *GetRecommendedFeeRateResponse) GetFast() uint64 {
	if x != nil {
		return x.Fast
	}
	return 0
}

func (x *GetRecommendedFeeRateResponse) GetAverage() uint64 {
	if x != nil {
		return x.Average
	}
	return 0
}

func (x *GetRecommendedFeeRateResponse) GetSafeLow() uint64 {
	if x != nil {
		return x.SafeLow
	}
	return 0
}

type ValidateAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin    gincoincglobalv1.Coin     `protobuf:"varint,1,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"` // The type of coin
	Address string                    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Network *gincoincglobalv1.Network `protobuf:"varint,3,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
}

func (x *ValidateAddressRequest) Reset() {
	*x = ValidateAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateAddressRequest) ProtoMessage() {}

func (x *ValidateAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateAddressRequest.ProtoReflect.Descriptor instead.
func (*ValidateAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{159}
}

func (x *ValidateAddressRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *ValidateAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ValidateAddressRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

type ValidateAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"` // The flag which indicates given address is valid or not
}

func (x *ValidateAddressResponse) Reset() {
	*x = ValidateAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateAddressResponse) ProtoMessage() {}

func (x *ValidateAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateAddressResponse.ProtoReflect.Descriptor instead.
func (*ValidateAddressResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{160}
}

func (x *ValidateAddressResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type ListConfirmationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListConfirmationsRequest) Reset() {
	*x = ListConfirmationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfirmationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfirmationsRequest) ProtoMessage() {}

func (x *ListConfirmationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfirmationsRequest.ProtoReflect.Descriptor instead.
func (*ListConfirmationsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{161}
}

type ListConfirmationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Confirmations []*Confirmation `protobuf:"bytes,1,rep,name=confirmations,proto3" json:"confirmations,omitempty"`
}

func (x *ListConfirmationsResponse) Reset() {
	*x = ListConfirmationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfirmationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfirmationsResponse) ProtoMessage() {}

func (x *ListConfirmationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfirmationsResponse.ProtoReflect.Descriptor instead.
func (*ListConfirmationsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{162}
}

func (x *ListConfirmationsResponse) GetConfirmations() []*Confirmation {
	if x != nil {
		return x.Confirmations
	}
	return nil
}

type ListAuditLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuditLogGroup  AuditLogGroup          `protobuf:"varint,1,opt,name=audit_log_group,json=auditLogGroup,proto3,enum=adamant.global.v1.AuditLogGroup" json:"audit_log_group,omitempty"`
	AccountId      string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PageSize       uint32                 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken      string                 `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	StartEventTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_event_time,json=startEventTime,proto3,oneof" json:"start_event_time,omitempty"`
	EndEventTime   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_event_time,json=endEventTime,proto3,oneof" json:"end_event_time,omitempty"`
}

func (x *ListAuditLogsRequest) Reset() {
	*x = ListAuditLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuditLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditLogsRequest) ProtoMessage() {}

func (x *ListAuditLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditLogsRequest.ProtoReflect.Descriptor instead.
func (*ListAuditLogsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{163}
}

func (x *ListAuditLogsRequest) GetAuditLogGroup() AuditLogGroup {
	if x != nil {
		return x.AuditLogGroup
	}
	return AuditLogGroup_AUDIT_LOG_GROUP_INVALID
}

func (x *ListAuditLogsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListAuditLogsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAuditLogsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListAuditLogsRequest) GetStartEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartEventTime
	}
	return nil
}

func (x *ListAuditLogsRequest) GetEndEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndEventTime
	}
	return nil
}

type ListAuditLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuditLogs     []*AuditLog `protobuf:"bytes,1,rep,name=audit_logs,json=auditLogs,proto3" json:"audit_logs,omitempty"`
	NextPageToken string      `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListAuditLogsResponse) Reset() {
	*x = ListAuditLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuditLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditLogsResponse) ProtoMessage() {}

func (x *ListAuditLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditLogsResponse.ProtoReflect.Descriptor instead.
func (*ListAuditLogsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{164}
}

func (x *ListAuditLogsResponse) GetAuditLogs() []*AuditLog {
	if x != nil {
		return x.AuditLogs
	}
	return nil
}

func (x *ListAuditLogsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateLabeledAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Coin    gincoincglobalv1.Coin     `protobuf:"varint,2,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	Address string                    `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Network *gincoincglobalv1.Network `protobuf:"varint,4,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
	Message *string                   `protobuf:"bytes,5,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *CreateLabeledAddressRequest) Reset() {
	*x = CreateLabeledAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLabeledAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLabeledAddressRequest) ProtoMessage() {}

func (x *CreateLabeledAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLabeledAddressRequest.ProtoReflect.Descriptor instead.
func (*CreateLabeledAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{165}
}

func (x *CreateLabeledAddressRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateLabeledAddressRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *CreateLabeledAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateLabeledAddressRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *CreateLabeledAddressRequest) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type CreateLabeledAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabeledAddressId string `protobuf:"bytes,1,opt,name=labeled_address_id,json=labeledAddressId,proto3" json:"labeled_address_id,omitempty"`
}

func (x *CreateLabeledAddressResponse) Reset() {
	*x = CreateLabeledAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLabeledAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLabeledAddressResponse) ProtoMessage() {}

func (x *CreateLabeledAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLabeledAddressResponse.ProtoReflect.Descriptor instead.
func (*CreateLabeledAddressResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{166}
}

func (x *CreateLabeledAddressResponse) GetLabeledAddressId() string {
	if x != nil {
		return x.LabeledAddressId
	}
	return ""
}

type UpdateLabeledAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabeledAddressId string                    `protobuf:"bytes,1,opt,name=labeled_address_id,json=labeledAddressId,proto3" json:"labeled_address_id,omitempty"`
	Name             string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Coin             gincoincglobalv1.Coin     `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	Address          string                    `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Network          *gincoincglobalv1.Network `protobuf:"varint,5,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
}

func (x *UpdateLabeledAddressRequest) Reset() {
	*x = UpdateLabeledAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLabeledAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabeledAddressRequest) ProtoMessage() {}

func (x *UpdateLabeledAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabeledAddressRequest.ProtoReflect.Descriptor instead.
func (*UpdateLabeledAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{167}
}

func (x *UpdateLabeledAddressRequest) GetLabeledAddressId() string {
	if x != nil {
		return x.LabeledAddressId
	}
	return ""
}

func (x *UpdateLabeledAddressRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateLabeledAddressRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *UpdateLabeledAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UpdateLabeledAddressRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

type GetLabeledAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabeledAddressId string `protobuf:"bytes,1,opt,name=labeled_address_id,json=labeledAddressId,proto3" json:"labeled_address_id,omitempty"`
}

func (x *GetLabeledAddressRequest) Reset() {
	*x = GetLabeledAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabeledAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabeledAddressRequest) ProtoMessage() {}

func (x *GetLabeledAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabeledAddressRequest.ProtoReflect.Descriptor instead.
func (*GetLabeledAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{168}
}

func (x *GetLabeledAddressRequest) GetLabeledAddressId() string {
	if x != nil {
		return x.LabeledAddressId
	}
	return ""
}

type ListLabeledAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListLabeledAddressesRequest) Reset() {
	*x = ListLabeledAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLabeledAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabeledAddressesRequest) ProtoMessage() {}

func (x *ListLabeledAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabeledAddressesRequest.ProtoReflect.Descriptor instead.
func (*ListLabeledAddressesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{169}
}

type ListLabeledAddressesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []*LabeledAddress `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *ListLabeledAddressesResponse) Reset() {
	*x = ListLabeledAddressesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLabeledAddressesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabeledAddressesResponse) ProtoMessage() {}

func (x *ListLabeledAddressesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabeledAddressesResponse.ProtoReflect.Descriptor instead.
func (*ListLabeledAddressesResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{170}
}

func (x *ListLabeledAddressesResponse) GetAddresses() []*LabeledAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type ListLabeledAddressesByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional
	FilterType ListFilterType `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	// optional
	AddressId string `protobuf:"bytes,2,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	// optional
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// optional
	AddressName string `protobuf:"bytes,4,opt,name=address_name,json=addressName,proto3" json:"address_name,omitempty"`
	// optional
	Coin gincoincglobalv1.Coin `protobuf:"varint,5,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	// optional
	PageSize uint32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// optional
	PageToken string                    `protobuf:"bytes,7,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Network   *gincoincglobalv1.Network `protobuf:"varint,8,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
}

func (x *ListLabeledAddressesByFilterRequest) Reset() {
	*x = ListLabeledAddressesByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLabeledAddressesByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabeledAddressesByFilterRequest) ProtoMessage() {}

func (x *ListLabeledAddressesByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabeledAddressesByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListLabeledAddressesByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{171}
}

func (x *ListLabeledAddressesByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListLabeledAddressesByFilterRequest) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

func (x *ListLabeledAddressesByFilterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ListLabeledAddressesByFilterRequest) GetAddressName() string {
	if x != nil {
		return x.AddressName
	}
	return ""
}

func (x *ListLabeledAddressesByFilterRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *ListLabeledAddressesByFilterRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListLabeledAddressesByFilterRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListLabeledAddressesByFilterRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

type ListLabeledAddressesByFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses     []*LabeledAddress `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	NextPageToken string            `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListLabeledAddressesByFilterResponse) Reset() {
	*x = ListLabeledAddressesByFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLabeledAddressesByFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabeledAddressesByFilterResponse) ProtoMessage() {}

func (x *ListLabeledAddressesByFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabeledAddressesByFilterResponse.ProtoReflect.Descriptor instead.
func (*ListLabeledAddressesByFilterResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{172}
}

func (x *ListLabeledAddressesByFilterResponse) GetAddresses() []*LabeledAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *ListLabeledAddressesByFilterResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteLabeledAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabeledAddressId string `protobuf:"bytes,1,opt,name=labeled_address_id,json=labeledAddressId,proto3" json:"labeled_address_id,omitempty"`
}

func (x *DeleteLabeledAddressRequest) Reset() {
	*x = DeleteLabeledAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLabeledAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLabeledAddressRequest) ProtoMessage() {}

func (x *DeleteLabeledAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLabeledAddressRequest.ProtoReflect.Descriptor instead.
func (*DeleteLabeledAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{173}
}

func (x *DeleteLabeledAddressRequest) GetLabeledAddressId() string {
	if x != nil {
		return x.LabeledAddressId
	}
	return ""
}

type ReviewLabeledAddressProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabeledAddressId string `protobuf:"bytes,1,opt,name=labeled_address_id,json=labeledAddressId,proto3" json:"labeled_address_id,omitempty"`
	Approve          bool   `protobuf:"varint,2,opt,name=approve,proto3" json:"approve,omitempty"`
}

func (x *ReviewLabeledAddressProposalRequest) Reset() {
	*x = ReviewLabeledAddressProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewLabeledAddressProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewLabeledAddressProposalRequest) ProtoMessage() {}

func (x *ReviewLabeledAddressProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewLabeledAddressProposalRequest.ProtoReflect.Descriptor instead.
func (*ReviewLabeledAddressProposalRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{174}
}

func (x *ReviewLabeledAddressProposalRequest) GetLabeledAddressId() string {
	if x != nil {
		return x.LabeledAddressId
	}
	return ""
}

func (x *ReviewLabeledAddressProposalRequest) GetApprove() bool {
	if x != nil {
		return x.Approve
	}
	return false
}

type CreateWhitelistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Coin gincoincglobalv1.Coin `protobuf:"varint,2,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	// optional
	Network    *gincoincglobalv1.Network `protobuf:"varint,4,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
	AddressIds []string                  `protobuf:"bytes,3,rep,name=address_ids,json=addressIds,proto3" json:"address_ids,omitempty"`
}

func (x *CreateWhitelistRequest) Reset() {
	*x = CreateWhitelistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWhitelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWhitelistRequest) ProtoMessage() {}

func (x *CreateWhitelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWhitelistRequest.ProtoReflect.Descriptor instead.
func (*CreateWhitelistRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{175}
}

func (x *CreateWhitelistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateWhitelistRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *CreateWhitelistRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *CreateWhitelistRequest) GetAddressIds() []string {
	if x != nil {
		return x.AddressIds
	}
	return nil
}

type CreateWhitelistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhitelistId string `protobuf:"bytes,1,opt,name=whitelist_id,json=whitelistId,proto3" json:"whitelist_id,omitempty"`
}

func (x *CreateWhitelistResponse) Reset() {
	*x = CreateWhitelistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWhitelistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWhitelistResponse) ProtoMessage() {}

func (x *CreateWhitelistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWhitelistResponse.ProtoReflect.Descriptor instead.
func (*CreateWhitelistResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{176}
}

func (x *CreateWhitelistResponse) GetWhitelistId() string {
	if x != nil {
		return x.WhitelistId
	}
	return ""
}

type GetWhitelistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhitelistId string `protobuf:"bytes,1,opt,name=whitelist_id,json=whitelistId,proto3" json:"whitelist_id,omitempty"`
}

func (x *GetWhitelistRequest) Reset() {
	*x = GetWhitelistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWhitelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWhitelistRequest) ProtoMessage() {}

func (x *GetWhitelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWhitelistRequest.ProtoReflect.Descriptor instead.
func (*GetWhitelistRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{177}
}

func (x *GetWhitelistRequest) GetWhitelistId() string {
	if x != nil {
		return x.WhitelistId
	}
	return ""
}

type ListWhitelistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListWhitelistsRequest) Reset() {
	*x = ListWhitelistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWhitelistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWhitelistsRequest) ProtoMessage() {}

func (x *ListWhitelistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWhitelistsRequest.ProtoReflect.Descriptor instead.
func (*ListWhitelistsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{178}
}

type ListWhitelistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Whitelists []*Whitelist `protobuf:"bytes,1,rep,name=whitelists,proto3" json:"whitelists,omitempty"`
}

func (x *ListWhitelistsResponse) Reset() {
	*x = ListWhitelistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWhitelistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWhitelistsResponse) ProtoMessage() {}

func (x *ListWhitelistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWhitelistsResponse.ProtoReflect.Descriptor instead.
func (*ListWhitelistsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{179}
}

func (x *ListWhitelistsResponse) GetWhitelists() []*Whitelist {
	if x != nil {
		return x.Whitelists
	}
	return nil
}

type ListWhitelistsByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional
	FilterType ListFilterType `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	// optional
	WhitelistId string `protobuf:"bytes,2,opt,name=whitelist_id,json=whitelistId,proto3" json:"whitelist_id,omitempty"`
	// optional
	WhitelistName string `protobuf:"bytes,3,opt,name=whitelist_name,json=whitelistName,proto3" json:"whitelist_name,omitempty"`
	// optional
	Coin gincoincglobalv1.Coin `protobuf:"varint,4,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	// optional
	Network *gincoincglobalv1.Network `protobuf:"varint,7,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
	// optional
	PageSize uint32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// optional
	PageToken string `protobuf:"bytes,6,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListWhitelistsByFilterRequest) Reset() {
	*x = ListWhitelistsByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWhitelistsByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWhitelistsByFilterRequest) ProtoMessage() {}

func (x *ListWhitelistsByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWhitelistsByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListWhitelistsByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{180}
}

func (x *ListWhitelistsByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListWhitelistsByFilterRequest) GetWhitelistId() string {
	if x != nil {
		return x.WhitelistId
	}
	return ""
}

func (x *ListWhitelistsByFilterRequest) GetWhitelistName() string {
	if x != nil {
		return x.WhitelistName
	}
	return ""
}

func (x *ListWhitelistsByFilterRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *ListWhitelistsByFilterRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *ListWhitelistsByFilterRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListWhitelistsByFilterRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListWhitelistsByFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Whitelists    []*Whitelist `protobuf:"bytes,1,rep,name=whitelists,proto3" json:"whitelists,omitempty"`
	NextPageToken string       `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListWhitelistsByFilterResponse) Reset() {
	*x = ListWhitelistsByFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWhitelistsByFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWhitelistsByFilterResponse) ProtoMessage() {}

func (x *ListWhitelistsByFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWhitelistsByFilterResponse.ProtoReflect.Descriptor instead.
func (*ListWhitelistsByFilterResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{181}
}

func (x *ListWhitelistsByFilterResponse) GetWhitelists() []*Whitelist {
	if x != nil {
		return x.Whitelists
	}
	return nil
}

func (x *ListWhitelistsByFilterResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateWhitelistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhitelistId string                `protobuf:"bytes,1,opt,name=whitelist_id,json=whitelistId,proto3" json:"whitelist_id,omitempty"`
	Name        string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Coin        gincoincglobalv1.Coin `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	AddressIds  []string              `protobuf:"bytes,4,rep,name=address_ids,json=addressIds,proto3" json:"address_ids,omitempty"`
}

func (x *UpdateWhitelistRequest) Reset() {
	*x = UpdateWhitelistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWhitelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWhitelistRequest) ProtoMessage() {}

func (x *UpdateWhitelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWhitelistRequest.ProtoReflect.Descriptor instead.
func (*UpdateWhitelistRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{182}
}

func (x *UpdateWhitelistRequest) GetWhitelistId() string {
	if x != nil {
		return x.WhitelistId
	}
	return ""
}

func (x *UpdateWhitelistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateWhitelistRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *UpdateWhitelistRequest) GetAddressIds() []string {
	if x != nil {
		return x.AddressIds
	}
	return nil
}

type UpdateWhitelistAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhitelistId string   `protobuf:"bytes,1,opt,name=whitelist_id,json=whitelistId,proto3" json:"whitelist_id,omitempty"`
	AddressIds  []string `protobuf:"bytes,2,rep,name=address_ids,json=addressIds,proto3" json:"address_ids,omitempty"`
}

func (x *UpdateWhitelistAddressesRequest) Reset() {
	*x = UpdateWhitelistAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWhitelistAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWhitelistAddressesRequest) ProtoMessage() {}

func (x *UpdateWhitelistAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWhitelistAddressesRequest.ProtoReflect.Descriptor instead.
func (*UpdateWhitelistAddressesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{183}
}

func (x *UpdateWhitelistAddressesRequest) GetWhitelistId() string {
	if x != nil {
		return x.WhitelistId
	}
	return ""
}

func (x *UpdateWhitelistAddressesRequest) GetAddressIds() []string {
	if x != nil {
		return x.AddressIds
	}
	return nil
}

type DeleteWhitelistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhitelistId string `protobuf:"bytes,1,opt,name=whitelist_id,json=whitelistId,proto3" json:"whitelist_id,omitempty"`
}

func (x *DeleteWhitelistRequest) Reset() {
	*x = DeleteWhitelistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWhitelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWhitelistRequest) ProtoMessage() {}

func (x *DeleteWhitelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWhitelistRequest.ProtoReflect.Descriptor instead.
func (*DeleteWhitelistRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{184}
}

func (x *DeleteWhitelistRequest) GetWhitelistId() string {
	if x != nil {
		return x.WhitelistId
	}
	return ""
}

type CreateTransferLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Coin gincoincglobalv1.Coin `protobuf:"varint,2,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	// optional
	Network        *gincoincglobalv1.Network    `protobuf:"varint,4,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
	TransferLimits []*RequestTransferLimitEntry `protobuf:"bytes,3,rep,name=transfer_limits,json=transferLimits,proto3" json:"transfer_limits,omitempty"`
}

func (x *CreateTransferLimitRequest) Reset() {
	*x = CreateTransferLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransferLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransferLimitRequest) ProtoMessage() {}

func (x *CreateTransferLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransferLimitRequest.ProtoReflect.Descriptor instead.
func (*CreateTransferLimitRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{185}
}

func (x *CreateTransferLimitRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTransferLimitRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *CreateTransferLimitRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *CreateTransferLimitRequest) GetTransferLimits() []*RequestTransferLimitEntry {
	if x != nil {
		return x.TransferLimits
	}
	return nil
}

type CreateTransferLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferLimitId string `protobuf:"bytes,1,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
}

func (x *CreateTransferLimitResponse) Reset() {
	*x = CreateTransferLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransferLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransferLimitResponse) ProtoMessage() {}

func (x *CreateTransferLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransferLimitResponse.ProtoReflect.Descriptor instead.
func (*CreateTransferLimitResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{186}
}

func (x *CreateTransferLimitResponse) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

type GetTransferLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferLimitId string `protobuf:"bytes,1,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
}

func (x *GetTransferLimitRequest) Reset() {
	*x = GetTransferLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransferLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferLimitRequest) ProtoMessage() {}

func (x *GetTransferLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferLimitRequest.ProtoReflect.Descriptor instead.
func (*GetTransferLimitRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{187}
}

func (x *GetTransferLimitRequest) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

type ListTransferLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTransferLimitsRequest) Reset() {
	*x = ListTransferLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransferLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransferLimitsRequest) ProtoMessage() {}

func (x *ListTransferLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransferLimitsRequest.ProtoReflect.Descriptor instead.
func (*ListTransferLimitsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{188}
}

type ListTransferLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferLimits []*TransferLimit `protobuf:"bytes,1,rep,name=transfer_limits,json=transferLimits,proto3" json:"transfer_limits,omitempty"`
}

func (x *ListTransferLimitsResponse) Reset() {
	*x = ListTransferLimitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransferLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransferLimitsResponse) ProtoMessage() {}

func (x *ListTransferLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransferLimitsResponse.ProtoReflect.Descriptor instead.
func (*ListTransferLimitsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{189}
}

func (x *ListTransferLimitsResponse) GetTransferLimits() []*TransferLimit {
	if x != nil {
		return x.TransferLimits
	}
	return nil
}

type ListTransferLimitsByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional
	FilterType ListFilterType `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	// optional
	TransferLimitId string `protobuf:"bytes,2,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
	// optional
	TransferLimitName string `protobuf:"bytes,3,opt,name=transfer_limit_name,json=transferLimitName,proto3" json:"transfer_limit_name,omitempty"`
	// optional
	Coin gincoincglobalv1.Coin `protobuf:"varint,4,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	// optional
	Network *gincoincglobalv1.Network `protobuf:"varint,7,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
	// optional
	PageSize uint32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// optional
	PageToken string `protobuf:"bytes,6,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListTransferLimitsByFilterRequest) Reset() {
	*x = ListTransferLimitsByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransferLimitsByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransferLimitsByFilterRequest) ProtoMessage() {}

func (x *ListTransferLimitsByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransferLimitsByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListTransferLimitsByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{190}
}

func (x *ListTransferLimitsByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListTransferLimitsByFilterRequest) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

func (x *ListTransferLimitsByFilterRequest) GetTransferLimitName() string {
	if x != nil {
		return x.TransferLimitName
	}
	return ""
}

func (x *ListTransferLimitsByFilterRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *ListTransferLimitsByFilterRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *ListTransferLimitsByFilterRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTransferLimitsByFilterRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListTransferLimitsByFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferLimits []*TransferLimit `protobuf:"bytes,1,rep,name=transfer_limits,json=transferLimits,proto3" json:"transfer_limits,omitempty"`
	NextPageToken  string           `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListTransferLimitsByFilterResponse) Reset() {
	*x = ListTransferLimitsByFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransferLimitsByFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransferLimitsByFilterResponse) ProtoMessage() {}

func (x *ListTransferLimitsByFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransferLimitsByFilterResponse.ProtoReflect.Descriptor instead.
func (*ListTransferLimitsByFilterResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{191}
}

func (x *ListTransferLimitsByFilterResponse) GetTransferLimits() []*TransferLimit {
	if x != nil {
		return x.TransferLimits
	}
	return nil
}

func (x *ListTransferLimitsByFilterResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateTransferLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferLimitId string                       `protobuf:"bytes,1,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
	TransferLimits  []*RequestTransferLimitEntry `protobuf:"bytes,2,rep,name=transfer_limits,json=transferLimits,proto3" json:"transfer_limits,omitempty"`
}

func (x *UpdateTransferLimitRequest) Reset() {
	*x = UpdateTransferLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTransferLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransferLimitRequest) ProtoMessage() {}

func (x *UpdateTransferLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransferLimitRequest.ProtoReflect.Descriptor instead.
func (*UpdateTransferLimitRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{192}
}

func (x *UpdateTransferLimitRequest) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

func (x *UpdateTransferLimitRequest) GetTransferLimits() []*RequestTransferLimitEntry {
	if x != nil {
		return x.TransferLimits
	}
	return nil
}

type UpdateTransferLimitNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferLimitId string `protobuf:"bytes,1,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateTransferLimitNameRequest) Reset() {
	*x = UpdateTransferLimitNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTransferLimitNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransferLimitNameRequest) ProtoMessage() {}

func (x *UpdateTransferLimitNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransferLimitNameRequest.ProtoReflect.Descriptor instead.
func (*UpdateTransferLimitNameRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{193}
}

func (x *UpdateTransferLimitNameRequest) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

func (x *UpdateTransferLimitNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteTransferLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferLimitId string `protobuf:"bytes,1,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
}

func (x *DeleteTransferLimitRequest) Reset() {
	*x = DeleteTransferLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTransferLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTransferLimitRequest) ProtoMessage() {}

func (x *DeleteTransferLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTransferLimitRequest.ProtoReflect.Descriptor instead.
func (*DeleteTransferLimitRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{194}
}

func (x *DeleteTransferLimitRequest) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

type ReviewTransferLimitProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferLimitId string `protobuf:"bytes,1,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
	Approve         bool   `protobuf:"varint,2,opt,name=approve,proto3" json:"approve,omitempty"`
}

func (x *ReviewTransferLimitProposalRequest) Reset() {
	*x = ReviewTransferLimitProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewTransferLimitProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewTransferLimitProposalRequest) ProtoMessage() {}

func (x *ReviewTransferLimitProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewTransferLimitProposalRequest.ProtoReflect.Descriptor instead.
func (*ReviewTransferLimitProposalRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{195}
}

func (x *ReviewTransferLimitProposalRequest) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

func (x *ReviewTransferLimitProposalRequest) GetApprove() bool {
	if x != nil {
		return x.Approve
	}
	return false
}

type CreatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Coin gincoincglobalv1.Coin `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	// optional
	Network         *gincoincglobalv1.Network `protobuf:"varint,7,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
	Type            PolicyType                `protobuf:"varint,4,opt,name=type,proto3,enum=adamant.global.v1.PolicyType" json:"type,omitempty"`
	WhitelistId     string                    `protobuf:"bytes,5,opt,name=whitelist_id,json=whitelistId,proto3" json:"whitelist_id,omitempty"`
	TransferLimitId string                    `protobuf:"bytes,6,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
}

func (x *CreatePolicyRequest) Reset() {
	*x = CreatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicyRequest) ProtoMessage() {}

func (x *CreatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicyRequest.ProtoReflect.Descriptor instead.
func (*CreatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{196}
}

func (x *CreatePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePolicyRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *CreatePolicyRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *CreatePolicyRequest) GetType() PolicyType {
	if x != nil {
		return x.Type
	}
	return PolicyType_POLICY_TYPE_INVALID
}

func (x *CreatePolicyRequest) GetWhitelistId() string {
	if x != nil {
		return x.WhitelistId
	}
	return ""
}

func (x *CreatePolicyRequest) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

type CreatePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
}

func (x *CreatePolicyResponse) Reset() {
	*x = CreatePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicyResponse) ProtoMessage() {}

func (x *CreatePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicyResponse.ProtoReflect.Descriptor instead.
func (*CreatePolicyResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{197}
}

func (x *CreatePolicyResponse) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type GetPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
}

func (x *GetPolicyRequest) Reset() {
	*x = GetPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyRequest) ProtoMessage() {}

func (x *GetPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetPolicyRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{198}
}

func (x *GetPolicyRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type ListPoliciesByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional
	FilterType ListFilterType `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	// optional
	PolicyId string `protobuf:"bytes,2,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// optional
	PolicyName string `protobuf:"bytes,3,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	// optional
	Coin gincoincglobalv1.Coin `protobuf:"varint,4,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	// optional
	Network *gincoincglobalv1.Network `protobuf:"varint,8,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
	// optional
	PolicyType PolicyType `protobuf:"varint,5,opt,name=policy_type,json=policyType,proto3,enum=adamant.global.v1.PolicyType" json:"policy_type,omitempty"`
	// optional
	PageSize uint32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// optional
	PageToken string `protobuf:"bytes,7,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListPoliciesByFilterRequest) Reset() {
	*x = ListPoliciesByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPoliciesByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesByFilterRequest) ProtoMessage() {}

func (x *ListPoliciesByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListPoliciesByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{199}
}

func (x *ListPoliciesByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListPoliciesByFilterRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *ListPoliciesByFilterRequest) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *ListPoliciesByFilterRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *ListPoliciesByFilterRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *ListPoliciesByFilterRequest) GetPolicyType() PolicyType {
	if x != nil {
		return x.PolicyType
	}
	return PolicyType_POLICY_TYPE_INVALID
}

func (x *ListPoliciesByFilterRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPoliciesByFilterRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListPoliciesRequest) Reset() {
	*x = ListPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesRequest) ProtoMessage() {}

func (x *ListPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{200}
}

type IsDeletablePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
}

func (x *IsDeletablePolicyRequest) Reset() {
	*x = IsDeletablePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeletablePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeletablePolicyRequest) ProtoMessage() {}

func (x *IsDeletablePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeletablePolicyRequest.ProtoReflect.Descriptor instead.
func (*IsDeletablePolicyRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{201}
}

func (x *IsDeletablePolicyRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type IsDeletablePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDeletable bool `protobuf:"varint,1,opt,name=is_deletable,json=isDeletable,proto3" json:"is_deletable,omitempty"`
}

func (x *IsDeletablePolicyResponse) Reset() {
	*x = IsDeletablePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeletablePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeletablePolicyResponse) ProtoMessage() {}

func (x *IsDeletablePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeletablePolicyResponse.ProtoReflect.Descriptor instead.
func (*IsDeletablePolicyResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{202}
}

func (x *IsDeletablePolicyResponse) GetIsDeletable() bool {
	if x != nil {
		return x.IsDeletable
	}
	return false
}

type IsDeletableLabeledAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabeledAddressId string `protobuf:"bytes,1,opt,name=labeled_address_id,json=labeledAddressId,proto3" json:"labeled_address_id,omitempty"`
}

func (x *IsDeletableLabeledAddressRequest) Reset() {
	*x = IsDeletableLabeledAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeletableLabeledAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeletableLabeledAddressRequest) ProtoMessage() {}

func (x *IsDeletableLabeledAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeletableLabeledAddressRequest.ProtoReflect.Descriptor instead.
func (*IsDeletableLabeledAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{203}
}

func (x *IsDeletableLabeledAddressRequest) GetLabeledAddressId() string {
	if x != nil {
		return x.LabeledAddressId
	}
	return ""
}

type IsDeletableLabeledAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDeletable bool `protobuf:"varint,1,opt,name=is_deletable,json=isDeletable,proto3" json:"is_deletable,omitempty"`
}

func (x *IsDeletableLabeledAddressResponse) Reset() {
	*x = IsDeletableLabeledAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeletableLabeledAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeletableLabeledAddressResponse) ProtoMessage() {}

func (x *IsDeletableLabeledAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeletableLabeledAddressResponse.ProtoReflect.Descriptor instead.
func (*IsDeletableLabeledAddressResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{204}
}

func (x *IsDeletableLabeledAddressResponse) GetIsDeletable() bool {
	if x != nil {
		return x.IsDeletable
	}
	return false
}

type IsDeletableWhitelistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhitelistId string `protobuf:"bytes,1,opt,name=whitelist_id,json=whitelistId,proto3" json:"whitelist_id,omitempty"`
}

func (x *IsDeletableWhitelistRequest) Reset() {
	*x = IsDeletableWhitelistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeletableWhitelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeletableWhitelistRequest) ProtoMessage() {}

func (x *IsDeletableWhitelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeletableWhitelistRequest.ProtoReflect.Descriptor instead.
func (*IsDeletableWhitelistRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{205}
}

func (x *IsDeletableWhitelistRequest) GetWhitelistId() string {
	if x != nil {
		return x.WhitelistId
	}
	return ""
}

type IsDeletableWhitelistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDeletable bool `protobuf:"varint,1,opt,name=is_deletable,json=isDeletable,proto3" json:"is_deletable,omitempty"`
}

func (x *IsDeletableWhitelistResponse) Reset() {
	*x = IsDeletableWhitelistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeletableWhitelistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeletableWhitelistResponse) ProtoMessage() {}

func (x *IsDeletableWhitelistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeletableWhitelistResponse.ProtoReflect.Descriptor instead.
func (*IsDeletableWhitelistResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{206}
}

func (x *IsDeletableWhitelistResponse) GetIsDeletable() bool {
	if x != nil {
		return x.IsDeletable
	}
	return false
}

type IsDeletableTransferLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferLimitId string `protobuf:"bytes,1,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
}

func (x *IsDeletableTransferLimitRequest) Reset() {
	*x = IsDeletableTransferLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeletableTransferLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeletableTransferLimitRequest) ProtoMessage() {}

func (x *IsDeletableTransferLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeletableTransferLimitRequest.ProtoReflect.Descriptor instead.
func (*IsDeletableTransferLimitRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{207}
}

func (x *IsDeletableTransferLimitRequest) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

type IsDeletableTransferLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDeletable bool `protobuf:"varint,1,opt,name=is_deletable,json=isDeletable,proto3" json:"is_deletable,omitempty"`
}

func (x *IsDeletableTransferLimitResponse) Reset() {
	*x = IsDeletableTransferLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeletableTransferLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeletableTransferLimitResponse) ProtoMessage() {}

func (x *IsDeletableTransferLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeletableTransferLimitResponse.ProtoReflect.Descriptor instead.
func (*IsDeletableTransferLimitResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{208}
}

func (x *IsDeletableTransferLimitResponse) GetIsDeletable() bool {
	if x != nil {
		return x.IsDeletable
	}
	return false
}

type ListPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *ListPoliciesResponse) Reset() {
	*x = ListPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesResponse) ProtoMessage() {}

func (x *ListPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{209}
}

func (x *ListPoliciesResponse) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type ListPoliciesByFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies      []*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	NextPageToken string    `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListPoliciesByFilterResponse) Reset() {
	*x = ListPoliciesByFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPoliciesByFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesByFilterResponse) ProtoMessage() {}

func (x *ListPoliciesByFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesByFilterResponse.ProtoReflect.Descriptor instead.
func (*ListPoliciesByFilterResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{210}
}

func (x *ListPoliciesByFilterResponse) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *ListPoliciesByFilterResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId        string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	WhitelistId     string `protobuf:"bytes,3,opt,name=whitelist_id,json=whitelistId,proto3" json:"whitelist_id,omitempty"`
	TransferLimitId string `protobuf:"bytes,4,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
}

func (x *UpdatePolicyRequest) Reset() {
	*x = UpdatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePolicyRequest) ProtoMessage() {}

func (x *UpdatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{211}
}

func (x *UpdatePolicyRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *UpdatePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePolicyRequest) GetWhitelistId() string {
	if x != nil {
		return x.WhitelistId
	}
	return ""
}

func (x *UpdatePolicyRequest) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

type DeletePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
}

func (x *DeletePolicyRequest) Reset() {
	*x = DeletePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePolicyRequest) ProtoMessage() {}

func (x *DeletePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePolicyRequest.ProtoReflect.Descriptor instead.
func (*DeletePolicyRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{212}
}

func (x *DeletePolicyRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type ReviewPolicyProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Approve  bool   `protobuf:"varint,2,opt,name=approve,proto3" json:"approve,omitempty"`
}

func (x *ReviewPolicyProposalRequest) Reset() {
	*x = ReviewPolicyProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewPolicyProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewPolicyProposalRequest) ProtoMessage() {}

func (x *ReviewPolicyProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewPolicyProposalRequest.ProtoReflect.Descriptor instead.
func (*ReviewPolicyProposalRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{213}
}

func (x *ReviewPolicyProposalRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *ReviewPolicyProposalRequest) GetApprove() bool {
	if x != nil {
		return x.Approve
	}
	return false
}

type ListSubstrateChildAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *ListSubstrateChildAddressesRequest) Reset() {
	*x = ListSubstrateChildAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubstrateChildAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubstrateChildAddressesRequest) ProtoMessage() {}

func (x *ListSubstrateChildAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubstrateChildAddressesRequest.ProtoReflect.Descriptor instead.
func (*ListSubstrateChildAddressesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{214}
}

func (x *ListSubstrateChildAddressesRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type ListSubstrateChildAddressesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubstrateChildAddresses []*SubstrateChildAddress `protobuf:"bytes,1,rep,name=substrate_child_addresses,json=substrateChildAddresses,proto3" json:"substrate_child_addresses,omitempty"`
}

func (x *ListSubstrateChildAddressesResponse) Reset() {
	*x = ListSubstrateChildAddressesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubstrateChildAddressesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubstrateChildAddressesResponse) ProtoMessage() {}

func (x *ListSubstrateChildAddressesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubstrateChildAddressesResponse.ProtoReflect.Descriptor instead.
func (*ListSubstrateChildAddressesResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{215}
}

func (x *ListSubstrateChildAddressesResponse) GetSubstrateChildAddresses() []*SubstrateChildAddress {
	if x != nil {
		return x.SubstrateChildAddresses
	}
	return nil
}

type ListSymbolChildAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *ListSymbolChildAddressesRequest) Reset() {
	*x = ListSymbolChildAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSymbolChildAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSymbolChildAddressesRequest) ProtoMessage() {}

func (x *ListSymbolChildAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSymbolChildAddressesRequest.ProtoReflect.Descriptor instead.
func (*ListSymbolChildAddressesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{216}
}

func (x *ListSymbolChildAddressesRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type ListSymbolChildAddressesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolChildAddresses []*SymbolChildAddress `protobuf:"bytes,1,rep,name=symbol_child_addresses,json=symbolChildAddresses,proto3" json:"symbol_child_addresses,omitempty"`
}

func (x *ListSymbolChildAddressesResponse) Reset() {
	*x = ListSymbolChildAddressesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSymbolChildAddressesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSymbolChildAddressesResponse) ProtoMessage() {}

func (x *ListSymbolChildAddressesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSymbolChildAddressesResponse.ProtoReflect.Descriptor instead.
func (*ListSymbolChildAddressesResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{217}
}

func (x *ListSymbolChildAddressesResponse) GetSymbolChildAddresses() []*SymbolChildAddress {
	if x != nil {
		return x.SymbolChildAddresses
	}
	return nil
}

type ListIOSTChildAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *ListIOSTChildAccountsRequest) Reset() {
	*x = ListIOSTChildAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIOSTChildAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIOSTChildAccountsRequest) ProtoMessage() {}

func (x *ListIOSTChildAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIOSTChildAccountsRequest.ProtoReflect.Descriptor instead.
func (*ListIOSTChildAccountsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{218}
}

func (x *ListIOSTChildAccountsRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type ListIOSTChildAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IostChildAccounts []*IOSTChildAccount `protobuf:"bytes,1,rep,name=iost_child_accounts,json=iostChildAccounts,proto3" json:"iost_child_accounts,omitempty"`
}

func (x *ListIOSTChildAccountsResponse) Reset() {
	*x = ListIOSTChildAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIOSTChildAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIOSTChildAccountsResponse) ProtoMessage() {}

func (x *ListIOSTChildAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIOSTChildAccountsResponse.ProtoReflect.Descriptor instead.
func (*ListIOSTChildAccountsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{219}
}

func (x *ListIOSTChildAccountsResponse) GetIostChildAccounts() []*IOSTChildAccount {
	if x != nil {
		return x.IostChildAccounts
	}
	return nil
}

type DownloadResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadResourceType DownloadResourceType      `protobuf:"varint,1,opt,name=download_resource_type,json=downloadResourceType,proto3,enum=adamant.global.v1.DownloadResourceType" json:"download_resource_type,omitempty"`
	WatchOnly            bool                      `protobuf:"varint,5,opt,name=watch_only,json=watchOnly,proto3" json:"watch_only,omitempty"`
	WalletId             string                    `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	IsActivated          *bool                     `protobuf:"varint,6,opt,name=is_activated,json=isActivated,proto3,oneof" json:"is_activated,omitempty"`
	Status               *BlacklistAddressStatus   `protobuf:"varint,7,opt,name=status,proto3,enum=adamant.global.v1.BlacklistAddressStatus,oneof" json:"status,omitempty"`
	Network              *gincoincglobalv1.Network `protobuf:"varint,8,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
	StartTime            *timestamppb.Timestamp    `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              *timestamppb.Timestamp    `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *DownloadResourceRequest) Reset() {
	*x = DownloadResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadResourceRequest) ProtoMessage() {}

func (x *DownloadResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadResourceRequest.ProtoReflect.Descriptor instead.
func (*DownloadResourceRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{220}
}

func (x *DownloadResourceRequest) GetDownloadResourceType() DownloadResourceType {
	if x != nil {
		return x.DownloadResourceType
	}
	return DownloadResourceType_DOWNLOAD_RESOURCE_TYPE_INVALID
}

func (x *DownloadResourceRequest) GetWatchOnly() bool {
	if x != nil {
		return x.WatchOnly
	}
	return false
}

func (x *DownloadResourceRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *DownloadResourceRequest) GetIsActivated() bool {
	if x != nil && x.IsActivated != nil {
		return *x.IsActivated
	}
	return false
}

func (x *DownloadResourceRequest) GetStatus() BlacklistAddressStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return BlacklistAddressStatus_BLACKLIST_ADDRESS_STATUS_INVALID
}

func (x *DownloadResourceRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *DownloadResourceRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *DownloadResourceRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// -----------------------------------------------------------------------------
// ETH
type ExitEthereumStakingValidatorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorIds []string `protobuf:"bytes,1,rep,name=validator_ids,json=validatorIds,proto3" json:"validator_ids,omitempty"`
	WalletId     string   `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *ExitEthereumStakingValidatorsRequest) Reset() {
	*x = ExitEthereumStakingValidatorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitEthereumStakingValidatorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitEthereumStakingValidatorsRequest) ProtoMessage() {}

func (x *ExitEthereumStakingValidatorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitEthereumStakingValidatorsRequest.ProtoReflect.Descriptor instead.
func (*ExitEthereumStakingValidatorsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{221}
}

func (x *ExitEthereumStakingValidatorsRequest) GetValidatorIds() []string {
	if x != nil {
		return x.ValidatorIds
	}
	return nil
}

func (x *ExitEthereumStakingValidatorsRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type ExitEthereumStakingValidatorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorIds []string `protobuf:"bytes,1,rep,name=validator_ids,json=validatorIds,proto3" json:"validator_ids,omitempty"`
}

func (x *ExitEthereumStakingValidatorsResponse) Reset() {
	*x = ExitEthereumStakingValidatorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitEthereumStakingValidatorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitEthereumStakingValidatorsResponse) ProtoMessage() {}

func (x *ExitEthereumStakingValidatorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitEthereumStakingValidatorsResponse.ProtoReflect.Descriptor instead.
func (*ExitEthereumStakingValidatorsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{222}
}

func (x *ExitEthereumStakingValidatorsResponse) GetValidatorIds() []string {
	if x != nil {
		return x.ValidatorIds
	}
	return nil
}

// -----------------------------------------------------------------------------
// IOST
// -----------------------------------------------------------------------------
type CreateIOSTAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	WalletId    string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	AccountId   string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *CreateIOSTAccountRequest) Reset() {
	*x = CreateIOSTAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIOSTAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIOSTAccountRequest) ProtoMessage() {}

func (x *CreateIOSTAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIOSTAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateIOSTAccountRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{223}
}

func (x *CreateIOSTAccountRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *CreateIOSTAccountRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *CreateIOSTAccountRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type CreateIOSTAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressId string `protobuf:"bytes,1,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
}

func (x *CreateIOSTAccountResponse) Reset() {
	*x = CreateIOSTAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIOSTAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIOSTAccountResponse) ProtoMessage() {}

func (x *CreateIOSTAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIOSTAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateIOSTAccountResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{224}
}

func (x *CreateIOSTAccountResponse) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

type ExistsIOSTAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
}

func (x *ExistsIOSTAccountRequest) Reset() {
	*x = ExistsIOSTAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsIOSTAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsIOSTAccountRequest) ProtoMessage() {}

func (x *ExistsIOSTAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsIOSTAccountRequest.ProtoReflect.Descriptor instead.
func (*ExistsIOSTAccountRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{225}
}

func (x *ExistsIOSTAccountRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type ExistsIOSTAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *ExistsIOSTAccountResponse) Reset() {
	*x = ExistsIOSTAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsIOSTAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsIOSTAccountResponse) ProtoMessage() {}

func (x *ExistsIOSTAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsIOSTAccountResponse.ProtoReflect.Descriptor instead.
func (*ExistsIOSTAccountResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{226}
}

func (x *ExistsIOSTAccountResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type GetIOSTCallerAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetIOSTCallerAccountRequest) Reset() {
	*x = GetIOSTCallerAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIOSTCallerAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIOSTCallerAccountRequest) ProtoMessage() {}

func (x *GetIOSTCallerAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIOSTCallerAccountRequest.ProtoReflect.Descriptor instead.
func (*GetIOSTCallerAccountRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{227}
}

type ListCallersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCallersRequest) Reset() {
	*x = ListCallersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCallersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCallersRequest) ProtoMessage() {}

func (x *ListCallersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCallersRequest.ProtoReflect.Descriptor instead.
func (*ListCallersRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{228}
}

// The model of callers
type ListCallersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallerAddresses []*CallerAddress `protobuf:"bytes,1,rep,name=caller_addresses,json=callerAddresses,proto3" json:"caller_addresses,omitempty"`
}

func (x *ListCallersResponse) Reset() {
	*x = ListCallersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCallersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCallersResponse) ProtoMessage() {}

func (x *ListCallersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCallersResponse.ProtoReflect.Descriptor instead.
func (*ListCallersResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{229}
}

func (x *ListCallersResponse) GetCallerAddresses() []*CallerAddress {
	if x != nil {
		return x.CallerAddresses
	}
	return nil
}

type ListFeeDepositsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListFeeDepositsRequest) Reset() {
	*x = ListFeeDepositsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeeDepositsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeeDepositsRequest) ProtoMessage() {}

func (x *ListFeeDepositsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeeDepositsRequest.ProtoReflect.Descriptor instead.
func (*ListFeeDepositsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{230}
}

// The model of callers
type ListFeeDepositsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeeDepositAddresses []*FeeDepositAddress `protobuf:"bytes,1,rep,name=fee_deposit_addresses,json=feeDepositAddresses,proto3" json:"fee_deposit_addresses,omitempty"`
}

func (x *ListFeeDepositsResponse) Reset() {
	*x = ListFeeDepositsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeeDepositsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeeDepositsResponse) ProtoMessage() {}

func (x *ListFeeDepositsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeeDepositsResponse.ProtoReflect.Descriptor instead.
func (*ListFeeDepositsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{231}
}

func (x *ListFeeDepositsResponse) GetFeeDepositAddresses() []*FeeDepositAddress {
	if x != nil {
		return x.FeeDepositAddresses
	}
	return nil
}

type GetCosmosBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *GetCosmosBalanceRequest) Reset() {
	*x = GetCosmosBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCosmosBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCosmosBalanceRequest) ProtoMessage() {}

func (x *GetCosmosBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCosmosBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetCosmosBalanceRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{232}
}

func (x *GetCosmosBalanceRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type GetCosmosBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delegations []*CosmosDelegation `protobuf:"bytes,1,rep,name=delegations,proto3" json:"delegations,omitempty"`
	Available   float64             `protobuf:"fixed64,2,opt,name=available,proto3" json:"available,omitempty"`
	Reward      float64             `protobuf:"fixed64,3,opt,name=reward,proto3" json:"reward,omitempty"`
	Unbonding   float64             `protobuf:"fixed64,4,opt,name=unbonding,proto3" json:"unbonding,omitempty"`
}

func (x *GetCosmosBalanceResponse) Reset() {
	*x = GetCosmosBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCosmosBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCosmosBalanceResponse) ProtoMessage() {}

func (x *GetCosmosBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCosmosBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetCosmosBalanceResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{233}
}

func (x *GetCosmosBalanceResponse) GetDelegations() []*CosmosDelegation {
	if x != nil {
		return x.Delegations
	}
	return nil
}

func (x *GetCosmosBalanceResponse) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *GetCosmosBalanceResponse) GetReward() float64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *GetCosmosBalanceResponse) GetUnbonding() float64 {
	if x != nil {
		return x.Unbonding
	}
	return 0
}

type ListCosmosDelegateHistoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *ListCosmosDelegateHistoriesRequest) Reset() {
	*x = ListCosmosDelegateHistoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCosmosDelegateHistoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCosmosDelegateHistoriesRequest) ProtoMessage() {}

func (x *ListCosmosDelegateHistoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCosmosDelegateHistoriesRequest.ProtoReflect.Descriptor instead.
func (*ListCosmosDelegateHistoriesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{234}
}

func (x *ListCosmosDelegateHistoriesRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type ListCosmosDelegateHistoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelegateHistories []*CosmosDelegateHistory `protobuf:"bytes,1,rep,name=delegate_histories,json=delegateHistories,proto3" json:"delegate_histories,omitempty"`
}

func (x *ListCosmosDelegateHistoriesResponse) Reset() {
	*x = ListCosmosDelegateHistoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCosmosDelegateHistoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCosmosDelegateHistoriesResponse) ProtoMessage() {}

func (x *ListCosmosDelegateHistoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCosmosDelegateHistoriesResponse.ProtoReflect.Descriptor instead.
func (*ListCosmosDelegateHistoriesResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{235}
}

func (x *ListCosmosDelegateHistoriesResponse) GetDelegateHistories() []*CosmosDelegateHistory {
	if x != nil {
		return x.DelegateHistories
	}
	return nil
}

type CosmosDelegateHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId           string                         `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	WalletId       string                         `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Type           gincoincglobalv1.CosmosMsgType `protobuf:"varint,3,opt,name=type,proto3,enum=gincoinc.global.v1.CosmosMsgType" json:"type,omitempty"`
	DelegateAmount float64                        `protobuf:"fixed64,4,opt,name=delegate_amount,json=delegateAmount,proto3" json:"delegate_amount,omitempty"`
	RewardAmount   float64                        `protobuf:"fixed64,5,opt,name=reward_amount,json=rewardAmount,proto3" json:"reward_amount,omitempty"`
	Time           *timestamppb.Timestamp         `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *CosmosDelegateHistory) Reset() {
	*x = CosmosDelegateHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CosmosDelegateHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosmosDelegateHistory) ProtoMessage() {}

func (x *CosmosDelegateHistory) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosmosDelegateHistory.ProtoReflect.Descriptor instead.
func (*CosmosDelegateHistory) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{236}
}

func (x *CosmosDelegateHistory) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *CosmosDelegateHistory) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *CosmosDelegateHistory) GetType() gincoincglobalv1.CosmosMsgType {
	if x != nil {
		return x.Type
	}
	return gincoincglobalv1.CosmosMsgType(0)
}

func (x *CosmosDelegateHistory) GetDelegateAmount() float64 {
	if x != nil {
		return x.DelegateAmount
	}
	return 0
}

func (x *CosmosDelegateHistory) GetRewardAmount() float64 {
	if x != nil {
		return x.RewardAmount
	}
	return 0
}

func (x *CosmosDelegateHistory) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ForwardingThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin    gincoincglobalv1.Coin `protobuf:"varint,1,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	FeeRate float64               `protobuf:"fixed64,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	Value   float64               `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ForwardingThreshold) Reset() {
	*x = ForwardingThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardingThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardingThreshold) ProtoMessage() {}

func (x *ForwardingThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardingThreshold.ProtoReflect.Descriptor instead.
func (*ForwardingThreshold) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{237}
}

func (x *ForwardingThreshold) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *ForwardingThreshold) GetFeeRate() float64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *ForwardingThreshold) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ListForwardingThresholdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListForwardingThresholdsRequest) Reset() {
	*x = ListForwardingThresholdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListForwardingThresholdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListForwardingThresholdsRequest) ProtoMessage() {}

func (x *ListForwardingThresholdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListForwardingThresholdsRequest.ProtoReflect.Descriptor instead.
func (*ListForwardingThresholdsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{238}
}

type ListForwardingThresholdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardingThresholds []*ForwardingThreshold `protobuf:"bytes,1,rep,name=forwarding_thresholds,json=forwardingThresholds,proto3" json:"forwarding_thresholds,omitempty"`
}

func (x *ListForwardingThresholdsResponse) Reset() {
	*x = ListForwardingThresholdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListForwardingThresholdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListForwardingThresholdsResponse) ProtoMessage() {}

func (x *ListForwardingThresholdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListForwardingThresholdsResponse.ProtoReflect.Descriptor instead.
func (*ListForwardingThresholdsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{239}
}

func (x *ListForwardingThresholdsResponse) GetForwardingThresholds() []*ForwardingThreshold {
	if x != nil {
		return x.ForwardingThresholds
	}
	return nil
}

type UpsertForwardingThresholdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardingThreshold *ForwardingThreshold `protobuf:"bytes,1,opt,name=forwarding_threshold,json=forwardingThreshold,proto3" json:"forwarding_threshold,omitempty"`
}

func (x *UpsertForwardingThresholdRequest) Reset() {
	*x = UpsertForwardingThresholdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertForwardingThresholdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertForwardingThresholdRequest) ProtoMessage() {}

func (x *UpsertForwardingThresholdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertForwardingThresholdRequest.ProtoReflect.Descriptor instead.
func (*UpsertForwardingThresholdRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{240}
}

func (x *UpsertForwardingThresholdRequest) GetForwardingThreshold() *ForwardingThreshold {
	if x != nil {
		return x.ForwardingThreshold
	}
	return nil
}

type UpsertForwardingThresholdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardingThreshold *ForwardingThreshold `protobuf:"bytes,1,opt,name=forwarding_threshold,json=forwardingThreshold,proto3" json:"forwarding_threshold,omitempty"`
}

func (x *UpsertForwardingThresholdResponse) Reset() {
	*x = UpsertForwardingThresholdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertForwardingThresholdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertForwardingThresholdResponse) ProtoMessage() {}

func (x *UpsertForwardingThresholdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertForwardingThresholdResponse.ProtoReflect.Descriptor instead.
func (*UpsertForwardingThresholdResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{241}
}

func (x *UpsertForwardingThresholdResponse) GetForwardingThreshold() *ForwardingThreshold {
	if x != nil {
		return x.ForwardingThreshold
	}
	return nil
}

type ListStakingHistoriesByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType ListFilterType `protobuf:"varint,2,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	// optional
	StakingHistoryId string `protobuf:"bytes,3,opt,name=staking_history_id,json=stakingHistoryId,proto3" json:"staking_history_id,omitempty"`
	// optional
	WalletId string `protobuf:"bytes,4,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// optional
	WalletName string `protobuf:"bytes,5,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// optional
	ValidatorId string `protobuf:"bytes,6,opt,name=validator_id,json=validatorId,proto3" json:"validator_id,omitempty"`
	// optional
	Address string `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	// optional
	Txid string `protobuf:"bytes,8,opt,name=txid,proto3" json:"txid,omitempty"`
	// optianl
	BlockHash string `protobuf:"bytes,9,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// optional
	Coin       gincoincglobalv1.Coin `protobuf:"varint,10,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	WalletType []WalletType          `protobuf:"varint,11,rep,packed,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`
	// optional
	EventType []gincoincglobalv1.StakingEventType `protobuf:"varint,12,rep,packed,name=event_type,json=eventType,proto3,enum=gincoinc.global.v1.StakingEventType" json:"event_type,omitempty"`
	// optional
	PageSize uint32 `protobuf:"varint,13,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// optional
	PageToken string `protobuf:"bytes,14,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// optional
	StartTime *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// optional
	EndTime *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *ListStakingHistoriesByFilterRequest) Reset() {
	*x = ListStakingHistoriesByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStakingHistoriesByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStakingHistoriesByFilterRequest) ProtoMessage() {}

func (x *ListStakingHistoriesByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStakingHistoriesByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListStakingHistoriesByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{242}
}

func (x *ListStakingHistoriesByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListStakingHistoriesByFilterRequest) GetStakingHistoryId() string {
	if x != nil {
		return x.StakingHistoryId
	}
	return ""
}

func (x *ListStakingHistoriesByFilterRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListStakingHistoriesByFilterRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *ListStakingHistoriesByFilterRequest) GetValidatorId() string {
	if x != nil {
		return x.ValidatorId
	}
	return ""
}

func (x *ListStakingHistoriesByFilterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ListStakingHistoriesByFilterRequest) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *ListStakingHistoriesByFilterRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *ListStakingHistoriesByFilterRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *ListStakingHistoriesByFilterRequest) GetWalletType() []WalletType {
	if x != nil {
		return x.WalletType
	}
	return nil
}

func (x *ListStakingHistoriesByFilterRequest) GetEventType() []gincoincglobalv1.StakingEventType {
	if x != nil {
		return x.EventType
	}
	return nil
}

func (x *ListStakingHistoriesByFilterRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListStakingHistoriesByFilterRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListStakingHistoriesByFilterRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListStakingHistoriesByFilterRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type ListStakingHistoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakingHistories []*StakingHistory `protobuf:"bytes,1,rep,name=staking_histories,json=stakingHistories,proto3" json:"staking_histories,omitempty"`
	NextPageToken    string            `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListStakingHistoriesResponse) Reset() {
	*x = ListStakingHistoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStakingHistoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStakingHistoriesResponse) ProtoMessage() {}

func (x *ListStakingHistoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStakingHistoriesResponse.ProtoReflect.Descriptor instead.
func (*ListStakingHistoriesResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{243}
}

func (x *ListStakingHistoriesResponse) GetStakingHistories() []*StakingHistory {
	if x != nil {
		return x.StakingHistories
	}
	return nil
}

func (x *ListStakingHistoriesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListStakingValidatorsByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType ListFilterType `protobuf:"varint,2,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	// optional
	StakingValidatorId string `protobuf:"bytes,3,opt,name=staking_validator_id,json=stakingValidatorId,proto3" json:"staking_validator_id,omitempty"`
	// optional
	WalletId string `protobuf:"bytes,4,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// optional
	WalletName string `protobuf:"bytes,5,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// optional
	ValidatorId string `protobuf:"bytes,6,opt,name=validator_id,json=validatorId,proto3" json:"validator_id,omitempty"`
	// optional
	Coin       gincoincglobalv1.Coin `protobuf:"varint,7,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	WalletType []WalletType          `protobuf:"varint,8,rep,packed,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`
	// optional
	Status []gincoincglobalv1.StakingValidatorStatus `protobuf:"varint,9,rep,packed,name=status,proto3,enum=gincoinc.global.v1.StakingValidatorStatus" json:"status,omitempty"`
	// optional
	PageSize uint32 `protobuf:"varint,10,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// optional
	PageToken string `protobuf:"bytes,11,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListStakingValidatorsByFilterRequest) Reset() {
	*x = ListStakingValidatorsByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStakingValidatorsByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStakingValidatorsByFilterRequest) ProtoMessage() {}

func (x *ListStakingValidatorsByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStakingValidatorsByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListStakingValidatorsByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{244}
}

func (x *ListStakingValidatorsByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListStakingValidatorsByFilterRequest) GetStakingValidatorId() string {
	if x != nil {
		return x.StakingValidatorId
	}
	return ""
}

func (x *ListStakingValidatorsByFilterRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListStakingValidatorsByFilterRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *ListStakingValidatorsByFilterRequest) GetValidatorId() string {
	if x != nil {
		return x.ValidatorId
	}
	return ""
}

func (x *ListStakingValidatorsByFilterRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *ListStakingValidatorsByFilterRequest) GetWalletType() []WalletType {
	if x != nil {
		return x.WalletType
	}
	return nil
}

func (x *ListStakingValidatorsByFilterRequest) GetStatus() []gincoincglobalv1.StakingValidatorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListStakingValidatorsByFilterRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListStakingValidatorsByFilterRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListStakingValidatorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakingValidators []*StakingValidator `protobuf:"bytes,1,rep,name=staking_validators,json=stakingValidators,proto3" json:"staking_validators,omitempty"`
	NextPageToken     string              `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListStakingValidatorsResponse) Reset() {
	*x = ListStakingValidatorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStakingValidatorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStakingValidatorsResponse) ProtoMessage() {}

func (x *ListStakingValidatorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStakingValidatorsResponse.ProtoReflect.Descriptor instead.
func (*ListStakingValidatorsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{245}
}

func (x *ListStakingValidatorsResponse) GetStakingValidators() []*StakingValidator {
	if x != nil {
		return x.StakingValidators
	}
	return nil
}

func (x *ListStakingValidatorsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListNFTsByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType ListFilterType `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	WalletId   string         `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TokenId    *string        `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3,oneof" json:"token_id,omitempty"`
	TokenName  *string        `protobuf:"bytes,4,opt,name=token_name,json=tokenName,proto3,oneof" json:"token_name,omitempty"`
	Metadata   *string        `protobuf:"bytes,5,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
}

func (x *ListNFTsByFilterRequest) Reset() {
	*x = ListNFTsByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNFTsByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNFTsByFilterRequest) ProtoMessage() {}

func (x *ListNFTsByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNFTsByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListNFTsByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{246}
}

func (x *ListNFTsByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListNFTsByFilterRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListNFTsByFilterRequest) GetTokenId() string {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return ""
}

func (x *ListNFTsByFilterRequest) GetTokenName() string {
	if x != nil && x.TokenName != nil {
		return *x.TokenName
	}
	return ""
}

func (x *ListNFTsByFilterRequest) GetMetadata() string {
	if x != nil && x.Metadata != nil {
		return *x.Metadata
	}
	return ""
}

type ListNFTsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nfts          []*NFT `protobuf:"bytes,1,rep,name=nfts,proto3" json:"nfts,omitempty"`
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNFTsResponse) Reset() {
	*x = ListNFTsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNFTsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNFTsResponse) ProtoMessage() {}

func (x *ListNFTsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNFTsResponse.ProtoReflect.Descriptor instead.
func (*ListNFTsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{247}
}

func (x *ListNFTsResponse) GetNfts() []*NFT {
	if x != nil {
		return x.Nfts
	}
	return nil
}

func (x *ListNFTsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateMailSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableMailTypes  []MailType `protobuf:"varint,1,rep,packed,name=enable_mail_types,json=enableMailTypes,proto3,enum=adamant.global.v1.MailType" json:"enable_mail_types,omitempty"`
	DisableMailTypes []MailType `protobuf:"varint,2,rep,packed,name=disable_mail_types,json=disableMailTypes,proto3,enum=adamant.global.v1.MailType" json:"disable_mail_types,omitempty"`
}

func (x *UpdateMailSettingsRequest) Reset() {
	*x = UpdateMailSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMailSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMailSettingsRequest) ProtoMessage() {}

func (x *UpdateMailSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMailSettingsRequest.ProtoReflect.Descriptor instead.
func (*UpdateMailSettingsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{248}
}

func (x *UpdateMailSettingsRequest) GetEnableMailTypes() []MailType {
	if x != nil {
		return x.EnableMailTypes
	}
	return nil
}

func (x *UpdateMailSettingsRequest) GetDisableMailTypes() []MailType {
	if x != nil {
		return x.DisableMailTypes
	}
	return nil
}

type GetMailSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMailSettingsRequest) Reset() {
	*x = GetMailSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMailSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMailSettingsRequest) ProtoMessage() {}

func (x *GetMailSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMailSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetMailSettingsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{249}
}

type ListPreTransactionThresholdsByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType                ListFilterType            `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	PreTransactionThresholdId *string                   `protobuf:"bytes,2,opt,name=pre_transaction_threshold_id,json=preTransactionThresholdId,proto3,oneof" json:"pre_transaction_threshold_id,omitempty"`
	Coin                      *gincoincglobalv1.Coin    `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin,oneof" json:"coin,omitempty"`
	Network                   *gincoincglobalv1.Network `protobuf:"varint,4,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
	PageSize                  *uint32                   `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken                 *string                   `protobuf:"bytes,6,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
}

func (x *ListPreTransactionThresholdsByFilterRequest) Reset() {
	*x = ListPreTransactionThresholdsByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPreTransactionThresholdsByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPreTransactionThresholdsByFilterRequest) ProtoMessage() {}

func (x *ListPreTransactionThresholdsByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPreTransactionThresholdsByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListPreTransactionThresholdsByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{250}
}

func (x *ListPreTransactionThresholdsByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListPreTransactionThresholdsByFilterRequest) GetPreTransactionThresholdId() string {
	if x != nil && x.PreTransactionThresholdId != nil {
		return *x.PreTransactionThresholdId
	}
	return ""
}

func (x *ListPreTransactionThresholdsByFilterRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil && x.Coin != nil {
		return *x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *ListPreTransactionThresholdsByFilterRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *ListPreTransactionThresholdsByFilterRequest) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListPreTransactionThresholdsByFilterRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type ListPreTransactionThresholdsByFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreTransactionThresholds []*PreTransactionThreshold `protobuf:"bytes,1,rep,name=pre_transaction_thresholds,json=preTransactionThresholds,proto3" json:"pre_transaction_thresholds,omitempty"`
	NextPageToken            string                     `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListPreTransactionThresholdsByFilterResponse) Reset() {
	*x = ListPreTransactionThresholdsByFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPreTransactionThresholdsByFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPreTransactionThresholdsByFilterResponse) ProtoMessage() {}

func (x *ListPreTransactionThresholdsByFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPreTransactionThresholdsByFilterResponse.ProtoReflect.Descriptor instead.
func (*ListPreTransactionThresholdsByFilterResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{251}
}

func (x *ListPreTransactionThresholdsByFilterResponse) GetPreTransactionThresholds() []*PreTransactionThreshold {
	if x != nil {
		return x.PreTransactionThresholds
	}
	return nil
}

func (x *ListPreTransactionThresholdsByFilterResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreatePreTransactionThresholdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin    gincoincglobalv1.Coin    `protobuf:"varint,1,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	Network gincoincglobalv1.Network `protobuf:"varint,2,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`
	Value   float64                  `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CreatePreTransactionThresholdRequest) Reset() {
	*x = CreatePreTransactionThresholdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePreTransactionThresholdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePreTransactionThresholdRequest) ProtoMessage() {}

func (x *CreatePreTransactionThresholdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePreTransactionThresholdRequest.ProtoReflect.Descriptor instead.
func (*CreatePreTransactionThresholdRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{252}
}

func (x *CreatePreTransactionThresholdRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin(0)
}

func (x *CreatePreTransactionThresholdRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *CreatePreTransactionThresholdRequest) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type CreatePreTransactionThresholdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreTransactionThresholdId string `protobuf:"bytes,1,opt,name=pre_transaction_threshold_id,json=preTransactionThresholdId,proto3" json:"pre_transaction_threshold_id,omitempty"`
}

func (x *CreatePreTransactionThresholdResponse) Reset() {
	*x = CreatePreTransactionThresholdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePreTransactionThresholdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePreTransactionThresholdResponse) ProtoMessage() {}

func (x *CreatePreTransactionThresholdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePreTransactionThresholdResponse.ProtoReflect.Descriptor instead.
func (*CreatePreTransactionThresholdResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{253}
}

func (x *CreatePreTransactionThresholdResponse) GetPreTransactionThresholdId() string {
	if x != nil {
		return x.PreTransactionThresholdId
	}
	return ""
}

type UpdatePreTransactionThresholdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreTransactionThresholdId string  `protobuf:"bytes,1,opt,name=pre_transaction_threshold_id,json=preTransactionThresholdId,proto3" json:"pre_transaction_threshold_id,omitempty"`
	Value                     float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UpdatePreTransactionThresholdRequest) Reset() {
	*x = UpdatePreTransactionThresholdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePreTransactionThresholdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePreTransactionThresholdRequest) ProtoMessage() {}

func (x *UpdatePreTransactionThresholdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePreTransactionThresholdRequest.ProtoReflect.Descriptor instead.
func (*UpdatePreTransactionThresholdRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{254}
}

func (x *UpdatePreTransactionThresholdRequest) GetPreTransactionThresholdId() string {
	if x != nil {
		return x.PreTransactionThresholdId
	}
	return ""
}

func (x *UpdatePreTransactionThresholdRequest) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ReviewPreTransactionThresholdProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreTransactionThresholdId string `protobuf:"bytes,1,opt,name=pre_transaction_threshold_id,json=preTransactionThresholdId,proto3" json:"pre_transaction_threshold_id,omitempty"`
	Approve                   bool   `protobuf:"varint,2,opt,name=approve,proto3" json:"approve,omitempty"`
}

func (x *ReviewPreTransactionThresholdProposalRequest) Reset() {
	*x = ReviewPreTransactionThresholdProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewPreTransactionThresholdProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewPreTransactionThresholdProposalRequest) ProtoMessage() {}

func (x *ReviewPreTransactionThresholdProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewPreTransactionThresholdProposalRequest.ProtoReflect.Descriptor instead.
func (*ReviewPreTransactionThresholdProposalRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{255}
}

func (x *ReviewPreTransactionThresholdProposalRequest) GetPreTransactionThresholdId() string {
	if x != nil {
		return x.PreTransactionThresholdId
	}
	return ""
}

func (x *ReviewPreTransactionThresholdProposalRequest) GetApprove() bool {
	if x != nil {
		return x.Approve
	}
	return false
}

type ListBlacklistAddressesByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType         ListFilterType            `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	BlacklistAddressId *string                   `protobuf:"bytes,2,opt,name=blacklist_address_id,json=blacklistAddressId,proto3,oneof" json:"blacklist_address_id,omitempty"`
	Address            *string                   `protobuf:"bytes,3,opt,name=address,proto3,oneof" json:"address,omitempty"`
	FileId             *string                   `protobuf:"bytes,4,opt,name=file_id,json=fileId,proto3,oneof" json:"file_id,omitempty"`
	ExternalId         *string                   `protobuf:"bytes,12,opt,name=external_id,json=externalId,proto3,oneof" json:"external_id,omitempty"`
	IsActivated        *bool                     `protobuf:"varint,5,opt,name=is_activated,json=isActivated,proto3,oneof" json:"is_activated,omitempty"`
	Status             *BlacklistAddressStatus   `protobuf:"varint,6,opt,name=status,proto3,enum=adamant.global.v1.BlacklistAddressStatus,oneof" json:"status,omitempty"`
	Network            *gincoincglobalv1.Network `protobuf:"varint,7,opt,name=network,proto3,enum=gincoinc.global.v1.Network,oneof" json:"network,omitempty"`
	StartTime          *timestamppb.Timestamp    `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime            *timestamppb.Timestamp    `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	PageSize           *uint32                   `protobuf:"varint,10,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken          *string                   `protobuf:"bytes,11,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
}

func (x *ListBlacklistAddressesByFilterRequest) Reset() {
	*x = ListBlacklistAddressesByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlacklistAddressesByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlacklistAddressesByFilterRequest) ProtoMessage() {}

func (x *ListBlacklistAddressesByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlacklistAddressesByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListBlacklistAddressesByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{256}
}

func (x *ListBlacklistAddressesByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListBlacklistAddressesByFilterRequest) GetBlacklistAddressId() string {
	if x != nil && x.BlacklistAddressId != nil {
		return *x.BlacklistAddressId
	}
	return ""
}

func (x *ListBlacklistAddressesByFilterRequest) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *ListBlacklistAddressesByFilterRequest) GetFileId() string {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return ""
}

func (x *ListBlacklistAddressesByFilterRequest) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *ListBlacklistAddressesByFilterRequest) GetIsActivated() bool {
	if x != nil && x.IsActivated != nil {
		return *x.IsActivated
	}
	return false
}

func (x *ListBlacklistAddressesByFilterRequest) GetStatus() BlacklistAddressStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return BlacklistAddressStatus_BLACKLIST_ADDRESS_STATUS_INVALID
}

func (x *ListBlacklistAddressesByFilterRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *ListBlacklistAddressesByFilterRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListBlacklistAddressesByFilterRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ListBlacklistAddressesByFilterRequest) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListBlacklistAddressesByFilterRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type ListBlacklistAddressesByFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses     []*BlacklistAddress `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	NextPageToken string              `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListBlacklistAddressesByFilterResponse) Reset() {
	*x = ListBlacklistAddressesByFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlacklistAddressesByFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlacklistAddressesByFilterResponse) ProtoMessage() {}

func (x *ListBlacklistAddressesByFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlacklistAddressesByFilterResponse.ProtoReflect.Descriptor instead.
func (*ListBlacklistAddressesByFilterResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{257}
}

func (x *ListBlacklistAddressesByFilterResponse) GetAddresses() []*BlacklistAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *ListBlacklistAddressesByFilterResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateBlacklistAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlacklistAddressId string `protobuf:"bytes,1,opt,name=blacklist_address_id,json=blacklistAddressId,proto3" json:"blacklist_address_id,omitempty"`
}

func (x *CreateBlacklistAddressResponse) Reset() {
	*x = CreateBlacklistAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBlacklistAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlacklistAddressResponse) ProtoMessage() {}

func (x *CreateBlacklistAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlacklistAddressResponse.ProtoReflect.Descriptor instead.
func (*CreateBlacklistAddressResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{258}
}

func (x *CreateBlacklistAddressResponse) GetBlacklistAddressId() string {
	if x != nil {
		return x.BlacklistAddressId
	}
	return ""
}

type CreateBlacklistAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string                   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Network    gincoincglobalv1.Network `protobuf:"varint,2,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`
	ExternalId *string                  `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3,oneof" json:"external_id,omitempty"`
}

func (x *CreateBlacklistAddressRequest) Reset() {
	*x = CreateBlacklistAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBlacklistAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlacklistAddressRequest) ProtoMessage() {}

func (x *CreateBlacklistAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlacklistAddressRequest.ProtoReflect.Descriptor instead.
func (*CreateBlacklistAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{259}
}

func (x *CreateBlacklistAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateBlacklistAddressRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *CreateBlacklistAddressRequest) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

type GetBlacklistAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlacklistAddressId string `protobuf:"bytes,1,opt,name=blacklist_address_id,json=blacklistAddressId,proto3" json:"blacklist_address_id,omitempty"`
}

func (x *GetBlacklistAddressRequest) Reset() {
	*x = GetBlacklistAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlacklistAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlacklistAddressRequest) ProtoMessage() {}

func (x *GetBlacklistAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlacklistAddressRequest.ProtoReflect.Descriptor instead.
func (*GetBlacklistAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{260}
}

func (x *GetBlacklistAddressRequest) GetBlacklistAddressId() string {
	if x != nil {
		return x.BlacklistAddressId
	}
	return ""
}

type UpdateBlacklistAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlacklistAddressId string `protobuf:"bytes,1,opt,name=blacklist_address_id,json=blacklistAddressId,proto3" json:"blacklist_address_id,omitempty"`
	Activate           bool   `protobuf:"varint,2,opt,name=activate,proto3" json:"activate,omitempty"`
}

func (x *UpdateBlacklistAddressRequest) Reset() {
	*x = UpdateBlacklistAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBlacklistAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBlacklistAddressRequest) ProtoMessage() {}

func (x *UpdateBlacklistAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBlacklistAddressRequest.ProtoReflect.Descriptor instead.
func (*UpdateBlacklistAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{261}
}

func (x *UpdateBlacklistAddressRequest) GetBlacklistAddressId() string {
	if x != nil {
		return x.BlacklistAddressId
	}
	return ""
}

func (x *UpdateBlacklistAddressRequest) GetActivate() bool {
	if x != nil {
		return x.Activate
	}
	return false
}

type ReviewBlacklistAddressProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlacklistAddressId string `protobuf:"bytes,1,opt,name=blacklist_address_id,json=blacklistAddressId,proto3" json:"blacklist_address_id,omitempty"`
	Approve            bool   `protobuf:"varint,2,opt,name=approve,proto3" json:"approve,omitempty"`
}

func (x *ReviewBlacklistAddressProposalRequest) Reset() {
	*x = ReviewBlacklistAddressProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewBlacklistAddressProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewBlacklistAddressProposalRequest) ProtoMessage() {}

func (x *ReviewBlacklistAddressProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewBlacklistAddressProposalRequest.ProtoReflect.Descriptor instead.
func (*ReviewBlacklistAddressProposalRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{262}
}

func (x *ReviewBlacklistAddressProposalRequest) GetBlacklistAddressId() string {
	if x != nil {
		return x.BlacklistAddressId
	}
	return ""
}

func (x *ReviewBlacklistAddressProposalRequest) GetApprove() bool {
	if x != nil {
		return x.Approve
	}
	return false
}

type BulkReviewBlacklistAddressProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId  string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	Approve bool   `protobuf:"varint,2,opt,name=approve,proto3" json:"approve,omitempty"`
}

func (x *BulkReviewBlacklistAddressProposalRequest) Reset() {
	*x = BulkReviewBlacklistAddressProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkReviewBlacklistAddressProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkReviewBlacklistAddressProposalRequest) ProtoMessage() {}

func (x *BulkReviewBlacklistAddressProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkReviewBlacklistAddressProposalRequest.ProtoReflect.Descriptor instead.
func (*BulkReviewBlacklistAddressProposalRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{263}
}

func (x *BulkReviewBlacklistAddressProposalRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *BulkReviewBlacklistAddressProposalRequest) GetApprove() bool {
	if x != nil {
		return x.Approve
	}
	return false
}

type GetBlacklistStorageSignedURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network  gincoincglobalv1.Network `protobuf:"varint,7,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`
	FileName string                   `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *GetBlacklistStorageSignedURLRequest) Reset() {
	*x = GetBlacklistStorageSignedURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlacklistStorageSignedURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlacklistStorageSignedURLRequest) ProtoMessage() {}

func (x *GetBlacklistStorageSignedURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlacklistStorageSignedURLRequest.ProtoReflect.Descriptor instead.
func (*GetBlacklistStorageSignedURLRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{264}
}

func (x *GetBlacklistStorageSignedURLRequest) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *GetBlacklistStorageSignedURLRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type GetBlacklistStorageSignedURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GetBlacklistStorageSignedURLResponse) Reset() {
	*x = GetBlacklistStorageSignedURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlacklistStorageSignedURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlacklistStorageSignedURLResponse) ProtoMessage() {}

func (x *GetBlacklistStorageSignedURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlacklistStorageSignedURLResponse.ProtoReflect.Descriptor instead.
func (*GetBlacklistStorageSignedURLResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{265}
}

func (x *GetBlacklistStorageSignedURLResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ListBlacklistAddressFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    BlacklistAddressStatus `protobuf:"varint,1,opt,name=status,proto3,enum=adamant.global.v1.BlacklistAddressStatus" json:"status,omitempty"`
	PageSize  *uint32                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken *string                `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
}

func (x *ListBlacklistAddressFilesRequest) Reset() {
	*x = ListBlacklistAddressFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlacklistAddressFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlacklistAddressFilesRequest) ProtoMessage() {}

func (x *ListBlacklistAddressFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlacklistAddressFilesRequest.ProtoReflect.Descriptor instead.
func (*ListBlacklistAddressFilesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{266}
}

func (x *ListBlacklistAddressFilesRequest) GetStatus() BlacklistAddressStatus {
	if x != nil {
		return x.Status
	}
	return BlacklistAddressStatus_BLACKLIST_ADDRESS_STATUS_INVALID
}

func (x *ListBlacklistAddressFilesRequest) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListBlacklistAddressFilesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type ListBlacklistAddressFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files         []*BlacklistAddressFile `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	NextPageToken string                  `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListBlacklistAddressFilesResponse) Reset() {
	*x = ListBlacklistAddressFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlacklistAddressFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlacklistAddressFilesResponse) ProtoMessage() {}

func (x *ListBlacklistAddressFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlacklistAddressFilesResponse.ProtoReflect.Descriptor instead.
func (*ListBlacklistAddressFilesResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{267}
}

func (x *ListBlacklistAddressFilesResponse) GetFiles() []*BlacklistAddressFile {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ListBlacklistAddressFilesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto protoreflect.FileDescriptor

var file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x1a, 0x3d, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x35, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63,
	0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69,
	0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52,
	0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0xfb, 0x01, 0x0a, 0x19, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72,
	0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x73, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72,
	0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x89, 0x07, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x28, 0x52,
	0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63,
	0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e,
	0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0b, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0a, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x01, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x05, 0x28, 0x01, 0x52, 0x01, 0x6d,
	0x12, 0x17, 0x0a, 0x01, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x2a, 0x04, 0x18, 0x05, 0x28, 0x01, 0x52, 0x01, 0x6e, 0x12, 0x24, 0x0a, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92,
	0x01, 0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x36, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6c, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72,
	0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61,
	0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24,
	0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x7b, 0x0a, 0x11, 0x69, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24,
	0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x22, 0x33, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d,
	0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38,
	0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x24, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x22, 0x6a,
	0x0a, 0x25, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31,
	0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x81, 0x01,
	0x0a, 0x14, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47,
	0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x55, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d,
	0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38,
	0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32,
	0x2b, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a,
	0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a,
	0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd0, 0x05, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x28, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x19, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x69,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x16, 0x6f, 0x6e, 0x6c,
	0x79, 0x49, 0x73, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x44,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x01, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a,
	0x02, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41,
	0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51,
	0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x5d,
	0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x72, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x18,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x88, 0x04, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x42, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0b,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x28, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69,
	0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x2a, 0x02, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x51,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24, 0x7c, 0x5e, 0x5b,
	0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50,
	0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
	0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x84, 0x04, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x46, 0x54, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x28,
	0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x3e,
	0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41,
	0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f,
	0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
	0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
	0x58, 0x59, 0x5a, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7f, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x46, 0x54, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x66, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x46,
	0x54, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x0a, 0x6e, 0x66, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72,
	0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x28, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xc8, 0x02, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x7d,
	0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x51, 0xfa, 0x42, 0x4e, 0x92, 0x01,
	0x4b, 0x22, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39,
	0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0f, 0x6e, 0x65,
	0x77, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x12, 0x3d, 0x0a,
	0x1b, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x18, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf1, 0x01, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa,
	0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61,
	0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32,
	0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64,
	0x22, 0xa2, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x22, 0x2f, 0x0a, 0x19, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x1a, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x1e,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x39, 0x0a, 0x1f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x35, 0x0a,
	0x1f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x20, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x22, 0x80, 0x01, 0x0a, 0x13, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49,
	0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x14, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x66,
	0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x7c, 0x0a, 0x1f, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59,
	0x0a, 0x15, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xdc, 0x02, 0x0a, 0x1f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69,
	0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20,
	0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f,
	0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48,
	0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x83, 0x01,
	0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa,
	0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x13,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x6c,
	0x75, 0x73, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xb3, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x19, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x77,
	0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x22, 0x7d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x54, 0x58, 0x4f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c,
	0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39,
	0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x54,
	0x58, 0x4f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x75,
	0x74, 0x78, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x54, 0x58, 0x4f, 0x52, 0x05, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x26, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32,
	0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x17, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x28, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x44,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x43, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xb9, 0x01,
	0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x74, 0x0a, 0x0f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x1c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x74, 0x0a, 0x0f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x28, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x8d, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x74, 0x0a, 0x0f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24,
	0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0xb1, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24, 0x7c,
	0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e,
	0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33, 0x34, 0x35,
	0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x90, 0x02,
	0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31,
	0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x80, 0x01,
	0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa,
	0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61,
	0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x13, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x22, 0xa7, 0x01, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x54, 0x58, 0x4f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47,
	0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x12, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x54, 0x58, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32,
	0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05,
	0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x76, 0x6f, 0x75, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x73, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x97, 0x01, 0x0a,
	0x2a, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c,
	0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39,
	0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x2b, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x12, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x70,
	0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x40, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x2c, 0x0a,
	0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47,
	0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x15, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x41,
	0x2d, 0x46, 0x5d, 0x7b, 0x36, 0x34, 0x7d, 0x24, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22,
	0x32, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75,
	0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d,
	0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38,
	0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x22, 0x36, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0xeb, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x0a, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d,
	0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38,
	0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72,
	0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x74, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e,
	0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x63, 0x6f,
	0x69, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02,
	0x28, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb2, 0x01, 0x0a, 0x26, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x9b,
	0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72,
	0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa,
	0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45,
	0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55,
	0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d,
	0x24, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x79, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c,
	0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39,
	0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22,
	0xa2, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c,
	0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39,
	0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6d, 0x69, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x6d, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a,
	0x02, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41,
	0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51,
	0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x5d,
	0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x95, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x46, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x2c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42,
	0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62,
	0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a,
	0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x85,
	0x02, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67,
	0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01,
	0x20, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63,
	0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x28, 0x0a, 0x0b, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x4c, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x1c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52,
	0x10, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x99, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x7a, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa,
	0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61,
	0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x10, 0x70, 0x72, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x99, 0x01,
	0x0a, 0x1b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a,
	0x12, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47,
	0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x10, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf2, 0x06, 0x0a, 0x22, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04,
	0x10, 0x01, 0x20, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x82, 0x01, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa,
	0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x48, 0x00,
	0x52, 0x10, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63,
	0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x02, 0x52,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63,
	0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x48, 0x03, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x5a,
	0x0a, 0x15, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02,
	0x18, 0x64, 0x48, 0x06, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24,
	0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d,
	0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33, 0x34,
	0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x48, 0x07, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x72,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9b,
	0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x90, 0x0e, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42,
	0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62,
	0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x41, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x09, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x64, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x11, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x71, 0x0a, 0x17, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x15, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x52,
	0x0a, 0x0c, 0x6e, 0x65, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x6d, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0b, 0x6e, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x55, 0x0a, 0x0d, 0x69, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x4f, 0x53, 0x54, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0c, 0x69, 0x6f, 0x73,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x55, 0x0a, 0x0c, 0x78, 0x79, 0x6d,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x52, 0x0b, 0x78, 0x79, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x12, 0x61, 0x0a, 0x11, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x52, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x12, 0x5b, 0x0a, 0x0f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x52, 0x0e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x12, 0x61, 0x0a, 0x11, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x52, 0x10, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x12, 0x5b, 0x0a, 0x0f, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x65, 0x64, 0x65, 0x72, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x52, 0x0e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x12, 0x5b, 0x0a, 0x0f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0e, 0x73,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x58, 0x0a,
	0x0e, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x74, 0x6f, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0d, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x64, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x11, 0x61, 0x76, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x52, 0x0a,
	0x0c, 0x6e, 0x66, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x46, 0x54, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x52, 0x0b, 0x6e, 0x66, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x12, 0x44, 0x0a, 0x0d, 0x75, 0x74, 0x78, 0x6f, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x78,
	0x6f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0c, 0x75, 0x74, 0x78, 0x6f, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x7f, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x72, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22,
	0x42, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x52,
	0x50, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49,
	0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x55, 0x0a, 0x0d, 0x69, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x4f, 0x53, 0x54,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0c, 0x69, 0x6f, 0x73, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x22, 0x9f, 0x03, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x79, 0x74,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x79, 0x74,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x6a, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x14, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x50, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xfa, 0x42, 0x1d,
	0x72, 0x1b, 0x32, 0x19, 0x5e, 0x24, 0x7c, 0x5e, 0x28, 0x30, 0x78, 0x29, 0x3f, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x34, 0x30, 0x7d, 0x24, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x52, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xfa, 0x02, 0x0a,
	0x16, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72,
	0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x73, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72,
	0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x32, 0x11,
	0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x36, 0x34, 0x7d,
	0x24, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8a, 0x02, 0x0a, 0x1e, 0x53, 0x69,
	0x67, 0x6e, 0x58, 0x52, 0x50, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d,
	0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38,
	0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0e,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x36, 0x34, 0x7d, 0x24, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x86, 0x02, 0x0a, 0x1a, 0x53, 0x69, 0x67, 0x6e, 0x49,
	0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32,
	0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x15, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d,
	0x46, 0x5d, 0x7b, 0x36, 0x34, 0x7d, 0x24, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x4f,
	0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01,
	0x02, 0x08, 0x01, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xbe, 0x02, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa,
	0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61,
	0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa,
	0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61,
	0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x2e, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64,
	0x22, 0xc0, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a,
	0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x44, 0x0a,
	0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x78, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x6e, 0x64, 0x58, 0x52,
	0x50, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49,
	0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x1f, 0x53, 0x65, 0x6e, 0x64, 0x58, 0x52, 0x50, 0x49, 0x6e,
	0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x49, 0x64, 0x73, 0x22, 0xcd, 0x01,
	0x0a, 0x1a, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d,
	0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38,
	0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x34, 0x0a,
	0x1b, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x74, 0x78, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78,
	0x49, 0x64, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x96, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69,
	0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52,
	0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x43, 0x0a, 0x1a, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x81,
	0x02, 0x0a, 0x1f, 0x49, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31,
	0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x73, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31,
	0x32, 0x7d, 0x24, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x5e, 0x0a, 0x20, 0x49, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d,
	0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38,
	0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d,
	0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38,
	0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x54, 0x78, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d,
	0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38,
	0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x22, 0x80, 0x02, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c,
	0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39,
	0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02,
	0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42,
	0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52,
	0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x5d, 0x7b,
	0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xce, 0x05, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x28, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x28,
	0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63,
	0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0b, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24,
	0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d,
	0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33, 0x34,
	0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x22, 0x86, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe6, 0x05, 0x0a, 0x2a, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x22, 0xfa, 0x42, 0x1f, 0x82, 0x01, 0x1c, 0x10, 0x01, 0x20, 0x00, 0x20, 0x06, 0x20, 0x0b,
	0x20, 0x0c, 0x20, 0x0d, 0x20, 0x0e, 0x20, 0x0f, 0x20, 0x10, 0x20, 0x11, 0x20, 0x12, 0x20, 0x13,
	0x20, 0x14, 0x20, 0x15, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x28, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e,
	0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0b, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x2a, 0x03, 0x18, 0xe8, 0x07, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24,
	0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d,
	0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33, 0x34,
	0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x22, 0xb3, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x18, 0x75, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xf4, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xf5, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72,
	0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x73, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72,
	0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x58, 0x52, 0x50, 0x49, 0x6e,
	0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32,
	0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x1b,
	0x4c, 0x69, 0x73, 0x74, 0x58, 0x52, 0x50, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x84,
	0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa,
	0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61,
	0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0xfd, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c,
	0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32,
	0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e,
	0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c,
	0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33,
	0x34, 0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd6, 0x06, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x28, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x28, 0x52, 0x0b, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12,
	0x3e, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4f, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e,
	0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x2a, 0x03, 0x18, 0xe8, 0x07, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f,
	0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
	0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
	0x58, 0x59, 0x5a, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82,
	0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x7a,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb4, 0x06, 0x0a, 0x25, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x6e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18,
	0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43,
	0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53,
	0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31,
	0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4e,
	0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01,
	0x20, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0b,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x28, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x78, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x4f, 0x0a, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x44, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x22, 0xa2, 0x02, 0x0a, 0x2c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x61, 0x73,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x6c, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24,
	0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x83, 0x01, 0x0a, 0x15, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x13, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x6e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x13, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x12, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x23, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x88, 0x01,
	0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x18, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x6d, 0x0a, 0x1c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x19, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x62, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x1a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x17,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x01, 0x0a, 0x22, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x89, 0x01, 0x0a, 0x1a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31,
	0x32, 0x7d, 0x24, 0x52, 0x17, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x10, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52,
	0x0e, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22,
	0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x47, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x3c, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64,
	0x22, 0x45, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47,
	0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x9f, 0x04, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x15, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x68,
	0x6f, 0x75, 0x72, 0x6c, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x68,
	0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x1a,
	0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x17, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x37, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xae, 0x01, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6f, 0x0a,
	0x1c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x10, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0x87,
	0x02, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x51, 0xfa, 0x42, 0x4e, 0x92, 0x01, 0x4b,
	0x22, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61,
	0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x09, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6a, 0x0a, 0x1b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61,
	0x70, 0x52, 0x18, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x70, 0x22, 0xc9, 0x01, 0x0a, 0x22,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x66, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x17,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0xa2, 0x02, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x51, 0xfa, 0x42, 0x4e, 0x92, 0x01, 0x4b,
	0x22, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61,
	0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x09, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01,
	0x02, 0x08, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa6, 0x01, 0x0a,
	0x29, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x20, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x1d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0xa8, 0x09, 0x0a, 0x13, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a,
	0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x09, 0x74, 0x78, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5f, 0x0a, 0x12,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x11, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x4d, 0x0a,
	0x0c, 0x6e, 0x65, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x46, 0x65, 0x65, 0x4e, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52,
	0x0b, 0x6e, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x56, 0x0a, 0x0f,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x52, 0x0e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x12, 0x5c, 0x0a, 0x11, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x52, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x56, 0x0a, 0x0f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x56, 0x0a, 0x0f, 0x68, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x46, 0x65, 0x65, 0x48, 0x65, 0x64, 0x65, 0x72, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x52, 0x0e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x4d, 0x0a, 0x0c, 0x72, 0x62, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x62, 0x66, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x52, 0x0b, 0x72, 0x62, 0x66, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x12, 0x44, 0x0a, 0x0d, 0x75, 0x74, 0x78, 0x6f, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x78,
	0x6f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x0c, 0x75, 0x74, 0x78, 0x6f, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x56, 0x0a, 0x0f, 0x73, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65,
	0x65, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52,
	0x0e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12,
	0x5f, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x41, 0x76, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x11, 0x61,
	0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x22, 0xb6, 0x01, 0x0a, 0x1d, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x41, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x33, 0x0a, 0x17, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x4e, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x36,
	0x0a, 0x1a, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x1c, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x16, 0x69,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x14, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x67, 0x0a, 0x1a, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65,
	0x65, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12,
	0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x22, 0x30, 0x0a, 0x1a, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x48, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x22, 0x60, 0x0a, 0x1a,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x91,
	0x01, 0x0a, 0x17, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52,
	0x62, 0x66, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x76, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31,
	0x32, 0x7d, 0x24, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x56, 0x0a, 0x0c, 0x55, 0x74, 0x78, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x75,
	0x74, 0x78, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x54, 0x58, 0x4f, 0x52, 0x0d, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x22, 0x6e, 0x0a, 0x1d, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x41, 0x0a, 0x07, 0x74,
	0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67,
	0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x54, 0x78, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x47, 0x0a, 0x14, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x66, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x65, 0x65, 0x22, 0x25, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7b, 0x0a, 0x24, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x12, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e,
	0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x63, 0x6f,
	0x69, 0x6e, 0x12, 0x44, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x22, 0x82, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x73, 0x74, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x66, 0x61, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x73, 0x61, 0x66, 0x65, 0x4c, 0x6f, 0x77, 0x22, 0xbe, 0x01, 0x0a, 0x16, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63,
	0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x2f, 0x0a, 0x17, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x83, 0x04, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x6e,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31,
	0x32, 0x7d, 0x24, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32,
	0x2b, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a,
	0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a,
	0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x49, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x7b, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x09, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8d,
	0x02, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x28, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69,
	0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20,
	0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x44, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4c,
	0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0xde, 0x02, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x12,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32,
	0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x28, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67,
	0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x96, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x12, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x31, 0x32, 0x7d, 0x24, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xac, 0x04, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c,
	0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6e, 0x0a, 0x0a,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x28, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24, 0x7c,
	0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e,
	0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33, 0x34, 0x35,
	0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x8f, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x12, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x12, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x22, 0xee, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x28, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63,
	0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e,
	0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0b, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x22, 0x3c, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x86, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x0c, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c,
	0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39,
	0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0b, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x56, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0a,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x94, 0x04, 0x0a, 0x1d, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0b,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x72, 0x0a, 0x0c, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x0b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x0e, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x28, 0x52,
	0x0d, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67,
	0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69,
	0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e,
	0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c,
	0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33,
	0x34, 0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x22, 0x86, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8d, 0x02, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x0c, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49,
	0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0b, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x28, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12,
	0x29, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0a,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x1f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f,
	0x0a, 0x0c, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32,
	0x7d, 0x24, 0x52, 0x0b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0a,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x0c, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49,
	0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0b, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0xa8, 0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x28, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x44,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x22, 0x49, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x67, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xaa, 0x04, 0x0a, 0x21, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c,
	0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7b, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48,
	0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x13, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x28, 0x52,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69,
	0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72,
	0x2d, 0x32, 0x2b, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
	0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
	0x59, 0x5a, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x97, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xf7, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78,
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47,
	0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x1e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x28, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d,
	0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38,
	0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x22, 0xb8,
	0x01, 0x0a, 0x22, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x22, 0xed, 0x03, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x28, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04,
	0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69,
	0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x72, 0x0a, 0x0c, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24,
	0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x78, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c,
	0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39,
	0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x33, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x22, 0x7d,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31,
	0x32, 0x7d, 0x24, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x22, 0xd0, 0x04,
	0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x42, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a,
	0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6c, 0x0a, 0x09, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f,
	0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52,
	0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x28, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67,
	0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x48, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24,
	0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d,
	0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33, 0x34,
	0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x49, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x22,
	0x3e, 0x0a, 0x19, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x9e, 0x01, 0x0a, 0x20, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x12, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x10,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x22, 0x46, 0x0a, 0x21, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1b, 0x49, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x0c, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c,
	0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39,
	0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0b, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x1c, 0x49, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x9b, 0x01, 0x0a,
	0x1f, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x78, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49,
	0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x20, 0x49, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x4d, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x22, 0x7d, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x8d, 0x03, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72,
	0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x28, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x72, 0x0a, 0x0c, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48,
	0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x78, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x22,
	0x80, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72,
	0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31,
	0x32, 0x7d, 0x24, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69,
	0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52,
	0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x23, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x64, 0x0a, 0x19, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x17,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c,
	0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39,
	0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x16, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x14, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x4f, 0x53, 0x54, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49,
	0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x4f, 0x53, 0x54, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x13, 0x69, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x4f, 0x53, 0x54, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x11, 0x69, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x84, 0x04, 0x0a, 0x17, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x16, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x44, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x02, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x22, 0xb9, 0x01, 0x0a, 0x24, 0x45, 0x78, 0x69, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x12, 0x6c,
	0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32,
	0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x25,
	0x45, 0x78, 0x69, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x4f, 0x53, 0x54, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa,
	0x42, 0x17, 0x72, 0x15, 0x32, 0x13, 0x5e, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5f,
	0x5d, 0x7b, 0x35, 0x2c, 0x31, 0x31, 0x7d, 0x29, 0x24, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x3a, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x4f, 0x53, 0x54,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x59,
	0x0a, 0x18, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x49, 0x4f, 0x53, 0x54, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x32, 0x13, 0x5e, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5f, 0x5d, 0x7b, 0x35, 0x2c, 0x31, 0x31, 0x7d, 0x29, 0x24, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x19, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x49, 0x4f, 0x53, 0x54, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x1d,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x4f, 0x53, 0x54, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x14, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x65, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x73, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x65, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x15,
	0x66, 0x65, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x13, 0x66, 0x65, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31,
	0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0xb5, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x62, 0x6f, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x6e, 0x62, 0x6f,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x41, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x57, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x13, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7f, 0x0a, 0x20,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5b, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x22, 0x7d, 0x0a,
	0x20, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x59, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x13, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x7e, 0x0a, 0x21,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x59, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x13, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x83, 0x06, 0x0a,
	0x23, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x28, 0x52, 0x0a, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69,
	0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x43, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x2a, 0x03,
	0x18, 0xe8, 0x07, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41,
	0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51,
	0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x5d,
	0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc8, 0x04, 0x0a, 0x24,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x28, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f,
	0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x2a, 0x03, 0x18, 0xe8, 0x07, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b,
	0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b,
	0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32,
	0x33, 0x34, 0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x11, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x94, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x46, 0x54,
	0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04,
	0x10, 0x01, 0x20, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x66, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x46, 0x54, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x6e, 0x66, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x46, 0x54, 0x52, 0x04, 0x6e, 0x66, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x69, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x9c, 0x04, 0x0a, 0x2b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73,
	0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4e, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10,
	0x01, 0x20, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x44, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x19, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x44, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x02, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x2a, 0x02, 0x18, 0x64, 0x48, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b,
	0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b,
	0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32,
	0x33, 0x34, 0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x48, 0x04, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x1f, 0x0a, 0x1d, 0x5f,
	0x70, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc0,
	0x01, 0x0a, 0x2c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x42,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x68, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52,
	0x18, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xa1, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f,
	0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63,
	0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x68, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x1c, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x64, 0x22,
	0x7d, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70,
	0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x89,
	0x01, 0x0a, 0x2c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x22, 0xbe, 0x07, 0x0a, 0x25, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x14, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32,
	0x7d, 0x24, 0x48, 0x00, 0x52, 0x12, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x06, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x07, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x48, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x38, 0xfa, 0x42, 0x35, 0x72, 0x33, 0x32, 0x31, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43,
	0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53,
	0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
	0x39, 0x5d, 0x7b, 0x31, 0x2c, 0x31, 0x36, 0x7d, 0x24, 0x48, 0x0a, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x26,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x14, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24,
	0x52, 0x12, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x3f, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x14, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32,
	0x7d, 0x24, 0x52, 0x12, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x14, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x31, 0x32, 0x7d, 0x24, 0x52, 0x12, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x25, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e,
	0x0a, 0x14, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42,
	0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62,
	0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x12, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x22, 0x5e, 0x0a, 0x29, 0x42, 0x75, 0x6c, 0x6b,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x38,
	0x0a, 0x24, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x85, 0x02, 0x0a, 0x20, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x29, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43,
	0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53,
	0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31,
	0x36, 0x7d, 0x24, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x8a, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x97, 0x63,
	0x0a, 0x09, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x50, 0x49, 0x12, 0x61, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0x00, 0x12, 0x50, 0x0a,
	0x0c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x26, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x0d, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x12, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x55, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x29,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x42, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x42, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x46, 0x54, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x42,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x46, 0x54, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x46, 0x54, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x64, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2c, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x14, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x2e, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x5a, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2a, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x44, 0x12, 0x33, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x54,
	0x58, 0x4f, 0x12, 0x24, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x54, 0x58,
	0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x54, 0x58,
	0x4f, 0x12, 0x25, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x54, 0x58,
	0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x74, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x73, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x73, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0xa6, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x3d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x52, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x12, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12,
	0x6a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x31, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x85, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x32,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x46, 0x65, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x46, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x46, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x8e,
	0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x35,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x85, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x4f, 0x53, 0x54, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x4f, 0x53, 0x54, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x4f, 0x53, 0x54, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0b, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x65, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x65, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x70, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x52, 0x50,
	0x49, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x33, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x52, 0x50, 0x49, 0x6e,
	0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0xa0, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x17, 0x53, 0x69,
	0x67, 0x6e, 0x58, 0x52, 0x50, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x58, 0x52,
	0x50, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70,
	0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x82, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x58, 0x52, 0x50, 0x49, 0x6e, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x58, 0x52, 0x50, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x58, 0x52, 0x50, 0x49, 0x6e, 0x69, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x73, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x18, 0x49, 0x73, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x32, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x54, 0x78, 0x49, 0x44, 0x12, 0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x78, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x32, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x58, 0x52, 0x50, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x58, 0x52, 0x50,
	0x49, 0x6e, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x58, 0x52, 0x50, 0x49,
	0x6e, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x22, 0x00, 0x12, 0x6b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2f, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x79, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x91, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x36, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x19, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x33, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x1c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x36, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x28,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x30, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x14, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2e,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x6e, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x62, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x18, 0x49, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x68, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x1b,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x35, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x26, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x26,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x79, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x11,
	0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x26,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x14, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x2e, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x00,
	0x12, 0x79, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x26, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x44, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x36, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x44, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x65,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6a, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x27, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12,
	0x32, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x19, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x33, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x8c, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x37, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x65, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x46, 0x54, 0x73, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x46, 0x54,
	0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x46, 0x54, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x5e, 0x42, 0x0e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x41, 0x50, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x69, 0x6e, 0x63, 0x6f, 0x49, 0x6e, 0x63,
	0x2f, 0x67, 0x65, 0x77, 0x2d, 0x6b, 0x6d, 0x70, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x69, 0x6e,
	0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescOnce sync.Once
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescData = file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDesc
)

func file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP() []byte {
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescOnce.Do(func() {
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescData)
	})
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescData
}

var file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes = make([]protoimpl.MessageInfo, 268)
var file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_goTypes = []interface{}{
	(*ApproveWalletRequest)(nil),                         // 0: adamant.global.v1.ApproveWalletRequest
	(*ApproveTransactionRequest)(nil),                    // 1: adamant.global.v1.ApproveTransactionRequest
	(*CreateWalletRequest)(nil),                          // 2: adamant.global.v1.CreateWalletRequest
	(*CreateWalletResponse)(nil),                         // 3: adamant.global.v1.CreateWalletResponse
	(*GetWalletRequest)(nil),                             // 4: adamant.global.v1.GetWalletRequest
	(*BatchGetWalletsWithoutBalanceRequest)(nil),         // 5: adamant.global.v1.BatchGetWalletsWithoutBalanceRequest
	(*BatchGetWalletsWithoutBalanceResponse)(nil),        // 6: adamant.global.v1.BatchGetWalletsWithoutBalanceResponse
	(*CancelWalletRequest)(nil),                          // 7: adamant.global.v1.CancelWalletRequest
	(*ArchiveWalletRequest)(nil),                         // 8: adamant.global.v1.ArchiveWalletRequest
	(*UnArchiveWalletRequest)(nil),                       // 9: adamant.global.v1.UnArchiveWalletRequest
	(*ListWalletsRequest)(nil),                           // 10: adamant.global.v1.ListWalletsRequest
	(*ListWalletsByFilterRequest)(nil),                   // 11: adamant.global.v1.ListWalletsByFilterRequest
	(*ListWalletsResponse)(nil),                          // 12: adamant.global.v1.ListWalletsResponse
	(*ListBaseWalletsRequest)(nil),                       // 13: adamant.global.v1.ListBaseWalletsRequest
	(*ListBaseWalletsResponse)(nil),                      // 14: adamant.global.v1.ListBaseWalletsResponse
	(*ListStakingWalletsByFilterRequest)(nil),            // 15: adamant.global.v1.ListStakingWalletsByFilterRequest
	(*ListStakingWalletsResponse)(nil),                   // 16: adamant.global.v1.ListStakingWalletsResponse
	(*ListNFTWalletsByFilterRequest)(nil),                // 17: adamant.global.v1.ListNFTWalletsByFilterRequest
	(*ListNFTWalletsResponse)(nil),                       // 18: adamant.global.v1.ListNFTWalletsResponse
	(*UpdateWalletNameRequest)(nil),                      // 19: adamant.global.v1.UpdateWalletNameRequest
	(*UpdateWalletValidationRequest)(nil),                // 20: adamant.global.v1.UpdateWalletValidationRequest
	(*UpdateWalletPolicyRequest)(nil),                    // 21: adamant.global.v1.UpdateWalletPolicyRequest
	(*ReviewWalletProposalRequest)(nil),                  // 22: adamant.global.v1.ReviewWalletProposalRequest
	(*ExistsWalletByNameRequest)(nil),                    // 23: adamant.global.v1.ExistsWalletByNameRequest
	(*ExistsWalletByNameResponse)(nil),                   // 24: adamant.global.v1.ExistsWalletByNameResponse
	(*ExistsWalletGroupByNameRequest)(nil),               // 25: adamant.global.v1.ExistsWalletGroupByNameRequest
	(*ExistsWalletGroupByNameResponse)(nil),              // 26: adamant.global.v1.ExistsWalletGroupByNameResponse
	(*ExistsEnableWalletByNameRequest)(nil),              // 27: adamant.global.v1.ExistsEnableWalletByNameRequest
	(*ExistsEnableWalletByNameResponse)(nil),             // 28: adamant.global.v1.ExistsEnableWalletByNameResponse
	(*FlushBalanceRequest)(nil),                          // 29: adamant.global.v1.FlushBalanceRequest
	(*FlushBalanceResponse)(nil),                         // 30: adamant.global.v1.FlushBalanceResponse
	(*ListWalletFlushSettingsResponse)(nil),              // 31: adamant.global.v1.ListWalletFlushSettingsResponse
	(*UpdateWalletFlushSettingRequest)(nil),              // 32: adamant.global.v1.UpdateWalletFlushSettingRequest
	(*ListCompensationFeeHistoriesRequest)(nil),          // 33: adamant.global.v1.ListCompensationFeeHistoriesRequest
	(*ListCompensationFeeHistoriesResponse)(nil),         // 34: adamant.global.v1.ListCompensationFeeHistoriesResponse
	(*ListUTXOsRequest)(nil),                             // 35: adamant.global.v1.ListUTXOsRequest
	(*ListUTXOsResponse)(nil),                            // 36: adamant.global.v1.ListUTXOsResponse
	(*UpdateShouldCheckRemittanceFlagRequest)(nil),       // 37: adamant.global.v1.UpdateShouldCheckRemittanceFlagRequest
	(*CreateWalletGroupRequest)(nil),                     // 38: adamant.global.v1.CreateWalletGroupRequest
	(*CreateWalletGroupResponse)(nil),                    // 39: adamant.global.v1.CreateWalletGroupResponse
	(*UpdateWalletGroupRequest)(nil),                     // 40: adamant.global.v1.UpdateWalletGroupRequest
	(*UpdateWalletGroupNameRequest)(nil),                 // 41: adamant.global.v1.UpdateWalletGroupNameRequest
	(*GetWalletGroupRequest)(nil),                        // 42: adamant.global.v1.GetWalletGroupRequest
	(*ListWalletGroupsRequest)(nil),                      // 43: adamant.global.v1.ListWalletGroupsRequest
	(*ListWalletGroupsResponse)(nil),                     // 44: adamant.global.v1.ListWalletGroupsResponse
	(*UpdateDestinationWalletIDRequest)(nil),             // 45: adamant.global.v1.UpdateDestinationWalletIDRequest
	(*EnableUTXORequest)(nil),                            // 46: adamant.global.v1.EnableUTXORequest
	(*DisableUTXORequest)(nil),                           // 47: adamant.global.v1.DisableUTXORequest
	(*UpdateWalletIsStakingAvailableRequest)(nil),        // 48: adamant.global.v1.UpdateWalletIsStakingAvailableRequest
	(*RefreshStakingWalletClaimableRewardRequest)(nil),   // 49: adamant.global.v1.RefreshStakingWalletClaimableRewardRequest
	(*RefreshStakingWalletClaimableRewardResponse)(nil),  // 50: adamant.global.v1.RefreshStakingWalletClaimableRewardResponse
	(*RegisterKeyRequest)(nil),                           // 51: adamant.global.v1.RegisterKeyRequest
	(*RegisterKeyResponse)(nil),                          // 52: adamant.global.v1.RegisterKeyResponse
	(*GetSignerPubKeyRequest)(nil),                       // 53: adamant.global.v1.GetSignerPubKeyRequest
	(*GetSignerPubKeyResponse)(nil),                      // 54: adamant.global.v1.GetSignerPubKeyResponse
	(*CreateAddressRequest)(nil),                         // 55: adamant.global.v1.CreateAddressRequest
	(*CreateAddressResponse)(nil),                        // 56: adamant.global.v1.CreateAddressResponse
	(*GetAddressRequest)(nil),                            // 57: adamant.global.v1.GetAddressRequest
	(*GetAddressByAddressRequest)(nil),                   // 58: adamant.global.v1.GetAddressByAddressRequest
	(*GetAddressByAddressCoinRequest)(nil),               // 59: adamant.global.v1.GetAddressByAddressCoinRequest
	(*GetAddressByIndexRequest)(nil),                     // 60: adamant.global.v1.GetAddressByIndexRequest
	(*GetAddressWithoutBalanceByIndexRequest)(nil),       // 61: adamant.global.v1.GetAddressWithoutBalanceByIndexRequest
	(*ListAddressesRequest)(nil),                         // 62: adamant.global.v1.ListAddressesRequest
	(*ListAddressesResponse)(nil),                        // 63: adamant.global.v1.ListAddressesResponse
	(*ListAddressesWithBalanceRequest)(nil),              // 64: adamant.global.v1.ListAddressesWithBalanceRequest
	(*ListAddressesWithBalanceResponse)(nil),             // 65: adamant.global.v1.ListAddressesWithBalanceResponse
	(*UpdateAddressBalanceRequest)(nil),                  // 66: adamant.global.v1.UpdateAddressBalanceRequest
	(*ListAddressesWithoutBalanceRequest)(nil),           // 67: adamant.global.v1.ListAddressesWithoutBalanceRequest
	(*ListAddressesWithoutBalanceResponse)(nil),          // 68: adamant.global.v1.ListAddressesWithoutBalanceResponse
	(*GetEthereumFeeAddressRequest)(nil),                 // 69: adamant.global.v1.GetEthereumFeeAddressRequest
	(*DeleteAllWatchOnlyAddressesByWalletIDRequest)(nil), // 70: adamant.global.v1.DeleteAllWatchOnlyAddressesByWalletIDRequest
	(*ImportAddressRequest)(nil),                         // 71: adamant.global.v1.ImportAddressRequest
	(*CreatePreTransactionRequest)(nil),                  // 72: adamant.global.v1.CreatePreTransactionRequest
	(*CreatePreTransactionResponse)(nil),                 // 73: adamant.global.v1.CreatePreTransactionResponse
	(*ApprovePreTransactionRequest)(nil),                 // 74: adamant.global.v1.ApprovePreTransactionRequest
	(*RejectPreTransactionRequest)(nil),                  // 75: adamant.global.v1.RejectPreTransactionRequest
	(*CancelPreTransactionRequest)(nil),                  // 76: adamant.global.v1.CancelPreTransactionRequest
	(*ListPreTransactionsByFilterRequest)(nil),           // 77: adamant.global.v1.ListPreTransactionsByFilterRequest
	(*ListPreTransactionsByFilterResponse)(nil),          // 78: adamant.global.v1.ListPreTransactionsByFilterResponse
	(*CreateTransactionRequest)(nil),                     // 79: adamant.global.v1.CreateTransactionRequest
	(*CreateTransactionResponse)(nil),                    // 80: adamant.global.v1.CreateTransactionResponse
	(*CreateXRPInitTransactionsRequest)(nil),             // 81: adamant.global.v1.CreateXRPInitTransactionsRequest
	(*CreateInitTransactionRequest)(nil),                 // 82: adamant.global.v1.CreateInitTransactionRequest
	(*CreateContractCreationTransactionRequest)(nil),     // 83: adamant.global.v1.CreateContractCreationTransactionRequest
	(*CreateContractCreationTransactionResponse)(nil),    // 84: adamant.global.v1.CreateContractCreationTransactionResponse
	(*SignTransactionRequest)(nil),                       // 85: adamant.global.v1.SignTransactionRequest
	(*SignXRPInitTransactionsRequest)(nil),               // 86: adamant.global.v1.SignXRPInitTransactionsRequest
	(*SignInitTransactionRequest)(nil),                   // 87: adamant.global.v1.SignInitTransactionRequest
	(*SendTransactionRequest)(nil),                       // 88: adamant.global.v1.SendTransactionRequest
	(*SendTransactionResponse)(nil),                      // 89: adamant.global.v1.SendTransactionResponse
	(*ResendTransactionRequest)(nil),                     // 90: adamant.global.v1.ResendTransactionRequest
	(*ResendTransactionResponse)(nil),                    // 91: adamant.global.v1.ResendTransactionResponse
	(*SendXRPInitTransactionsRequest)(nil),               // 92: adamant.global.v1.SendXRPInitTransactionsRequest
	(*SendXRPInitTransactionsResponse)(nil),              // 93: adamant.global.v1.SendXRPInitTransactionsResponse
	(*SendInitTransactionRequest)(nil),                   // 94: adamant.global.v1.SendInitTransactionRequest
	(*SendInitTransactionResponse)(nil),                  // 95: adamant.global.v1.SendInitTransactionResponse
	(*CancelTransactionRequest)(nil),                     // 96: adamant.global.v1.CancelTransactionRequest
	(*ReplaceTransactionRequest)(nil),                    // 97: adamant.global.v1.ReplaceTransactionRequest
	(*ReplaceTransactionResponse)(nil),                   // 98: adamant.global.v1.ReplaceTransactionResponse
	(*IsTransactionReplaceableRequest)(nil),              // 99: adamant.global.v1.IsTransactionReplaceableRequest
	(*IsTransactionReplaceableResponse)(nil),             // 100: adamant.global.v1.IsTransactionReplaceableResponse
	(*GetTransactionRequest)(nil),                        // 101: adamant.global.v1.GetTransactionRequest
	(*GetTransactionByTxIDRequest)(nil),                  // 102: adamant.global.v1.GetTransactionByTxIDRequest
	(*ListTransactionsRequest)(nil),                      // 103: adamant.global.v1.ListTransactionsRequest
	(*ListTransactionsByFilterRequest)(nil),              // 104: adamant.global.v1.ListTransactionsByFilterRequest
	(*ListTransactionsResponse)(nil),                     // 105: adamant.global.v1.ListTransactionsResponse
	(*ListUnconfirmedTransactionsByFilterRequest)(nil),   // 106: adamant.global.v1.ListUnconfirmedTransactionsByFilterRequest
	(*ListUnconfirmedTransactionsResponse)(nil),          // 107: adamant.global.v1.ListUnconfirmedTransactionsResponse
	(*GetSignInfoRequest)(nil),                           // 108: adamant.global.v1.GetSignInfoRequest
	(*ListSignInfoRequest)(nil),                          // 109: adamant.global.v1.ListSignInfoRequest
	(*ListSignInfoResponse)(nil),                         // 110: adamant.global.v1.ListSignInfoResponse
	(*ListXRPInitSignInfoRequest)(nil),                   // 111: adamant.global.v1.ListXRPInitSignInfoRequest
	(*ListXRPInitSignInfoResponse)(nil),                  // 112: adamant.global.v1.ListXRPInitSignInfoResponse
	(*ListInitSignInfoRequest)(nil),                      // 113: adamant.global.v1.ListInitSignInfoRequest
	(*ListTransfersRequest)(nil),                         // 114: adamant.global.v1.ListTransfersRequest
	(*ListTransfersByFilterRequest)(nil),                 // 115: adamant.global.v1.ListTransfersByFilterRequest
	(*ListTransfersResponse)(nil),                        // 116: adamant.global.v1.ListTransfersResponse
	(*ListUncheckedTransfersByFilterRequest)(nil),        // 117: adamant.global.v1.ListUncheckedTransfersByFilterRequest
	(*UpdateUncheckedTransferHasCheckedFlagRequest)(nil), // 118: adamant.global.v1.UpdateUncheckedTransferHasCheckedFlagRequest
	(*ListUncheckedTransfersResponse)(nil),               // 119: adamant.global.v1.ListUncheckedTransfersResponse
	(*ListEventTriggeredMessagesRequest)(nil),            // 120: adamant.global.v1.ListEventTriggeredMessagesRequest
	(*ListEventTriggeredMessagesResponse)(nil),           // 121: adamant.global.v1.ListEventTriggeredMessagesResponse
	(*CreateEventTriggeredMessageRequest)(nil),           // 122: adamant.global.v1.CreateEventTriggeredMessageRequest
	(*CreateEventTriggeredMessageResponce)(nil),          // 123: adamant.global.v1.CreateEventTriggeredMessageResponce
	(*UpdateEventTriggeredMessageRequest)(nil),           // 124: adamant.global.v1.UpdateEventTriggeredMessageRequest
	(*DeleteEventTriggeredMessageRequest)(nil),           // 125: adamant.global.v1.DeleteEventTriggeredMessageRequest
	(*GetRateSnapshotRequest)(nil),                       // 126: adamant.global.v1.GetRateSnapshotRequest
	(*GetLatestRateSnapshotRequest)(nil),                 // 127: adamant.global.v1.GetLatestRateSnapshotRequest
	(*SetRatesRequest)(nil),                              // 128: adamant.global.v1.SetRatesRequest
	(*SetDefaultRatesRequest)(nil),                       // 129: adamant.global.v1.SetDefaultRatesRequest
	(*SetRatesResponse)(nil),                             // 130: adamant.global.v1.SetRatesResponse
	(*SetDefaultRatesResponse)(nil),                      // 131: adamant.global.v1.SetDefaultRatesResponse
	(*GetSpendableBalanceRequest)(nil),                   // 132: adamant.global.v1.GetSpendableBalanceRequest
	(*GetSpendableBalanceResponse)(nil),                  // 133: adamant.global.v1.GetSpendableBalanceResponse
	(*GetTotalBalanceRequest)(nil),                       // 134: adamant.global.v1.GetTotalBalanceRequest
	(*ListBalanceSnapshotsRequest)(nil),                  // 135: adamant.global.v1.ListBalanceSnapshotsRequest
	(*ListBalanceSnapshotsResponse)(nil),                 // 136: adamant.global.v1.ListBalanceSnapshotsResponse
	(*ListWalletBalanceSnapshotsRequest)(nil),            // 137: adamant.global.v1.ListWalletBalanceSnapshotsRequest
	(*ListWalletBalanceSnapshotsResponse)(nil),           // 138: adamant.global.v1.ListWalletBalanceSnapshotsResponse
	(*ListTransferVolumeSnapshotsRequest)(nil),           // 139: adamant.global.v1.ListTransferVolumeSnapshotsRequest
	(*ListTransferVolumeSnapshotsResponse)(nil),          // 140: adamant.global.v1.ListTransferVolumeSnapshotsResponse
	(*ListWalletTransferVolumeSnapshotsRequest)(nil),     // 141: adamant.global.v1.ListWalletTransferVolumeSnapshotsRequest
	(*ListWalletTransferVolumeSnapshotsResponse)(nil),    // 142: adamant.global.v1.ListWalletTransferVolumeSnapshotsResponse
	(*CalculateFeeRequest)(nil),                          // 143: adamant.global.v1.CalculateFeeRequest
	(*CalculateFeeSubstrateSpecific)(nil),                // 144: adamant.global.v1.CalculateFeeSubstrateSpecific
	(*CalculateFeeNemSpecific)(nil),                      // 145: adamant.global.v1.CalculateFeeNemSpecific
	(*CalculateFeeSymbolSpecific)(nil),                   // 146: adamant.global.v1.CalculateFeeSymbolSpecific
	(*CalculateFeeEthereumSpecific)(nil),                 // 147: adamant.global.v1.CalculateFeeEthereumSpecific
	(*CalculateFeeCosmosSpecific)(nil),                   // 148: adamant.global.v1.CalculateFeeCosmosSpecific
	(*CalculateFeeHederaSpecific)(nil),                   // 149: adamant.global.v1.CalculateFeeHederaSpecific
	(*CalculateFeeSolanaSpecific)(nil),                   // 150: adamant.global.v1.CalculateFeeSolanaSpecific
	(*CalculateFeeRbfSpecific)(nil),                      // 151: adamant.global.v1.CalculateFeeRbfSpecific
	(*UtxoSpecific)(nil),                                 // 152: adamant.global.v1.UtxoSpecific
	(*CalculateFeeAvalancheSpecific)(nil),                // 153: adamant.global.v1.CalculateFeeAvalancheSpecific
	(*CalculateFeeResponse)(nil),                         // 154: adamant.global.v1.CalculateFeeResponse
	(*GetMembersDeactivatabilitiesRequest)(nil),          // 155: adamant.global.v1.GetMembersDeactivatabilitiesRequest
	(*GetMembersDeactivatabilitiesResponse)(nil),         // 156: adamant.global.v1.GetMembersDeactivatabilitiesResponse
	(*GetRecommendedFeeRateRequest)(nil),                 // 157: adamant.global.v1.GetRecommendedFeeRateRequest
	(*GetRecommendedFeeRateResponse)(nil),                // 158: adamant.global.v1.GetRecommendedFeeRateResponse
	(*ValidateAddressRequest)(nil),                       // 159: adamant.global.v1.ValidateAddressRequest
	(*ValidateAddressResponse)(nil),                      // 160: adamant.global.v1.ValidateAddressResponse
	(*ListConfirmationsRequest)(nil),                     // 161: adamant.global.v1.ListConfirmationsRequest
	(*ListConfirmationsResponse)(nil),                    // 162: adamant.global.v1.ListConfirmationsResponse
	(*ListAuditLogsRequest)(nil),                         // 163: adamant.global.v1.ListAuditLogsRequest
	(*ListAuditLogsResponse)(nil),                        // 164: adamant.global.v1.ListAuditLogsResponse
	(*CreateLabeledAddressRequest)(nil),                  // 165: adamant.global.v1.CreateLabeledAddressRequest
	(*CreateLabeledAddressResponse)(nil),                 // 166: adamant.global.v1.CreateLabeledAddressResponse
	(*UpdateLabeledAddressRequest)(nil),                  // 167: adamant.global.v1.UpdateLabeledAddressRequest
	(*GetLabeledAddressRequest)(nil),                     // 168: adamant.global.v1.GetLabeledAddressRequest
	(*ListLabeledAddressesRequest)(nil),                  // 169: adamant.global.v1.ListLabeledAddressesRequest
	(*ListLabeledAddressesResponse)(nil),                 // 170: adamant.global.v1.ListLabeledAddressesResponse
	(*ListLabeledAddressesByFilterRequest)(nil),          // 171: adamant.global.v1.ListLabeledAddressesByFilterRequest
	(*ListLabeledAddressesByFilterResponse)(nil),         // 172: adamant.global.v1.ListLabeledAddressesByFilterResponse
	(*DeleteLabeledAddressRequest)(nil),                  // 173: adamant.global.v1.DeleteLabeledAddressRequest
	(*ReviewLabeledAddressProposalRequest)(nil),          // 174: adamant.global.v1.ReviewLabeledAddressProposalRequest
	(*CreateWhitelistRequest)(nil),                       // 175: adamant.global.v1.CreateWhitelistRequest
	(*CreateWhitelistResponse)(nil),                      // 176: adamant.global.v1.CreateWhitelistResponse
	(*GetWhitelistRequest)(nil),                          // 177: adamant.global.v1.GetWhitelistRequest
	(*ListWhitelistsRequest)(nil),                        // 178: adamant.global.v1.ListWhitelistsRequest
	(*ListWhitelistsResponse)(nil),                       // 179: adamant.global.v1.ListWhitelistsResponse
	(*ListWhitelistsByFilterRequest)(nil),                // 180: adamant.global.v1.ListWhitelistsByFilterRequest
	(*ListWhitelistsByFilterResponse)(nil),               // 181: adamant.global.v1.ListWhitelistsByFilterResponse
	(*UpdateWhitelistRequest)(nil),                       // 182: adamant.global.v1.UpdateWhitelistRequest
	(*UpdateWhitelistAddressesRequest)(nil),              // 183: adamant.global.v1.UpdateWhitelistAddressesRequest
	(*DeleteWhitelistRequest)(nil),                       // 184: adamant.global.v1.DeleteWhitelistRequest
	(*CreateTransferLimitRequest)(nil),                   // 185: adamant.global.v1.CreateTransferLimitRequest
	(*CreateTransferLimitResponse)(nil),                  // 186: adamant.global.v1.CreateTransferLimitResponse
	(*GetTransferLimitRequest)(nil),                      // 187: adamant.global.v1.GetTransferLimitRequest
	(*ListTransferLimitsRequest)(nil),                    // 188: adamant.global.v1.ListTransferLimitsRequest
	(*ListTransferLimitsResponse)(nil),                   // 189: adamant.global.v1.ListTransferLimitsResponse
	(*ListTransferLimitsByFilterRequest)(nil),            // 190: adamant.global.v1.ListTransferLimitsByFilterRequest
	(*ListTransferLimitsByFilterResponse)(nil),           // 191: adamant.global.v1.ListTransferLimitsByFilterResponse
	(*UpdateTransferLimitRequest)(nil),                   // 192: adamant.global.v1.UpdateTransferLimitRequest
	(*UpdateTransferLimitNameRequest)(nil),               // 193: adamant.global.v1.UpdateTransferLimitNameRequest
	(*DeleteTransferLimitRequest)(nil),                   // 194: adamant.global.v1.DeleteTransferLimitRequest
	(*ReviewTransferLimitProposalRequest)(nil),           // 195: adamant.global.v1.ReviewTransferLimitProposalRequest
	(*CreatePolicyRequest)(nil),                          // 196: adamant.global.v1.CreatePolicyRequest
	(*CreatePolicyResponse)(nil),                         // 197: adamant.global.v1.CreatePolicyResponse
	(*GetPolicyRequest)(nil),                             // 198: adamant.global.v1.GetPolicyRequest
	(*ListPoliciesByFilterRequest)(nil),                  // 199: adamant.global.v1.ListPoliciesByFilterRequest
	(*ListPoliciesRequest)(nil),                          // 200: adamant.global.v1.ListPoliciesRequest
	(*IsDeletablePolicyRequest)(nil),                     // 201: adamant.global.v1.IsDeletablePolicyRequest
	(*IsDeletablePolicyResponse)(nil),                    // 202: adamant.global.v1.IsDeletablePolicyResponse
	(*IsDeletableLabeledAddressRequest)(nil),             // 203: adamant.global.v1.IsDeletableLabeledAddressRequest
	(*IsDeletableLabeledAddressResponse)(nil),            // 204: adamant.global.v1.IsDeletableLabeledAddressResponse
	(*IsDeletableWhitelistRequest)(nil),                  // 205: adamant.global.v1.IsDeletableWhitelistRequest
	(*IsDeletableWhitelistResponse)(nil),                 // 206: adamant.global.v1.IsDeletableWhitelistResponse
	(*IsDeletableTransferLimitRequest)(nil),              // 207: adamant.global.v1.IsDeletableTransferLimitRequest
	(*IsDeletableTransferLimitResponse)(nil),             // 208: adamant.global.v1.IsDeletableTransferLimitResponse
	(*ListPoliciesResponse)(nil),                         // 209: adamant.global.v1.ListPoliciesResponse
	(*ListPoliciesByFilterResponse)(nil),                 // 210: adamant.global.v1.ListPoliciesByFilterResponse
	(*UpdatePolicyRequest)(nil),                          // 211: adamant.global.v1.UpdatePolicyRequest
	(*DeletePolicyRequest)(nil),                          // 212: adamant.global.v1.DeletePolicyRequest
	(*ReviewPolicyProposalRequest)(nil),                  // 213: adamant.global.v1.ReviewPolicyProposalRequest
	(*ListSubstrateChildAddressesRequest)(nil),           // 214: adamant.global.v1.ListSubstrateChildAddressesRequest
	(*ListSubstrateChildAddressesResponse)(nil),          // 215: adamant.global.v1.ListSubstrateChildAddressesResponse
	(*ListSymbolChildAddressesRequest)(nil),              // 216: adamant.global.v1.ListSymbolChildAddressesRequest
	(*ListSymbolChildAddressesResponse)(nil),             // 217: adamant.global.v1.ListSymbolChildAddressesResponse
	(*ListIOSTChildAccountsRequest)(nil),                 // 218: adamant.global.v1.ListIOSTChildAccountsRequest
	(*ListIOSTChildAccountsResponse)(nil),                // 219: adamant.global.v1.ListIOSTChildAccountsResponse
	(*DownloadResourceRequest)(nil),                      // 220: adamant.global.v1.DownloadResourceRequest
	(*ExitEthereumStakingValidatorsRequest)(nil),         // 221: adamant.global.v1.ExitEthereumStakingValidatorsRequest
	(*ExitEthereumStakingValidatorsResponse)(nil),        // 222: adamant.global.v1.ExitEthereumStakingValidatorsResponse
	(*CreateIOSTAccountRequest)(nil),                     // 223: adamant.global.v1.CreateIOSTAccountRequest
	(*CreateIOSTAccountResponse)(nil),                    // 224: adamant.global.v1.CreateIOSTAccountResponse
	(*ExistsIOSTAccountRequest)(nil),                     // 225: adamant.global.v1.ExistsIOSTAccountRequest
	(*ExistsIOSTAccountResponse)(nil),                    // 226: adamant.global.v1.ExistsIOSTAccountResponse
	(*GetIOSTCallerAccountRequest)(nil),                  // 227: adamant.global.v1.GetIOSTCallerAccountRequest
	(*ListCallersRequest)(nil),                           // 228: adamant.global.v1.ListCallersRequest
	(*ListCallersResponse)(nil),                          // 229: adamant.global.v1.ListCallersResponse
	(*ListFeeDepositsRequest)(nil),                       // 230: adamant.global.v1.ListFeeDepositsRequest
	(*ListFeeDepositsResponse)(nil),                      // 231: adamant.global.v1.ListFeeDepositsResponse
	(*GetCosmosBalanceRequest)(nil),                      // 232: adamant.global.v1.GetCosmosBalanceRequest
	(*GetCosmosBalanceResponse)(nil),                     // 233: adamant.global.v1.GetCosmosBalanceResponse
	(*ListCosmosDelegateHistoriesRequest)(nil),           // 234: adamant.global.v1.ListCosmosDelegateHistoriesRequest
	(*ListCosmosDelegateHistoriesResponse)(nil),          // 235: adamant.global.v1.ListCosmosDelegateHistoriesResponse
	(*CosmosDelegateHistory)(nil),                        // 236: adamant.global.v1.CosmosDelegateHistory
	(*ForwardingThreshold)(nil),                          // 237: adamant.global.v1.ForwardingThreshold
	(*ListForwardingThresholdsRequest)(nil),              // 238: adamant.global.v1.ListForwardingThresholdsRequest
	(*ListForwardingThresholdsResponse)(nil),             // 239: adamant.global.v1.ListForwardingThresholdsResponse
	(*UpsertForwardingThresholdRequest)(nil),             // 240: adamant.global.v1.UpsertForwardingThresholdRequest
	(*UpsertForwardingThresholdResponse)(nil),            // 241: adamant.global.v1.UpsertForwardingThresholdResponse
	(*ListStakingHistoriesByFilterRequest)(nil),          // 242: adamant.global.v1.ListStakingHistoriesByFilterRequest
	(*ListStakingHistoriesResponse)(nil),                 // 243: adamant.global.v1.ListStakingHistoriesResponse
	(*ListStakingValidatorsByFilterRequest)(nil),         // 244: adamant.global.v1.ListStakingValidatorsByFilterRequest
	(*ListStakingValidatorsResponse)(nil),                // 245: adamant.global.v1.ListStakingValidatorsResponse
	(*ListNFTsByFilterRequest)(nil),                      // 246: adamant.global.v1.ListNFTsByFilterRequest
	(*ListNFTsResponse)(nil),                             // 247: adamant.global.v1.ListNFTsResponse
	(*UpdateMailSettingsRequest)(nil),                    // 248: adamant.global.v1.UpdateMailSettingsRequest
	(*GetMailSettingsRequest)(nil),                       // 249: adamant.global.v1.GetMailSettingsRequest
	(*ListPreTransactionThresholdsByFilterRequest)(nil),  // 250: adamant.global.v1.ListPreTransactionThresholdsByFilterRequest
	(*ListPreTransactionThresholdsByFilterResponse)(nil), // 251: adamant.global.v1.ListPreTransactionThresholdsByFilterResponse
	(*CreatePreTransactionThresholdRequest)(nil),         // 252: adamant.global.v1.CreatePreTransactionThresholdRequest
	(*CreatePreTransactionThresholdResponse)(nil),        // 253: adamant.global.v1.CreatePreTransactionThresholdResponse
	(*UpdatePreTransactionThresholdRequest)(nil),         // 254: adamant.global.v1.UpdatePreTransactionThresholdRequest
	(*ReviewPreTransactionThresholdProposalRequest)(nil), // 255: adamant.global.v1.ReviewPreTransactionThresholdProposalRequest
	(*ListBlacklistAddressesByFilterRequest)(nil),        // 256: adamant.global.v1.ListBlacklistAddressesByFilterRequest
	(*ListBlacklistAddressesByFilterResponse)(nil),       // 257: adamant.global.v1.ListBlacklistAddressesByFilterResponse
	(*CreateBlacklistAddressResponse)(nil),               // 258: adamant.global.v1.CreateBlacklistAddressResponse
	(*CreateBlacklistAddressRequest)(nil),                // 259: adamant.global.v1.CreateBlacklistAddressRequest
	(*GetBlacklistAddressRequest)(nil),                   // 260: adamant.global.v1.GetBlacklistAddressRequest
	(*UpdateBlacklistAddressRequest)(nil),                // 261: adamant.global.v1.UpdateBlacklistAddressRequest
	(*ReviewBlacklistAddressProposalRequest)(nil),        // 262: adamant.global.v1.ReviewBlacklistAddressProposalRequest
	(*BulkReviewBlacklistAddressProposalRequest)(nil),    // 263: adamant.global.v1.BulkReviewBlacklistAddressProposalRequest
	(*GetBlacklistStorageSignedURLRequest)(nil),          // 264: adamant.global.v1.GetBlacklistStorageSignedURLRequest
	(*GetBlacklistStorageSignedURLResponse)(nil),         // 265: adamant.global.v1.GetBlacklistStorageSignedURLResponse
	(*ListBlacklistAddressFilesRequest)(nil),             // 266: adamant.global.v1.ListBlacklistAddressFilesRequest
	(*ListBlacklistAddressFilesResponse)(nil),            // 267: adamant.global.v1.ListBlacklistAddressFilesResponse
	(gincoincglobalv1.Coin)(0),                           // 268: gincoinc.global.v1.Coin
	(gincoincglobalv1.Network)(0),                        // 269: gincoinc.global.v1.Network
	(WalletType)(0),                                      // 270: adamant.global.v1.WalletType
	(gincoincglobalv1.AddressType)(0),                    // 271: gincoinc.global.v1.AddressType
	(*WalletWithoutBalance)(nil),                         // 272: adamant.global.v1.WalletWithoutBalance
	(ListFilterType)(0),                                  // 273: adamant.global.v1.ListFilterType
	(WalletState)(0),                                     // 274: adamant.global.v1.WalletState
	(*Wallet)(nil),                                       // 275: adamant.global.v1.Wallet
	(*StakingWallet)(nil),                                // 276: adamant.global.v1.StakingWallet
	(*NFTWallet)(nil),                                    // 277: adamant.global.v1.NFTWallet
	(*FlushedAddress)(nil),                               // 278: adamant.global.v1.FlushedAddress
	(*WalletFlushSetting)(nil),                           // 279: adamant.global.v1.WalletFlushSetting
	(*CompensationFee)(nil),                              // 280: adamant.global.v1.CompensationFee
	(*UTXO)(nil),                                         // 281: adamant.global.v1.UTXO
	(*WalletGroup)(nil),                                  // 282: adamant.global.v1.WalletGroup
	(*Address)(nil),                                      // 283: adamant.global.v1.Address
	(*AddressWithBalance)(nil),                           // 284: adamant.global.v1.AddressWithBalance
	(*AddressWithoutBalance)(nil),                        // 285: adamant.global.v1.AddressWithoutBalance
	(*PreTransactionDetail)(nil),                         // 286: adamant.global.v1.PreTransactionDetail
	(PreTransactionState)(0),                             // 287: adamant.global.v1.PreTransactionState
	(*timestamppb.Timestamp)(nil),                        // 288: google.protobuf.Timestamp
	(*PreTransaction)(nil),                               // 289: adamant.global.v1.PreTransaction
	(*RequestTxOutput)(nil),                              // 290: adamant.global.v1.RequestTxOutput
	(*CreateTransactionSubstrateSpecific)(nil),           // 291: adamant.global.v1.CreateTransactionSubstrateSpecific
	(*CreateTransactionWalletConnectSpecific)(nil),       // 292: adamant.global.v1.CreateTransactionWalletConnectSpecific
	(*CreateTransactionNemSpecific)(nil),                 // 293: adamant.global.v1.CreateTransactionNemSpecific
	(*CreateTransactionIOSTSpecific)(nil),                // 294: adamant.global.v1.CreateTransactionIOSTSpecific
	(*CreateTransactionSymbolSpecific)(nil),              // 295: adamant.global.v1.CreateTransactionSymbolSpecific
	(*CreateTransactionEthereumSpecific)(nil),            // 296: adamant.global.v1.CreateTransactionEthereumSpecific
	(*CreateTransactionCosmosSpecific)(nil),              // 297: adamant.global.v1.CreateTransactionCosmosSpecific
	(*CreateTransactionAlgorandSpecific)(nil),            // 298: adamant.global.v1.CreateTransactionAlgorandSpecific
	(*CreateTransactionHederaSpecific)(nil),              // 299: adamant.global.v1.CreateTransactionHederaSpecific
	(*CreateTransactionSolanaSpecific)(nil),              // 300: adamant.global.v1.CreateTransactionSolanaSpecific
	(*CreateTransactionAptosSpecific)(nil),               // 301: adamant.global.v1.CreateTransactionAptosSpecific
	(*CreateTransactionAvalancheSpecific)(nil),           // 302: adamant.global.v1.CreateTransactionAvalancheSpecific
	(*CreateTransactionNFTSpecific)(nil),                 // 303: adamant.global.v1.CreateTransactionNFTSpecific
	(gincoincglobalv1.ContractCreationType)(0),           // 304: gincoinc.global.v1.ContractCreationType
	(*RequestSignedInfo)(nil),                            // 305: adamant.global.v1.RequestSignedInfo
	(ExecutorType)(0),                                    // 306: adamant.global.v1.ExecutorType
	(TransactionState)(0),                                // 307: adamant.global.v1.TransactionState
	(*Transaction)(nil),                                  // 308: adamant.global.v1.Transaction
	(*UnconfirmedTransaction)(nil),                       // 309: adamant.global.v1.UnconfirmedTransaction
	(*SignInfo)(nil),                                     // 310: adamant.global.v1.SignInfo
	(gincoincglobalv1.TransferType)(0),                   // 311: gincoinc.global.v1.TransferType
	(*Transfer)(nil),                                     // 312: adamant.global.v1.Transfer
	(*UncheckedTransfer)(nil),                            // 313: adamant.global.v1.UncheckedTransfer
	(*EventTriggeredMessage)(nil),                        // 314: adamant.global.v1.EventTriggeredMessage
	(EventTriggeredMessageType)(0),                       // 315: adamant.global.v1.EventTriggeredMessageType
	(*RequestRate)(nil),                                  // 316: adamant.global.v1.RequestRate
	(*BalanceSnapshot)(nil),                              // 317: adamant.global.v1.BalanceSnapshot
	(*WalletBalanceSnapshotMap)(nil),                     // 318: adamant.global.v1.WalletBalanceSnapshotMap
	(*TransferVolumeSnapshots)(nil),                      // 319: adamant.global.v1.TransferVolumeSnapshots
	(*WalletTransferVolumeSnapshots)(nil),                // 320: adamant.global.v1.WalletTransferVolumeSnapshots
	(SubstrateCallType)(0),                               // 321: adamant.global.v1.SubstrateCallType
	(gincoincglobalv1.CosmosMsgType)(0),                  // 322: gincoinc.global.v1.CosmosMsgType
	(gincoincglobalv1.SolanaEventType)(0),                // 323: gincoinc.global.v1.SolanaEventType
	(*SelectedUTXO)(nil),                                 // 324: adamant.global.v1.SelectedUTXO
	(gincoincglobalv1.AvalancheTxType)(0),                // 325: gincoinc.global.v1.AvalancheTxType
	(*Deactivatability)(nil),                             // 326: adamant.global.v1.Deactivatability
	(*Confirmation)(nil),                                 // 327: adamant.global.v1.Confirmation
	(AuditLogGroup)(0),                                   // 328: adamant.global.v1.AuditLogGroup
	(*AuditLog)(nil),                                     // 329: adamant.global.v1.AuditLog
	(*LabeledAddress)(nil),                               // 330: adamant.global.v1.LabeledAddress
	(*Whitelist)(nil),                                    // 331: adamant.global.v1.Whitelist
	(*RequestTransferLimitEntry)(nil),                    // 332: adamant.global.v1.RequestTransferLimitEntry
	(*TransferLimit)(nil),                                // 333: adamant.global.v1.TransferLimit
	(PolicyType)(0),                                      // 334: adamant.global.v1.PolicyType
	(*Policy)(nil),                                       // 335: adamant.global.v1.Policy
	(*SubstrateChildAddress)(nil),                        // 336: adamant.global.v1.SubstrateChildAddress
	(*SymbolChildAddress)(nil),                           // 337: adamant.global.v1.SymbolChildAddress
	(*IOSTChildAccount)(nil),                             // 338: adamant.global.v1.IOSTChildAccount
	(DownloadResourceType)(0),                            // 339: adamant.global.v1.DownloadResourceType
	(BlacklistAddressStatus)(0),                          // 340: adamant.global.v1.BlacklistAddressStatus
	(*CallerAddress)(nil),                                // 341: adamant.global.v1.CallerAddress
	(*FeeDepositAddress)(nil),                            // 342: adamant.global.v1.FeeDepositAddress
	(*CosmosDelegation)(nil),                             // 343: adamant.global.v1.CosmosDelegation
	(gincoincglobalv1.StakingEventType)(0),               // 344: gincoinc.global.v1.StakingEventType
	(*StakingHistory)(nil),                               // 345: adamant.global.v1.StakingHistory
	(gincoincglobalv1.StakingValidatorStatus)(0),         // 346: gincoinc.global.v1.StakingValidatorStatus
	(*StakingValidator)(nil),                             // 347: adamant.global.v1.StakingValidator
	(*NFT)(nil),                                          // 348: adamant.global.v1.NFT
	(MailType)(0),                                        // 349: adamant.global.v1.MailType
	(*PreTransactionThreshold)(nil),                      // 350: adamant.global.v1.PreTransactionThreshold
	(*BlacklistAddress)(nil),                             // 351: adamant.global.v1.BlacklistAddress
	(*BlacklistAddressFile)(nil),                         // 352: adamant.global.v1.BlacklistAddressFile
	(*emptypb.Empty)(nil),                                // 353: google.protobuf.Empty
	(*EthereumFeeAddress)(nil),                           // 354: adamant.global.v1.EthereumFeeAddress
	(*RateSnapshot)(nil),                                 // 355: adamant.global.v1.RateSnapshot
	(*TotalBalance)(nil),                                 // 356: adamant.global.v1.TotalBalance
}
var file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_depIdxs = []int32{
	268, // 0: adamant.global.v1.CreateWalletRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 1: adamant.global.v1.CreateWalletRequest.network:type_name -> gincoinc.global.v1.Network
	270, // 2: adamant.global.v1.CreateWalletRequest.wallet_type:type_name -> adamant.global.v1.WalletType
	271, // 3: adamant.global.v1.CreateWalletRequest.address_type:type_name -> gincoinc.global.v1.AddressType
	272, // 4: adamant.global.v1.BatchGetWalletsWithoutBalanceResponse.wallets:type_name -> adamant.global.v1.WalletWithoutBalance
	273, // 5: adamant.global.v1.ListWalletsByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	268, // 6: adamant.global.v1.ListWalletsByFilterRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 7: adamant.global.v1.ListWalletsByFilterRequest.network:type_name -> gincoinc.global.v1.Network
	270, // 8: adamant.global.v1.ListWalletsByFilterRequest.wallet_type:type_name -> adamant.global.v1.WalletType
	274, // 9: adamant.global.v1.ListWalletsByFilterRequest.wallet_state:type_name -> adamant.global.v1.WalletState
	275, // 10: adamant.global.v1.ListWalletsResponse.wallets:type_name -> adamant.global.v1.Wallet
	272, // 11: adamant.global.v1.ListBaseWalletsResponse.wallets:type_name -> adamant.global.v1.WalletWithoutBalance
	273, // 12: adamant.global.v1.ListStakingWalletsByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	268, // 13: adamant.global.v1.ListStakingWalletsByFilterRequest.coin:type_name -> gincoinc.global.v1.Coin
	270, // 14: adamant.global.v1.ListStakingWalletsByFilterRequest.wallet_type:type_name -> adamant.global.v1.WalletType
	274, // 15: adamant.global.v1.ListStakingWalletsByFilterRequest.wallet_state:type_name -> adamant.global.v1.WalletState
	276, // 16: adamant.global.v1.ListStakingWalletsResponse.staking_wallets:type_name -> adamant.global.v1.StakingWallet
	273, // 17: adamant.global.v1.ListNFTWalletsByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	268, // 18: adamant.global.v1.ListNFTWalletsByFilterRequest.coin:type_name -> gincoinc.global.v1.Coin
	270, // 19: adamant.global.v1.ListNFTWalletsByFilterRequest.wallet_type:type_name -> adamant.global.v1.WalletType
	274, // 20: adamant.global.v1.ListNFTWalletsByFilterRequest.wallet_state:type_name -> adamant.global.v1.WalletState
	277, // 21: adamant.global.v1.ListNFTWalletsResponse.nft_wallets:type_name -> adamant.global.v1.NFTWallet
	278, // 22: adamant.global.v1.FlushBalanceResponse.flushed_addresses:type_name -> adamant.global.v1.FlushedAddress
	279, // 23: adamant.global.v1.ListWalletFlushSettingsResponse.wallet_flush_settings:type_name -> adamant.global.v1.WalletFlushSetting
	268, // 24: adamant.global.v1.UpdateWalletFlushSettingRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 25: adamant.global.v1.UpdateWalletFlushSettingRequest.network:type_name -> gincoinc.global.v1.Network
	280, // 26: adamant.global.v1.ListCompensationFeeHistoriesResponse.compensation_fees:type_name -> adamant.global.v1.CompensationFee
	281, // 27: adamant.global.v1.ListUTXOsResponse.utxos:type_name -> adamant.global.v1.UTXO
	268, // 28: adamant.global.v1.CreateWalletGroupRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 29: adamant.global.v1.CreateWalletGroupRequest.network:type_name -> gincoinc.global.v1.Network
	282, // 30: adamant.global.v1.ListWalletGroupsResponse.wallet_groups:type_name -> adamant.global.v1.WalletGroup
	268, // 31: adamant.global.v1.GetAddressByAddressCoinRequest.coin:type_name -> gincoinc.global.v1.Coin
	283, // 32: adamant.global.v1.ListAddressesResponse.addresses:type_name -> adamant.global.v1.Address
	284, // 33: adamant.global.v1.ListAddressesWithBalanceResponse.addresses:type_name -> adamant.global.v1.AddressWithBalance
	285, // 34: adamant.global.v1.ListAddressesWithoutBalanceResponse.addresses:type_name -> adamant.global.v1.AddressWithoutBalance
	268, // 35: adamant.global.v1.CreatePreTransactionRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 36: adamant.global.v1.CreatePreTransactionRequest.network:type_name -> gincoinc.global.v1.Network
	286, // 37: adamant.global.v1.CreatePreTransactionRequest.details:type_name -> adamant.global.v1.PreTransactionDetail
	273, // 38: adamant.global.v1.ListPreTransactionsByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	268, // 39: adamant.global.v1.ListPreTransactionsByFilterRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 40: adamant.global.v1.ListPreTransactionsByFilterRequest.network:type_name -> gincoinc.global.v1.Network
	287, // 41: adamant.global.v1.ListPreTransactionsByFilterRequest.pre_transaction_state:type_name -> adamant.global.v1.PreTransactionState
	288, // 42: adamant.global.v1.ListPreTransactionsByFilterRequest.start_time:type_name -> google.protobuf.Timestamp
	288, // 43: adamant.global.v1.ListPreTransactionsByFilterRequest.end_time:type_name -> google.protobuf.Timestamp
	289, // 44: adamant.global.v1.ListPreTransactionsByFilterResponse.pre_transactions:type_name -> adamant.global.v1.PreTransaction
	290, // 45: adamant.global.v1.CreateTransactionRequest.tx_outputs:type_name -> adamant.global.v1.RequestTxOutput
	291, // 46: adamant.global.v1.CreateTransactionRequest.substrate_specific:type_name -> adamant.global.v1.CreateTransactionSubstrateSpecific
	292, // 47: adamant.global.v1.CreateTransactionRequest.wallet_connect_specific:type_name -> adamant.global.v1.CreateTransactionWalletConnectSpecific
	293, // 48: adamant.global.v1.CreateTransactionRequest.nem_specific:type_name -> adamant.global.v1.CreateTransactionNemSpecific
	294, // 49: adamant.global.v1.CreateTransactionRequest.iost_specific:type_name -> adamant.global.v1.CreateTransactionIOSTSpecific
	295, // 50: adamant.global.v1.CreateTransactionRequest.xym_specific:type_name -> adamant.global.v1.CreateTransactionSymbolSpecific
	296, // 51: adamant.global.v1.CreateTransactionRequest.ethereum_specific:type_name -> adamant.global.v1.CreateTransactionEthereumSpecific
	297, // 52: adamant.global.v1.CreateTransactionRequest.cosmos_specific:type_name -> adamant.global.v1.CreateTransactionCosmosSpecific
	298, // 53: adamant.global.v1.CreateTransactionRequest.algorand_specific:type_name -> adamant.global.v1.CreateTransactionAlgorandSpecific
	299, // 54: adamant.global.v1.CreateTransactionRequest.hedera_specific:type_name -> adamant.global.v1.CreateTransactionHederaSpecific
	300, // 55: adamant.global.v1.CreateTransactionRequest.solana_specific:type_name -> adamant.global.v1.CreateTransactionSolanaSpecific
	301, // 56: adamant.global.v1.CreateTransactionRequest.aptos_specific:type_name -> adamant.global.v1.CreateTransactionAptosSpecific
	302, // 57: adamant.global.v1.CreateTransactionRequest.avalanche_specific:type_name -> adamant.global.v1.CreateTransactionAvalancheSpecific
	303, // 58: adamant.global.v1.CreateTransactionRequest.nft_specific:type_name -> adamant.global.v1.CreateTransactionNFTSpecific
	152, // 59: adamant.global.v1.CreateTransactionRequest.utxo_specific:type_name -> adamant.global.v1.UtxoSpecific
	294, // 60: adamant.global.v1.CreateInitTransactionRequest.iost_specific:type_name -> adamant.global.v1.CreateTransactionIOSTSpecific
	304, // 61: adamant.global.v1.CreateContractCreationTransactionRequest.contract_creation_type:type_name -> gincoinc.global.v1.ContractCreationType
	305, // 62: adamant.global.v1.SignTransactionRequest.signed_info:type_name -> adamant.global.v1.RequestSignedInfo
	305, // 63: adamant.global.v1.SignXRPInitTransactionsRequest.signed_info:type_name -> adamant.global.v1.RequestSignedInfo
	305, // 64: adamant.global.v1.SignInitTransactionRequest.signed_info:type_name -> adamant.global.v1.RequestSignedInfo
	306, // 65: adamant.global.v1.SendTransactionRequest.executor_type:type_name -> adamant.global.v1.ExecutorType
	306, // 66: adamant.global.v1.ResendTransactionRequest.executor_type:type_name -> adamant.global.v1.ExecutorType
	306, // 67: adamant.global.v1.SendInitTransactionRequest.executor_type:type_name -> adamant.global.v1.ExecutorType
	273, // 68: adamant.global.v1.ListTransactionsByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	268, // 69: adamant.global.v1.ListTransactionsByFilterRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 70: adamant.global.v1.ListTransactionsByFilterRequest.network:type_name -> gincoinc.global.v1.Network
	270, // 71: adamant.global.v1.ListTransactionsByFilterRequest.wallet_type:type_name -> adamant.global.v1.WalletType
	307, // 72: adamant.global.v1.ListTransactionsByFilterRequest.transaction_state:type_name -> adamant.global.v1.TransactionState
	308, // 73: adamant.global.v1.ListTransactionsResponse.transactions:type_name -> adamant.global.v1.Transaction
	273, // 74: adamant.global.v1.ListUnconfirmedTransactionsByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	268, // 75: adamant.global.v1.ListUnconfirmedTransactionsByFilterRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 76: adamant.global.v1.ListUnconfirmedTransactionsByFilterRequest.network:type_name -> gincoinc.global.v1.Network
	270, // 77: adamant.global.v1.ListUnconfirmedTransactionsByFilterRequest.wallet_type:type_name -> adamant.global.v1.WalletType
	288, // 78: adamant.global.v1.ListUnconfirmedTransactionsByFilterRequest.start_time:type_name -> google.protobuf.Timestamp
	288, // 79: adamant.global.v1.ListUnconfirmedTransactionsByFilterRequest.end_time:type_name -> google.protobuf.Timestamp
	309, // 80: adamant.global.v1.ListUnconfirmedTransactionsResponse.unconfirmed_transactions:type_name -> adamant.global.v1.UnconfirmedTransaction
	310, // 81: adamant.global.v1.ListSignInfoResponse.sign_info_list:type_name -> adamant.global.v1.SignInfo
	310, // 82: adamant.global.v1.ListXRPInitSignInfoResponse.sign_info_list:type_name -> adamant.global.v1.SignInfo
	273, // 83: adamant.global.v1.ListTransfersByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	268, // 84: adamant.global.v1.ListTransfersByFilterRequest.coin:type_name -> gincoinc.global.v1.Coin
	270, // 85: adamant.global.v1.ListTransfersByFilterRequest.wallet_type:type_name -> adamant.global.v1.WalletType
	311, // 86: adamant.global.v1.ListTransfersByFilterRequest.transfer_type:type_name -> gincoinc.global.v1.TransferType
	288, // 87: adamant.global.v1.ListTransfersByFilterRequest.start_time:type_name -> google.protobuf.Timestamp
	288, // 88: adamant.global.v1.ListTransfersByFilterRequest.end_time:type_name -> google.protobuf.Timestamp
	269, // 89: adamant.global.v1.ListTransfersByFilterRequest.network:type_name -> gincoinc.global.v1.Network
	312, // 90: adamant.global.v1.ListTransfersResponse.transfers:type_name -> adamant.global.v1.Transfer
	270, // 91: adamant.global.v1.ListUncheckedTransfersByFilterRequest.wallet_type:type_name -> adamant.global.v1.WalletType
	273, // 92: adamant.global.v1.ListUncheckedTransfersByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	268, // 93: adamant.global.v1.ListUncheckedTransfersByFilterRequest.coin:type_name -> gincoinc.global.v1.Coin
	311, // 94: adamant.global.v1.ListUncheckedTransfersByFilterRequest.transfer_type:type_name -> gincoinc.global.v1.TransferType
	288, // 95: adamant.global.v1.ListUncheckedTransfersByFilterRequest.start_time:type_name -> google.protobuf.Timestamp
	288, // 96: adamant.global.v1.ListUncheckedTransfersByFilterRequest.end_time:type_name -> google.protobuf.Timestamp
	269, // 97: adamant.global.v1.ListUncheckedTransfersByFilterRequest.network:type_name -> gincoinc.global.v1.Network
	313, // 98: adamant.global.v1.ListUncheckedTransfersResponse.unchecked_transfers:type_name -> adamant.global.v1.UncheckedTransfer
	314, // 99: adamant.global.v1.ListEventTriggeredMessagesResponse.event_triggered_messages:type_name -> adamant.global.v1.EventTriggeredMessage
	315, // 100: adamant.global.v1.CreateEventTriggeredMessageRequest.event_triggered_message_type:type_name -> adamant.global.v1.EventTriggeredMessageType
	316, // 101: adamant.global.v1.SetRatesRequest.rates:type_name -> adamant.global.v1.RequestRate
	288, // 102: adamant.global.v1.ListBalanceSnapshotsRequest.start_time:type_name -> google.protobuf.Timestamp
	288, // 103: adamant.global.v1.ListBalanceSnapshotsRequest.end_time:type_name -> google.protobuf.Timestamp
	317, // 104: adamant.global.v1.ListBalanceSnapshotsResponse.balance_snapshots:type_name -> adamant.global.v1.BalanceSnapshot
	288, // 105: adamant.global.v1.ListWalletBalanceSnapshotsRequest.start_time:type_name -> google.protobuf.Timestamp
	288, // 106: adamant.global.v1.ListWalletBalanceSnapshotsRequest.end_time:type_name -> google.protobuf.Timestamp
	318, // 107: adamant.global.v1.ListWalletBalanceSnapshotsResponse.wallet_balance_snapshot_map:type_name -> adamant.global.v1.WalletBalanceSnapshotMap
	288, // 108: adamant.global.v1.ListTransferVolumeSnapshotsRequest.start_time:type_name -> google.protobuf.Timestamp
	288, // 109: adamant.global.v1.ListTransferVolumeSnapshotsRequest.end_time:type_name -> google.protobuf.Timestamp
	319, // 110: adamant.global.v1.ListTransferVolumeSnapshotsResponse.transfer_volume_snapshots:type_name -> adamant.global.v1.TransferVolumeSnapshots
	288, // 111: adamant.global.v1.ListWalletTransferVolumeSnapshotsRequest.start_time:type_name -> google.protobuf.Timestamp
	288, // 112: adamant.global.v1.ListWalletTransferVolumeSnapshotsRequest.end_time:type_name -> google.protobuf.Timestamp
	320, // 113: adamant.global.v1.ListWalletTransferVolumeSnapshotsResponse.wallet_transfer_volume_snapshots:type_name -> adamant.global.v1.WalletTransferVolumeSnapshots
	290, // 114: adamant.global.v1.CalculateFeeRequest.tx_outputs:type_name -> adamant.global.v1.RequestTxOutput
	144, // 115: adamant.global.v1.CalculateFeeRequest.substrate_specific:type_name -> adamant.global.v1.CalculateFeeSubstrateSpecific
	145, // 116: adamant.global.v1.CalculateFeeRequest.nem_specific:type_name -> adamant.global.v1.CalculateFeeNemSpecific
	146, // 117: adamant.global.v1.CalculateFeeRequest.symbol_specific:type_name -> adamant.global.v1.CalculateFeeSymbolSpecific
	147, // 118: adamant.global.v1.CalculateFeeRequest.ethereum_specific:type_name -> adamant.global.v1.CalculateFeeEthereumSpecific
	148, // 119: adamant.global.v1.CalculateFeeRequest.cosmos_specific:type_name -> adamant.global.v1.CalculateFeeCosmosSpecific
	149, // 120: adamant.global.v1.CalculateFeeRequest.hedera_specific:type_name -> adamant.global.v1.CalculateFeeHederaSpecific
	151, // 121: adamant.global.v1.CalculateFeeRequest.rbf_specific:type_name -> adamant.global.v1.CalculateFeeRbfSpecific
	152, // 122: adamant.global.v1.CalculateFeeRequest.utxo_specific:type_name -> adamant.global.v1.UtxoSpecific
	150, // 123: adamant.global.v1.CalculateFeeRequest.solana_specific:type_name -> adamant.global.v1.CalculateFeeSolanaSpecific
	153, // 124: adamant.global.v1.CalculateFeeRequest.avalanche_specific:type_name -> adamant.global.v1.CalculateFeeAvalancheSpecific
	321, // 125: adamant.global.v1.CalculateFeeSubstrateSpecific.call_type:type_name -> adamant.global.v1.SubstrateCallType
	321, // 126: adamant.global.v1.CalculateFeeSubstrateSpecific.multisig_call_type:type_name -> adamant.global.v1.SubstrateCallType
	322, // 127: adamant.global.v1.CalculateFeeCosmosSpecific.type:type_name -> gincoinc.global.v1.CosmosMsgType
	323, // 128: adamant.global.v1.CalculateFeeSolanaSpecific.event_type:type_name -> gincoinc.global.v1.SolanaEventType
	324, // 129: adamant.global.v1.UtxoSpecific.selected_utxos:type_name -> adamant.global.v1.SelectedUTXO
	325, // 130: adamant.global.v1.CalculateFeeAvalancheSpecific.tx_type:type_name -> gincoinc.global.v1.AvalancheTxType
	326, // 131: adamant.global.v1.GetMembersDeactivatabilitiesResponse.deactivatabilities:type_name -> adamant.global.v1.Deactivatability
	268, // 132: adamant.global.v1.GetRecommendedFeeRateRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 133: adamant.global.v1.GetRecommendedFeeRateRequest.network:type_name -> gincoinc.global.v1.Network
	268, // 134: adamant.global.v1.ValidateAddressRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 135: adamant.global.v1.ValidateAddressRequest.network:type_name -> gincoinc.global.v1.Network
	327, // 136: adamant.global.v1.ListConfirmationsResponse.confirmations:type_name -> adamant.global.v1.Confirmation
	328, // 137: adamant.global.v1.ListAuditLogsRequest.audit_log_group:type_name -> adamant.global.v1.AuditLogGroup
	288, // 138: adamant.global.v1.ListAuditLogsRequest.start_event_time:type_name -> google.protobuf.Timestamp
	288, // 139: adamant.global.v1.ListAuditLogsRequest.end_event_time:type_name -> google.protobuf.Timestamp
	329, // 140: adamant.global.v1.ListAuditLogsResponse.audit_logs:type_name -> adamant.global.v1.AuditLog
	268, // 141: adamant.global.v1.CreateLabeledAddressRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 142: adamant.global.v1.CreateLabeledAddressRequest.network:type_name -> gincoinc.global.v1.Network
	268, // 143: adamant.global.v1.UpdateLabeledAddressRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 144: adamant.global.v1.UpdateLabeledAddressRequest.network:type_name -> gincoinc.global.v1.Network
	330, // 145: adamant.global.v1.ListLabeledAddressesResponse.addresses:type_name -> adamant.global.v1.LabeledAddress
	273, // 146: adamant.global.v1.ListLabeledAddressesByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	268, // 147: adamant.global.v1.ListLabeledAddressesByFilterRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 148: adamant.global.v1.ListLabeledAddressesByFilterRequest.network:type_name -> gincoinc.global.v1.Network
	330, // 149: adamant.global.v1.ListLabeledAddressesByFilterResponse.addresses:type_name -> adamant.global.v1.LabeledAddress
	268, // 150: adamant.global.v1.CreateWhitelistRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 151: adamant.global.v1.CreateWhitelistRequest.network:type_name -> gincoinc.global.v1.Network
	331, // 152: adamant.global.v1.ListWhitelistsResponse.whitelists:type_name -> adamant.global.v1.Whitelist
	273, // 153: adamant.global.v1.ListWhitelistsByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	268, // 154: adamant.global.v1.ListWhitelistsByFilterRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 155: adamant.global.v1.ListWhitelistsByFilterRequest.network:type_name -> gincoinc.global.v1.Network
	331, // 156: adamant.global.v1.ListWhitelistsByFilterResponse.whitelists:type_name -> adamant.global.v1.Whitelist
	268, // 157: adamant.global.v1.UpdateWhitelistRequest.coin:type_name -> gincoinc.global.v1.Coin
	268, // 158: adamant.global.v1.CreateTransferLimitRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 159: adamant.global.v1.CreateTransferLimitRequest.network:type_name -> gincoinc.global.v1.Network
	332, // 160: adamant.global.v1.CreateTransferLimitRequest.transfer_limits:type_name -> adamant.global.v1.RequestTransferLimitEntry
	333, // 161: adamant.global.v1.ListTransferLimitsResponse.transfer_limits:type_name -> adamant.global.v1.TransferLimit
	273, // 162: adamant.global.v1.ListTransferLimitsByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	268, // 163: adamant.global.v1.ListTransferLimitsByFilterRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 164: adamant.global.v1.ListTransferLimitsByFilterRequest.network:type_name -> gincoinc.global.v1.Network
	333, // 165: adamant.global.v1.ListTransferLimitsByFilterResponse.transfer_limits:type_name -> adamant.global.v1.TransferLimit
	332, // 166: adamant.global.v1.UpdateTransferLimitRequest.transfer_limits:type_name -> adamant.global.v1.RequestTransferLimitEntry
	268, // 167: adamant.global.v1.CreatePolicyRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 168: adamant.global.v1.CreatePolicyRequest.network:type_name -> gincoinc.global.v1.Network
	334, // 169: adamant.global.v1.CreatePolicyRequest.type:type_name -> adamant.global.v1.PolicyType
	273, // 170: adamant.global.v1.ListPoliciesByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	268, // 171: adamant.global.v1.ListPoliciesByFilterRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 172: adamant.global.v1.ListPoliciesByFilterRequest.network:type_name -> gincoinc.global.v1.Network
	334, // 173: adamant.global.v1.ListPoliciesByFilterRequest.policy_type:type_name -> adamant.global.v1.PolicyType
	335, // 174: adamant.global.v1.ListPoliciesResponse.policies:type_name -> adamant.global.v1.Policy
	335, // 175: adamant.global.v1.ListPoliciesByFilterResponse.policies:type_name -> adamant.global.v1.Policy
	336, // 176: adamant.global.v1.ListSubstrateChildAddressesResponse.substrate_child_addresses:type_name -> adamant.global.v1.SubstrateChildAddress
	337, // 177: adamant.global.v1.ListSymbolChildAddressesResponse.symbol_child_addresses:type_name -> adamant.global.v1.SymbolChildAddress
	338, // 178: adamant.global.v1.ListIOSTChildAccountsResponse.iost_child_accounts:type_name -> adamant.global.v1.IOSTChildAccount
	339, // 179: adamant.global.v1.DownloadResourceRequest.download_resource_type:type_name -> adamant.global.v1.DownloadResourceType
	340, // 180: adamant.global.v1.DownloadResourceRequest.status:type_name -> adamant.global.v1.BlacklistAddressStatus
	269, // 181: adamant.global.v1.DownloadResourceRequest.network:type_name -> gincoinc.global.v1.Network
	288, // 182: adamant.global.v1.DownloadResourceRequest.start_time:type_name -> google.protobuf.Timestamp
	288, // 183: adamant.global.v1.DownloadResourceRequest.end_time:type_name -> google.protobuf.Timestamp
	341, // 184: adamant.global.v1.ListCallersResponse.caller_addresses:type_name -> adamant.global.v1.CallerAddress
	342, // 185: adamant.global.v1.ListFeeDepositsResponse.fee_deposit_addresses:type_name -> adamant.global.v1.FeeDepositAddress
	343, // 186: adamant.global.v1.GetCosmosBalanceResponse.delegations:type_name -> adamant.global.v1.CosmosDelegation
	236, // 187: adamant.global.v1.ListCosmosDelegateHistoriesResponse.delegate_histories:type_name -> adamant.global.v1.CosmosDelegateHistory
	322, // 188: adamant.global.v1.CosmosDelegateHistory.type:type_name -> gincoinc.global.v1.CosmosMsgType
	288, // 189: adamant.global.v1.CosmosDelegateHistory.time:type_name -> google.protobuf.Timestamp
	268, // 190: adamant.global.v1.ForwardingThreshold.coin:type_name -> gincoinc.global.v1.Coin
	237, // 191: adamant.global.v1.ListForwardingThresholdsResponse.forwarding_thresholds:type_name -> adamant.global.v1.ForwardingThreshold
	237, // 192: adamant.global.v1.UpsertForwardingThresholdRequest.forwarding_threshold:type_name -> adamant.global.v1.ForwardingThreshold
	237, // 193: adamant.global.v1.UpsertForwardingThresholdResponse.forwarding_threshold:type_name -> adamant.global.v1.ForwardingThreshold
	273, // 194: adamant.global.v1.ListStakingHistoriesByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	268, // 195: adamant.global.v1.ListStakingHistoriesByFilterRequest.coin:type_name -> gincoinc.global.v1.Coin
	270, // 196: adamant.global.v1.ListStakingHistoriesByFilterRequest.wallet_type:type_name -> adamant.global.v1.WalletType
	344, // 197: adamant.global.v1.ListStakingHistoriesByFilterRequest.event_type:type_name -> gincoinc.global.v1.StakingEventType
	288, // 198: adamant.global.v1.ListStakingHistoriesByFilterRequest.start_time:type_name -> google.protobuf.Timestamp
	288, // 199: adamant.global.v1.ListStakingHistoriesByFilterRequest.end_time:type_name -> google.protobuf.Timestamp
	345, // 200: adamant.global.v1.ListStakingHistoriesResponse.staking_histories:type_name -> adamant.global.v1.StakingHistory
	273, // 201: adamant.global.v1.ListStakingValidatorsByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	268, // 202: adamant.global.v1.ListStakingValidatorsByFilterRequest.coin:type_name -> gincoinc.global.v1.Coin
	270, // 203: adamant.global.v1.ListStakingValidatorsByFilterRequest.wallet_type:type_name -> adamant.global.v1.WalletType
	346, // 204: adamant.global.v1.ListStakingValidatorsByFilterRequest.status:type_name -> gincoinc.global.v1.StakingValidatorStatus
	347, // 205: adamant.global.v1.ListStakingValidatorsResponse.staking_validators:type_name -> adamant.global.v1.StakingValidator
	273, // 206: adamant.global.v1.ListNFTsByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	348, // 207: adamant.global.v1.ListNFTsResponse.nfts:type_name -> adamant.global.v1.NFT
	349, // 208: adamant.global.v1.UpdateMailSettingsRequest.enable_mail_types:type_name -> adamant.global.v1.MailType
	349, // 209: adamant.global.v1.UpdateMailSettingsRequest.disable_mail_types:type_name -> adamant.global.v1.MailType
	273, // 210: adamant.global.v1.ListPreTransactionThresholdsByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	268, // 211: adamant.global.v1.ListPreTransactionThresholdsByFilterRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 212: adamant.global.v1.ListPreTransactionThresholdsByFilterRequest.network:type_name -> gincoinc.global.v1.Network
	350, // 213: adamant.global.v1.ListPreTransactionThresholdsByFilterResponse.pre_transaction_thresholds:type_name -> adamant.global.v1.PreTransactionThreshold
	268, // 214: adamant.global.v1.CreatePreTransactionThresholdRequest.coin:type_name -> gincoinc.global.v1.Coin
	269, // 215: adamant.global.v1.CreatePreTransactionThresholdRequest.network:type_name -> gincoinc.global.v1.Network
	273, // 216: adamant.global.v1.ListBlacklistAddressesByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	340, // 217: adamant.global.v1.ListBlacklistAddressesByFilterRequest.status:type_name -> adamant.global.v1.BlacklistAddressStatus
	269, // 218: adamant.global.v1.ListBlacklistAddressesByFilterRequest.network:type_name -> gincoinc.global.v1.Network
	288, // 219: adamant.global.v1.ListBlacklistAddressesByFilterRequest.start_time:type_name -> google.protobuf.Timestamp
	288, // 220: adamant.global.v1.ListBlacklistAddressesByFilterRequest.end_time:type_name -> google.protobuf.Timestamp
	351, // 221: adamant.global.v1.ListBlacklistAddressesByFilterResponse.addresses:type_name -> adamant.global.v1.BlacklistAddress
	269, // 222: adamant.global.v1.CreateBlacklistAddressRequest.network:type_name -> gincoinc.global.v1.Network
	269, // 223: adamant.global.v1.GetBlacklistStorageSignedURLRequest.network:type_name -> gincoinc.global.v1.Network
	340, // 224: adamant.global.v1.ListBlacklistAddressFilesRequest.status:type_name -> adamant.global.v1.BlacklistAddressStatus
	352, // 225: adamant.global.v1.ListBlacklistAddressFilesResponse.files:type_name -> adamant.global.v1.BlacklistAddressFile
	2,   // 226: adamant.global.v1.GlobalAPI.CreateWallet:input_type -> adamant.global.v1.CreateWalletRequest
	4,   // 227: adamant.global.v1.GlobalAPI.GetWallet:input_type -> adamant.global.v1.GetWalletRequest
	7,   // 228: adamant.global.v1.GlobalAPI.CancelWallet:input_type -> adamant.global.v1.CancelWalletRequest
	8,   // 229: adamant.global.v1.GlobalAPI.ArchiveWallet:input_type -> adamant.global.v1.ArchiveWalletRequest
	9,   // 230: adamant.global.v1.GlobalAPI.UnArchiveWallet:input_type -> adamant.global.v1.UnArchiveWalletRequest
	10,  // 231: adamant.global.v1.GlobalAPI.ListWallets:input_type -> adamant.global.v1.ListWalletsRequest
	11,  // 232: adamant.global.v1.GlobalAPI.ListWalletsByFilter:input_type -> adamant.global.v1.ListWalletsByFilterRequest
	13,  // 233: adamant.global.v1.GlobalAPI.ListBaseWallets:input_type -> adamant.global.v1.ListBaseWalletsRequest
	15,  // 234: adamant.global.v1.GlobalAPI.ListStakingWalletsByFilter:input_type -> adamant.global.v1.ListStakingWalletsByFilterRequest
	17,  // 235: adamant.global.v1.GlobalAPI.ListNFTWalletsByFilter:input_type -> adamant.global.v1.ListNFTWalletsByFilterRequest
	19,  // 236: adamant.global.v1.GlobalAPI.UpdateWalletName:input_type -> adamant.global.v1.UpdateWalletNameRequest
	20,  // 237: adamant.global.v1.GlobalAPI.UpdateWalletValidation:input_type -> adamant.global.v1.UpdateWalletValidationRequest
	21,  // 238: adamant.global.v1.GlobalAPI.UpdateWalletPolicy:input_type -> adamant.global.v1.UpdateWalletPolicyRequest
	22,  // 239: adamant.global.v1.GlobalAPI.ReviewWalletProposal:input_type -> adamant.global.v1.ReviewWalletProposalRequest
	29,  // 240: adamant.global.v1.GlobalAPI.FlushBalance:input_type -> adamant.global.v1.FlushBalanceRequest
	38,  // 241: adamant.global.v1.GlobalAPI.CreateWalletGroup:input_type -> adamant.global.v1.CreateWalletGroupRequest
	41,  // 242: adamant.global.v1.GlobalAPI.UpdateWalletGroupName:input_type -> adamant.global.v1.UpdateWalletGroupNameRequest
	40,  // 243: adamant.global.v1.GlobalAPI.UpdateWalletGroup:input_type -> adamant.global.v1.UpdateWalletGroupRequest
	42,  // 244: adamant.global.v1.GlobalAPI.GetWalletGroup:input_type -> adamant.global.v1.GetWalletGroupRequest
	43,  // 245: adamant.global.v1.GlobalAPI.ListWalletGroups:input_type -> adamant.global.v1.ListWalletGroupsRequest
	45,  // 246: adamant.global.v1.GlobalAPI.UpdateDestinationWalletID:input_type -> adamant.global.v1.UpdateDestinationWalletIDRequest
	232, // 247: adamant.global.v1.GlobalAPI.GetCosmosBalance:input_type -> adamant.global.v1.GetCosmosBalanceRequest
	234, // 248: adamant.global.v1.GlobalAPI.ListCosmosDelegateHistories:input_type -> adamant.global.v1.ListCosmosDelegateHistoriesRequest
	46,  // 249: adamant.global.v1.GlobalAPI.EnableUTXO:input_type -> adamant.global.v1.EnableUTXORequest
	47,  // 250: adamant.global.v1.GlobalAPI.DisableUTXO:input_type -> adamant.global.v1.DisableUTXORequest
	48,  // 251: adamant.global.v1.GlobalAPI.UpdateWalletIsStakingAvailable:input_type -> adamant.global.v1.UpdateWalletIsStakingAvailableRequest
	49,  // 252: adamant.global.v1.GlobalAPI.RefreshStakingWalletClaimableReward:input_type -> adamant.global.v1.RefreshStakingWalletClaimableRewardRequest
	0,   // 253: adamant.global.v1.GlobalAPI.ApproveWallet:input_type -> adamant.global.v1.ApproveWalletRequest
	1,   // 254: adamant.global.v1.GlobalAPI.ApproveTransaction:input_type -> adamant.global.v1.ApproveTransactionRequest
	55,  // 255: adamant.global.v1.GlobalAPI.CreateAddress:input_type -> adamant.global.v1.CreateAddressRequest
	57,  // 256: adamant.global.v1.GlobalAPI.GetAddress:input_type -> adamant.global.v1.GetAddressRequest
	58,  // 257: adamant.global.v1.GlobalAPI.GetAddressByAddress:input_type -> adamant.global.v1.GetAddressByAddressRequest
	59,  // 258: adamant.global.v1.GlobalAPI.GetAddressByAddressCoin:input_type -> adamant.global.v1.GetAddressByAddressCoinRequest
	60,  // 259: adamant.global.v1.GlobalAPI.GetAddressByIndex:input_type -> adamant.global.v1.GetAddressByIndexRequest
	62,  // 260: adamant.global.v1.GlobalAPI.ListAddresses:input_type -> adamant.global.v1.ListAddressesRequest
	64,  // 261: adamant.global.v1.GlobalAPI.ListAddressesWithBalance:input_type -> adamant.global.v1.ListAddressesWithBalanceRequest
	66,  // 262: adamant.global.v1.GlobalAPI.UpdateAddressBalance:input_type -> adamant.global.v1.UpdateAddressBalanceRequest
	69,  // 263: adamant.global.v1.GlobalAPI.GetEthereumFeeAddress:input_type -> adamant.global.v1.GetEthereumFeeAddressRequest
	214, // 264: adamant.global.v1.GlobalAPI.ListSubstrateChildAddresses:input_type -> adamant.global.v1.ListSubstrateChildAddressesRequest
	216, // 265: adamant.global.v1.GlobalAPI.ListSymbolChildAddresses:input_type -> adamant.global.v1.ListSymbolChildAddressesRequest
	218, // 266: adamant.global.v1.GlobalAPI.ListIOSTChildAccounts:input_type -> adamant.global.v1.ListIOSTChildAccountsRequest
	71,  // 267: adamant.global.v1.GlobalAPI.ImportAddress:input_type -> adamant.global.v1.ImportAddressRequest
	228, // 268: adamant.global.v1.GlobalAPI.ListCallers:input_type -> adamant.global.v1.ListCallersRequest
	230, // 269: adamant.global.v1.GlobalAPI.ListFeeDeposits:input_type -> adamant.global.v1.ListFeeDepositsRequest
	51,  // 270: adamant.global.v1.GlobalAPI.RegisterKey:input_type -> adamant.global.v1.RegisterKeyRequest
	53,  // 271: adamant.global.v1.GlobalAPI.GetSignerPubKey:input_type -> adamant.global.v1.GetSignerPubKeyRequest
	79,  // 272: adamant.global.v1.GlobalAPI.CreateTransaction:input_type -> adamant.global.v1.CreateTransactionRequest
	81,  // 273: adamant.global.v1.GlobalAPI.CreateXRPInitTransactions:input_type -> adamant.global.v1.CreateXRPInitTransactionsRequest
	83,  // 274: adamant.global.v1.GlobalAPI.CreateContractCreationTransaction:input_type -> adamant.global.v1.CreateContractCreationTransactionRequest
	85,  // 275: adamant.global.v1.GlobalAPI.SignTransaction:input_type -> adamant.global.v1.SignTransactionRequest
	86,  // 276: adamant.global.v1.GlobalAPI.SignXRPInitTransactions:input_type -> adamant.global.v1.SignXRPInitTransactionsRequest
	88,  // 277: adamant.global.v1.GlobalAPI.SendTransaction:input_type -> adamant.global.v1.SendTransactionRequest
	90,  // 278: adamant.global.v1.GlobalAPI.ResendTransaction:input_type -> adamant.global.v1.ResendTransactionRequest
	92,  // 279: adamant.global.v1.GlobalAPI.SendXRPInitTransactions:input_type -> adamant.global.v1.SendXRPInitTransactionsRequest
	96,  // 280: adamant.global.v1.GlobalAPI.CancelTransaction:input_type -> adamant.global.v1.CancelTransactionRequest
	97,  // 281: adamant.global.v1.GlobalAPI.ReplaceTransaction:input_type -> adamant.global.v1.ReplaceTransactionRequest
	99,  // 282: adamant.global.v1.GlobalAPI.IsTransactionReplaceable:input_type -> adamant.global.v1.IsTransactionReplaceableRequest
	101, // 283: adamant.global.v1.GlobalAPI.GetTransaction:input_type -> adamant.global.v1.GetTransactionRequest
	102, // 284: adamant.global.v1.GlobalAPI.GetTransactionByTxID:input_type -> adamant.global.v1.GetTransactionByTxIDRequest
	103, // 285: adamant.global.v1.GlobalAPI.ListTransactions:input_type -> adamant.global.v1.ListTransactionsRequest
	104, // 286: adamant.global.v1.GlobalAPI.ListTransactionsByFilter:input_type -> adamant.global.v1.ListTransactionsByFilterRequest
	106, // 287: adamant.global.v1.GlobalAPI.ListUnconfirmedTransactionsByFilter:input_type -> adamant.global.v1.ListUnconfirmedTransactionsByFilterRequest
	108, // 288: adamant.global.v1.GlobalAPI.GetSignInfo:input_type -> adamant.global.v1.GetSignInfoRequest
	109, // 289: adamant.global.v1.GlobalAPI.ListSignInfo:input_type -> adamant.global.v1.ListSignInfoRequest
	111, // 290: adamant.global.v1.GlobalAPI.ListXRPInitSignInfo:input_type -> adamant.global.v1.ListXRPInitSignInfoRequest
	114, // 291: adamant.global.v1.GlobalAPI.ListTransfers:input_type -> adamant.global.v1.ListTransfersRequest
	115, // 292: adamant.global.v1.GlobalAPI.ListTransfersByFilter:input_type -> adamant.global.v1.ListTransfersByFilterRequest
	126, // 293: adamant.global.v1.GlobalAPI.GetRateSnapshot:input_type -> adamant.global.v1.GetRateSnapshotRequest
	127, // 294: adamant.global.v1.GlobalAPI.GetLatestRateSnapshot:input_type -> adamant.global.v1.GetLatestRateSnapshotRequest
	128, // 295: adamant.global.v1.GlobalAPI.SetRates:input_type -> adamant.global.v1.SetRatesRequest
	129, // 296: adamant.global.v1.GlobalAPI.SetDefaultRates:input_type -> adamant.global.v1.SetDefaultRatesRequest
	165, // 297: adamant.global.v1.GlobalAPI.CreateLabeledAddress:input_type -> adamant.global.v1.CreateLabeledAddressRequest
	168, // 298: adamant.global.v1.GlobalAPI.GetLabeledAddress:input_type -> adamant.global.v1.GetLabeledAddressRequest
	169, // 299: adamant.global.v1.GlobalAPI.ListLabeledAddresses:input_type -> adamant.global.v1.ListLabeledAddressesRequest
	171, // 300: adamant.global.v1.GlobalAPI.ListLabeledAddressesByFilter:input_type -> adamant.global.v1.ListLabeledAddressesByFilterRequest
	203, // 301: adamant.global.v1.GlobalAPI.IsDeletableLabeledAddress:input_type -> adamant.global.v1.IsDeletableLabeledAddressRequest
	167, // 302: adamant.global.v1.GlobalAPI.UpdateLabeledAddress:input_type -> adamant.global.v1.UpdateLabeledAddressRequest
	173, // 303: adamant.global.v1.GlobalAPI.DeleteAddress:input_type -> adamant.global.v1.DeleteLabeledAddressRequest
	174, // 304: adamant.global.v1.GlobalAPI.ReviewLabeledAddressProposal:input_type -> adamant.global.v1.ReviewLabeledAddressProposalRequest
	175, // 305: adamant.global.v1.GlobalAPI.CreateWhitelist:input_type -> adamant.global.v1.CreateWhitelistRequest
	177, // 306: adamant.global.v1.GlobalAPI.GetWhitelist:input_type -> adamant.global.v1.GetWhitelistRequest
	178, // 307: adamant.global.v1.GlobalAPI.ListWhitelists:input_type -> adamant.global.v1.ListWhitelistsRequest
	180, // 308: adamant.global.v1.GlobalAPI.ListWhitelistsByFilter:input_type -> adamant.global.v1.ListWhitelistsByFilterRequest
	205, // 309: adamant.global.v1.GlobalAPI.IsDeletableWhitelist:input_type -> adamant.global.v1.IsDeletableWhitelistRequest
	182, // 310: adamant.global.v1.GlobalAPI.UpdateWhitelist:input_type -> adamant.global.v1.UpdateWhitelistRequest
	183, // 311: adamant.global.v1.GlobalAPI.UpdateWhitelistAddresses:input_type -> adamant.global.v1.UpdateWhitelistAddressesRequest
	184, // 312: adamant.global.v1.GlobalAPI.DeleteWhitelist:input_type -> adamant.global.v1.DeleteWhitelistRequest
	185, // 313: adamant.global.v1.GlobalAPI.CreateTransferLimit:input_type -> adamant.global.v1.CreateTransferLimitRequest
	187, // 314: adamant.global.v1.GlobalAPI.GetTransferLimit:input_type -> adamant.global.v1.GetTransferLimitRequest
	188, // 315: adamant.global.v1.GlobalAPI.ListTransferLimits:input_type -> adamant.global.v1.ListTransferLimitsRequest
	207, // 316: adamant.global.v1.GlobalAPI.IsDeletableTransferLimit:input_type -> adamant.global.v1.IsDeletableTransferLimitRequest
	192, // 317: adamant.global.v1.GlobalAPI.UpdateTransferLimit:input_type -> adamant.global.v1.UpdateTransferLimitRequest
	193, // 318: adamant.global.v1.GlobalAPI.UpdateTransferLimitName:input_type -> adamant.global.v1.UpdateTransferLimitNameRequest
	194, // 319: adamant.global.v1.GlobalAPI.DeleteTransferLimit:input_type -> adamant.global.v1.DeleteTransferLimitRequest
	195, // 320: adamant.global.v1.GlobalAPI.ReviewTransferLimitProposal:input_type -> adamant.global.v1.ReviewTransferLimitProposalRequest
	196, // 321: adamant.global.v1.GlobalAPI.CreatePolicy:input_type -> adamant.global.v1.CreatePolicyRequest
	198, // 322: adamant.global.v1.GlobalAPI.GetPolicy:input_type -> adamant.global.v1.GetPolicyRequest
	200, // 323: adamant.global.v1.GlobalAPI.ListPolicies:input_type -> adamant.global.v1.ListPoliciesRequest
	199, // 324: adamant.global.v1.GlobalAPI.ListPoliciesByFilter:input_type -> adamant.global.v1.ListPoliciesByFilterRequest
	201, // 325: adamant.global.v1.GlobalAPI.IsDeletablePolicy:input_type -> adamant.global.v1.IsDeletablePolicyRequest
	211, // 326: adamant.global.v1.GlobalAPI.UpdatePolicy:input_type -> adamant.global.v1.UpdatePolicyRequest
	212, // 327: adamant.global.v1.GlobalAPI.DeletePolicy:input_type -> adamant.global.v1.DeletePolicyRequest
	213, // 328: adamant.global.v1.GlobalAPI.ReviewPolicyProposal:input_type -> adamant.global.v1.ReviewPolicyProposalRequest
	132, // 329: adamant.global.v1.GlobalAPI.GetSpendableBalance:input_type -> adamant.global.v1.GetSpendableBalanceRequest
	134, // 330: adamant.global.v1.GlobalAPI.GetTotalBalance:input_type -> adamant.global.v1.GetTotalBalanceRequest
	135, // 331: adamant.global.v1.GlobalAPI.ListBalanceSnapshots:input_type -> adamant.global.v1.ListBalanceSnapshotsRequest
	143, // 332: adamant.global.v1.GlobalAPI.CalculateFee:input_type -> adamant.global.v1.CalculateFeeRequest
	155, // 333: adamant.global.v1.GlobalAPI.GetMembersDeactivatabilities:input_type -> adamant.global.v1.GetMembersDeactivatabilitiesRequest
	157, // 334: adamant.global.v1.GlobalAPI.GetRecommendedFeeRate:input_type -> adamant.global.v1.GetRecommendedFeeRateRequest
	159, // 335: adamant.global.v1.GlobalAPI.ValidateAddress:input_type -> adamant.global.v1.ValidateAddressRequest
	163, // 336: adamant.global.v1.GlobalAPI.ListAuditLogs:input_type -> adamant.global.v1.ListAuditLogsRequest
	238, // 337: adamant.global.v1.GlobalAPI.ListForwardingThresholds:input_type -> adamant.global.v1.ListForwardingThresholdsRequest
	240, // 338: adamant.global.v1.GlobalAPI.UpsertForwardingThreshold:input_type -> adamant.global.v1.UpsertForwardingThresholdRequest
	242, // 339: adamant.global.v1.GlobalAPI.ListStakingHistoriesByFilter:input_type -> adamant.global.v1.ListStakingHistoriesByFilterRequest
	244, // 340: adamant.global.v1.GlobalAPI.ListStakingValidatorsByFilter:input_type -> adamant.global.v1.ListStakingValidatorsByFilterRequest
	246, // 341: adamant.global.v1.GlobalAPI.ListNFTsByFilter:input_type -> adamant.global.v1.ListNFTsByFilterRequest
	3,   // 342: adamant.global.v1.GlobalAPI.CreateWallet:output_type -> adamant.global.v1.CreateWalletResponse
	275, // 343: adamant.global.v1.GlobalAPI.GetWallet:output_type -> adamant.global.v1.Wallet
	353, // 344: adamant.global.v1.GlobalAPI.CancelWallet:output_type -> google.protobuf.Empty
	353, // 345: adamant.global.v1.GlobalAPI.ArchiveWallet:output_type -> google.protobuf.Empty
	353, // 346: adamant.global.v1.GlobalAPI.UnArchiveWallet:output_type -> google.protobuf.Empty
	12,  // 347: adamant.global.v1.GlobalAPI.ListWallets:output_type -> adamant.global.v1.ListWalletsResponse
	12,  // 348: adamant.global.v1.GlobalAPI.ListWalletsByFilter:output_type -> adamant.global.v1.ListWalletsResponse
	14,  // 349: adamant.global.v1.GlobalAPI.ListBaseWallets:output_type -> adamant.global.v1.ListBaseWalletsResponse
	16,  // 350: adamant.global.v1.GlobalAPI.ListStakingWalletsByFilter:output_type -> adamant.global.v1.ListStakingWalletsResponse
	18,  // 351: adamant.global.v1.GlobalAPI.ListNFTWalletsByFilter:output_type -> adamant.global.v1.ListNFTWalletsResponse
	353, // 352: adamant.global.v1.GlobalAPI.UpdateWalletName:output_type -> google.protobuf.Empty
	353, // 353: adamant.global.v1.GlobalAPI.UpdateWalletValidation:output_type -> google.protobuf.Empty
	353, // 354: adamant.global.v1.GlobalAPI.UpdateWalletPolicy:output_type -> google.protobuf.Empty
	353, // 355: adamant.global.v1.GlobalAPI.ReviewWalletProposal:output_type -> google.protobuf.Empty
	30,  // 356: adamant.global.v1.GlobalAPI.FlushBalance:output_type -> adamant.global.v1.FlushBalanceResponse
	39,  // 357: adamant.global.v1.GlobalAPI.CreateWalletGroup:output_type -> adamant.global.v1.CreateWalletGroupResponse
	353, // 358: adamant.global.v1.GlobalAPI.UpdateWalletGroupName:output_type -> google.protobuf.Empty
	353, // 359: adamant.global.v1.GlobalAPI.UpdateWalletGroup:output_type -> google.protobuf.Empty
	282, // 360: adamant.global.v1.GlobalAPI.GetWalletGroup:output_type -> adamant.global.v1.WalletGroup
	44,  // 361: adamant.global.v1.GlobalAPI.ListWalletGroups:output_type -> adamant.global.v1.ListWalletGroupsResponse
	353, // 362: adamant.global.v1.GlobalAPI.UpdateDestinationWalletID:output_type -> google.protobuf.Empty
	233, // 363: adamant.global.v1.GlobalAPI.GetCosmosBalance:output_type -> adamant.global.v1.GetCosmosBalanceResponse
	235, // 364: adamant.global.v1.GlobalAPI.ListCosmosDelegateHistories:output_type -> adamant.global.v1.ListCosmosDelegateHistoriesResponse
	353, // 365: adamant.global.v1.GlobalAPI.EnableUTXO:output_type -> google.protobuf.Empty
	353, // 366: adamant.global.v1.GlobalAPI.DisableUTXO:output_type -> google.protobuf.Empty
	353, // 367: adamant.global.v1.GlobalAPI.UpdateWalletIsStakingAvailable:output_type -> google.protobuf.Empty
	50,  // 368: adamant.global.v1.GlobalAPI.RefreshStakingWalletClaimableReward:output_type -> adamant.global.v1.RefreshStakingWalletClaimableRewardResponse
	353, // 369: adamant.global.v1.GlobalAPI.ApproveWallet:output_type -> google.protobuf.Empty
	353, // 370: adamant.global.v1.GlobalAPI.ApproveTransaction:output_type -> google.protobuf.Empty
	56,  // 371: adamant.global.v1.GlobalAPI.CreateAddress:output_type -> adamant.global.v1.CreateAddressResponse
	283, // 372: adamant.global.v1.GlobalAPI.GetAddress:output_type -> adamant.global.v1.Address
	283, // 373: adamant.global.v1.GlobalAPI.GetAddressByAddress:output_type -> adamant.global.v1.Address
	283, // 374: adamant.global.v1.GlobalAPI.GetAddressByAddressCoin:output_type -> adamant.global.v1.Address
	283, // 375: adamant.global.v1.GlobalAPI.GetAddressByIndex:output_type -> adamant.global.v1.Address
	63,  // 376: adamant.global.v1.GlobalAPI.ListAddresses:output_type -> adamant.global.v1.ListAddressesResponse
	65,  // 377: adamant.global.v1.GlobalAPI.ListAddressesWithBalance:output_type -> adamant.global.v1.ListAddressesWithBalanceResponse
	353, // 378: adamant.global.v1.GlobalAPI.UpdateAddressBalance:output_type -> google.protobuf.Empty
	354, // 379: adamant.global.v1.GlobalAPI.GetEthereumFeeAddress:output_type -> adamant.global.v1.EthereumFeeAddress
	215, // 380: adamant.global.v1.GlobalAPI.ListSubstrateChildAddresses:output_type -> adamant.global.v1.ListSubstrateChildAddressesResponse
	217, // 381: adamant.global.v1.GlobalAPI.ListSymbolChildAddresses:output_type -> adamant.global.v1.ListSymbolChildAddressesResponse
	219, // 382: adamant.global.v1.GlobalAPI.ListIOSTChildAccounts:output_type -> adamant.global.v1.ListIOSTChildAccountsResponse
	353, // 383: adamant.global.v1.GlobalAPI.ImportAddress:output_type -> google.protobuf.Empty
	229, // 384: adamant.global.v1.GlobalAPI.ListCallers:output_type -> adamant.global.v1.ListCallersResponse
	231, // 385: adamant.global.v1.GlobalAPI.ListFeeDeposits:output_type -> adamant.global.v1.ListFeeDepositsResponse
	52,  // 386: adamant.global.v1.GlobalAPI.RegisterKey:output_type -> adamant.global.v1.RegisterKeyResponse
	54,  // 387: adamant.global.v1.GlobalAPI.GetSignerPubKey:output_type -> adamant.global.v1.GetSignerPubKeyResponse
	80,  // 388: adamant.global.v1.GlobalAPI.CreateTransaction:output_type -> adamant.global.v1.CreateTransactionResponse
	353, // 389: adamant.global.v1.GlobalAPI.CreateXRPInitTransactions:output_type -> google.protobuf.Empty
	84,  // 390: adamant.global.v1.GlobalAPI.CreateContractCreationTransaction:output_type -> adamant.global.v1.CreateContractCreationTransactionResponse
	353, // 391: adamant.global.v1.GlobalAPI.SignTransaction:output_type -> google.protobuf.Empty
	353, // 392: adamant.global.v1.GlobalAPI.SignXRPInitTransactions:output_type -> google.protobuf.Empty
	89,  // 393: adamant.global.v1.GlobalAPI.SendTransaction:output_type -> adamant.global.v1.SendTransactionResponse
	91,  // 394: adamant.global.v1.GlobalAPI.ResendTransaction:output_type -> adamant.global.v1.ResendTransactionResponse
	93,  // 395: adamant.global.v1.GlobalAPI.SendXRPInitTransactions:output_type -> adamant.global.v1.SendXRPInitTransactionsResponse
	353, // 396: adamant.global.v1.GlobalAPI.CancelTransaction:output_type -> google.protobuf.Empty
	98,  // 397: adamant.global.v1.GlobalAPI.ReplaceTransaction:output_type -> adamant.global.v1.ReplaceTransactionResponse
	100, // 398: adamant.global.v1.GlobalAPI.IsTransactionReplaceable:output_type -> adamant.global.v1.IsTransactionReplaceableResponse
	308, // 399: adamant.global.v1.GlobalAPI.GetTransaction:output_type -> adamant.global.v1.Transaction
	308, // 400: adamant.global.v1.GlobalAPI.GetTransactionByTxID:output_type -> adamant.global.v1.Transaction
	105, // 401: adamant.global.v1.GlobalAPI.ListTransactions:output_type -> adamant.global.v1.ListTransactionsResponse
	105, // 402: adamant.global.v1.GlobalAPI.ListTransactionsByFilter:output_type -> adamant.global.v1.ListTransactionsResponse
	107, // 403: adamant.global.v1.GlobalAPI.ListUnconfirmedTransactionsByFilter:output_type -> adamant.global.v1.ListUnconfirmedTransactionsResponse
	310, // 404: adamant.global.v1.GlobalAPI.GetSignInfo:output_type -> adamant.global.v1.SignInfo
	110, // 405: adamant.global.v1.GlobalAPI.ListSignInfo:output_type -> adamant.global.v1.ListSignInfoResponse
	112, // 406: adamant.global.v1.GlobalAPI.ListXRPInitSignInfo:output_type -> adamant.global.v1.ListXRPInitSignInfoResponse
	116, // 407: adamant.global.v1.GlobalAPI.ListTransfers:output_type -> adamant.global.v1.ListTransfersResponse
	116, // 408: adamant.global.v1.GlobalAPI.ListTransfersByFilter:output_type -> adamant.global.v1.ListTransfersResponse
	355, // 409: adamant.global.v1.GlobalAPI.GetRateSnapshot:output_type -> adamant.global.v1.RateSnapshot
	355, // 410: adamant.global.v1.GlobalAPI.GetLatestRateSnapshot:output_type -> adamant.global.v1.RateSnapshot
	130, // 411: adamant.global.v1.GlobalAPI.SetRates:output_type -> adamant.global.v1.SetRatesResponse
	131, // 412: adamant.global.v1.GlobalAPI.SetDefaultRates:output_type -> adamant.global.v1.SetDefaultRatesResponse
	166, // 413: adamant.global.v1.GlobalAPI.CreateLabeledAddress:output_type -> adamant.global.v1.CreateLabeledAddressResponse
	330, // 414: adamant.global.v1.GlobalAPI.GetLabeledAddress:output_type -> adamant.global.v1.LabeledAddress
	170, // 415: adamant.global.v1.GlobalAPI.ListLabeledAddresses:output_type -> adamant.global.v1.ListLabeledAddressesResponse
	172, // 416: adamant.global.v1.GlobalAPI.ListLabeledAddressesByFilter:output_type -> adamant.global.v1.ListLabeledAddressesByFilterResponse
	204, // 417: adamant.global.v1.GlobalAPI.IsDeletableLabeledAddress:output_type -> adamant.global.v1.IsDeletableLabeledAddressResponse
	330, // 418: adamant.global.v1.GlobalAPI.UpdateLabeledAddress:output_type -> adamant.global.v1.LabeledAddress
	353, // 419: adamant.global.v1.GlobalAPI.DeleteAddress:output_type -> google.protobuf.Empty
	353, // 420: adamant.global.v1.GlobalAPI.ReviewLabeledAddressProposal:output_type -> google.protobuf.Empty
	176, // 421: adamant.global.v1.GlobalAPI.CreateWhitelist:output_type -> adamant.global.v1.CreateWhitelistResponse
	331, // 422: adamant.global.v1.GlobalAPI.GetWhitelist:output_type -> adamant.global.v1.Whitelist
	179, // 423: adamant.global.v1.GlobalAPI.ListWhitelists:output_type -> adamant.global.v1.ListWhitelistsResponse
	181, // 424: adamant.global.v1.GlobalAPI.ListWhitelistsByFilter:output_type -> adamant.global.v1.ListWhitelistsByFilterResponse
	206, // 425: adamant.global.v1.GlobalAPI.IsDeletableWhitelist:output_type -> adamant.global.v1.IsDeletableWhitelistResponse
	331, // 426: adamant.global.v1.GlobalAPI.UpdateWhitelist:output_type -> adamant.global.v1.Whitelist
	331, // 427: adamant.global.v1.GlobalAPI.UpdateWhitelistAddresses:output_type -> adamant.global.v1.Whitelist
	353, // 428: adamant.global.v1.GlobalAPI.DeleteWhitelist:output_type -> google.protobuf.Empty
	186, // 429: adamant.global.v1.GlobalAPI.CreateTransferLimit:output_type -> adamant.global.v1.CreateTransferLimitResponse
	333, // 430: adamant.global.v1.GlobalAPI.GetTransferLimit:output_type -> adamant.global.v1.TransferLimit
	189, // 431: adamant.global.v1.GlobalAPI.ListTransferLimits:output_type -> adamant.global.v1.ListTransferLimitsResponse
	208, // 432: adamant.global.v1.GlobalAPI.IsDeletableTransferLimit:output_type -> adamant.global.v1.IsDeletableTransferLimitResponse
	333, // 433: adamant.global.v1.GlobalAPI.UpdateTransferLimit:output_type -> adamant.global.v1.TransferLimit
	333, // 434: adamant.global.v1.GlobalAPI.UpdateTransferLimitName:output_type -> adamant.global.v1.TransferLimit
	353, // 435: adamant.global.v1.GlobalAPI.DeleteTransferLimit:output_type -> google.protobuf.Empty
	353, // 436: adamant.global.v1.GlobalAPI.ReviewTransferLimitProposal:output_type -> google.protobuf.Empty
	197, // 437: adamant.global.v1.GlobalAPI.CreatePolicy:output_type -> adamant.global.v1.CreatePolicyResponse
	335, // 438: adamant.global.v1.GlobalAPI.GetPolicy:output_type -> adamant.global.v1.Policy
	209, // 439: adamant.global.v1.GlobalAPI.ListPolicies:output_type -> adamant.global.v1.ListPoliciesResponse
	210, // 440: adamant.global.v1.GlobalAPI.ListPoliciesByFilter:output_type -> adamant.global.v1.ListPoliciesByFilterResponse
	202, // 441: adamant.global.v1.GlobalAPI.IsDeletablePolicy:output_type -> adamant.global.v1.IsDeletablePolicyResponse
	335, // 442: adamant.global.v1.GlobalAPI.UpdatePolicy:output_type -> adamant.global.v1.Policy
	353, // 443: adamant.global.v1.GlobalAPI.DeletePolicy:output_type -> google.protobuf.Empty
	353, // 444: adamant.global.v1.GlobalAPI.ReviewPolicyProposal:output_type -> google.protobuf.Empty
	133, // 445: adamant.global.v1.GlobalAPI.GetSpendableBalance:output_type -> adamant.global.v1.GetSpendableBalanceResponse
	356, // 446: adamant.global.v1.GlobalAPI.GetTotalBalance:output_type -> adamant.global.v1.TotalBalance
	136, // 447: adamant.global.v1.GlobalAPI.ListBalanceSnapshots:output_type -> adamant.global.v1.ListBalanceSnapshotsResponse
	154, // 448: adamant.global.v1.GlobalAPI.CalculateFee:output_type -> adamant.global.v1.CalculateFeeResponse
	156, // 449: adamant.global.v1.GlobalAPI.GetMembersDeactivatabilities:output_type -> adamant.global.v1.GetMembersDeactivatabilitiesResponse
	158, // 450: adamant.global.v1.GlobalAPI.GetRecommendedFeeRate:output_type -> adamant.global.v1.GetRecommendedFeeRateResponse
	160, // 451: adamant.global.v1.GlobalAPI.ValidateAddress:output_type -> adamant.global.v1.ValidateAddressResponse
	164, // 452: adamant.global.v1.GlobalAPI.ListAuditLogs:output_type -> adamant.global.v1.ListAuditLogsResponse
	239, // 453: adamant.global.v1.GlobalAPI.ListForwardingThresholds:output_type -> adamant.global.v1.ListForwardingThresholdsResponse
	241, // 454: adamant.global.v1.GlobalAPI.UpsertForwardingThreshold:output_type -> adamant.global.v1.UpsertForwardingThresholdResponse
	243, // 455: adamant.global.v1.GlobalAPI.ListStakingHistoriesByFilter:output_type -> adamant.global.v1.ListStakingHistoriesResponse
	245, // 456: adamant.global.v1.GlobalAPI.ListStakingValidatorsByFilter:output_type -> adamant.global.v1.ListStakingValidatorsResponse
	247, // 457: adamant.global.v1.GlobalAPI.ListNFTsByFilter:output_type -> adamant.global.v1.ListNFTsResponse
	342, // [342:458] is the sub-list for method output_type
	226, // [226:342] is the sub-list for method input_type
	226, // [226:226] is the sub-list for extension type_name
	226, // [226:226] is the sub-list for extension extendee
	0,   // [0:226] is the sub-list for field type_name
}

func init() { file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_init() }
func file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_init() {
	if File_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto != nil {
		return
	}
	file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_init()
	file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_init()
	file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetWalletsWithoutBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetWalletsWithoutBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnArchiveWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletsByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBaseWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBaseWalletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStakingWalletsByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStakingWalletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNFTWalletsByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNFTWalletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWalletNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWalletValidationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWalletPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewWalletProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsWalletByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsWalletByNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsWalletGroupByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsWalletGroupByNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsEnableWalletByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsEnableWalletByNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletFlushSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWalletFlushSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompensationFeeHistoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompensationFeeHistoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUTXOsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUTXOsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateShouldCheckRemittanceFlagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWalletGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWalletGroupNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDestinationWalletIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableUTXORequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableUTXORequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWalletIsStakingAvailableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshStakingWalletClaimableRewardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshStakingWalletClaimableRewardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignerPubKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignerPubKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressByAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressByAddressCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressByIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressWithoutBalanceByIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAddressesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAddressesWithBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAddressesWithBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAddressBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAddressesWithoutBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAddressesWithoutBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEthereumFeeAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAllWatchOnlyAddressesByWalletIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePreTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePreTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovePreTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectPreTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelPreTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPreTransactionsByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPreTransactionsByFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateXRPInitTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInitTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContractCreationTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContractCreationTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignXRPInitTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInitTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendXRPInitTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendXRPInitTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendInitTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendInitTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsTransactionReplaceableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsTransactionReplaceableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionByTxIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransactionsByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnconfirmedTransactionsByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnconfirmedTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSignInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSignInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListXRPInitSignInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListXRPInitSignInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInitSignInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransfersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransfersByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransfersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUncheckedTransfersByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUncheckedTransferHasCheckedFlagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUncheckedTransfersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventTriggeredMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventTriggeredMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventTriggeredMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventTriggeredMessageResponce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEventTriggeredMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEventTriggeredMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRateSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestRateSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultRatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultRatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpendableBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpendableBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTotalBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBalanceSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBalanceSnapshotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletBalanceSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletBalanceSnapshotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransferVolumeSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransferVolumeSnapshotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletTransferVolumeSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletTransferVolumeSnapshotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateFeeSubstrateSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateFeeNemSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateFeeSymbolSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateFeeEthereumSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateFeeCosmosSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateFeeHederaSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateFeeSolanaSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateFeeRbfSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtxoSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateFeeAvalancheSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateFeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMembersDeactivatabilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMembersDeactivatabilitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecommendedFeeRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecommendedFeeRateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfirmationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfirmationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuditLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuditLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLabeledAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLabeledAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLabeledAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabeledAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLabeledAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLabeledAddressesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLabeledAddressesByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLabeledAddressesByFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLabeledAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewLabeledAddressProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWhitelistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWhitelistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWhitelistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWhitelistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWhitelistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWhitelistsByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWhitelistsByFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWhitelistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWhitelistAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWhitelistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransferLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransferLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransferLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransferLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransferLimitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransferLimitsByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransferLimitsByFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTransferLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTransferLimitNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTransferLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewTransferLimitProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPoliciesByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeletablePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeletablePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeletableLabeledAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeletableLabeledAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeletableWhitelistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeletableWhitelistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeletableTransferLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeletableTransferLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPoliciesByFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewPolicyProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubstrateChildAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubstrateChildAddressesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSymbolChildAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSymbolChildAddressesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIOSTChildAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIOSTChildAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitEthereumStakingValidatorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitEthereumStakingValidatorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIOSTAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIOSTAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsIOSTAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsIOSTAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIOSTCallerAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCallersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCallersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeeDepositsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeeDepositsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCosmosBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCosmosBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCosmosDelegateHistoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCosmosDelegateHistoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CosmosDelegateHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardingThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListForwardingThresholdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListForwardingThresholdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertForwardingThresholdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertForwardingThresholdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStakingHistoriesByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStakingHistoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStakingValidatorsByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStakingValidatorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNFTsByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNFTsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMailSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMailSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPreTransactionThresholdsByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPreTransactionThresholdsByFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePreTransactionThresholdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePreTransactionThresholdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePreTransactionThresholdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewPreTransactionThresholdProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBlacklistAddressesByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBlacklistAddressesByFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBlacklistAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBlacklistAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlacklistAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBlacklistAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewBlacklistAddressProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkReviewBlacklistAddressProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlacklistStorageSignedURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlacklistStorageSignedURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBlacklistAddressFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBlacklistAddressFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[77].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[79].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[83].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[104].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[106].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[115].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[117].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[147].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[153].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[157].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[159].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[163].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[165].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[167].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[171].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[175].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[180].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[185].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[190].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[196].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[199].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[220].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[246].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[250].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[256].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[259].OneofWrappers = []interface{}{}
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[266].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   268,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_goTypes,
		DependencyIndexes: file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_depIdxs,
		MessageInfos:      file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes,
	}.Build()
	File_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto = out.File
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDesc = nil
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_goTypes = nil
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_depIdxs = nil
}
