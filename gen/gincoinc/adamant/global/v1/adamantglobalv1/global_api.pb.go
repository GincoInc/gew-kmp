// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.8.0
// source: gincoinc/adamant/global/v1/adamantglobalv1/global_api.proto

package adamantglobalv1

import (
	context "context"
	gincoincglobalv1 "github.com/GincoInc/gew-kmp/gen/gincoinc/global/v1/gincoincglobalv1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ApproveWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *ApproveWalletRequest) Reset() {
	*x = ApproveWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveWalletRequest) ProtoMessage() {}

func (x *ApproveWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveWalletRequest.ProtoReflect.Descriptor instead.
func (*ApproveWalletRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{0}
}

func (x *ApproveWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type ApproveTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *ApproveTransactionRequest) Reset() {
	*x = ApproveTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveTransactionRequest) ProtoMessage() {}

func (x *ApproveTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveTransactionRequest.ProtoReflect.Descriptor instead.
func (*ApproveTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{1}
}

func (x *ApproveTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ApproveTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type CreateWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletName  string                       `protobuf:"bytes,1,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	Coin        gincoincglobalv1.Coin        `protobuf:"varint,2,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	WalletType  WalletType                   `protobuf:"varint,3,opt,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`
	AddressType gincoincglobalv1.AddressType `protobuf:"varint,4,opt,name=address_type,json=addressType,proto3,enum=gincoinc.global.v1.AddressType" json:"address_type,omitempty"`
	// and must be m <= n
	M                     uint32   `protobuf:"varint,5,opt,name=m,proto3" json:"m,omitempty"`
	N                     uint32   `protobuf:"varint,6,opt,name=n,proto3" json:"n,omitempty"`
	Members               []string `protobuf:"bytes,7,rep,name=members,proto3" json:"members,omitempty"`
	RequiredApprovalCount uint32   `protobuf:"varint,10,opt,name=required_approval_count,json=requiredApprovalCount,proto3" json:"required_approval_count,omitempty"`
	// optional
	PolicyId string `protobuf:"bytes,8,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// required when create receive only wallet
	DestinationWalletId string `protobuf:"bytes,9,opt,name=destination_wallet_id,json=destinationWalletId,proto3" json:"destination_wallet_id,omitempty"`
	WatchOnly           bool   `protobuf:"varint,11,opt,name=watch_only,json=watchOnly,proto3" json:"watch_only,omitempty"`
	// optional
	InheritWalletId string `protobuf:"bytes,12,opt,name=inherit_wallet_id,json=inheritWalletId,proto3" json:"inherit_wallet_id,omitempty"`
}

func (x *CreateWalletRequest) Reset() {
	*x = CreateWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletRequest) ProtoMessage() {}

func (x *CreateWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletRequest.ProtoReflect.Descriptor instead.
func (*CreateWalletRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{2}
}

func (x *CreateWalletRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *CreateWalletRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin_COIN_INVALID
}

func (x *CreateWalletRequest) GetWalletType() WalletType {
	if x != nil {
		return x.WalletType
	}
	return WalletType_WALLET_TYPE_INVALID
}

func (x *CreateWalletRequest) GetAddressType() gincoincglobalv1.AddressType {
	if x != nil {
		return x.AddressType
	}
	return gincoincglobalv1.AddressType_ADDRESS_TYPE_INVALID
}

func (x *CreateWalletRequest) GetM() uint32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *CreateWalletRequest) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *CreateWalletRequest) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CreateWalletRequest) GetRequiredApprovalCount() uint32 {
	if x != nil {
		return x.RequiredApprovalCount
	}
	return 0
}

func (x *CreateWalletRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *CreateWalletRequest) GetDestinationWalletId() string {
	if x != nil {
		return x.DestinationWalletId
	}
	return ""
}

func (x *CreateWalletRequest) GetWatchOnly() bool {
	if x != nil {
		return x.WatchOnly
	}
	return false
}

func (x *CreateWalletRequest) GetInheritWalletId() string {
	if x != nil {
		return x.InheritWalletId
	}
	return ""
}

type CreateWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *CreateWalletResponse) Reset() {
	*x = CreateWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletResponse) ProtoMessage() {}

func (x *CreateWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletResponse.ProtoReflect.Descriptor instead.
func (*CreateWalletResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{3}
}

func (x *CreateWalletResponse) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type GetWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"` // The id of wallet
}

func (x *GetWalletRequest) Reset() {
	*x = GetWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletRequest) ProtoMessage() {}

func (x *GetWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletRequest.ProtoReflect.Descriptor instead.
func (*GetWalletRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{4}
}

func (x *GetWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type BatchGetWalletsWithoutBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIds []string `protobuf:"bytes,1,rep,name=wallet_ids,json=walletIds,proto3" json:"wallet_ids,omitempty"`
}

func (x *BatchGetWalletsWithoutBalanceRequest) Reset() {
	*x = BatchGetWalletsWithoutBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetWalletsWithoutBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetWalletsWithoutBalanceRequest) ProtoMessage() {}

func (x *BatchGetWalletsWithoutBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetWalletsWithoutBalanceRequest.ProtoReflect.Descriptor instead.
func (*BatchGetWalletsWithoutBalanceRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{5}
}

func (x *BatchGetWalletsWithoutBalanceRequest) GetWalletIds() []string {
	if x != nil {
		return x.WalletIds
	}
	return nil
}

type BatchGetWalletsWithoutBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallets []*WalletWithoutBalance `protobuf:"bytes,1,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (x *BatchGetWalletsWithoutBalanceResponse) Reset() {
	*x = BatchGetWalletsWithoutBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetWalletsWithoutBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetWalletsWithoutBalanceResponse) ProtoMessage() {}

func (x *BatchGetWalletsWithoutBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetWalletsWithoutBalanceResponse.ProtoReflect.Descriptor instead.
func (*BatchGetWalletsWithoutBalanceResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{6}
}

func (x *BatchGetWalletsWithoutBalanceResponse) GetWallets() []*WalletWithoutBalance {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type CancelWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *CancelWalletRequest) Reset() {
	*x = CancelWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelWalletRequest) ProtoMessage() {}

func (x *CancelWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelWalletRequest.ProtoReflect.Descriptor instead.
func (*CancelWalletRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{7}
}

func (x *CancelWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type ArchiveWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *ArchiveWalletRequest) Reset() {
	*x = ArchiveWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveWalletRequest) ProtoMessage() {}

func (x *ArchiveWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveWalletRequest.ProtoReflect.Descriptor instead.
func (*ArchiveWalletRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{8}
}

func (x *ArchiveWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type UnArchiveWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *UnArchiveWalletRequest) Reset() {
	*x = UnArchiveWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnArchiveWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnArchiveWalletRequest) ProtoMessage() {}

func (x *UnArchiveWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnArchiveWalletRequest.ProtoReflect.Descriptor instead.
func (*UnArchiveWalletRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{9}
}

func (x *UnArchiveWalletRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type ListWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListWalletsRequest) Reset() {
	*x = ListWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletsRequest) ProtoMessage() {}

func (x *ListWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletsRequest.ProtoReflect.Descriptor instead.
func (*ListWalletsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{10}
}

func (x *ListWalletsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListWalletsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListWalletsByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType ListFilterType `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	// optional
	WalletId string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// optional
	WalletName string `protobuf:"bytes,3,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// optional
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// optional
	WatchOnly bool `protobuf:"varint,10,opt,name=watch_only,json=watchOnly,proto3" json:"watch_only,omitempty"`
	// optional
	Coin        gincoincglobalv1.Coin `protobuf:"varint,5,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	WalletType  []WalletType          `protobuf:"varint,6,rep,packed,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`
	WalletState []WalletState         `protobuf:"varint,7,rep,packed,name=wallet_state,json=walletState,proto3,enum=adamant.global.v1.WalletState" json:"wallet_state,omitempty"`
	// optional
	PageSize uint32 `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// optional
	PageToken string `protobuf:"bytes,9,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListWalletsByFilterRequest) Reset() {
	*x = ListWalletsByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletsByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletsByFilterRequest) ProtoMessage() {}

func (x *ListWalletsByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletsByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListWalletsByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{11}
}

func (x *ListWalletsByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListWalletsByFilterRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListWalletsByFilterRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *ListWalletsByFilterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ListWalletsByFilterRequest) GetWatchOnly() bool {
	if x != nil {
		return x.WatchOnly
	}
	return false
}

func (x *ListWalletsByFilterRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin_COIN_INVALID
}

func (x *ListWalletsByFilterRequest) GetWalletType() []WalletType {
	if x != nil {
		return x.WalletType
	}
	return nil
}

func (x *ListWalletsByFilterRequest) GetWalletState() []WalletState {
	if x != nil {
		return x.WalletState
	}
	return nil
}

func (x *ListWalletsByFilterRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListWalletsByFilterRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListWalletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallets       []*Wallet `protobuf:"bytes,1,rep,name=wallets,proto3" json:"wallets,omitempty"`
	NextPageToken string    `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListWalletsResponse) Reset() {
	*x = ListWalletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletsResponse) ProtoMessage() {}

func (x *ListWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletsResponse.ProtoReflect.Descriptor instead.
func (*ListWalletsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{12}
}

func (x *ListWalletsResponse) GetWallets() []*Wallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

func (x *ListWalletsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListBaseWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBaseWalletsRequest) Reset() {
	*x = ListBaseWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBaseWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBaseWalletsRequest) ProtoMessage() {}

func (x *ListBaseWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBaseWalletsRequest.ProtoReflect.Descriptor instead.
func (*ListBaseWalletsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{13}
}

type ListBaseWalletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallets []*WalletWithoutBalance `protobuf:"bytes,1,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (x *ListBaseWalletsResponse) Reset() {
	*x = ListBaseWalletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBaseWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBaseWalletsResponse) ProtoMessage() {}

func (x *ListBaseWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBaseWalletsResponse.ProtoReflect.Descriptor instead.
func (*ListBaseWalletsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{14}
}

func (x *ListBaseWalletsResponse) GetWallets() []*WalletWithoutBalance {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type UpdateWalletNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateWalletNameRequest) Reset() {
	*x = UpdateWalletNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWalletNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWalletNameRequest) ProtoMessage() {}

func (x *UpdateWalletNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWalletNameRequest.ProtoReflect.Descriptor instead.
func (*UpdateWalletNameRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateWalletNameRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *UpdateWalletNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateWalletValidationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId                 string   `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	NewValidatorIds          []string `protobuf:"bytes,2,rep,name=new_validator_ids,json=newValidatorIds,proto3" json:"new_validator_ids,omitempty"`
	NewRequiredApprovalCount uint32   `protobuf:"varint,3,opt,name=new_required_approval_count,json=newRequiredApprovalCount,proto3" json:"new_required_approval_count,omitempty"`
}

func (x *UpdateWalletValidationRequest) Reset() {
	*x = UpdateWalletValidationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWalletValidationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWalletValidationRequest) ProtoMessage() {}

func (x *UpdateWalletValidationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWalletValidationRequest.ProtoReflect.Descriptor instead.
func (*UpdateWalletValidationRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateWalletValidationRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *UpdateWalletValidationRequest) GetNewValidatorIds() []string {
	if x != nil {
		return x.NewValidatorIds
	}
	return nil
}

func (x *UpdateWalletValidationRequest) GetNewRequiredApprovalCount() uint32 {
	if x != nil {
		return x.NewRequiredApprovalCount
	}
	return 0
}

type UpdateWalletPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	PolicyId string `protobuf:"bytes,2,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
}

func (x *UpdateWalletPolicyRequest) Reset() {
	*x = UpdateWalletPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWalletPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWalletPolicyRequest) ProtoMessage() {}

func (x *UpdateWalletPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWalletPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateWalletPolicyRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateWalletPolicyRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *UpdateWalletPolicyRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type ReviewWalletProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Approve  bool   `protobuf:"varint,2,opt,name=approve,proto3" json:"approve,omitempty"`
}

func (x *ReviewWalletProposalRequest) Reset() {
	*x = ReviewWalletProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewWalletProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewWalletProposalRequest) ProtoMessage() {}

func (x *ReviewWalletProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewWalletProposalRequest.ProtoReflect.Descriptor instead.
func (*ReviewWalletProposalRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{18}
}

func (x *ReviewWalletProposalRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ReviewWalletProposalRequest) GetApprove() bool {
	if x != nil {
		return x.Approve
	}
	return false
}

type ExistsWalletByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ExistsWalletByNameRequest) Reset() {
	*x = ExistsWalletByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsWalletByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsWalletByNameRequest) ProtoMessage() {}

func (x *ExistsWalletByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsWalletByNameRequest.ProtoReflect.Descriptor instead.
func (*ExistsWalletByNameRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{19}
}

func (x *ExistsWalletByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ExistsWalletByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *ExistsWalletByNameResponse) Reset() {
	*x = ExistsWalletByNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsWalletByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsWalletByNameResponse) ProtoMessage() {}

func (x *ExistsWalletByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsWalletByNameResponse.ProtoReflect.Descriptor instead.
func (*ExistsWalletByNameResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{20}
}

func (x *ExistsWalletByNameResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type FlushBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *FlushBalanceRequest) Reset() {
	*x = FlushBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushBalanceRequest) ProtoMessage() {}

func (x *FlushBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushBalanceRequest.ProtoReflect.Descriptor instead.
func (*FlushBalanceRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{21}
}

func (x *FlushBalanceRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type FlushBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlushedAddresses []*FlushedAddress `protobuf:"bytes,1,rep,name=flushed_addresses,json=flushedAddresses,proto3" json:"flushed_addresses,omitempty"`
}

func (x *FlushBalanceResponse) Reset() {
	*x = FlushBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushBalanceResponse) ProtoMessage() {}

func (x *FlushBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushBalanceResponse.ProtoReflect.Descriptor instead.
func (*FlushBalanceResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{22}
}

func (x *FlushBalanceResponse) GetFlushedAddresses() []*FlushedAddress {
	if x != nil {
		return x.FlushedAddresses
	}
	return nil
}

type ListWalletFlushSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletFlushSettings []*WalletFlushSetting `protobuf:"bytes,1,rep,name=wallet_flush_settings,json=walletFlushSettings,proto3" json:"wallet_flush_settings,omitempty"`
}

func (x *ListWalletFlushSettingsResponse) Reset() {
	*x = ListWalletFlushSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletFlushSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletFlushSettingsResponse) ProtoMessage() {}

func (x *ListWalletFlushSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletFlushSettingsResponse.ProtoReflect.Descriptor instead.
func (*ListWalletFlushSettingsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{23}
}

func (x *ListWalletFlushSettingsResponse) GetWalletFlushSettings() []*WalletFlushSetting {
	if x != nil {
		return x.WalletFlushSettings
	}
	return nil
}

type UpdateWalletFlushSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin                gincoincglobalv1.Coin `protobuf:"varint,1,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	DestinationWalletId string                `protobuf:"bytes,2,opt,name=destination_wallet_id,json=destinationWalletId,proto3" json:"destination_wallet_id,omitempty"`
}

func (x *UpdateWalletFlushSettingRequest) Reset() {
	*x = UpdateWalletFlushSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWalletFlushSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWalletFlushSettingRequest) ProtoMessage() {}

func (x *UpdateWalletFlushSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWalletFlushSettingRequest.ProtoReflect.Descriptor instead.
func (*UpdateWalletFlushSettingRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateWalletFlushSettingRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin_COIN_INVALID
}

func (x *UpdateWalletFlushSettingRequest) GetDestinationWalletId() string {
	if x != nil {
		return x.DestinationWalletId
	}
	return ""
}

type ListCompensationFeeHistoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ListCompensationFeeHistoriesRequest) Reset() {
	*x = ListCompensationFeeHistoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompensationFeeHistoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompensationFeeHistoriesRequest) ProtoMessage() {}

func (x *ListCompensationFeeHistoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompensationFeeHistoriesRequest.ProtoReflect.Descriptor instead.
func (*ListCompensationFeeHistoriesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{25}
}

func (x *ListCompensationFeeHistoriesRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListCompensationFeeHistoriesRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ListCompensationFeeHistoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompensationFees []*CompensationFee `protobuf:"bytes,1,rep,name=compensation_fees,json=compensationFees,proto3" json:"compensation_fees,omitempty"`
}

func (x *ListCompensationFeeHistoriesResponse) Reset() {
	*x = ListCompensationFeeHistoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompensationFeeHistoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompensationFeeHistoriesResponse) ProtoMessage() {}

func (x *ListCompensationFeeHistoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompensationFeeHistoriesResponse.ProtoReflect.Descriptor instead.
func (*ListCompensationFeeHistoriesResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{26}
}

func (x *ListCompensationFeeHistoriesResponse) GetCompensationFees() []*CompensationFee {
	if x != nil {
		return x.CompensationFees
	}
	return nil
}

type RegisterKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	PubKey   string `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (x *RegisterKeyRequest) Reset() {
	*x = RegisterKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterKeyRequest) ProtoMessage() {}

func (x *RegisterKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterKeyRequest.ProtoReflect.Descriptor instead.
func (*RegisterKeyRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{27}
}

func (x *RegisterKeyRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *RegisterKeyRequest) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

type RegisterKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *RegisterKeyResponse) Reset() {
	*x = RegisterKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterKeyResponse) ProtoMessage() {}

func (x *RegisterKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterKeyResponse.ProtoReflect.Descriptor instead.
func (*RegisterKeyResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{28}
}

func (x *RegisterKeyResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type CreateAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"` // The id of wallet
	FeeRate  uint64 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`   // for contract wallet
}

func (x *CreateAddressRequest) Reset() {
	*x = CreateAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressRequest) ProtoMessage() {}

func (x *CreateAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressRequest.ProtoReflect.Descriptor instead.
func (*CreateAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{29}
}

func (x *CreateAddressRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *CreateAddressRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

type CreateAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressId string `protobuf:"bytes,1,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"` // The id of created address
}

func (x *CreateAddressResponse) Reset() {
	*x = CreateAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressResponse) ProtoMessage() {}

func (x *CreateAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressResponse.ProtoReflect.Descriptor instead.
func (*CreateAddressResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{30}
}

func (x *CreateAddressResponse) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

type GetAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId  string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	AddressId string `protobuf:"bytes,2,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
}

func (x *GetAddressRequest) Reset() {
	*x = GetAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressRequest) ProtoMessage() {}

func (x *GetAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressRequest.ProtoReflect.Descriptor instead.
func (*GetAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{31}
}

func (x *GetAddressRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetAddressRequest) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

type GetAddressByAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetAddressByAddressRequest) Reset() {
	*x = GetAddressByAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressByAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressByAddressRequest) ProtoMessage() {}

func (x *GetAddressByAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressByAddressRequest.ProtoReflect.Descriptor instead.
func (*GetAddressByAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{32}
}

func (x *GetAddressByAddressRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetAddressByAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetAddressByIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Index    uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *GetAddressByIndexRequest) Reset() {
	*x = GetAddressByIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressByIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressByIndexRequest) ProtoMessage() {}

func (x *GetAddressByIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressByIndexRequest.ProtoReflect.Descriptor instead.
func (*GetAddressByIndexRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{33}
}

func (x *GetAddressByIndexRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetAddressByIndexRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type GetAddressWithoutBalanceByIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Index    uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *GetAddressWithoutBalanceByIndexRequest) Reset() {
	*x = GetAddressWithoutBalanceByIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressWithoutBalanceByIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressWithoutBalanceByIndexRequest) ProtoMessage() {}

func (x *GetAddressWithoutBalanceByIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressWithoutBalanceByIndexRequest.ProtoReflect.Descriptor instead.
func (*GetAddressWithoutBalanceByIndexRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{34}
}

func (x *GetAddressWithoutBalanceByIndexRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetAddressWithoutBalanceByIndexRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type ListAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId   string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	OmitChange bool   `protobuf:"varint,2,opt,name=omit_change,json=omitChange,proto3" json:"omit_change,omitempty"`
	PageSize   uint32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken  string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListAddressesRequest) Reset() {
	*x = ListAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressesRequest) ProtoMessage() {}

func (x *ListAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressesRequest.ProtoReflect.Descriptor instead.
func (*ListAddressesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{35}
}

func (x *ListAddressesRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListAddressesRequest) GetOmitChange() bool {
	if x != nil {
		return x.OmitChange
	}
	return false
}

func (x *ListAddressesRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAddressesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListAddressesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses     []*Address `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	NextPageToken string     `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListAddressesResponse) Reset() {
	*x = ListAddressesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAddressesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressesResponse) ProtoMessage() {}

func (x *ListAddressesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressesResponse.ProtoReflect.Descriptor instead.
func (*ListAddressesResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{36}
}

func (x *ListAddressesResponse) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *ListAddressesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListAddressesWithBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *ListAddressesWithBalanceRequest) Reset() {
	*x = ListAddressesWithBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAddressesWithBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressesWithBalanceRequest) ProtoMessage() {}

func (x *ListAddressesWithBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressesWithBalanceRequest.ProtoReflect.Descriptor instead.
func (*ListAddressesWithBalanceRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{37}
}

func (x *ListAddressesWithBalanceRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type ListAddressesWithBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []*AddressWithBalance `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *ListAddressesWithBalanceResponse) Reset() {
	*x = ListAddressesWithBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAddressesWithBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressesWithBalanceResponse) ProtoMessage() {}

func (x *ListAddressesWithBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressesWithBalanceResponse.ProtoReflect.Descriptor instead.
func (*ListAddressesWithBalanceResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{38}
}

func (x *ListAddressesWithBalanceResponse) GetAddresses() []*AddressWithBalance {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type UpdateAddressBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *UpdateAddressBalanceRequest) Reset() {
	*x = UpdateAddressBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAddressBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddressBalanceRequest) ProtoMessage() {}

func (x *UpdateAddressBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddressBalanceRequest.ProtoReflect.Descriptor instead.
func (*UpdateAddressBalanceRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateAddressBalanceRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *UpdateAddressBalanceRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ListAddressesWithoutBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId   string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	OmitChange bool   `protobuf:"varint,2,opt,name=omit_change,json=omitChange,proto3" json:"omit_change,omitempty"`
	PageSize   uint32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken  string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListAddressesWithoutBalanceRequest) Reset() {
	*x = ListAddressesWithoutBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAddressesWithoutBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressesWithoutBalanceRequest) ProtoMessage() {}

func (x *ListAddressesWithoutBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressesWithoutBalanceRequest.ProtoReflect.Descriptor instead.
func (*ListAddressesWithoutBalanceRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{40}
}

func (x *ListAddressesWithoutBalanceRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListAddressesWithoutBalanceRequest) GetOmitChange() bool {
	if x != nil {
		return x.OmitChange
	}
	return false
}

func (x *ListAddressesWithoutBalanceRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAddressesWithoutBalanceRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListAddressesWithoutBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses     []*AddressWithoutBalance `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	NextPageToken string                   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListAddressesWithoutBalanceResponse) Reset() {
	*x = ListAddressesWithoutBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAddressesWithoutBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAddressesWithoutBalanceResponse) ProtoMessage() {}

func (x *ListAddressesWithoutBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAddressesWithoutBalanceResponse.ProtoReflect.Descriptor instead.
func (*ListAddressesWithoutBalanceResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{41}
}

func (x *ListAddressesWithoutBalanceResponse) GetAddresses() []*AddressWithoutBalance {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *ListAddressesWithoutBalanceResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetEthereumFeeAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEthereumFeeAddressRequest) Reset() {
	*x = GetEthereumFeeAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEthereumFeeAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEthereumFeeAddressRequest) ProtoMessage() {}

func (x *GetEthereumFeeAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEthereumFeeAddressRequest.ProtoReflect.Descriptor instead.
func (*GetEthereumFeeAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{42}
}

type DeleteAllWatchOnlyAddressesByWalletIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *DeleteAllWatchOnlyAddressesByWalletIDRequest) Reset() {
	*x = DeleteAllWatchOnlyAddressesByWalletIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllWatchOnlyAddressesByWalletIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllWatchOnlyAddressesByWalletIDRequest) ProtoMessage() {}

func (x *DeleteAllWatchOnlyAddressesByWalletIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllWatchOnlyAddressesByWalletIDRequest.ProtoReflect.Descriptor instead.
func (*DeleteAllWatchOnlyAddressesByWalletIDRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{43}
}

func (x *DeleteAllWatchOnlyAddressesByWalletIDRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type CreateTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId       string             `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	FeeRate        uint64             `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	TxOutputs      []*RequestTxOutput `protobuf:"bytes,3,rep,name=tx_outputs,json=txOutputs,proto3" json:"tx_outputs,omitempty"`
	Address        string             `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	DestinationTag uint32             `protobuf:"varint,5,opt,name=destination_tag,json=destinationTag,proto3" json:"destination_tag,omitempty"`
	StringValue    string             `protobuf:"bytes,7,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
}

func (x *CreateTransactionRequest) Reset() {
	*x = CreateTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionRequest) ProtoMessage() {}

func (x *CreateTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{44}
}

func (x *CreateTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *CreateTransactionRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *CreateTransactionRequest) GetTxOutputs() []*RequestTxOutput {
	if x != nil {
		return x.TxOutputs
	}
	return nil
}

func (x *CreateTransactionRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateTransactionRequest) GetDestinationTag() uint32 {
	if x != nil {
		return x.DestinationTag
	}
	return 0
}

func (x *CreateTransactionRequest) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

type CreateTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *CreateTransactionResponse) Reset() {
	*x = CreateTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionResponse) ProtoMessage() {}

func (x *CreateTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreateTransactionResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{45}
}

func (x *CreateTransactionResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type CreateXRPInitTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"` // feature: bool require_dest
}

func (x *CreateXRPInitTransactionsRequest) Reset() {
	*x = CreateXRPInitTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateXRPInitTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateXRPInitTransactionsRequest) ProtoMessage() {}

func (x *CreateXRPInitTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateXRPInitTransactionsRequest.ProtoReflect.Descriptor instead.
func (*CreateXRPInitTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{46}
}

func (x *CreateXRPInitTransactionsRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type CreateInitTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *CreateInitTransactionRequest) Reset() {
	*x = CreateInitTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInitTransactionRequest) ProtoMessage() {}

func (x *CreateInitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInitTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateInitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{47}
}

func (x *CreateInitTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type SignTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string             `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string             `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	KeyId         string             `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	SignedInfo    *RequestSignedInfo `protobuf:"bytes,4,opt,name=signed_info,json=signedInfo,proto3" json:"signed_info,omitempty"`
}

func (x *SignTransactionRequest) Reset() {
	*x = SignTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTransactionRequest) ProtoMessage() {}

func (x *SignTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTransactionRequest.ProtoReflect.Descriptor instead.
func (*SignTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{48}
}

func (x *SignTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *SignTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *SignTransactionRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SignTransactionRequest) GetSignedInfo() *RequestSignedInfo {
	if x != nil {
		return x.SignedInfo
	}
	return nil
}

type SignXRPInitTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId   string               `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	KeyId      string               `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	SignedInfo []*RequestSignedInfo `protobuf:"bytes,4,rep,name=signed_info,json=signedInfo,proto3" json:"signed_info,omitempty"`
}

func (x *SignXRPInitTransactionsRequest) Reset() {
	*x = SignXRPInitTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignXRPInitTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignXRPInitTransactionsRequest) ProtoMessage() {}

func (x *SignXRPInitTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignXRPInitTransactionsRequest.ProtoReflect.Descriptor instead.
func (*SignXRPInitTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{49}
}

func (x *SignXRPInitTransactionsRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *SignXRPInitTransactionsRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SignXRPInitTransactionsRequest) GetSignedInfo() []*RequestSignedInfo {
	if x != nil {
		return x.SignedInfo
	}
	return nil
}

type SignInitTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId   string               `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	KeyId      string               `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	SignedInfo []*RequestSignedInfo `protobuf:"bytes,4,rep,name=signed_info,json=signedInfo,proto3" json:"signed_info,omitempty"`
}

func (x *SignInitTransactionRequest) Reset() {
	*x = SignInitTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInitTransactionRequest) ProtoMessage() {}

func (x *SignInitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInitTransactionRequest.ProtoReflect.Descriptor instead.
func (*SignInitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{50}
}

func (x *SignInitTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *SignInitTransactionRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SignInitTransactionRequest) GetSignedInfo() []*RequestSignedInfo {
	if x != nil {
		return x.SignedInfo
	}
	return nil
}

type SendTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *SendTransactionRequest) Reset() {
	*x = SendTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTransactionRequest) ProtoMessage() {}

func (x *SendTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTransactionRequest.ProtoReflect.Descriptor instead.
func (*SendTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{51}
}

func (x *SendTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *SendTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type SendTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *SendTransactionResponse) Reset() {
	*x = SendTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTransactionResponse) ProtoMessage() {}

func (x *SendTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTransactionResponse.ProtoReflect.Descriptor instead.
func (*SendTransactionResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{52}
}

func (x *SendTransactionResponse) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

type SendXRPInitTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *SendXRPInitTransactionsRequest) Reset() {
	*x = SendXRPInitTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendXRPInitTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendXRPInitTransactionsRequest) ProtoMessage() {}

func (x *SendXRPInitTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendXRPInitTransactionsRequest.ProtoReflect.Descriptor instead.
func (*SendXRPInitTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{53}
}

func (x *SendXRPInitTransactionsRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type SendXRPInitTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxIds []string `protobuf:"bytes,1,rep,name=tx_ids,json=txIds,proto3" json:"tx_ids,omitempty"`
}

func (x *SendXRPInitTransactionsResponse) Reset() {
	*x = SendXRPInitTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendXRPInitTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendXRPInitTransactionsResponse) ProtoMessage() {}

func (x *SendXRPInitTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendXRPInitTransactionsResponse.ProtoReflect.Descriptor instead.
func (*SendXRPInitTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{54}
}

func (x *SendXRPInitTransactionsResponse) GetTxIds() []string {
	if x != nil {
		return x.TxIds
	}
	return nil
}

type SendInitTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *SendInitTransactionRequest) Reset() {
	*x = SendInitTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendInitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendInitTransactionRequest) ProtoMessage() {}

func (x *SendInitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendInitTransactionRequest.ProtoReflect.Descriptor instead.
func (*SendInitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{55}
}

func (x *SendInitTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type SendInitTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxIds []string `protobuf:"bytes,1,rep,name=tx_ids,json=txIds,proto3" json:"tx_ids,omitempty"`
}

func (x *SendInitTransactionResponse) Reset() {
	*x = SendInitTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendInitTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendInitTransactionResponse) ProtoMessage() {}

func (x *SendInitTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendInitTransactionResponse.ProtoReflect.Descriptor instead.
func (*SendInitTransactionResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{56}
}

func (x *SendInitTransactionResponse) GetTxIds() []string {
	if x != nil {
		return x.TxIds
	}
	return nil
}

type CancelTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *CancelTransactionRequest) Reset() {
	*x = CancelTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTransactionRequest) ProtoMessage() {}

func (x *CancelTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTransactionRequest.ProtoReflect.Descriptor instead.
func (*CancelTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{57}
}

func (x *CancelTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *CancelTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type GetTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *GetTransactionRequest) Reset() {
	*x = GetTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionRequest) ProtoMessage() {}

func (x *GetTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{58}
}

func (x *GetTransactionRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type GetTransactionByTxIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TxId     string `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *GetTransactionByTxIDRequest) Reset() {
	*x = GetTransactionByTxIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionByTxIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionByTxIDRequest) ProtoMessage() {}

func (x *GetTransactionByTxIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionByTxIDRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionByTxIDRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{59}
}

func (x *GetTransactionByTxIDRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetTransactionByTxIDRequest) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

type ListTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId  string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	PageSize  uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListTransactionsRequest) Reset() {
	*x = ListTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionsRequest) ProtoMessage() {}

func (x *ListTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionsRequest.ProtoReflect.Descriptor instead.
func (*ListTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{60}
}

func (x *ListTransactionsRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListTransactionsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTransactionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListTransactionsByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType ListFilterType `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	// optional
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// optional
	WalletName string `protobuf:"bytes,3,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// optional
	AddressName string `protobuf:"bytes,4,opt,name=address_name,json=addressName,proto3" json:"address_name,omitempty"`
	// optional
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// optional
	Txid string `protobuf:"bytes,6,opt,name=txid,proto3" json:"txid,omitempty"`
	// optional
	Coin             gincoincglobalv1.Coin `protobuf:"varint,7,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	WalletType       []WalletType          `protobuf:"varint,8,rep,packed,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`
	TransactionState []TransactionState    `protobuf:"varint,9,rep,packed,name=transaction_state,json=transactionState,proto3,enum=adamant.global.v1.TransactionState" json:"transaction_state,omitempty"`
	// optional
	PageSize uint32 `protobuf:"varint,10,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// optional
	PageToken string `protobuf:"bytes,11,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListTransactionsByFilterRequest) Reset() {
	*x = ListTransactionsByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransactionsByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionsByFilterRequest) ProtoMessage() {}

func (x *ListTransactionsByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionsByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListTransactionsByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{61}
}

func (x *ListTransactionsByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListTransactionsByFilterRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *ListTransactionsByFilterRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *ListTransactionsByFilterRequest) GetAddressName() string {
	if x != nil {
		return x.AddressName
	}
	return ""
}

func (x *ListTransactionsByFilterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ListTransactionsByFilterRequest) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *ListTransactionsByFilterRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin_COIN_INVALID
}

func (x *ListTransactionsByFilterRequest) GetWalletType() []WalletType {
	if x != nil {
		return x.WalletType
	}
	return nil
}

func (x *ListTransactionsByFilterRequest) GetTransactionState() []TransactionState {
	if x != nil {
		return x.TransactionState
	}
	return nil
}

func (x *ListTransactionsByFilterRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTransactionsByFilterRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions  []*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	NextPageToken string         `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListTransactionsResponse) Reset() {
	*x = ListTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionsResponse) ProtoMessage() {}

func (x *ListTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionsResponse.ProtoReflect.Descriptor instead.
func (*ListTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{62}
}

func (x *ListTransactionsResponse) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *ListTransactionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetSignInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *GetSignInfoRequest) Reset() {
	*x = GetSignInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignInfoRequest) ProtoMessage() {}

func (x *GetSignInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignInfoRequest.ProtoReflect.Descriptor instead.
func (*GetSignInfoRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{63}
}

func (x *GetSignInfoRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *GetSignInfoRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type ListSignInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId      string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *ListSignInfoRequest) Reset() {
	*x = ListSignInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSignInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSignInfoRequest) ProtoMessage() {}

func (x *ListSignInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSignInfoRequest.ProtoReflect.Descriptor instead.
func (*ListSignInfoRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{64}
}

func (x *ListSignInfoRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListSignInfoRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type ListSignInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignInfoList []*SignInfo `protobuf:"bytes,1,rep,name=sign_info_list,json=signInfoList,proto3" json:"sign_info_list,omitempty"`
}

func (x *ListSignInfoResponse) Reset() {
	*x = ListSignInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSignInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSignInfoResponse) ProtoMessage() {}

func (x *ListSignInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSignInfoResponse.ProtoReflect.Descriptor instead.
func (*ListSignInfoResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{65}
}

func (x *ListSignInfoResponse) GetSignInfoList() []*SignInfo {
	if x != nil {
		return x.SignInfoList
	}
	return nil
}

type ListXRPInitSignInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *ListXRPInitSignInfoRequest) Reset() {
	*x = ListXRPInitSignInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListXRPInitSignInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListXRPInitSignInfoRequest) ProtoMessage() {}

func (x *ListXRPInitSignInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListXRPInitSignInfoRequest.ProtoReflect.Descriptor instead.
func (*ListXRPInitSignInfoRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{66}
}

func (x *ListXRPInitSignInfoRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type ListXRPInitSignInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignInfoList []*SignInfo `protobuf:"bytes,1,rep,name=sign_info_list,json=signInfoList,proto3" json:"sign_info_list,omitempty"`
}

func (x *ListXRPInitSignInfoResponse) Reset() {
	*x = ListXRPInitSignInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListXRPInitSignInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListXRPInitSignInfoResponse) ProtoMessage() {}

func (x *ListXRPInitSignInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListXRPInitSignInfoResponse.ProtoReflect.Descriptor instead.
func (*ListXRPInitSignInfoResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{67}
}

func (x *ListXRPInitSignInfoResponse) GetSignInfoList() []*SignInfo {
	if x != nil {
		return x.SignInfoList
	}
	return nil
}

type ListInitSignInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *ListInitSignInfoRequest) Reset() {
	*x = ListInitSignInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInitSignInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInitSignInfoRequest) ProtoMessage() {}

func (x *ListInitSignInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInitSignInfoRequest.ProtoReflect.Descriptor instead.
func (*ListInitSignInfoRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{68}
}

func (x *ListInitSignInfoRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type ListTransfersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId  string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`    //The id of wallet
	PageSize  uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`   //indicate how many objects to return in a single response
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"` //retrieve the next page
}

func (x *ListTransfersRequest) Reset() {
	*x = ListTransfersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransfersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransfersRequest) ProtoMessage() {}

func (x *ListTransfersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransfersRequest.ProtoReflect.Descriptor instead.
func (*ListTransfersRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{69}
}

func (x *ListTransfersRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListTransfersRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTransfersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListTransfersByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterType ListFilterType `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3,enum=adamant.global.v1.ListFilterType" json:"filter_type,omitempty"`
	// optional
	TransferId string `protobuf:"bytes,2,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	// optional
	WalletId string `protobuf:"bytes,13,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// optional
	WalletName string `protobuf:"bytes,3,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	// optional
	AddressName string `protobuf:"bytes,4,opt,name=address_name,json=addressName,proto3" json:"address_name,omitempty"`
	// optional
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// optional
	Txid string `protobuf:"bytes,6,opt,name=txid,proto3" json:"txid,omitempty"`
	// optional
	WatchOnly bool `protobuf:"varint,12,opt,name=watch_only,json=watchOnly,proto3" json:"watch_only,omitempty"`
	// optional
	Coin       gincoincglobalv1.Coin `protobuf:"varint,7,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	WalletType []WalletType          `protobuf:"varint,8,rep,packed,name=wallet_type,json=walletType,proto3,enum=adamant.global.v1.WalletType" json:"wallet_type,omitempty"`
	// optional
	TransferType gincoincglobalv1.TransferType `protobuf:"varint,9,opt,name=transfer_type,json=transferType,proto3,enum=gincoinc.global.v1.TransferType" json:"transfer_type,omitempty"`
	// optional
	PageSize uint32 `protobuf:"varint,10,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// optional
	PageToken string `protobuf:"bytes,11,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// optional
	StartTime *timestamp.Timestamp `protobuf:"bytes,14,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// optional
	EndTime *timestamp.Timestamp `protobuf:"bytes,15,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *ListTransfersByFilterRequest) Reset() {
	*x = ListTransfersByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransfersByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransfersByFilterRequest) ProtoMessage() {}

func (x *ListTransfersByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransfersByFilterRequest.ProtoReflect.Descriptor instead.
func (*ListTransfersByFilterRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{70}
}

func (x *ListTransfersByFilterRequest) GetFilterType() ListFilterType {
	if x != nil {
		return x.FilterType
	}
	return ListFilterType_LIST_FILTER_TYPE_INVALID
}

func (x *ListTransfersByFilterRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *ListTransfersByFilterRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *ListTransfersByFilterRequest) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *ListTransfersByFilterRequest) GetAddressName() string {
	if x != nil {
		return x.AddressName
	}
	return ""
}

func (x *ListTransfersByFilterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ListTransfersByFilterRequest) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *ListTransfersByFilterRequest) GetWatchOnly() bool {
	if x != nil {
		return x.WatchOnly
	}
	return false
}

func (x *ListTransfersByFilterRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin_COIN_INVALID
}

func (x *ListTransfersByFilterRequest) GetWalletType() []WalletType {
	if x != nil {
		return x.WalletType
	}
	return nil
}

func (x *ListTransfersByFilterRequest) GetTransferType() gincoincglobalv1.TransferType {
	if x != nil {
		return x.TransferType
	}
	return gincoincglobalv1.TransferType_TRANSFER_TYPE_INVALID
}

func (x *ListTransfersByFilterRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTransfersByFilterRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListTransfersByFilterRequest) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListTransfersByFilterRequest) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type ListTransfersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transfers     []*Transfer `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`                                // Array of transfer objects
	NextPageToken string      `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"` // The token for requesting the next page
}

func (x *ListTransfersResponse) Reset() {
	*x = ListTransfersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransfersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransfersResponse) ProtoMessage() {}

func (x *ListTransfersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransfersResponse.ProtoReflect.Descriptor instead.
func (*ListTransfersResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{71}
}

func (x *ListTransfersResponse) GetTransfers() []*Transfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

func (x *ListTransfersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetRateSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateSnapshotId string `protobuf:"bytes,1,opt,name=rate_snapshot_id,json=rateSnapshotId,proto3" json:"rate_snapshot_id,omitempty"` // The id of rate-snapshot
}

func (x *GetRateSnapshotRequest) Reset() {
	*x = GetRateSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRateSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRateSnapshotRequest) ProtoMessage() {}

func (x *GetRateSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRateSnapshotRequest.ProtoReflect.Descriptor instead.
func (*GetRateSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{72}
}

func (x *GetRateSnapshotRequest) GetRateSnapshotId() string {
	if x != nil {
		return x.RateSnapshotId
	}
	return ""
}

type GetLatestRateSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLatestRateSnapshotRequest) Reset() {
	*x = GetLatestRateSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestRateSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestRateSnapshotRequest) ProtoMessage() {}

func (x *GetLatestRateSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestRateSnapshotRequest.ProtoReflect.Descriptor instead.
func (*GetLatestRateSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{73}
}

type SetRatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rates []*RequestRate `protobuf:"bytes,1,rep,name=rates,proto3" json:"rates,omitempty"` //Array of rate objects
}

func (x *SetRatesRequest) Reset() {
	*x = SetRatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRatesRequest) ProtoMessage() {}

func (x *SetRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRatesRequest.ProtoReflect.Descriptor instead.
func (*SetRatesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{74}
}

func (x *SetRatesRequest) GetRates() []*RequestRate {
	if x != nil {
		return x.Rates
	}
	return nil
}

type SetRatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateSnapshotId string `protobuf:"bytes,1,opt,name=rate_snapshot_id,json=rateSnapshotId,proto3" json:"rate_snapshot_id,omitempty"` //The id of rate-snapshot
}

func (x *SetRatesResponse) Reset() {
	*x = SetRatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRatesResponse) ProtoMessage() {}

func (x *SetRatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRatesResponse.ProtoReflect.Descriptor instead.
func (*SetRatesResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{75}
}

func (x *SetRatesResponse) GetRateSnapshotId() string {
	if x != nil {
		return x.RateSnapshotId
	}
	return ""
}

type GetSpendableBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId string `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *GetSpendableBalanceRequest) Reset() {
	*x = GetSpendableBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpendableBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpendableBalanceRequest) ProtoMessage() {}

func (x *GetSpendableBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpendableBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetSpendableBalanceRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{76}
}

func (x *GetSpendableBalanceRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type GetSpendableBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalSpendableBalance         float64 `protobuf:"fixed64,1,opt,name=total_spendable_balance,json=totalSpendableBalance,proto3" json:"total_spendable_balance,omitempty"`
	StringTotalSpendableBalance   string  `protobuf:"bytes,2,opt,name=string_total_spendable_balance,json=stringTotalSpendableBalance,proto3" json:"string_total_spendable_balance,omitempty"`
	DailySpendableBalance         float64 `protobuf:"fixed64,3,opt,name=daily_spendable_balance,json=dailySpendableBalance,proto3" json:"daily_spendable_balance,omitempty"`
	StringDailySpendableBalance   string  `protobuf:"bytes,4,opt,name=string_daily_spendable_balance,json=stringDailySpendableBalance,proto3" json:"string_daily_spendable_balance,omitempty"`
	HourlySpendableBalance        float64 `protobuf:"fixed64,5,opt,name=hourly_spendable_balance,json=hourlySpendableBalance,proto3" json:"hourly_spendable_balance,omitempty"`
	StringHourlySpendableBalance  string  `protobuf:"bytes,6,opt,name=string_hourly_spendable_balance,json=stringHourlySpendableBalance,proto3" json:"string_hourly_spendable_balance,omitempty"`
	OneTimeSpendableBalance       float64 `protobuf:"fixed64,7,opt,name=one_time_spendable_balance,json=oneTimeSpendableBalance,proto3" json:"one_time_spendable_balance,omitempty"`
	StringOneTimeSpendableBalance string  `protobuf:"bytes,8,opt,name=string_one_time_spendable_balance,json=stringOneTimeSpendableBalance,proto3" json:"string_one_time_spendable_balance,omitempty"`
}

func (x *GetSpendableBalanceResponse) Reset() {
	*x = GetSpendableBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpendableBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpendableBalanceResponse) ProtoMessage() {}

func (x *GetSpendableBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpendableBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetSpendableBalanceResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{77}
}

func (x *GetSpendableBalanceResponse) GetTotalSpendableBalance() float64 {
	if x != nil {
		return x.TotalSpendableBalance
	}
	return 0
}

func (x *GetSpendableBalanceResponse) GetStringTotalSpendableBalance() string {
	if x != nil {
		return x.StringTotalSpendableBalance
	}
	return ""
}

func (x *GetSpendableBalanceResponse) GetDailySpendableBalance() float64 {
	if x != nil {
		return x.DailySpendableBalance
	}
	return 0
}

func (x *GetSpendableBalanceResponse) GetStringDailySpendableBalance() string {
	if x != nil {
		return x.StringDailySpendableBalance
	}
	return ""
}

func (x *GetSpendableBalanceResponse) GetHourlySpendableBalance() float64 {
	if x != nil {
		return x.HourlySpendableBalance
	}
	return 0
}

func (x *GetSpendableBalanceResponse) GetStringHourlySpendableBalance() string {
	if x != nil {
		return x.StringHourlySpendableBalance
	}
	return ""
}

func (x *GetSpendableBalanceResponse) GetOneTimeSpendableBalance() float64 {
	if x != nil {
		return x.OneTimeSpendableBalance
	}
	return 0
}

func (x *GetSpendableBalanceResponse) GetStringOneTimeSpendableBalance() string {
	if x != nil {
		return x.StringOneTimeSpendableBalance
	}
	return ""
}

type GetTotalBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatchOnly bool `protobuf:"varint,1,opt,name=watch_only,json=watchOnly,proto3" json:"watch_only,omitempty"`
}

func (x *GetTotalBalanceRequest) Reset() {
	*x = GetTotalBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTotalBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTotalBalanceRequest) ProtoMessage() {}

func (x *GetTotalBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTotalBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetTotalBalanceRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{78}
}

func (x *GetTotalBalanceRequest) GetWatchOnly() bool {
	if x != nil {
		return x.WatchOnly
	}
	return false
}

type ListBalanceSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatchOnly bool                 `protobuf:"varint,3,opt,name=watch_only,json=watchOnly,proto3" json:"watch_only,omitempty"`
	StartTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *ListBalanceSnapshotsRequest) Reset() {
	*x = ListBalanceSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBalanceSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBalanceSnapshotsRequest) ProtoMessage() {}

func (x *ListBalanceSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBalanceSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*ListBalanceSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{79}
}

func (x *ListBalanceSnapshotsRequest) GetWatchOnly() bool {
	if x != nil {
		return x.WatchOnly
	}
	return false
}

func (x *ListBalanceSnapshotsRequest) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListBalanceSnapshotsRequest) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type ListBalanceSnapshotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BalanceSnapshots []*BalanceSnapshot `protobuf:"bytes,1,rep,name=balance_snapshots,json=balanceSnapshots,proto3" json:"balance_snapshots,omitempty"`
}

func (x *ListBalanceSnapshotsResponse) Reset() {
	*x = ListBalanceSnapshotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBalanceSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBalanceSnapshotsResponse) ProtoMessage() {}

func (x *ListBalanceSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBalanceSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*ListBalanceSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{80}
}

func (x *ListBalanceSnapshotsResponse) GetBalanceSnapshots() []*BalanceSnapshot {
	if x != nil {
		return x.BalanceSnapshots
	}
	return nil
}

type ListWalletBalanceSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIds []string             `protobuf:"bytes,1,rep,name=wallet_ids,json=walletIds,proto3" json:"wallet_ids,omitempty"`
	StartTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *ListWalletBalanceSnapshotsRequest) Reset() {
	*x = ListWalletBalanceSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletBalanceSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletBalanceSnapshotsRequest) ProtoMessage() {}

func (x *ListWalletBalanceSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletBalanceSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*ListWalletBalanceSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{81}
}

func (x *ListWalletBalanceSnapshotsRequest) GetWalletIds() []string {
	if x != nil {
		return x.WalletIds
	}
	return nil
}

func (x *ListWalletBalanceSnapshotsRequest) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListWalletBalanceSnapshotsRequest) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type ListWalletBalanceSnapshotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletBalanceSnapshotMap *WalletBalanceSnapshotMap `protobuf:"bytes,1,opt,name=wallet_balance_snapshot_map,json=walletBalanceSnapshotMap,proto3" json:"wallet_balance_snapshot_map,omitempty"`
}

func (x *ListWalletBalanceSnapshotsResponse) Reset() {
	*x = ListWalletBalanceSnapshotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletBalanceSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletBalanceSnapshotsResponse) ProtoMessage() {}

func (x *ListWalletBalanceSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletBalanceSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*ListWalletBalanceSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{82}
}

func (x *ListWalletBalanceSnapshotsResponse) GetWalletBalanceSnapshotMap() *WalletBalanceSnapshotMap {
	if x != nil {
		return x.WalletBalanceSnapshotMap
	}
	return nil
}

type ListTransferVolumeSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatchOnly bool                 `protobuf:"varint,1,opt,name=watch_only,json=watchOnly,proto3" json:"watch_only,omitempty"`
	StartTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *ListTransferVolumeSnapshotsRequest) Reset() {
	*x = ListTransferVolumeSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransferVolumeSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransferVolumeSnapshotsRequest) ProtoMessage() {}

func (x *ListTransferVolumeSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransferVolumeSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*ListTransferVolumeSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{83}
}

func (x *ListTransferVolumeSnapshotsRequest) GetWatchOnly() bool {
	if x != nil {
		return x.WatchOnly
	}
	return false
}

func (x *ListTransferVolumeSnapshotsRequest) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListTransferVolumeSnapshotsRequest) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type ListTransferVolumeSnapshotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferVolumeSnapshots *TransferVolumeSnapshots `protobuf:"bytes,1,opt,name=transfer_volume_snapshots,json=transferVolumeSnapshots,proto3" json:"transfer_volume_snapshots,omitempty"`
}

func (x *ListTransferVolumeSnapshotsResponse) Reset() {
	*x = ListTransferVolumeSnapshotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransferVolumeSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransferVolumeSnapshotsResponse) ProtoMessage() {}

func (x *ListTransferVolumeSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransferVolumeSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*ListTransferVolumeSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{84}
}

func (x *ListTransferVolumeSnapshotsResponse) GetTransferVolumeSnapshots() *TransferVolumeSnapshots {
	if x != nil {
		return x.TransferVolumeSnapshots
	}
	return nil
}

type ListWalletTransferVolumeSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIds []string             `protobuf:"bytes,1,rep,name=wallet_ids,json=walletIds,proto3" json:"wallet_ids,omitempty"`
	StartTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *ListWalletTransferVolumeSnapshotsRequest) Reset() {
	*x = ListWalletTransferVolumeSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletTransferVolumeSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletTransferVolumeSnapshotsRequest) ProtoMessage() {}

func (x *ListWalletTransferVolumeSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletTransferVolumeSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*ListWalletTransferVolumeSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{85}
}

func (x *ListWalletTransferVolumeSnapshotsRequest) GetWalletIds() []string {
	if x != nil {
		return x.WalletIds
	}
	return nil
}

func (x *ListWalletTransferVolumeSnapshotsRequest) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListWalletTransferVolumeSnapshotsRequest) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type ListWalletTransferVolumeSnapshotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletTransferVolumeSnapshots *WalletTransferVolumeSnapshots `protobuf:"bytes,1,opt,name=wallet_transfer_volume_snapshots,json=walletTransferVolumeSnapshots,proto3" json:"wallet_transfer_volume_snapshots,omitempty"`
}

func (x *ListWalletTransferVolumeSnapshotsResponse) Reset() {
	*x = ListWalletTransferVolumeSnapshotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWalletTransferVolumeSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWalletTransferVolumeSnapshotsResponse) ProtoMessage() {}

func (x *ListWalletTransferVolumeSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWalletTransferVolumeSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*ListWalletTransferVolumeSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{86}
}

func (x *ListWalletTransferVolumeSnapshotsResponse) GetWalletTransferVolumeSnapshots() *WalletTransferVolumeSnapshots {
	if x != nil {
		return x.WalletTransferVolumeSnapshots
	}
	return nil
}

type CalculateFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId       string             `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	FeeRate        uint64             `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	TxOutputs      []*RequestTxOutput `protobuf:"bytes,3,rep,name=tx_outputs,json=txOutputs,proto3" json:"tx_outputs,omitempty"`
	Address        string             `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	DestinationTag uint32             `protobuf:"varint,5,opt,name=destination_tag,json=destinationTag,proto3" json:"destination_tag,omitempty"`
	StringValue    string             `protobuf:"bytes,6,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
}

func (x *CalculateFeeRequest) Reset() {
	*x = CalculateFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateFeeRequest) ProtoMessage() {}

func (x *CalculateFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateFeeRequest.ProtoReflect.Descriptor instead.
func (*CalculateFeeRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{87}
}

func (x *CalculateFeeRequest) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *CalculateFeeRequest) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *CalculateFeeRequest) GetTxOutputs() []*RequestTxOutput {
	if x != nil {
		return x.TxOutputs
	}
	return nil
}

func (x *CalculateFeeRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CalculateFeeRequest) GetDestinationTag() uint32 {
	if x != nil {
		return x.DestinationTag
	}
	return 0
}

func (x *CalculateFeeRequest) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

type CalculateFeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fee       float64 `protobuf:"fixed64,1,opt,name=fee,proto3" json:"fee,omitempty"`
	StringFee string  `protobuf:"bytes,2,opt,name=string_fee,json=stringFee,proto3" json:"string_fee,omitempty"`
}

func (x *CalculateFeeResponse) Reset() {
	*x = CalculateFeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateFeeResponse) ProtoMessage() {}

func (x *CalculateFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateFeeResponse.ProtoReflect.Descriptor instead.
func (*CalculateFeeResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{88}
}

func (x *CalculateFeeResponse) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *CalculateFeeResponse) GetStringFee() string {
	if x != nil {
		return x.StringFee
	}
	return ""
}

type GetMembersDeactivatabilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMembersDeactivatabilitiesRequest) Reset() {
	*x = GetMembersDeactivatabilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMembersDeactivatabilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMembersDeactivatabilitiesRequest) ProtoMessage() {}

func (x *GetMembersDeactivatabilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMembersDeactivatabilitiesRequest.ProtoReflect.Descriptor instead.
func (*GetMembersDeactivatabilitiesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{89}
}

type GetMembersDeactivatabilitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deactivatabilities []*Deactivatability `protobuf:"bytes,1,rep,name=deactivatabilities,proto3" json:"deactivatabilities,omitempty"`
}

func (x *GetMembersDeactivatabilitiesResponse) Reset() {
	*x = GetMembersDeactivatabilitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMembersDeactivatabilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMembersDeactivatabilitiesResponse) ProtoMessage() {}

func (x *GetMembersDeactivatabilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMembersDeactivatabilitiesResponse.ProtoReflect.Descriptor instead.
func (*GetMembersDeactivatabilitiesResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{90}
}

func (x *GetMembersDeactivatabilitiesResponse) GetDeactivatabilities() []*Deactivatability {
	if x != nil {
		return x.Deactivatabilities
	}
	return nil
}

type GetRecommendedFeeRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin gincoincglobalv1.Coin `protobuf:"varint,1,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
}

func (x *GetRecommendedFeeRateRequest) Reset() {
	*x = GetRecommendedFeeRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecommendedFeeRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendedFeeRateRequest) ProtoMessage() {}

func (x *GetRecommendedFeeRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendedFeeRateRequest.ProtoReflect.Descriptor instead.
func (*GetRecommendedFeeRateRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{91}
}

func (x *GetRecommendedFeeRateRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin_COIN_INVALID
}

type GetRecommendedFeeRateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fastest uint64 `protobuf:"varint,1,opt,name=fastest,proto3" json:"fastest,omitempty"`
	Fast    uint64 `protobuf:"varint,2,opt,name=fast,proto3" json:"fast,omitempty"`
	Average uint64 `protobuf:"varint,3,opt,name=average,proto3" json:"average,omitempty"`
	SafeLow uint64 `protobuf:"varint,4,opt,name=safe_low,json=safeLow,proto3" json:"safe_low,omitempty"`
}

func (x *GetRecommendedFeeRateResponse) Reset() {
	*x = GetRecommendedFeeRateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecommendedFeeRateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendedFeeRateResponse) ProtoMessage() {}

func (x *GetRecommendedFeeRateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendedFeeRateResponse.ProtoReflect.Descriptor instead.
func (*GetRecommendedFeeRateResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{92}
}

func (x *GetRecommendedFeeRateResponse) GetFastest() uint64 {
	if x != nil {
		return x.Fastest
	}
	return 0
}

func (x *GetRecommendedFeeRateResponse) GetFast() uint64 {
	if x != nil {
		return x.Fast
	}
	return 0
}

func (x *GetRecommendedFeeRateResponse) GetAverage() uint64 {
	if x != nil {
		return x.Average
	}
	return 0
}

func (x *GetRecommendedFeeRateResponse) GetSafeLow() uint64 {
	if x != nil {
		return x.SafeLow
	}
	return 0
}

type ValidateAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin    gincoincglobalv1.Coin `protobuf:"varint,1,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"` // The type of coin
	Address string                `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`                         // The address string to be validated
}

func (x *ValidateAddressRequest) Reset() {
	*x = ValidateAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateAddressRequest) ProtoMessage() {}

func (x *ValidateAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateAddressRequest.ProtoReflect.Descriptor instead.
func (*ValidateAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{93}
}

func (x *ValidateAddressRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin_COIN_INVALID
}

func (x *ValidateAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ValidateAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"` // The flag which indicates given address is valid or not
}

func (x *ValidateAddressResponse) Reset() {
	*x = ValidateAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateAddressResponse) ProtoMessage() {}

func (x *ValidateAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateAddressResponse.ProtoReflect.Descriptor instead.
func (*ValidateAddressResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{94}
}

func (x *ValidateAddressResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type ListConfirmationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListConfirmationsRequest) Reset() {
	*x = ListConfirmationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfirmationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfirmationsRequest) ProtoMessage() {}

func (x *ListConfirmationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfirmationsRequest.ProtoReflect.Descriptor instead.
func (*ListConfirmationsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{95}
}

type ListConfirmationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Confirmations []*Confirmation `protobuf:"bytes,1,rep,name=confirmations,proto3" json:"confirmations,omitempty"`
}

func (x *ListConfirmationsResponse) Reset() {
	*x = ListConfirmationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfirmationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfirmationsResponse) ProtoMessage() {}

func (x *ListConfirmationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfirmationsResponse.ProtoReflect.Descriptor instead.
func (*ListConfirmationsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{96}
}

func (x *ListConfirmationsResponse) GetConfirmations() []*Confirmation {
	if x != nil {
		return x.Confirmations
	}
	return nil
}

type CreateLabeledAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Coin    gincoincglobalv1.Coin `protobuf:"varint,2,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	Address string                `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CreateLabeledAddressRequest) Reset() {
	*x = CreateLabeledAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLabeledAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLabeledAddressRequest) ProtoMessage() {}

func (x *CreateLabeledAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLabeledAddressRequest.ProtoReflect.Descriptor instead.
func (*CreateLabeledAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{97}
}

func (x *CreateLabeledAddressRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateLabeledAddressRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin_COIN_INVALID
}

func (x *CreateLabeledAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type CreateLabeledAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabeledAddressId string `protobuf:"bytes,1,opt,name=labeled_address_id,json=labeledAddressId,proto3" json:"labeled_address_id,omitempty"`
}

func (x *CreateLabeledAddressResponse) Reset() {
	*x = CreateLabeledAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLabeledAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLabeledAddressResponse) ProtoMessage() {}

func (x *CreateLabeledAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLabeledAddressResponse.ProtoReflect.Descriptor instead.
func (*CreateLabeledAddressResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{98}
}

func (x *CreateLabeledAddressResponse) GetLabeledAddressId() string {
	if x != nil {
		return x.LabeledAddressId
	}
	return ""
}

type UpdateLabeledAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabeledAddressId string                `protobuf:"bytes,1,opt,name=labeled_address_id,json=labeledAddressId,proto3" json:"labeled_address_id,omitempty"`
	Name             string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Coin             gincoincglobalv1.Coin `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	Address          string                `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *UpdateLabeledAddressRequest) Reset() {
	*x = UpdateLabeledAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLabeledAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabeledAddressRequest) ProtoMessage() {}

func (x *UpdateLabeledAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabeledAddressRequest.ProtoReflect.Descriptor instead.
func (*UpdateLabeledAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{99}
}

func (x *UpdateLabeledAddressRequest) GetLabeledAddressId() string {
	if x != nil {
		return x.LabeledAddressId
	}
	return ""
}

func (x *UpdateLabeledAddressRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateLabeledAddressRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin_COIN_INVALID
}

func (x *UpdateLabeledAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetLabeledAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabeledAddressId string `protobuf:"bytes,1,opt,name=labeled_address_id,json=labeledAddressId,proto3" json:"labeled_address_id,omitempty"`
}

func (x *GetLabeledAddressRequest) Reset() {
	*x = GetLabeledAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabeledAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabeledAddressRequest) ProtoMessage() {}

func (x *GetLabeledAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabeledAddressRequest.ProtoReflect.Descriptor instead.
func (*GetLabeledAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{100}
}

func (x *GetLabeledAddressRequest) GetLabeledAddressId() string {
	if x != nil {
		return x.LabeledAddressId
	}
	return ""
}

type ListLabeledAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListLabeledAddressesRequest) Reset() {
	*x = ListLabeledAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLabeledAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabeledAddressesRequest) ProtoMessage() {}

func (x *ListLabeledAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabeledAddressesRequest.ProtoReflect.Descriptor instead.
func (*ListLabeledAddressesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{101}
}

type ListLabeledAddressesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []*LabeledAddress `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *ListLabeledAddressesResponse) Reset() {
	*x = ListLabeledAddressesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLabeledAddressesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabeledAddressesResponse) ProtoMessage() {}

func (x *ListLabeledAddressesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabeledAddressesResponse.ProtoReflect.Descriptor instead.
func (*ListLabeledAddressesResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{102}
}

func (x *ListLabeledAddressesResponse) GetAddresses() []*LabeledAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type DeleteLabeledAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabeledAddressId string `protobuf:"bytes,1,opt,name=labeled_address_id,json=labeledAddressId,proto3" json:"labeled_address_id,omitempty"`
}

func (x *DeleteLabeledAddressRequest) Reset() {
	*x = DeleteLabeledAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLabeledAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLabeledAddressRequest) ProtoMessage() {}

func (x *DeleteLabeledAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLabeledAddressRequest.ProtoReflect.Descriptor instead.
func (*DeleteLabeledAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{103}
}

func (x *DeleteLabeledAddressRequest) GetLabeledAddressId() string {
	if x != nil {
		return x.LabeledAddressId
	}
	return ""
}

type ReviewLabeledAddressProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabeledAddressId string `protobuf:"bytes,1,opt,name=labeled_address_id,json=labeledAddressId,proto3" json:"labeled_address_id,omitempty"`
	Approve          bool   `protobuf:"varint,2,opt,name=approve,proto3" json:"approve,omitempty"`
}

func (x *ReviewLabeledAddressProposalRequest) Reset() {
	*x = ReviewLabeledAddressProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewLabeledAddressProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewLabeledAddressProposalRequest) ProtoMessage() {}

func (x *ReviewLabeledAddressProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewLabeledAddressProposalRequest.ProtoReflect.Descriptor instead.
func (*ReviewLabeledAddressProposalRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{104}
}

func (x *ReviewLabeledAddressProposalRequest) GetLabeledAddressId() string {
	if x != nil {
		return x.LabeledAddressId
	}
	return ""
}

func (x *ReviewLabeledAddressProposalRequest) GetApprove() bool {
	if x != nil {
		return x.Approve
	}
	return false
}

type CreateWhitelistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Coin       gincoincglobalv1.Coin `protobuf:"varint,2,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	AddressIds []string              `protobuf:"bytes,3,rep,name=address_ids,json=addressIds,proto3" json:"address_ids,omitempty"`
}

func (x *CreateWhitelistRequest) Reset() {
	*x = CreateWhitelistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWhitelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWhitelistRequest) ProtoMessage() {}

func (x *CreateWhitelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWhitelistRequest.ProtoReflect.Descriptor instead.
func (*CreateWhitelistRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{105}
}

func (x *CreateWhitelistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateWhitelistRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin_COIN_INVALID
}

func (x *CreateWhitelistRequest) GetAddressIds() []string {
	if x != nil {
		return x.AddressIds
	}
	return nil
}

type CreateWhitelistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhitelistId string `protobuf:"bytes,1,opt,name=whitelist_id,json=whitelistId,proto3" json:"whitelist_id,omitempty"`
}

func (x *CreateWhitelistResponse) Reset() {
	*x = CreateWhitelistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWhitelistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWhitelistResponse) ProtoMessage() {}

func (x *CreateWhitelistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWhitelistResponse.ProtoReflect.Descriptor instead.
func (*CreateWhitelistResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{106}
}

func (x *CreateWhitelistResponse) GetWhitelistId() string {
	if x != nil {
		return x.WhitelistId
	}
	return ""
}

type GetWhitelistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhitelistId string `protobuf:"bytes,1,opt,name=whitelist_id,json=whitelistId,proto3" json:"whitelist_id,omitempty"`
}

func (x *GetWhitelistRequest) Reset() {
	*x = GetWhitelistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWhitelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWhitelistRequest) ProtoMessage() {}

func (x *GetWhitelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWhitelistRequest.ProtoReflect.Descriptor instead.
func (*GetWhitelistRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{107}
}

func (x *GetWhitelistRequest) GetWhitelistId() string {
	if x != nil {
		return x.WhitelistId
	}
	return ""
}

type ListWhitelistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListWhitelistsRequest) Reset() {
	*x = ListWhitelistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWhitelistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWhitelistsRequest) ProtoMessage() {}

func (x *ListWhitelistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWhitelistsRequest.ProtoReflect.Descriptor instead.
func (*ListWhitelistsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{108}
}

type ListWhitelistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Whitelists []*Whitelist `protobuf:"bytes,1,rep,name=whitelists,proto3" json:"whitelists,omitempty"`
}

func (x *ListWhitelistsResponse) Reset() {
	*x = ListWhitelistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWhitelistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWhitelistsResponse) ProtoMessage() {}

func (x *ListWhitelistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWhitelistsResponse.ProtoReflect.Descriptor instead.
func (*ListWhitelistsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{109}
}

func (x *ListWhitelistsResponse) GetWhitelists() []*Whitelist {
	if x != nil {
		return x.Whitelists
	}
	return nil
}

type UpdateWhitelistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhitelistId string                `protobuf:"bytes,1,opt,name=whitelist_id,json=whitelistId,proto3" json:"whitelist_id,omitempty"`
	Name        string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Coin        gincoincglobalv1.Coin `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	AddressIds  []string              `protobuf:"bytes,4,rep,name=address_ids,json=addressIds,proto3" json:"address_ids,omitempty"`
}

func (x *UpdateWhitelistRequest) Reset() {
	*x = UpdateWhitelistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWhitelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWhitelistRequest) ProtoMessage() {}

func (x *UpdateWhitelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWhitelistRequest.ProtoReflect.Descriptor instead.
func (*UpdateWhitelistRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{110}
}

func (x *UpdateWhitelistRequest) GetWhitelistId() string {
	if x != nil {
		return x.WhitelistId
	}
	return ""
}

func (x *UpdateWhitelistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateWhitelistRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin_COIN_INVALID
}

func (x *UpdateWhitelistRequest) GetAddressIds() []string {
	if x != nil {
		return x.AddressIds
	}
	return nil
}

type UpdateWhitelistAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhitelistId string   `protobuf:"bytes,1,opt,name=whitelist_id,json=whitelistId,proto3" json:"whitelist_id,omitempty"`
	AddressIds  []string `protobuf:"bytes,2,rep,name=address_ids,json=addressIds,proto3" json:"address_ids,omitempty"`
}

func (x *UpdateWhitelistAddressesRequest) Reset() {
	*x = UpdateWhitelistAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWhitelistAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWhitelistAddressesRequest) ProtoMessage() {}

func (x *UpdateWhitelistAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWhitelistAddressesRequest.ProtoReflect.Descriptor instead.
func (*UpdateWhitelistAddressesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{111}
}

func (x *UpdateWhitelistAddressesRequest) GetWhitelistId() string {
	if x != nil {
		return x.WhitelistId
	}
	return ""
}

func (x *UpdateWhitelistAddressesRequest) GetAddressIds() []string {
	if x != nil {
		return x.AddressIds
	}
	return nil
}

type DeleteWhitelistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhitelistId string `protobuf:"bytes,1,opt,name=whitelist_id,json=whitelistId,proto3" json:"whitelist_id,omitempty"`
}

func (x *DeleteWhitelistRequest) Reset() {
	*x = DeleteWhitelistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWhitelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWhitelistRequest) ProtoMessage() {}

func (x *DeleteWhitelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWhitelistRequest.ProtoReflect.Descriptor instead.
func (*DeleteWhitelistRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{112}
}

func (x *DeleteWhitelistRequest) GetWhitelistId() string {
	if x != nil {
		return x.WhitelistId
	}
	return ""
}

type CreateTransferLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Coin           gincoincglobalv1.Coin        `protobuf:"varint,2,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	TransferLimits []*RequestTransferLimitEntry `protobuf:"bytes,3,rep,name=transfer_limits,json=transferLimits,proto3" json:"transfer_limits,omitempty"`
}

func (x *CreateTransferLimitRequest) Reset() {
	*x = CreateTransferLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransferLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransferLimitRequest) ProtoMessage() {}

func (x *CreateTransferLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransferLimitRequest.ProtoReflect.Descriptor instead.
func (*CreateTransferLimitRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{113}
}

func (x *CreateTransferLimitRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTransferLimitRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin_COIN_INVALID
}

func (x *CreateTransferLimitRequest) GetTransferLimits() []*RequestTransferLimitEntry {
	if x != nil {
		return x.TransferLimits
	}
	return nil
}

type CreateTransferLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferLimitId string `protobuf:"bytes,1,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
}

func (x *CreateTransferLimitResponse) Reset() {
	*x = CreateTransferLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransferLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransferLimitResponse) ProtoMessage() {}

func (x *CreateTransferLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransferLimitResponse.ProtoReflect.Descriptor instead.
func (*CreateTransferLimitResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{114}
}

func (x *CreateTransferLimitResponse) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

type GetTransferLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferLimitId string `protobuf:"bytes,1,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
}

func (x *GetTransferLimitRequest) Reset() {
	*x = GetTransferLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransferLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferLimitRequest) ProtoMessage() {}

func (x *GetTransferLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferLimitRequest.ProtoReflect.Descriptor instead.
func (*GetTransferLimitRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{115}
}

func (x *GetTransferLimitRequest) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

type ListTransferLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTransferLimitsRequest) Reset() {
	*x = ListTransferLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransferLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransferLimitsRequest) ProtoMessage() {}

func (x *ListTransferLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransferLimitsRequest.ProtoReflect.Descriptor instead.
func (*ListTransferLimitsRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{116}
}

type ListTransferLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferLimits []*TransferLimit `protobuf:"bytes,1,rep,name=transfer_limits,json=transferLimits,proto3" json:"transfer_limits,omitempty"`
}

func (x *ListTransferLimitsResponse) Reset() {
	*x = ListTransferLimitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransferLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransferLimitsResponse) ProtoMessage() {}

func (x *ListTransferLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransferLimitsResponse.ProtoReflect.Descriptor instead.
func (*ListTransferLimitsResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{117}
}

func (x *ListTransferLimitsResponse) GetTransferLimits() []*TransferLimit {
	if x != nil {
		return x.TransferLimits
	}
	return nil
}

type UpdateTransferLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferLimitId string                       `protobuf:"bytes,1,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
	TransferLimits  []*RequestTransferLimitEntry `protobuf:"bytes,2,rep,name=transfer_limits,json=transferLimits,proto3" json:"transfer_limits,omitempty"`
}

func (x *UpdateTransferLimitRequest) Reset() {
	*x = UpdateTransferLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTransferLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransferLimitRequest) ProtoMessage() {}

func (x *UpdateTransferLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransferLimitRequest.ProtoReflect.Descriptor instead.
func (*UpdateTransferLimitRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{118}
}

func (x *UpdateTransferLimitRequest) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

func (x *UpdateTransferLimitRequest) GetTransferLimits() []*RequestTransferLimitEntry {
	if x != nil {
		return x.TransferLimits
	}
	return nil
}

type UpdateTransferLimitNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferLimitId string `protobuf:"bytes,1,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateTransferLimitNameRequest) Reset() {
	*x = UpdateTransferLimitNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTransferLimitNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransferLimitNameRequest) ProtoMessage() {}

func (x *UpdateTransferLimitNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransferLimitNameRequest.ProtoReflect.Descriptor instead.
func (*UpdateTransferLimitNameRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{119}
}

func (x *UpdateTransferLimitNameRequest) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

func (x *UpdateTransferLimitNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteTransferLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferLimitId string `protobuf:"bytes,1,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
}

func (x *DeleteTransferLimitRequest) Reset() {
	*x = DeleteTransferLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTransferLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTransferLimitRequest) ProtoMessage() {}

func (x *DeleteTransferLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTransferLimitRequest.ProtoReflect.Descriptor instead.
func (*DeleteTransferLimitRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{120}
}

func (x *DeleteTransferLimitRequest) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

type ReviewTransferLimitProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferLimitId string `protobuf:"bytes,1,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
	Approve         bool   `protobuf:"varint,2,opt,name=approve,proto3" json:"approve,omitempty"`
}

func (x *ReviewTransferLimitProposalRequest) Reset() {
	*x = ReviewTransferLimitProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewTransferLimitProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewTransferLimitProposalRequest) ProtoMessage() {}

func (x *ReviewTransferLimitProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewTransferLimitProposalRequest.ProtoReflect.Descriptor instead.
func (*ReviewTransferLimitProposalRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{121}
}

func (x *ReviewTransferLimitProposalRequest) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

func (x *ReviewTransferLimitProposalRequest) GetApprove() bool {
	if x != nil {
		return x.Approve
	}
	return false
}

type CreatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Coin            gincoincglobalv1.Coin `protobuf:"varint,3,opt,name=coin,proto3,enum=gincoinc.global.v1.Coin" json:"coin,omitempty"`
	Type            PolicyType            `protobuf:"varint,4,opt,name=type,proto3,enum=adamant.global.v1.PolicyType" json:"type,omitempty"`
	WhitelistId     string                `protobuf:"bytes,5,opt,name=whitelist_id,json=whitelistId,proto3" json:"whitelist_id,omitempty"`
	TransferLimitId string                `protobuf:"bytes,6,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
}

func (x *CreatePolicyRequest) Reset() {
	*x = CreatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicyRequest) ProtoMessage() {}

func (x *CreatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicyRequest.ProtoReflect.Descriptor instead.
func (*CreatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{122}
}

func (x *CreatePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePolicyRequest) GetCoin() gincoincglobalv1.Coin {
	if x != nil {
		return x.Coin
	}
	return gincoincglobalv1.Coin_COIN_INVALID
}

func (x *CreatePolicyRequest) GetType() PolicyType {
	if x != nil {
		return x.Type
	}
	return PolicyType_POLICY_TYPE_INVALID
}

func (x *CreatePolicyRequest) GetWhitelistId() string {
	if x != nil {
		return x.WhitelistId
	}
	return ""
}

func (x *CreatePolicyRequest) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

type CreatePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
}

func (x *CreatePolicyResponse) Reset() {
	*x = CreatePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicyResponse) ProtoMessage() {}

func (x *CreatePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicyResponse.ProtoReflect.Descriptor instead.
func (*CreatePolicyResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{123}
}

func (x *CreatePolicyResponse) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type GetPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
}

func (x *GetPolicyRequest) Reset() {
	*x = GetPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyRequest) ProtoMessage() {}

func (x *GetPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetPolicyRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{124}
}

func (x *GetPolicyRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type ListPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListPoliciesRequest) Reset() {
	*x = ListPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesRequest) ProtoMessage() {}

func (x *ListPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{125}
}

type IsDeletablePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
}

func (x *IsDeletablePolicyRequest) Reset() {
	*x = IsDeletablePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeletablePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeletablePolicyRequest) ProtoMessage() {}

func (x *IsDeletablePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeletablePolicyRequest.ProtoReflect.Descriptor instead.
func (*IsDeletablePolicyRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{126}
}

func (x *IsDeletablePolicyRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type IsDeletablePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDeletable bool `protobuf:"varint,1,opt,name=is_deletable,json=isDeletable,proto3" json:"is_deletable,omitempty"`
}

func (x *IsDeletablePolicyResponse) Reset() {
	*x = IsDeletablePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeletablePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeletablePolicyResponse) ProtoMessage() {}

func (x *IsDeletablePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeletablePolicyResponse.ProtoReflect.Descriptor instead.
func (*IsDeletablePolicyResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{127}
}

func (x *IsDeletablePolicyResponse) GetIsDeletable() bool {
	if x != nil {
		return x.IsDeletable
	}
	return false
}

type IsDeletableLabeledAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabeledAddressId string `protobuf:"bytes,1,opt,name=labeled_address_id,json=labeledAddressId,proto3" json:"labeled_address_id,omitempty"`
}

func (x *IsDeletableLabeledAddressRequest) Reset() {
	*x = IsDeletableLabeledAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeletableLabeledAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeletableLabeledAddressRequest) ProtoMessage() {}

func (x *IsDeletableLabeledAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeletableLabeledAddressRequest.ProtoReflect.Descriptor instead.
func (*IsDeletableLabeledAddressRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{128}
}

func (x *IsDeletableLabeledAddressRequest) GetLabeledAddressId() string {
	if x != nil {
		return x.LabeledAddressId
	}
	return ""
}

type IsDeletableLabeledAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDeletable bool `protobuf:"varint,1,opt,name=is_deletable,json=isDeletable,proto3" json:"is_deletable,omitempty"`
}

func (x *IsDeletableLabeledAddressResponse) Reset() {
	*x = IsDeletableLabeledAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeletableLabeledAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeletableLabeledAddressResponse) ProtoMessage() {}

func (x *IsDeletableLabeledAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeletableLabeledAddressResponse.ProtoReflect.Descriptor instead.
func (*IsDeletableLabeledAddressResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{129}
}

func (x *IsDeletableLabeledAddressResponse) GetIsDeletable() bool {
	if x != nil {
		return x.IsDeletable
	}
	return false
}

type IsDeletableWhitelistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhitelistId string `protobuf:"bytes,1,opt,name=whitelist_id,json=whitelistId,proto3" json:"whitelist_id,omitempty"`
}

func (x *IsDeletableWhitelistRequest) Reset() {
	*x = IsDeletableWhitelistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeletableWhitelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeletableWhitelistRequest) ProtoMessage() {}

func (x *IsDeletableWhitelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeletableWhitelistRequest.ProtoReflect.Descriptor instead.
func (*IsDeletableWhitelistRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{130}
}

func (x *IsDeletableWhitelistRequest) GetWhitelistId() string {
	if x != nil {
		return x.WhitelistId
	}
	return ""
}

type IsDeletableWhitelistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDeletable bool `protobuf:"varint,1,opt,name=is_deletable,json=isDeletable,proto3" json:"is_deletable,omitempty"`
}

func (x *IsDeletableWhitelistResponse) Reset() {
	*x = IsDeletableWhitelistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeletableWhitelistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeletableWhitelistResponse) ProtoMessage() {}

func (x *IsDeletableWhitelistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeletableWhitelistResponse.ProtoReflect.Descriptor instead.
func (*IsDeletableWhitelistResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{131}
}

func (x *IsDeletableWhitelistResponse) GetIsDeletable() bool {
	if x != nil {
		return x.IsDeletable
	}
	return false
}

type IsDeletableTransferLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferLimitId string `protobuf:"bytes,1,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
}

func (x *IsDeletableTransferLimitRequest) Reset() {
	*x = IsDeletableTransferLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeletableTransferLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeletableTransferLimitRequest) ProtoMessage() {}

func (x *IsDeletableTransferLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeletableTransferLimitRequest.ProtoReflect.Descriptor instead.
func (*IsDeletableTransferLimitRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{132}
}

func (x *IsDeletableTransferLimitRequest) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

type IsDeletableTransferLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDeletable bool `protobuf:"varint,1,opt,name=is_deletable,json=isDeletable,proto3" json:"is_deletable,omitempty"`
}

func (x *IsDeletableTransferLimitResponse) Reset() {
	*x = IsDeletableTransferLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeletableTransferLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeletableTransferLimitResponse) ProtoMessage() {}

func (x *IsDeletableTransferLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeletableTransferLimitResponse.ProtoReflect.Descriptor instead.
func (*IsDeletableTransferLimitResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{133}
}

func (x *IsDeletableTransferLimitResponse) GetIsDeletable() bool {
	if x != nil {
		return x.IsDeletable
	}
	return false
}

type ListPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *ListPoliciesResponse) Reset() {
	*x = ListPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesResponse) ProtoMessage() {}

func (x *ListPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{134}
}

func (x *ListPoliciesResponse) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type UpdatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId        string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	WhitelistId     string `protobuf:"bytes,3,opt,name=whitelist_id,json=whitelistId,proto3" json:"whitelist_id,omitempty"`
	TransferLimitId string `protobuf:"bytes,4,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
}

func (x *UpdatePolicyRequest) Reset() {
	*x = UpdatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePolicyRequest) ProtoMessage() {}

func (x *UpdatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{135}
}

func (x *UpdatePolicyRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *UpdatePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePolicyRequest) GetWhitelistId() string {
	if x != nil {
		return x.WhitelistId
	}
	return ""
}

func (x *UpdatePolicyRequest) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

type DeletePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
}

func (x *DeletePolicyRequest) Reset() {
	*x = DeletePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePolicyRequest) ProtoMessage() {}

func (x *DeletePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePolicyRequest.ProtoReflect.Descriptor instead.
func (*DeletePolicyRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{136}
}

func (x *DeletePolicyRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type ReviewPolicyProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Approve  bool   `protobuf:"varint,2,opt,name=approve,proto3" json:"approve,omitempty"`
}

func (x *ReviewPolicyProposalRequest) Reset() {
	*x = ReviewPolicyProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewPolicyProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewPolicyProposalRequest) ProtoMessage() {}

func (x *ReviewPolicyProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewPolicyProposalRequest.ProtoReflect.Descriptor instead.
func (*ReviewPolicyProposalRequest) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP(), []int{137}
}

func (x *ReviewPolicyProposalRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *ReviewPolicyProposalRequest) GetApprove() bool {
	if x != nil {
		return x.Approve
	}
	return false
}

var File_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto protoreflect.FileDescriptor

var file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e,
	0x63, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x69, 0x6e, 0x63,
	0x6f, 0x69, 0x6e, 0x63, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e,
	0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36,
	0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0xfb, 0x01, 0x0a, 0x19, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49,
	0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49,
	0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xbd, 0x06, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14,
	0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e,
	0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00,
	0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82,
	0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f,
	0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01,
	0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x01, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x2a, 0x04, 0x18, 0x05, 0x28, 0x01, 0x52, 0x01, 0x6d, 0x12, 0x17, 0x0a, 0x01, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x05, 0x28,
	0x01, 0x52, 0x01, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0xfa,
	0x42, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6c, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c,
	0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39,
	0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e,
	0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x7b, 0x0a, 0x11, 0x69,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e,
	0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x7d, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32,
	0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x24,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x73, 0x22, 0x6a, 0x0a, 0x25, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x22,
	0x80, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72,
	0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c,
	0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39,
	0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x55, 0x6e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32,
	0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa,
	0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45,
	0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55,
	0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d,
	0x24, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa0, 0x04, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0b, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52,
	0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x18, 0x14, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63,
	0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02,
	0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42,
	0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52,
	0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x5d, 0x7b,
	0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x72, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5c, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72,
	0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xc8, 0x02, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x7d,
	0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x51, 0xfa, 0x42, 0x4e, 0x92, 0x01,
	0x4b, 0x22, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39,
	0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0f, 0x6e, 0x65,
	0x77, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x12, 0x3d, 0x0a,
	0x1b, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x18, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf1, 0x01, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa,
	0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61,
	0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32,
	0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64,
	0x22, 0xa2, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x22, 0x2f, 0x0a, 0x19, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x1a, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x80, 0x01, 0x0a,
	0x13, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22,
	0x66, 0x0a, 0x14, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x7c, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x15, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x13, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69,
	0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69,
	0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52,
	0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x19, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x77, 0x0a, 0x24,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x65, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x65, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x65, 0x65, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d,
	0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38,
	0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x40, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x2c, 0x0a, 0x13, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x36, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0xeb,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x6b, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c,
	0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39,
	0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x19,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47,
	0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xb2, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c,
	0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39,
	0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x9b, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69,
	0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52,
	0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6d, 0x69,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x6f, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24, 0x7c,
	0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e,
	0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33, 0x34, 0x35,
	0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x79, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8c,
	0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31,
	0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x67, 0x0a,
	0x20, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47,
	0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x22,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31,
	0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x6f, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32,
	0x2b, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a,
	0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a,
	0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x46, 0x65,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x99, 0x01, 0x0a, 0x2c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42,
	0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0xc9, 0x02, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49,
	0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x41,
	0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x78,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x09, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x42, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x20,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x52, 0x50, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d,
	0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38,
	0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0xfa, 0x02, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31,
	0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x73, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31,
	0x32, 0x7d, 0x24, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0xfa, 0x42, 0x15, 0x72, 0x13, 0x32, 0x11, 0x5e, 0x24, 0x7c, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x36, 0x34, 0x7d, 0x24, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8a, 0x02, 0x0a, 0x1e, 0x53, 0x69, 0x67, 0x6e, 0x58, 0x52, 0x50,
	0x49, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72,
	0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x36, 0x34, 0x7d, 0x24, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x4f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x86, 0x02, 0x0a, 0x1a, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xfa, 0x42, 0x12,
	0x72, 0x10, 0x32, 0x0e, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x36, 0x34,
	0x7d, 0x24, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0b, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf8, 0x01, 0x0a, 0x16, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32,
	0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x73, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32,
	0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x78, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x6e, 0x64, 0x58, 0x52,
	0x50, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49,
	0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x1f, 0x53, 0x65, 0x6e, 0x64, 0x58, 0x52, 0x50, 0x49, 0x6e,
	0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x49, 0x64, 0x73, 0x22, 0x87, 0x01,
	0x0a, 0x1a, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d,
	0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38,
	0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x1b, 0x53, 0x65, 0x6e, 0x64, 0x49,
	0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x49, 0x64, 0x73, 0x22, 0xfa, 0x01,
	0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa,
	0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61,
	0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa,
	0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61,
	0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x73, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x78, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0xfa, 0x42, 0x1a, 0x72, 0x18, 0x32, 0x16, 0x5e, 0x28, 0x30, 0x78, 0x29, 0x3f, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x36, 0x34, 0x7d, 0x24, 0x52, 0x04, 0x74,
	0x78, 0x49, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x6c, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31,
	0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b,
	0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b,
	0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32,
	0x33, 0x34, 0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xdf, 0x04, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0b, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x14, 0x52,
	0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0c, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x14, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x3e, 0x0a,
	0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d,
	0x32, 0x2b, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
	0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
	0x5a, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xf4, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49,
	0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49,
	0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x59, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73,
	0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x58, 0x52, 0x50, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa,
	0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61,
	0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x58, 0x52, 0x50,
	0x49, 0x6e, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0xfd,
	0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72,
	0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61,
	0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18,
	0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x41, 0x42, 0x43,
	0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53,
	0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x5d, 0x7b, 0x31,
	0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x83,
	0x06, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4e, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10,
	0x01, 0x20, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x14, 0x52, 0x0a, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x18, 0x14, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x51, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x2b, 0x5e, 0x24, 0x7c, 0x5e,
	0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x32, 0x33, 0x34, 0x35, 0x36,
	0x37, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x90, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x10, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31,
	0x32, 0x7d, 0x24, 0x52, 0x0e, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x10,
	0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42,
	0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62,
	0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x22, 0x9f, 0x04, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x1e,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x15, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x38,
	0x0a, 0x18, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x16, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x3b, 0x0a, 0x1a, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x17, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x21,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f,
	0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x37, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x22,
	0xae, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x6f, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x10, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x22, 0x87, 0x02, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x51, 0xfa, 0x42, 0x4e,
	0x92, 0x01, 0x4b, 0x22, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x22,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6a, 0x0a, 0x1b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x4d, 0x61, 0x70, 0x52, 0x18, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x70, 0x22, 0xc9,
	0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x23, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x66, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0xa2, 0x02, 0x0a, 0x28, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x51, 0xfa, 0x42, 0x4e,
	0x92, 0x01, 0x4b, 0x22, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01,
	0x02, 0x08, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xa6, 0x01, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a,
	0x20, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x1d, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0xcd, 0x02, 0x0a, 0x13, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x66,
	0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x32, 0x02, 0x28, 0x01, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x41, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x09, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x47, 0x0a, 0x14, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66,
	0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x65,
	0x65, 0x22, 0x25, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x44,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7b, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x53, 0x0a, 0x12, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x12, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22,
	0x82, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x66, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x61, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x66,
	0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x61, 0x66,
	0x65, 0x4c, 0x6f, 0x77, 0x22, 0x75, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67,
	0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01,
	0x20, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x19, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2f, 0x0a, 0x17, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x99, 0x01, 0x0a,
	0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63,
	0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x19, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4c, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x95, 0x02, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x12, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65,
	0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24,
	0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01,
	0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x19, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x96,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x12, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x12, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d,
	0x24, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x12, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x22, 0x9c, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63,
	0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92,
	0x01, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x73,
	0x22, 0x3c, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x86,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x0c, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42,
	0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62,
	0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0b, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x56, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x0c, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47,
	0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x29, 0x0a,
	0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x0c,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24,
	0x52, 0x0b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x0c, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47,
	0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82,
	0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x5f, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x49, 0x0a,
	0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d,
	0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38,
	0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x22, 0x1b,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x1a, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c,
	0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39,
	0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x5f, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xb9,
	0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x78, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42,
	0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62,
	0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x14, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x1a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x11, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32,
	0x7d, 0x24, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x49, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x11, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31,
	0x32, 0x7d, 0x24, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x22, 0x9b,
	0x03, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12,
	0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x72,
	0x0a, 0x0c, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32, 0x48, 0x5e, 0x24, 0x7c,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x78, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa,
	0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61,
	0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x64, 0x22, 0x7d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32,
	0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64,
	0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x49, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x22,
	0x3e, 0x0a, 0x19, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x9e, 0x01, 0x0a, 0x20, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x12, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x10,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x22, 0x46, 0x0a, 0x21, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1b, 0x49, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x0c, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c,
	0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39,
	0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0b, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x1c, 0x49, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x9b, 0x01, 0x0a,
	0x1f, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x78, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49,
	0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x20, 0x49, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x4d, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x22, 0x8d, 0x03, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49,
	0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x72, 0x0a, 0x0c, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x4c, 0x72, 0x4a, 0x32,
	0x48, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x0b, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x78, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x64,
	0x22, 0x80, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49,
	0x72, 0x47, 0x32, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0xfa, 0x42, 0x49, 0x72, 0x47, 0x32, 0x45, 0x5e,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x61, 0x62, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x31, 0x32, 0x7d, 0x24, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x32, 0xb7, 0x40, 0x0a, 0x09, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x41, 0x50, 0x49, 0x12, 0x61, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x0f, 0x55, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x42, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x5c, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x60, 0x0a, 0x14, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x6c, 0x75, 0x73, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x12, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12,
	0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x60, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x46, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x46, 0x65, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x46, 0x65, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x58, 0x52, 0x50, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x58, 0x52, 0x50, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x17,
	0x53, 0x69, 0x67, 0x6e, 0x58, 0x52, 0x50, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x58, 0x52, 0x50, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x82, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x58, 0x52, 0x50, 0x49, 0x6e, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x58, 0x52, 0x50, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x58, 0x52, 0x50, 0x49, 0x6e, 0x69, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12,
	0x68, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x54, 0x78, 0x49, 0x44, 0x12, 0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x78, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x76, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x58, 0x52, 0x50, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x58,
	0x52, 0x50, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x58, 0x52,
	0x50, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x42, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2f, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22,
	0x00, 0x12, 0x55, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x22, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x19, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x33, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6b, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x1c, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x36, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x67,
	0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x28, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x14, 0x49, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x6e, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x56, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x62, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x18, 0x49, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x68, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6e, 0x0a,
	0x1b, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x35, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x26, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x00, 0x12,
	0x61, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x70, 0x0a, 0x11, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x14, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x12, 0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x76, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x2e,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x61, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65,
	0x65, 0x12, 0x26, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46,
	0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x44, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x2f, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x11, 0x5a, 0x0f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescOnce sync.Once
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescData = file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDesc
)

func file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescGZIP() []byte {
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescOnce.Do(func() {
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescData)
	})
	return file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDescData
}

var file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes = make([]protoimpl.MessageInfo, 138)
var file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_goTypes = []interface{}{
	(*ApproveWalletRequest)(nil),                         // 0: adamant.global.v1.ApproveWalletRequest
	(*ApproveTransactionRequest)(nil),                    // 1: adamant.global.v1.ApproveTransactionRequest
	(*CreateWalletRequest)(nil),                          // 2: adamant.global.v1.CreateWalletRequest
	(*CreateWalletResponse)(nil),                         // 3: adamant.global.v1.CreateWalletResponse
	(*GetWalletRequest)(nil),                             // 4: adamant.global.v1.GetWalletRequest
	(*BatchGetWalletsWithoutBalanceRequest)(nil),         // 5: adamant.global.v1.BatchGetWalletsWithoutBalanceRequest
	(*BatchGetWalletsWithoutBalanceResponse)(nil),        // 6: adamant.global.v1.BatchGetWalletsWithoutBalanceResponse
	(*CancelWalletRequest)(nil),                          // 7: adamant.global.v1.CancelWalletRequest
	(*ArchiveWalletRequest)(nil),                         // 8: adamant.global.v1.ArchiveWalletRequest
	(*UnArchiveWalletRequest)(nil),                       // 9: adamant.global.v1.UnArchiveWalletRequest
	(*ListWalletsRequest)(nil),                           // 10: adamant.global.v1.ListWalletsRequest
	(*ListWalletsByFilterRequest)(nil),                   // 11: adamant.global.v1.ListWalletsByFilterRequest
	(*ListWalletsResponse)(nil),                          // 12: adamant.global.v1.ListWalletsResponse
	(*ListBaseWalletsRequest)(nil),                       // 13: adamant.global.v1.ListBaseWalletsRequest
	(*ListBaseWalletsResponse)(nil),                      // 14: adamant.global.v1.ListBaseWalletsResponse
	(*UpdateWalletNameRequest)(nil),                      // 15: adamant.global.v1.UpdateWalletNameRequest
	(*UpdateWalletValidationRequest)(nil),                // 16: adamant.global.v1.UpdateWalletValidationRequest
	(*UpdateWalletPolicyRequest)(nil),                    // 17: adamant.global.v1.UpdateWalletPolicyRequest
	(*ReviewWalletProposalRequest)(nil),                  // 18: adamant.global.v1.ReviewWalletProposalRequest
	(*ExistsWalletByNameRequest)(nil),                    // 19: adamant.global.v1.ExistsWalletByNameRequest
	(*ExistsWalletByNameResponse)(nil),                   // 20: adamant.global.v1.ExistsWalletByNameResponse
	(*FlushBalanceRequest)(nil),                          // 21: adamant.global.v1.FlushBalanceRequest
	(*FlushBalanceResponse)(nil),                         // 22: adamant.global.v1.FlushBalanceResponse
	(*ListWalletFlushSettingsResponse)(nil),              // 23: adamant.global.v1.ListWalletFlushSettingsResponse
	(*UpdateWalletFlushSettingRequest)(nil),              // 24: adamant.global.v1.UpdateWalletFlushSettingRequest
	(*ListCompensationFeeHistoriesRequest)(nil),          // 25: adamant.global.v1.ListCompensationFeeHistoriesRequest
	(*ListCompensationFeeHistoriesResponse)(nil),         // 26: adamant.global.v1.ListCompensationFeeHistoriesResponse
	(*RegisterKeyRequest)(nil),                           // 27: adamant.global.v1.RegisterKeyRequest
	(*RegisterKeyResponse)(nil),                          // 28: adamant.global.v1.RegisterKeyResponse
	(*CreateAddressRequest)(nil),                         // 29: adamant.global.v1.CreateAddressRequest
	(*CreateAddressResponse)(nil),                        // 30: adamant.global.v1.CreateAddressResponse
	(*GetAddressRequest)(nil),                            // 31: adamant.global.v1.GetAddressRequest
	(*GetAddressByAddressRequest)(nil),                   // 32: adamant.global.v1.GetAddressByAddressRequest
	(*GetAddressByIndexRequest)(nil),                     // 33: adamant.global.v1.GetAddressByIndexRequest
	(*GetAddressWithoutBalanceByIndexRequest)(nil),       // 34: adamant.global.v1.GetAddressWithoutBalanceByIndexRequest
	(*ListAddressesRequest)(nil),                         // 35: adamant.global.v1.ListAddressesRequest
	(*ListAddressesResponse)(nil),                        // 36: adamant.global.v1.ListAddressesResponse
	(*ListAddressesWithBalanceRequest)(nil),              // 37: adamant.global.v1.ListAddressesWithBalanceRequest
	(*ListAddressesWithBalanceResponse)(nil),             // 38: adamant.global.v1.ListAddressesWithBalanceResponse
	(*UpdateAddressBalanceRequest)(nil),                  // 39: adamant.global.v1.UpdateAddressBalanceRequest
	(*ListAddressesWithoutBalanceRequest)(nil),           // 40: adamant.global.v1.ListAddressesWithoutBalanceRequest
	(*ListAddressesWithoutBalanceResponse)(nil),          // 41: adamant.global.v1.ListAddressesWithoutBalanceResponse
	(*GetEthereumFeeAddressRequest)(nil),                 // 42: adamant.global.v1.GetEthereumFeeAddressRequest
	(*DeleteAllWatchOnlyAddressesByWalletIDRequest)(nil), // 43: adamant.global.v1.DeleteAllWatchOnlyAddressesByWalletIDRequest
	(*CreateTransactionRequest)(nil),                     // 44: adamant.global.v1.CreateTransactionRequest
	(*CreateTransactionResponse)(nil),                    // 45: adamant.global.v1.CreateTransactionResponse
	(*CreateXRPInitTransactionsRequest)(nil),             // 46: adamant.global.v1.CreateXRPInitTransactionsRequest
	(*CreateInitTransactionRequest)(nil),                 // 47: adamant.global.v1.CreateInitTransactionRequest
	(*SignTransactionRequest)(nil),                       // 48: adamant.global.v1.SignTransactionRequest
	(*SignXRPInitTransactionsRequest)(nil),               // 49: adamant.global.v1.SignXRPInitTransactionsRequest
	(*SignInitTransactionRequest)(nil),                   // 50: adamant.global.v1.SignInitTransactionRequest
	(*SendTransactionRequest)(nil),                       // 51: adamant.global.v1.SendTransactionRequest
	(*SendTransactionResponse)(nil),                      // 52: adamant.global.v1.SendTransactionResponse
	(*SendXRPInitTransactionsRequest)(nil),               // 53: adamant.global.v1.SendXRPInitTransactionsRequest
	(*SendXRPInitTransactionsResponse)(nil),              // 54: adamant.global.v1.SendXRPInitTransactionsResponse
	(*SendInitTransactionRequest)(nil),                   // 55: adamant.global.v1.SendInitTransactionRequest
	(*SendInitTransactionResponse)(nil),                  // 56: adamant.global.v1.SendInitTransactionResponse
	(*CancelTransactionRequest)(nil),                     // 57: adamant.global.v1.CancelTransactionRequest
	(*GetTransactionRequest)(nil),                        // 58: adamant.global.v1.GetTransactionRequest
	(*GetTransactionByTxIDRequest)(nil),                  // 59: adamant.global.v1.GetTransactionByTxIDRequest
	(*ListTransactionsRequest)(nil),                      // 60: adamant.global.v1.ListTransactionsRequest
	(*ListTransactionsByFilterRequest)(nil),              // 61: adamant.global.v1.ListTransactionsByFilterRequest
	(*ListTransactionsResponse)(nil),                     // 62: adamant.global.v1.ListTransactionsResponse
	(*GetSignInfoRequest)(nil),                           // 63: adamant.global.v1.GetSignInfoRequest
	(*ListSignInfoRequest)(nil),                          // 64: adamant.global.v1.ListSignInfoRequest
	(*ListSignInfoResponse)(nil),                         // 65: adamant.global.v1.ListSignInfoResponse
	(*ListXRPInitSignInfoRequest)(nil),                   // 66: adamant.global.v1.ListXRPInitSignInfoRequest
	(*ListXRPInitSignInfoResponse)(nil),                  // 67: adamant.global.v1.ListXRPInitSignInfoResponse
	(*ListInitSignInfoRequest)(nil),                      // 68: adamant.global.v1.ListInitSignInfoRequest
	(*ListTransfersRequest)(nil),                         // 69: adamant.global.v1.ListTransfersRequest
	(*ListTransfersByFilterRequest)(nil),                 // 70: adamant.global.v1.ListTransfersByFilterRequest
	(*ListTransfersResponse)(nil),                        // 71: adamant.global.v1.ListTransfersResponse
	(*GetRateSnapshotRequest)(nil),                       // 72: adamant.global.v1.GetRateSnapshotRequest
	(*GetLatestRateSnapshotRequest)(nil),                 // 73: adamant.global.v1.GetLatestRateSnapshotRequest
	(*SetRatesRequest)(nil),                              // 74: adamant.global.v1.SetRatesRequest
	(*SetRatesResponse)(nil),                             // 75: adamant.global.v1.SetRatesResponse
	(*GetSpendableBalanceRequest)(nil),                   // 76: adamant.global.v1.GetSpendableBalanceRequest
	(*GetSpendableBalanceResponse)(nil),                  // 77: adamant.global.v1.GetSpendableBalanceResponse
	(*GetTotalBalanceRequest)(nil),                       // 78: adamant.global.v1.GetTotalBalanceRequest
	(*ListBalanceSnapshotsRequest)(nil),                  // 79: adamant.global.v1.ListBalanceSnapshotsRequest
	(*ListBalanceSnapshotsResponse)(nil),                 // 80: adamant.global.v1.ListBalanceSnapshotsResponse
	(*ListWalletBalanceSnapshotsRequest)(nil),            // 81: adamant.global.v1.ListWalletBalanceSnapshotsRequest
	(*ListWalletBalanceSnapshotsResponse)(nil),           // 82: adamant.global.v1.ListWalletBalanceSnapshotsResponse
	(*ListTransferVolumeSnapshotsRequest)(nil),           // 83: adamant.global.v1.ListTransferVolumeSnapshotsRequest
	(*ListTransferVolumeSnapshotsResponse)(nil),          // 84: adamant.global.v1.ListTransferVolumeSnapshotsResponse
	(*ListWalletTransferVolumeSnapshotsRequest)(nil),     // 85: adamant.global.v1.ListWalletTransferVolumeSnapshotsRequest
	(*ListWalletTransferVolumeSnapshotsResponse)(nil),    // 86: adamant.global.v1.ListWalletTransferVolumeSnapshotsResponse
	(*CalculateFeeRequest)(nil),                          // 87: adamant.global.v1.CalculateFeeRequest
	(*CalculateFeeResponse)(nil),                         // 88: adamant.global.v1.CalculateFeeResponse
	(*GetMembersDeactivatabilitiesRequest)(nil),          // 89: adamant.global.v1.GetMembersDeactivatabilitiesRequest
	(*GetMembersDeactivatabilitiesResponse)(nil),         // 90: adamant.global.v1.GetMembersDeactivatabilitiesResponse
	(*GetRecommendedFeeRateRequest)(nil),                 // 91: adamant.global.v1.GetRecommendedFeeRateRequest
	(*GetRecommendedFeeRateResponse)(nil),                // 92: adamant.global.v1.GetRecommendedFeeRateResponse
	(*ValidateAddressRequest)(nil),                       // 93: adamant.global.v1.ValidateAddressRequest
	(*ValidateAddressResponse)(nil),                      // 94: adamant.global.v1.ValidateAddressResponse
	(*ListConfirmationsRequest)(nil),                     // 95: adamant.global.v1.ListConfirmationsRequest
	(*ListConfirmationsResponse)(nil),                    // 96: adamant.global.v1.ListConfirmationsResponse
	(*CreateLabeledAddressRequest)(nil),                  // 97: adamant.global.v1.CreateLabeledAddressRequest
	(*CreateLabeledAddressResponse)(nil),                 // 98: adamant.global.v1.CreateLabeledAddressResponse
	(*UpdateLabeledAddressRequest)(nil),                  // 99: adamant.global.v1.UpdateLabeledAddressRequest
	(*GetLabeledAddressRequest)(nil),                     // 100: adamant.global.v1.GetLabeledAddressRequest
	(*ListLabeledAddressesRequest)(nil),                  // 101: adamant.global.v1.ListLabeledAddressesRequest
	(*ListLabeledAddressesResponse)(nil),                 // 102: adamant.global.v1.ListLabeledAddressesResponse
	(*DeleteLabeledAddressRequest)(nil),                  // 103: adamant.global.v1.DeleteLabeledAddressRequest
	(*ReviewLabeledAddressProposalRequest)(nil),          // 104: adamant.global.v1.ReviewLabeledAddressProposalRequest
	(*CreateWhitelistRequest)(nil),                       // 105: adamant.global.v1.CreateWhitelistRequest
	(*CreateWhitelistResponse)(nil),                      // 106: adamant.global.v1.CreateWhitelistResponse
	(*GetWhitelistRequest)(nil),                          // 107: adamant.global.v1.GetWhitelistRequest
	(*ListWhitelistsRequest)(nil),                        // 108: adamant.global.v1.ListWhitelistsRequest
	(*ListWhitelistsResponse)(nil),                       // 109: adamant.global.v1.ListWhitelistsResponse
	(*UpdateWhitelistRequest)(nil),                       // 110: adamant.global.v1.UpdateWhitelistRequest
	(*UpdateWhitelistAddressesRequest)(nil),              // 111: adamant.global.v1.UpdateWhitelistAddressesRequest
	(*DeleteWhitelistRequest)(nil),                       // 112: adamant.global.v1.DeleteWhitelistRequest
	(*CreateTransferLimitRequest)(nil),                   // 113: adamant.global.v1.CreateTransferLimitRequest
	(*CreateTransferLimitResponse)(nil),                  // 114: adamant.global.v1.CreateTransferLimitResponse
	(*GetTransferLimitRequest)(nil),                      // 115: adamant.global.v1.GetTransferLimitRequest
	(*ListTransferLimitsRequest)(nil),                    // 116: adamant.global.v1.ListTransferLimitsRequest
	(*ListTransferLimitsResponse)(nil),                   // 117: adamant.global.v1.ListTransferLimitsResponse
	(*UpdateTransferLimitRequest)(nil),                   // 118: adamant.global.v1.UpdateTransferLimitRequest
	(*UpdateTransferLimitNameRequest)(nil),               // 119: adamant.global.v1.UpdateTransferLimitNameRequest
	(*DeleteTransferLimitRequest)(nil),                   // 120: adamant.global.v1.DeleteTransferLimitRequest
	(*ReviewTransferLimitProposalRequest)(nil),           // 121: adamant.global.v1.ReviewTransferLimitProposalRequest
	(*CreatePolicyRequest)(nil),                          // 122: adamant.global.v1.CreatePolicyRequest
	(*CreatePolicyResponse)(nil),                         // 123: adamant.global.v1.CreatePolicyResponse
	(*GetPolicyRequest)(nil),                             // 124: adamant.global.v1.GetPolicyRequest
	(*ListPoliciesRequest)(nil),                          // 125: adamant.global.v1.ListPoliciesRequest
	(*IsDeletablePolicyRequest)(nil),                     // 126: adamant.global.v1.IsDeletablePolicyRequest
	(*IsDeletablePolicyResponse)(nil),                    // 127: adamant.global.v1.IsDeletablePolicyResponse
	(*IsDeletableLabeledAddressRequest)(nil),             // 128: adamant.global.v1.IsDeletableLabeledAddressRequest
	(*IsDeletableLabeledAddressResponse)(nil),            // 129: adamant.global.v1.IsDeletableLabeledAddressResponse
	(*IsDeletableWhitelistRequest)(nil),                  // 130: adamant.global.v1.IsDeletableWhitelistRequest
	(*IsDeletableWhitelistResponse)(nil),                 // 131: adamant.global.v1.IsDeletableWhitelistResponse
	(*IsDeletableTransferLimitRequest)(nil),              // 132: adamant.global.v1.IsDeletableTransferLimitRequest
	(*IsDeletableTransferLimitResponse)(nil),             // 133: adamant.global.v1.IsDeletableTransferLimitResponse
	(*ListPoliciesResponse)(nil),                         // 134: adamant.global.v1.ListPoliciesResponse
	(*UpdatePolicyRequest)(nil),                          // 135: adamant.global.v1.UpdatePolicyRequest
	(*DeletePolicyRequest)(nil),                          // 136: adamant.global.v1.DeletePolicyRequest
	(*ReviewPolicyProposalRequest)(nil),                  // 137: adamant.global.v1.ReviewPolicyProposalRequest
	(gincoincglobalv1.Coin)(0),                           // 138: gincoinc.global.v1.Coin
	(WalletType)(0),                                      // 139: adamant.global.v1.WalletType
	(gincoincglobalv1.AddressType)(0),                    // 140: gincoinc.global.v1.AddressType
	(*WalletWithoutBalance)(nil),                         // 141: adamant.global.v1.WalletWithoutBalance
	(ListFilterType)(0),                                  // 142: adamant.global.v1.ListFilterType
	(WalletState)(0),                                     // 143: adamant.global.v1.WalletState
	(*Wallet)(nil),                                       // 144: adamant.global.v1.Wallet
	(*FlushedAddress)(nil),                               // 145: adamant.global.v1.FlushedAddress
	(*WalletFlushSetting)(nil),                           // 146: adamant.global.v1.WalletFlushSetting
	(*CompensationFee)(nil),                              // 147: adamant.global.v1.CompensationFee
	(*Address)(nil),                                      // 148: adamant.global.v1.Address
	(*AddressWithBalance)(nil),                           // 149: adamant.global.v1.AddressWithBalance
	(*AddressWithoutBalance)(nil),                        // 150: adamant.global.v1.AddressWithoutBalance
	(*RequestTxOutput)(nil),                              // 151: adamant.global.v1.RequestTxOutput
	(*RequestSignedInfo)(nil),                            // 152: adamant.global.v1.RequestSignedInfo
	(TransactionState)(0),                                // 153: adamant.global.v1.TransactionState
	(*Transaction)(nil),                                  // 154: adamant.global.v1.Transaction
	(*SignInfo)(nil),                                     // 155: adamant.global.v1.SignInfo
	(gincoincglobalv1.TransferType)(0),                   // 156: gincoinc.global.v1.TransferType
	(*timestamp.Timestamp)(nil),                          // 157: google.protobuf.Timestamp
	(*Transfer)(nil),                                     // 158: adamant.global.v1.Transfer
	(*RequestRate)(nil),                                  // 159: adamant.global.v1.RequestRate
	(*BalanceSnapshot)(nil),                              // 160: adamant.global.v1.BalanceSnapshot
	(*WalletBalanceSnapshotMap)(nil),                     // 161: adamant.global.v1.WalletBalanceSnapshotMap
	(*TransferVolumeSnapshots)(nil),                      // 162: adamant.global.v1.TransferVolumeSnapshots
	(*WalletTransferVolumeSnapshots)(nil),                // 163: adamant.global.v1.WalletTransferVolumeSnapshots
	(*Deactivatability)(nil),                             // 164: adamant.global.v1.Deactivatability
	(*Confirmation)(nil),                                 // 165: adamant.global.v1.Confirmation
	(*LabeledAddress)(nil),                               // 166: adamant.global.v1.LabeledAddress
	(*Whitelist)(nil),                                    // 167: adamant.global.v1.Whitelist
	(*RequestTransferLimitEntry)(nil),                    // 168: adamant.global.v1.RequestTransferLimitEntry
	(*TransferLimit)(nil),                                // 169: adamant.global.v1.TransferLimit
	(PolicyType)(0),                                      // 170: adamant.global.v1.PolicyType
	(*Policy)(nil),                                       // 171: adamant.global.v1.Policy
	(*empty.Empty)(nil),                                  // 172: google.protobuf.Empty
	(*EthereumFeeAddress)(nil),                           // 173: adamant.global.v1.EthereumFeeAddress
	(*RateSnapshot)(nil),                                 // 174: adamant.global.v1.RateSnapshot
	(*TotalBalance)(nil),                                 // 175: adamant.global.v1.TotalBalance
}
var file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_depIdxs = []int32{
	138, // 0: adamant.global.v1.CreateWalletRequest.coin:type_name -> gincoinc.global.v1.Coin
	139, // 1: adamant.global.v1.CreateWalletRequest.wallet_type:type_name -> adamant.global.v1.WalletType
	140, // 2: adamant.global.v1.CreateWalletRequest.address_type:type_name -> gincoinc.global.v1.AddressType
	141, // 3: adamant.global.v1.BatchGetWalletsWithoutBalanceResponse.wallets:type_name -> adamant.global.v1.WalletWithoutBalance
	142, // 4: adamant.global.v1.ListWalletsByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	138, // 5: adamant.global.v1.ListWalletsByFilterRequest.coin:type_name -> gincoinc.global.v1.Coin
	139, // 6: adamant.global.v1.ListWalletsByFilterRequest.wallet_type:type_name -> adamant.global.v1.WalletType
	143, // 7: adamant.global.v1.ListWalletsByFilterRequest.wallet_state:type_name -> adamant.global.v1.WalletState
	144, // 8: adamant.global.v1.ListWalletsResponse.wallets:type_name -> adamant.global.v1.Wallet
	141, // 9: adamant.global.v1.ListBaseWalletsResponse.wallets:type_name -> adamant.global.v1.WalletWithoutBalance
	145, // 10: adamant.global.v1.FlushBalanceResponse.flushed_addresses:type_name -> adamant.global.v1.FlushedAddress
	146, // 11: adamant.global.v1.ListWalletFlushSettingsResponse.wallet_flush_settings:type_name -> adamant.global.v1.WalletFlushSetting
	138, // 12: adamant.global.v1.UpdateWalletFlushSettingRequest.coin:type_name -> gincoinc.global.v1.Coin
	147, // 13: adamant.global.v1.ListCompensationFeeHistoriesResponse.compensation_fees:type_name -> adamant.global.v1.CompensationFee
	148, // 14: adamant.global.v1.ListAddressesResponse.addresses:type_name -> adamant.global.v1.Address
	149, // 15: adamant.global.v1.ListAddressesWithBalanceResponse.addresses:type_name -> adamant.global.v1.AddressWithBalance
	150, // 16: adamant.global.v1.ListAddressesWithoutBalanceResponse.addresses:type_name -> adamant.global.v1.AddressWithoutBalance
	151, // 17: adamant.global.v1.CreateTransactionRequest.tx_outputs:type_name -> adamant.global.v1.RequestTxOutput
	152, // 18: adamant.global.v1.SignTransactionRequest.signed_info:type_name -> adamant.global.v1.RequestSignedInfo
	152, // 19: adamant.global.v1.SignXRPInitTransactionsRequest.signed_info:type_name -> adamant.global.v1.RequestSignedInfo
	152, // 20: adamant.global.v1.SignInitTransactionRequest.signed_info:type_name -> adamant.global.v1.RequestSignedInfo
	142, // 21: adamant.global.v1.ListTransactionsByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	138, // 22: adamant.global.v1.ListTransactionsByFilterRequest.coin:type_name -> gincoinc.global.v1.Coin
	139, // 23: adamant.global.v1.ListTransactionsByFilterRequest.wallet_type:type_name -> adamant.global.v1.WalletType
	153, // 24: adamant.global.v1.ListTransactionsByFilterRequest.transaction_state:type_name -> adamant.global.v1.TransactionState
	154, // 25: adamant.global.v1.ListTransactionsResponse.transactions:type_name -> adamant.global.v1.Transaction
	155, // 26: adamant.global.v1.ListSignInfoResponse.sign_info_list:type_name -> adamant.global.v1.SignInfo
	155, // 27: adamant.global.v1.ListXRPInitSignInfoResponse.sign_info_list:type_name -> adamant.global.v1.SignInfo
	142, // 28: adamant.global.v1.ListTransfersByFilterRequest.filter_type:type_name -> adamant.global.v1.ListFilterType
	138, // 29: adamant.global.v1.ListTransfersByFilterRequest.coin:type_name -> gincoinc.global.v1.Coin
	139, // 30: adamant.global.v1.ListTransfersByFilterRequest.wallet_type:type_name -> adamant.global.v1.WalletType
	156, // 31: adamant.global.v1.ListTransfersByFilterRequest.transfer_type:type_name -> gincoinc.global.v1.TransferType
	157, // 32: adamant.global.v1.ListTransfersByFilterRequest.start_time:type_name -> google.protobuf.Timestamp
	157, // 33: adamant.global.v1.ListTransfersByFilterRequest.end_time:type_name -> google.protobuf.Timestamp
	158, // 34: adamant.global.v1.ListTransfersResponse.transfers:type_name -> adamant.global.v1.Transfer
	159, // 35: adamant.global.v1.SetRatesRequest.rates:type_name -> adamant.global.v1.RequestRate
	157, // 36: adamant.global.v1.ListBalanceSnapshotsRequest.start_time:type_name -> google.protobuf.Timestamp
	157, // 37: adamant.global.v1.ListBalanceSnapshotsRequest.end_time:type_name -> google.protobuf.Timestamp
	160, // 38: adamant.global.v1.ListBalanceSnapshotsResponse.balance_snapshots:type_name -> adamant.global.v1.BalanceSnapshot
	157, // 39: adamant.global.v1.ListWalletBalanceSnapshotsRequest.start_time:type_name -> google.protobuf.Timestamp
	157, // 40: adamant.global.v1.ListWalletBalanceSnapshotsRequest.end_time:type_name -> google.protobuf.Timestamp
	161, // 41: adamant.global.v1.ListWalletBalanceSnapshotsResponse.wallet_balance_snapshot_map:type_name -> adamant.global.v1.WalletBalanceSnapshotMap
	157, // 42: adamant.global.v1.ListTransferVolumeSnapshotsRequest.start_time:type_name -> google.protobuf.Timestamp
	157, // 43: adamant.global.v1.ListTransferVolumeSnapshotsRequest.end_time:type_name -> google.protobuf.Timestamp
	162, // 44: adamant.global.v1.ListTransferVolumeSnapshotsResponse.transfer_volume_snapshots:type_name -> adamant.global.v1.TransferVolumeSnapshots
	157, // 45: adamant.global.v1.ListWalletTransferVolumeSnapshotsRequest.start_time:type_name -> google.protobuf.Timestamp
	157, // 46: adamant.global.v1.ListWalletTransferVolumeSnapshotsRequest.end_time:type_name -> google.protobuf.Timestamp
	163, // 47: adamant.global.v1.ListWalletTransferVolumeSnapshotsResponse.wallet_transfer_volume_snapshots:type_name -> adamant.global.v1.WalletTransferVolumeSnapshots
	151, // 48: adamant.global.v1.CalculateFeeRequest.tx_outputs:type_name -> adamant.global.v1.RequestTxOutput
	164, // 49: adamant.global.v1.GetMembersDeactivatabilitiesResponse.deactivatabilities:type_name -> adamant.global.v1.Deactivatability
	138, // 50: adamant.global.v1.GetRecommendedFeeRateRequest.coin:type_name -> gincoinc.global.v1.Coin
	138, // 51: adamant.global.v1.ValidateAddressRequest.coin:type_name -> gincoinc.global.v1.Coin
	165, // 52: adamant.global.v1.ListConfirmationsResponse.confirmations:type_name -> adamant.global.v1.Confirmation
	138, // 53: adamant.global.v1.CreateLabeledAddressRequest.coin:type_name -> gincoinc.global.v1.Coin
	138, // 54: adamant.global.v1.UpdateLabeledAddressRequest.coin:type_name -> gincoinc.global.v1.Coin
	166, // 55: adamant.global.v1.ListLabeledAddressesResponse.addresses:type_name -> adamant.global.v1.LabeledAddress
	138, // 56: adamant.global.v1.CreateWhitelistRequest.coin:type_name -> gincoinc.global.v1.Coin
	167, // 57: adamant.global.v1.ListWhitelistsResponse.whitelists:type_name -> adamant.global.v1.Whitelist
	138, // 58: adamant.global.v1.UpdateWhitelistRequest.coin:type_name -> gincoinc.global.v1.Coin
	138, // 59: adamant.global.v1.CreateTransferLimitRequest.coin:type_name -> gincoinc.global.v1.Coin
	168, // 60: adamant.global.v1.CreateTransferLimitRequest.transfer_limits:type_name -> adamant.global.v1.RequestTransferLimitEntry
	169, // 61: adamant.global.v1.ListTransferLimitsResponse.transfer_limits:type_name -> adamant.global.v1.TransferLimit
	168, // 62: adamant.global.v1.UpdateTransferLimitRequest.transfer_limits:type_name -> adamant.global.v1.RequestTransferLimitEntry
	138, // 63: adamant.global.v1.CreatePolicyRequest.coin:type_name -> gincoinc.global.v1.Coin
	170, // 64: adamant.global.v1.CreatePolicyRequest.type:type_name -> adamant.global.v1.PolicyType
	171, // 65: adamant.global.v1.ListPoliciesResponse.policies:type_name -> adamant.global.v1.Policy
	2,   // 66: adamant.global.v1.GlobalAPI.CreateWallet:input_type -> adamant.global.v1.CreateWalletRequest
	4,   // 67: adamant.global.v1.GlobalAPI.GetWallet:input_type -> adamant.global.v1.GetWalletRequest
	7,   // 68: adamant.global.v1.GlobalAPI.CancelWallet:input_type -> adamant.global.v1.CancelWalletRequest
	8,   // 69: adamant.global.v1.GlobalAPI.ArchiveWallet:input_type -> adamant.global.v1.ArchiveWalletRequest
	9,   // 70: adamant.global.v1.GlobalAPI.UnArchiveWallet:input_type -> adamant.global.v1.UnArchiveWalletRequest
	10,  // 71: adamant.global.v1.GlobalAPI.ListWallets:input_type -> adamant.global.v1.ListWalletsRequest
	11,  // 72: adamant.global.v1.GlobalAPI.ListWalletsByFilter:input_type -> adamant.global.v1.ListWalletsByFilterRequest
	13,  // 73: adamant.global.v1.GlobalAPI.ListBaseWallets:input_type -> adamant.global.v1.ListBaseWalletsRequest
	15,  // 74: adamant.global.v1.GlobalAPI.UpdateWalletName:input_type -> adamant.global.v1.UpdateWalletNameRequest
	16,  // 75: adamant.global.v1.GlobalAPI.UpdateWalletValidation:input_type -> adamant.global.v1.UpdateWalletValidationRequest
	17,  // 76: adamant.global.v1.GlobalAPI.UpdateWalletPolicy:input_type -> adamant.global.v1.UpdateWalletPolicyRequest
	18,  // 77: adamant.global.v1.GlobalAPI.ReviewWalletProposal:input_type -> adamant.global.v1.ReviewWalletProposalRequest
	21,  // 78: adamant.global.v1.GlobalAPI.FlushBalance:input_type -> adamant.global.v1.FlushBalanceRequest
	0,   // 79: adamant.global.v1.GlobalAPI.ApproveWallet:input_type -> adamant.global.v1.ApproveWalletRequest
	1,   // 80: adamant.global.v1.GlobalAPI.ApproveTransaction:input_type -> adamant.global.v1.ApproveTransactionRequest
	29,  // 81: adamant.global.v1.GlobalAPI.CreateAddress:input_type -> adamant.global.v1.CreateAddressRequest
	31,  // 82: adamant.global.v1.GlobalAPI.GetAddress:input_type -> adamant.global.v1.GetAddressRequest
	32,  // 83: adamant.global.v1.GlobalAPI.GetAddressByAddress:input_type -> adamant.global.v1.GetAddressByAddressRequest
	33,  // 84: adamant.global.v1.GlobalAPI.GetAddressByIndex:input_type -> adamant.global.v1.GetAddressByIndexRequest
	35,  // 85: adamant.global.v1.GlobalAPI.ListAddresses:input_type -> adamant.global.v1.ListAddressesRequest
	37,  // 86: adamant.global.v1.GlobalAPI.ListAddressesWithBalance:input_type -> adamant.global.v1.ListAddressesWithBalanceRequest
	39,  // 87: adamant.global.v1.GlobalAPI.UpdateAddressBalance:input_type -> adamant.global.v1.UpdateAddressBalanceRequest
	42,  // 88: adamant.global.v1.GlobalAPI.GetEthereumFeeAddress:input_type -> adamant.global.v1.GetEthereumFeeAddressRequest
	27,  // 89: adamant.global.v1.GlobalAPI.RegisterKey:input_type -> adamant.global.v1.RegisterKeyRequest
	44,  // 90: adamant.global.v1.GlobalAPI.CreateTransaction:input_type -> adamant.global.v1.CreateTransactionRequest
	46,  // 91: adamant.global.v1.GlobalAPI.CreateXRPInitTransactions:input_type -> adamant.global.v1.CreateXRPInitTransactionsRequest
	48,  // 92: adamant.global.v1.GlobalAPI.SignTransaction:input_type -> adamant.global.v1.SignTransactionRequest
	49,  // 93: adamant.global.v1.GlobalAPI.SignXRPInitTransactions:input_type -> adamant.global.v1.SignXRPInitTransactionsRequest
	51,  // 94: adamant.global.v1.GlobalAPI.SendTransaction:input_type -> adamant.global.v1.SendTransactionRequest
	53,  // 95: adamant.global.v1.GlobalAPI.SendXRPInitTransactions:input_type -> adamant.global.v1.SendXRPInitTransactionsRequest
	57,  // 96: adamant.global.v1.GlobalAPI.CancelTransaction:input_type -> adamant.global.v1.CancelTransactionRequest
	58,  // 97: adamant.global.v1.GlobalAPI.GetTransaction:input_type -> adamant.global.v1.GetTransactionRequest
	59,  // 98: adamant.global.v1.GlobalAPI.GetTransactionByTxID:input_type -> adamant.global.v1.GetTransactionByTxIDRequest
	60,  // 99: adamant.global.v1.GlobalAPI.ListTransactions:input_type -> adamant.global.v1.ListTransactionsRequest
	61,  // 100: adamant.global.v1.GlobalAPI.ListTransactionsByFilter:input_type -> adamant.global.v1.ListTransactionsByFilterRequest
	63,  // 101: adamant.global.v1.GlobalAPI.GetSignInfo:input_type -> adamant.global.v1.GetSignInfoRequest
	64,  // 102: adamant.global.v1.GlobalAPI.ListSignInfo:input_type -> adamant.global.v1.ListSignInfoRequest
	66,  // 103: adamant.global.v1.GlobalAPI.ListXRPInitSignInfo:input_type -> adamant.global.v1.ListXRPInitSignInfoRequest
	69,  // 104: adamant.global.v1.GlobalAPI.ListTransfers:input_type -> adamant.global.v1.ListTransfersRequest
	70,  // 105: adamant.global.v1.GlobalAPI.ListTransfersByFilter:input_type -> adamant.global.v1.ListTransfersByFilterRequest
	72,  // 106: adamant.global.v1.GlobalAPI.GetRateSnapshot:input_type -> adamant.global.v1.GetRateSnapshotRequest
	73,  // 107: adamant.global.v1.GlobalAPI.GetLatestRateSnapshot:input_type -> adamant.global.v1.GetLatestRateSnapshotRequest
	74,  // 108: adamant.global.v1.GlobalAPI.SetRates:input_type -> adamant.global.v1.SetRatesRequest
	97,  // 109: adamant.global.v1.GlobalAPI.CreateLabeledAddress:input_type -> adamant.global.v1.CreateLabeledAddressRequest
	100, // 110: adamant.global.v1.GlobalAPI.GetLabeledAddress:input_type -> adamant.global.v1.GetLabeledAddressRequest
	101, // 111: adamant.global.v1.GlobalAPI.ListLabeledAddresses:input_type -> adamant.global.v1.ListLabeledAddressesRequest
	128, // 112: adamant.global.v1.GlobalAPI.IsDeletableLabeledAddress:input_type -> adamant.global.v1.IsDeletableLabeledAddressRequest
	99,  // 113: adamant.global.v1.GlobalAPI.UpdateLabeledAddress:input_type -> adamant.global.v1.UpdateLabeledAddressRequest
	103, // 114: adamant.global.v1.GlobalAPI.DeleteAddress:input_type -> adamant.global.v1.DeleteLabeledAddressRequest
	104, // 115: adamant.global.v1.GlobalAPI.ReviewLabeledAddressProposal:input_type -> adamant.global.v1.ReviewLabeledAddressProposalRequest
	105, // 116: adamant.global.v1.GlobalAPI.CreateWhitelist:input_type -> adamant.global.v1.CreateWhitelistRequest
	107, // 117: adamant.global.v1.GlobalAPI.GetWhitelist:input_type -> adamant.global.v1.GetWhitelistRequest
	108, // 118: adamant.global.v1.GlobalAPI.ListWhitelists:input_type -> adamant.global.v1.ListWhitelistsRequest
	130, // 119: adamant.global.v1.GlobalAPI.IsDeletableWhitelist:input_type -> adamant.global.v1.IsDeletableWhitelistRequest
	110, // 120: adamant.global.v1.GlobalAPI.UpdateWhitelist:input_type -> adamant.global.v1.UpdateWhitelistRequest
	111, // 121: adamant.global.v1.GlobalAPI.UpdateWhitelistAddresses:input_type -> adamant.global.v1.UpdateWhitelistAddressesRequest
	112, // 122: adamant.global.v1.GlobalAPI.DeleteWhitelist:input_type -> adamant.global.v1.DeleteWhitelistRequest
	113, // 123: adamant.global.v1.GlobalAPI.CreateTransferLimit:input_type -> adamant.global.v1.CreateTransferLimitRequest
	115, // 124: adamant.global.v1.GlobalAPI.GetTransferLimit:input_type -> adamant.global.v1.GetTransferLimitRequest
	116, // 125: adamant.global.v1.GlobalAPI.ListTransferLimits:input_type -> adamant.global.v1.ListTransferLimitsRequest
	132, // 126: adamant.global.v1.GlobalAPI.IsDeletableTransferLimit:input_type -> adamant.global.v1.IsDeletableTransferLimitRequest
	118, // 127: adamant.global.v1.GlobalAPI.UpdateTransferLimit:input_type -> adamant.global.v1.UpdateTransferLimitRequest
	119, // 128: adamant.global.v1.GlobalAPI.UpdateTransferLimitName:input_type -> adamant.global.v1.UpdateTransferLimitNameRequest
	120, // 129: adamant.global.v1.GlobalAPI.DeleteTransferLimit:input_type -> adamant.global.v1.DeleteTransferLimitRequest
	121, // 130: adamant.global.v1.GlobalAPI.ReviewTransferLimitProposal:input_type -> adamant.global.v1.ReviewTransferLimitProposalRequest
	122, // 131: adamant.global.v1.GlobalAPI.CreatePolicy:input_type -> adamant.global.v1.CreatePolicyRequest
	124, // 132: adamant.global.v1.GlobalAPI.GetPolicy:input_type -> adamant.global.v1.GetPolicyRequest
	125, // 133: adamant.global.v1.GlobalAPI.ListPolicies:input_type -> adamant.global.v1.ListPoliciesRequest
	126, // 134: adamant.global.v1.GlobalAPI.IsDeletablePolicy:input_type -> adamant.global.v1.IsDeletablePolicyRequest
	135, // 135: adamant.global.v1.GlobalAPI.UpdatePolicy:input_type -> adamant.global.v1.UpdatePolicyRequest
	136, // 136: adamant.global.v1.GlobalAPI.DeletePolicy:input_type -> adamant.global.v1.DeletePolicyRequest
	137, // 137: adamant.global.v1.GlobalAPI.ReviewPolicyProposal:input_type -> adamant.global.v1.ReviewPolicyProposalRequest
	76,  // 138: adamant.global.v1.GlobalAPI.GetSpendableBalance:input_type -> adamant.global.v1.GetSpendableBalanceRequest
	78,  // 139: adamant.global.v1.GlobalAPI.GetTotalBalance:input_type -> adamant.global.v1.GetTotalBalanceRequest
	79,  // 140: adamant.global.v1.GlobalAPI.ListBalanceSnapshots:input_type -> adamant.global.v1.ListBalanceSnapshotsRequest
	87,  // 141: adamant.global.v1.GlobalAPI.CalculateFee:input_type -> adamant.global.v1.CalculateFeeRequest
	89,  // 142: adamant.global.v1.GlobalAPI.GetMembersDeactivatabilities:input_type -> adamant.global.v1.GetMembersDeactivatabilitiesRequest
	91,  // 143: adamant.global.v1.GlobalAPI.GetRecommendedFeeRate:input_type -> adamant.global.v1.GetRecommendedFeeRateRequest
	93,  // 144: adamant.global.v1.GlobalAPI.ValidateAddress:input_type -> adamant.global.v1.ValidateAddressRequest
	3,   // 145: adamant.global.v1.GlobalAPI.CreateWallet:output_type -> adamant.global.v1.CreateWalletResponse
	144, // 146: adamant.global.v1.GlobalAPI.GetWallet:output_type -> adamant.global.v1.Wallet
	172, // 147: adamant.global.v1.GlobalAPI.CancelWallet:output_type -> google.protobuf.Empty
	172, // 148: adamant.global.v1.GlobalAPI.ArchiveWallet:output_type -> google.protobuf.Empty
	172, // 149: adamant.global.v1.GlobalAPI.UnArchiveWallet:output_type -> google.protobuf.Empty
	12,  // 150: adamant.global.v1.GlobalAPI.ListWallets:output_type -> adamant.global.v1.ListWalletsResponse
	12,  // 151: adamant.global.v1.GlobalAPI.ListWalletsByFilter:output_type -> adamant.global.v1.ListWalletsResponse
	14,  // 152: adamant.global.v1.GlobalAPI.ListBaseWallets:output_type -> adamant.global.v1.ListBaseWalletsResponse
	172, // 153: adamant.global.v1.GlobalAPI.UpdateWalletName:output_type -> google.protobuf.Empty
	172, // 154: adamant.global.v1.GlobalAPI.UpdateWalletValidation:output_type -> google.protobuf.Empty
	172, // 155: adamant.global.v1.GlobalAPI.UpdateWalletPolicy:output_type -> google.protobuf.Empty
	172, // 156: adamant.global.v1.GlobalAPI.ReviewWalletProposal:output_type -> google.protobuf.Empty
	22,  // 157: adamant.global.v1.GlobalAPI.FlushBalance:output_type -> adamant.global.v1.FlushBalanceResponse
	172, // 158: adamant.global.v1.GlobalAPI.ApproveWallet:output_type -> google.protobuf.Empty
	172, // 159: adamant.global.v1.GlobalAPI.ApproveTransaction:output_type -> google.protobuf.Empty
	30,  // 160: adamant.global.v1.GlobalAPI.CreateAddress:output_type -> adamant.global.v1.CreateAddressResponse
	148, // 161: adamant.global.v1.GlobalAPI.GetAddress:output_type -> adamant.global.v1.Address
	148, // 162: adamant.global.v1.GlobalAPI.GetAddressByAddress:output_type -> adamant.global.v1.Address
	148, // 163: adamant.global.v1.GlobalAPI.GetAddressByIndex:output_type -> adamant.global.v1.Address
	36,  // 164: adamant.global.v1.GlobalAPI.ListAddresses:output_type -> adamant.global.v1.ListAddressesResponse
	38,  // 165: adamant.global.v1.GlobalAPI.ListAddressesWithBalance:output_type -> adamant.global.v1.ListAddressesWithBalanceResponse
	172, // 166: adamant.global.v1.GlobalAPI.UpdateAddressBalance:output_type -> google.protobuf.Empty
	173, // 167: adamant.global.v1.GlobalAPI.GetEthereumFeeAddress:output_type -> adamant.global.v1.EthereumFeeAddress
	28,  // 168: adamant.global.v1.GlobalAPI.RegisterKey:output_type -> adamant.global.v1.RegisterKeyResponse
	45,  // 169: adamant.global.v1.GlobalAPI.CreateTransaction:output_type -> adamant.global.v1.CreateTransactionResponse
	172, // 170: adamant.global.v1.GlobalAPI.CreateXRPInitTransactions:output_type -> google.protobuf.Empty
	172, // 171: adamant.global.v1.GlobalAPI.SignTransaction:output_type -> google.protobuf.Empty
	172, // 172: adamant.global.v1.GlobalAPI.SignXRPInitTransactions:output_type -> google.protobuf.Empty
	52,  // 173: adamant.global.v1.GlobalAPI.SendTransaction:output_type -> adamant.global.v1.SendTransactionResponse
	54,  // 174: adamant.global.v1.GlobalAPI.SendXRPInitTransactions:output_type -> adamant.global.v1.SendXRPInitTransactionsResponse
	172, // 175: adamant.global.v1.GlobalAPI.CancelTransaction:output_type -> google.protobuf.Empty
	154, // 176: adamant.global.v1.GlobalAPI.GetTransaction:output_type -> adamant.global.v1.Transaction
	154, // 177: adamant.global.v1.GlobalAPI.GetTransactionByTxID:output_type -> adamant.global.v1.Transaction
	62,  // 178: adamant.global.v1.GlobalAPI.ListTransactions:output_type -> adamant.global.v1.ListTransactionsResponse
	62,  // 179: adamant.global.v1.GlobalAPI.ListTransactionsByFilter:output_type -> adamant.global.v1.ListTransactionsResponse
	155, // 180: adamant.global.v1.GlobalAPI.GetSignInfo:output_type -> adamant.global.v1.SignInfo
	65,  // 181: adamant.global.v1.GlobalAPI.ListSignInfo:output_type -> adamant.global.v1.ListSignInfoResponse
	67,  // 182: adamant.global.v1.GlobalAPI.ListXRPInitSignInfo:output_type -> adamant.global.v1.ListXRPInitSignInfoResponse
	71,  // 183: adamant.global.v1.GlobalAPI.ListTransfers:output_type -> adamant.global.v1.ListTransfersResponse
	71,  // 184: adamant.global.v1.GlobalAPI.ListTransfersByFilter:output_type -> adamant.global.v1.ListTransfersResponse
	174, // 185: adamant.global.v1.GlobalAPI.GetRateSnapshot:output_type -> adamant.global.v1.RateSnapshot
	174, // 186: adamant.global.v1.GlobalAPI.GetLatestRateSnapshot:output_type -> adamant.global.v1.RateSnapshot
	75,  // 187: adamant.global.v1.GlobalAPI.SetRates:output_type -> adamant.global.v1.SetRatesResponse
	98,  // 188: adamant.global.v1.GlobalAPI.CreateLabeledAddress:output_type -> adamant.global.v1.CreateLabeledAddressResponse
	166, // 189: adamant.global.v1.GlobalAPI.GetLabeledAddress:output_type -> adamant.global.v1.LabeledAddress
	102, // 190: adamant.global.v1.GlobalAPI.ListLabeledAddresses:output_type -> adamant.global.v1.ListLabeledAddressesResponse
	129, // 191: adamant.global.v1.GlobalAPI.IsDeletableLabeledAddress:output_type -> adamant.global.v1.IsDeletableLabeledAddressResponse
	166, // 192: adamant.global.v1.GlobalAPI.UpdateLabeledAddress:output_type -> adamant.global.v1.LabeledAddress
	172, // 193: adamant.global.v1.GlobalAPI.DeleteAddress:output_type -> google.protobuf.Empty
	172, // 194: adamant.global.v1.GlobalAPI.ReviewLabeledAddressProposal:output_type -> google.protobuf.Empty
	106, // 195: adamant.global.v1.GlobalAPI.CreateWhitelist:output_type -> adamant.global.v1.CreateWhitelistResponse
	167, // 196: adamant.global.v1.GlobalAPI.GetWhitelist:output_type -> adamant.global.v1.Whitelist
	109, // 197: adamant.global.v1.GlobalAPI.ListWhitelists:output_type -> adamant.global.v1.ListWhitelistsResponse
	131, // 198: adamant.global.v1.GlobalAPI.IsDeletableWhitelist:output_type -> adamant.global.v1.IsDeletableWhitelistResponse
	167, // 199: adamant.global.v1.GlobalAPI.UpdateWhitelist:output_type -> adamant.global.v1.Whitelist
	167, // 200: adamant.global.v1.GlobalAPI.UpdateWhitelistAddresses:output_type -> adamant.global.v1.Whitelist
	172, // 201: adamant.global.v1.GlobalAPI.DeleteWhitelist:output_type -> google.protobuf.Empty
	114, // 202: adamant.global.v1.GlobalAPI.CreateTransferLimit:output_type -> adamant.global.v1.CreateTransferLimitResponse
	169, // 203: adamant.global.v1.GlobalAPI.GetTransferLimit:output_type -> adamant.global.v1.TransferLimit
	117, // 204: adamant.global.v1.GlobalAPI.ListTransferLimits:output_type -> adamant.global.v1.ListTransferLimitsResponse
	133, // 205: adamant.global.v1.GlobalAPI.IsDeletableTransferLimit:output_type -> adamant.global.v1.IsDeletableTransferLimitResponse
	169, // 206: adamant.global.v1.GlobalAPI.UpdateTransferLimit:output_type -> adamant.global.v1.TransferLimit
	169, // 207: adamant.global.v1.GlobalAPI.UpdateTransferLimitName:output_type -> adamant.global.v1.TransferLimit
	172, // 208: adamant.global.v1.GlobalAPI.DeleteTransferLimit:output_type -> google.protobuf.Empty
	172, // 209: adamant.global.v1.GlobalAPI.ReviewTransferLimitProposal:output_type -> google.protobuf.Empty
	123, // 210: adamant.global.v1.GlobalAPI.CreatePolicy:output_type -> adamant.global.v1.CreatePolicyResponse
	171, // 211: adamant.global.v1.GlobalAPI.GetPolicy:output_type -> adamant.global.v1.Policy
	134, // 212: adamant.global.v1.GlobalAPI.ListPolicies:output_type -> adamant.global.v1.ListPoliciesResponse
	127, // 213: adamant.global.v1.GlobalAPI.IsDeletablePolicy:output_type -> adamant.global.v1.IsDeletablePolicyResponse
	171, // 214: adamant.global.v1.GlobalAPI.UpdatePolicy:output_type -> adamant.global.v1.Policy
	172, // 215: adamant.global.v1.GlobalAPI.DeletePolicy:output_type -> google.protobuf.Empty
	172, // 216: adamant.global.v1.GlobalAPI.ReviewPolicyProposal:output_type -> google.protobuf.Empty
	77,  // 217: adamant.global.v1.GlobalAPI.GetSpendableBalance:output_type -> adamant.global.v1.GetSpendableBalanceResponse
	175, // 218: adamant.global.v1.GlobalAPI.GetTotalBalance:output_type -> adamant.global.v1.TotalBalance
	80,  // 219: adamant.global.v1.GlobalAPI.ListBalanceSnapshots:output_type -> adamant.global.v1.ListBalanceSnapshotsResponse
	88,  // 220: adamant.global.v1.GlobalAPI.CalculateFee:output_type -> adamant.global.v1.CalculateFeeResponse
	90,  // 221: adamant.global.v1.GlobalAPI.GetMembersDeactivatabilities:output_type -> adamant.global.v1.GetMembersDeactivatabilitiesResponse
	92,  // 222: adamant.global.v1.GlobalAPI.GetRecommendedFeeRate:output_type -> adamant.global.v1.GetRecommendedFeeRateResponse
	94,  // 223: adamant.global.v1.GlobalAPI.ValidateAddress:output_type -> adamant.global.v1.ValidateAddressResponse
	145, // [145:224] is the sub-list for method output_type
	66,  // [66:145] is the sub-list for method input_type
	66,  // [66:66] is the sub-list for extension type_name
	66,  // [66:66] is the sub-list for extension extendee
	0,   // [0:66] is the sub-list for field type_name
}

func init() { file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_init() }
func file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_init() {
	if File_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto != nil {
		return
	}
	file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_init()
	file_gincoinc_adamant_global_v1_adamantglobalv1_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetWalletsWithoutBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetWalletsWithoutBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnArchiveWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletsByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBaseWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBaseWalletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWalletNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWalletValidationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWalletPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewWalletProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsWalletByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsWalletByNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletFlushSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWalletFlushSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompensationFeeHistoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompensationFeeHistoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressByAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressByIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressWithoutBalanceByIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAddressesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAddressesWithBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAddressesWithBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAddressBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAddressesWithoutBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAddressesWithoutBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEthereumFeeAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAllWatchOnlyAddressesByWalletIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateXRPInitTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInitTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignXRPInitTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInitTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendXRPInitTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendXRPInitTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendInitTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendInitTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionByTxIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransactionsByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSignInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSignInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListXRPInitSignInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListXRPInitSignInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInitSignInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransfersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransfersByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransfersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRateSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestRateSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpendableBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpendableBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTotalBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBalanceSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBalanceSnapshotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletBalanceSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletBalanceSnapshotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransferVolumeSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransferVolumeSnapshotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletTransferVolumeSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWalletTransferVolumeSnapshotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateFeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMembersDeactivatabilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMembersDeactivatabilitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecommendedFeeRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecommendedFeeRateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfirmationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfirmationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLabeledAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLabeledAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLabeledAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabeledAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLabeledAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLabeledAddressesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLabeledAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewLabeledAddressProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWhitelistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWhitelistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWhitelistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWhitelistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWhitelistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWhitelistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWhitelistAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWhitelistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransferLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransferLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransferLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransferLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransferLimitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTransferLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTransferLimitNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTransferLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewTransferLimitProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeletablePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeletablePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeletableLabeledAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeletableLabeledAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeletableWhitelistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeletableWhitelistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeletableTransferLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeletableTransferLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewPolicyProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   138,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_goTypes,
		DependencyIndexes: file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_depIdxs,
		MessageInfos:      file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_msgTypes,
	}.Build()
	File_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto = out.File
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_rawDesc = nil
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_goTypes = nil
	file_gincoinc_adamant_global_v1_adamantglobalv1_global_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GlobalAPIClient is the client API for GlobalAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GlobalAPIClient interface {
	// Wallet
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error)
	// Get wallet information. the wallet model includes balance, address etc.
	GetWallet(ctx context.Context, in *GetWalletRequest, opts ...grpc.CallOption) (*Wallet, error)
	CancelWallet(ctx context.Context, in *CancelWalletRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ArchiveWallet(ctx context.Context, in *ArchiveWalletRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UnArchiveWallet(ctx context.Context, in *UnArchiveWalletRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListWallets(ctx context.Context, in *ListWalletsRequest, opts ...grpc.CallOption) (*ListWalletsResponse, error)
	ListWalletsByFilter(ctx context.Context, in *ListWalletsByFilterRequest, opts ...grpc.CallOption) (*ListWalletsResponse, error)
	ListBaseWallets(ctx context.Context, in *ListBaseWalletsRequest, opts ...grpc.CallOption) (*ListBaseWalletsResponse, error)
	UpdateWalletName(ctx context.Context, in *UpdateWalletNameRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateWalletValidation(ctx context.Context, in *UpdateWalletValidationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateWalletPolicy(ctx context.Context, in *UpdateWalletPolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ReviewWalletProposal(ctx context.Context, in *ReviewWalletProposalRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	FlushBalance(ctx context.Context, in *FlushBalanceRequest, opts ...grpc.CallOption) (*FlushBalanceResponse, error)
	// Review
	ApproveWallet(ctx context.Context, in *ApproveWalletRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ApproveTransaction(ctx context.Context, in *ApproveTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Address
	// Create a new address for an existing wallet
	CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*CreateAddressResponse, error)
	GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*Address, error)
	GetAddressByAddress(ctx context.Context, in *GetAddressByAddressRequest, opts ...grpc.CallOption) (*Address, error)
	GetAddressByIndex(ctx context.Context, in *GetAddressByIndexRequest, opts ...grpc.CallOption) (*Address, error)
	ListAddresses(ctx context.Context, in *ListAddressesRequest, opts ...grpc.CallOption) (*ListAddressesResponse, error)
	ListAddressesWithBalance(ctx context.Context, in *ListAddressesWithBalanceRequest, opts ...grpc.CallOption) (*ListAddressesWithBalanceResponse, error)
	UpdateAddressBalance(ctx context.Context, in *UpdateAddressBalanceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get an address which hold ETH for ethereum wallet/address creation etc
	GetEthereumFeeAddress(ctx context.Context, in *GetEthereumFeeAddressRequest, opts ...grpc.CallOption) (*EthereumFeeAddress, error)
	// RegisterKey
	RegisterKey(ctx context.Context, in *RegisterKeyRequest, opts ...grpc.CallOption) (*RegisterKeyResponse, error)
	// Transaction
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	CreateXRPInitTransactions(ctx context.Context, in *CreateXRPInitTransactionsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SignXRPInitTransactions(ctx context.Context, in *SignXRPInitTransactionsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	SendXRPInitTransactions(ctx context.Context, in *SendXRPInitTransactionsRequest, opts ...grpc.CallOption) (*SendXRPInitTransactionsResponse, error)
	CancelTransaction(ctx context.Context, in *CancelTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
	GetTransactionByTxID(ctx context.Context, in *GetTransactionByTxIDRequest, opts ...grpc.CallOption) (*Transaction, error)
	ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error)
	ListTransactionsByFilter(ctx context.Context, in *ListTransactionsByFilterRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error)
	// SignInfo
	GetSignInfo(ctx context.Context, in *GetSignInfoRequest, opts ...grpc.CallOption) (*SignInfo, error)
	ListSignInfo(ctx context.Context, in *ListSignInfoRequest, opts ...grpc.CallOption) (*ListSignInfoResponse, error)
	ListXRPInitSignInfo(ctx context.Context, in *ListXRPInitSignInfoRequest, opts ...grpc.CallOption) (*ListXRPInitSignInfoResponse, error)
	// Transfer
	// List transfers for a given wallet. Ordered by update time desc
	ListTransfers(ctx context.Context, in *ListTransfersRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error)
	ListTransfersByFilter(ctx context.Context, in *ListTransfersByFilterRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error)
	// Rate
	// Get rates by snapshot id
	GetRateSnapshot(ctx context.Context, in *GetRateSnapshotRequest, opts ...grpc.CallOption) (*RateSnapshot, error)
	// Get latest rates set to your organization
	GetLatestRateSnapshot(ctx context.Context, in *GetLatestRateSnapshotRequest, opts ...grpc.CallOption) (*RateSnapshot, error)
	// Set rates to your organization
	SetRates(ctx context.Context, in *SetRatesRequest, opts ...grpc.CallOption) (*SetRatesResponse, error)
	// policy
	CreateLabeledAddress(ctx context.Context, in *CreateLabeledAddressRequest, opts ...grpc.CallOption) (*CreateLabeledAddressResponse, error)
	GetLabeledAddress(ctx context.Context, in *GetLabeledAddressRequest, opts ...grpc.CallOption) (*LabeledAddress, error)
	ListLabeledAddresses(ctx context.Context, in *ListLabeledAddressesRequest, opts ...grpc.CallOption) (*ListLabeledAddressesResponse, error)
	IsDeletableLabeledAddress(ctx context.Context, in *IsDeletableLabeledAddressRequest, opts ...grpc.CallOption) (*IsDeletableLabeledAddressResponse, error)
	UpdateLabeledAddress(ctx context.Context, in *UpdateLabeledAddressRequest, opts ...grpc.CallOption) (*LabeledAddress, error)
	DeleteAddress(ctx context.Context, in *DeleteLabeledAddressRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ReviewLabeledAddressProposal(ctx context.Context, in *ReviewLabeledAddressProposalRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateWhitelist(ctx context.Context, in *CreateWhitelistRequest, opts ...grpc.CallOption) (*CreateWhitelistResponse, error)
	GetWhitelist(ctx context.Context, in *GetWhitelistRequest, opts ...grpc.CallOption) (*Whitelist, error)
	ListWhitelists(ctx context.Context, in *ListWhitelistsRequest, opts ...grpc.CallOption) (*ListWhitelistsResponse, error)
	IsDeletableWhitelist(ctx context.Context, in *IsDeletableWhitelistRequest, opts ...grpc.CallOption) (*IsDeletableWhitelistResponse, error)
	UpdateWhitelist(ctx context.Context, in *UpdateWhitelistRequest, opts ...grpc.CallOption) (*Whitelist, error)
	UpdateWhitelistAddresses(ctx context.Context, in *UpdateWhitelistAddressesRequest, opts ...grpc.CallOption) (*Whitelist, error)
	DeleteWhitelist(ctx context.Context, in *DeleteWhitelistRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateTransferLimit(ctx context.Context, in *CreateTransferLimitRequest, opts ...grpc.CallOption) (*CreateTransferLimitResponse, error)
	GetTransferLimit(ctx context.Context, in *GetTransferLimitRequest, opts ...grpc.CallOption) (*TransferLimit, error)
	ListTransferLimits(ctx context.Context, in *ListTransferLimitsRequest, opts ...grpc.CallOption) (*ListTransferLimitsResponse, error)
	IsDeletableTransferLimit(ctx context.Context, in *IsDeletableTransferLimitRequest, opts ...grpc.CallOption) (*IsDeletableTransferLimitResponse, error)
	UpdateTransferLimit(ctx context.Context, in *UpdateTransferLimitRequest, opts ...grpc.CallOption) (*TransferLimit, error)
	UpdateTransferLimitName(ctx context.Context, in *UpdateTransferLimitNameRequest, opts ...grpc.CallOption) (*TransferLimit, error)
	DeleteTransferLimit(ctx context.Context, in *DeleteTransferLimitRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ReviewTransferLimitProposal(ctx context.Context, in *ReviewTransferLimitProposalRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error)
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*Policy, error)
	ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error)
	IsDeletablePolicy(ctx context.Context, in *IsDeletablePolicyRequest, opts ...grpc.CallOption) (*IsDeletablePolicyResponse, error)
	UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*Policy, error)
	DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ReviewPolicyProposal(ctx context.Context, in *ReviewPolicyProposalRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Utility
	GetSpendableBalance(ctx context.Context, in *GetSpendableBalanceRequest, opts ...grpc.CallOption) (*GetSpendableBalanceResponse, error)
	GetTotalBalance(ctx context.Context, in *GetTotalBalanceRequest, opts ...grpc.CallOption) (*TotalBalance, error)
	ListBalanceSnapshots(ctx context.Context, in *ListBalanceSnapshotsRequest, opts ...grpc.CallOption) (*ListBalanceSnapshotsResponse, error)
	CalculateFee(ctx context.Context, in *CalculateFeeRequest, opts ...grpc.CallOption) (*CalculateFeeResponse, error)
	GetMembersDeactivatabilities(ctx context.Context, in *GetMembersDeactivatabilitiesRequest, opts ...grpc.CallOption) (*GetMembersDeactivatabilitiesResponse, error)
	GetRecommendedFeeRate(ctx context.Context, in *GetRecommendedFeeRateRequest, opts ...grpc.CallOption) (*GetRecommendedFeeRateResponse, error)
	// Validate format of given address
	ValidateAddress(ctx context.Context, in *ValidateAddressRequest, opts ...grpc.CallOption) (*ValidateAddressResponse, error)
}

type globalAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalAPIClient(cc grpc.ClientConnInterface) GlobalAPIClient {
	return &globalAPIClient{cc}
}

func (c *globalAPIClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error) {
	out := new(CreateWalletResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetWallet(ctx context.Context, in *GetWalletRequest, opts ...grpc.CallOption) (*Wallet, error) {
	out := new(Wallet)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CancelWallet(ctx context.Context, in *CancelWalletRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CancelWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ArchiveWallet(ctx context.Context, in *ArchiveWalletRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ArchiveWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UnArchiveWallet(ctx context.Context, in *UnArchiveWalletRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UnArchiveWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListWallets(ctx context.Context, in *ListWalletsRequest, opts ...grpc.CallOption) (*ListWalletsResponse, error) {
	out := new(ListWalletsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListWalletsByFilter(ctx context.Context, in *ListWalletsByFilterRequest, opts ...grpc.CallOption) (*ListWalletsResponse, error) {
	out := new(ListWalletsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListWalletsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListBaseWallets(ctx context.Context, in *ListBaseWalletsRequest, opts ...grpc.CallOption) (*ListBaseWalletsResponse, error) {
	out := new(ListBaseWalletsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListBaseWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateWalletName(ctx context.Context, in *UpdateWalletNameRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateWalletName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateWalletValidation(ctx context.Context, in *UpdateWalletValidationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateWalletValidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateWalletPolicy(ctx context.Context, in *UpdateWalletPolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateWalletPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ReviewWalletProposal(ctx context.Context, in *ReviewWalletProposalRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ReviewWalletProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) FlushBalance(ctx context.Context, in *FlushBalanceRequest, opts ...grpc.CallOption) (*FlushBalanceResponse, error) {
	out := new(FlushBalanceResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/FlushBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ApproveWallet(ctx context.Context, in *ApproveWalletRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ApproveWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ApproveTransaction(ctx context.Context, in *ApproveTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ApproveTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*CreateAddressResponse, error) {
	out := new(CreateAddressResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CreateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetAddressByAddress(ctx context.Context, in *GetAddressByAddressRequest, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetAddressByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetAddressByIndex(ctx context.Context, in *GetAddressByIndexRequest, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetAddressByIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListAddresses(ctx context.Context, in *ListAddressesRequest, opts ...grpc.CallOption) (*ListAddressesResponse, error) {
	out := new(ListAddressesResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListAddressesWithBalance(ctx context.Context, in *ListAddressesWithBalanceRequest, opts ...grpc.CallOption) (*ListAddressesWithBalanceResponse, error) {
	out := new(ListAddressesWithBalanceResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListAddressesWithBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateAddressBalance(ctx context.Context, in *UpdateAddressBalanceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateAddressBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetEthereumFeeAddress(ctx context.Context, in *GetEthereumFeeAddressRequest, opts ...grpc.CallOption) (*EthereumFeeAddress, error) {
	out := new(EthereumFeeAddress)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetEthereumFeeAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) RegisterKey(ctx context.Context, in *RegisterKeyRequest, opts ...grpc.CallOption) (*RegisterKeyResponse, error) {
	out := new(RegisterKeyResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/RegisterKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CreateXRPInitTransactions(ctx context.Context, in *CreateXRPInitTransactionsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CreateXRPInitTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/SignTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) SignXRPInitTransactions(ctx context.Context, in *SignXRPInitTransactionsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/SignXRPInitTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) SendXRPInitTransactions(ctx context.Context, in *SendXRPInitTransactionsRequest, opts ...grpc.CallOption) (*SendXRPInitTransactionsResponse, error) {
	out := new(SendXRPInitTransactionsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/SendXRPInitTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CancelTransaction(ctx context.Context, in *CancelTransactionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CancelTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetTransactionByTxID(ctx context.Context, in *GetTransactionByTxIDRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetTransactionByTxID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error) {
	out := new(ListTransactionsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListTransactionsByFilter(ctx context.Context, in *ListTransactionsByFilterRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error) {
	out := new(ListTransactionsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListTransactionsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetSignInfo(ctx context.Context, in *GetSignInfoRequest, opts ...grpc.CallOption) (*SignInfo, error) {
	out := new(SignInfo)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetSignInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListSignInfo(ctx context.Context, in *ListSignInfoRequest, opts ...grpc.CallOption) (*ListSignInfoResponse, error) {
	out := new(ListSignInfoResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListSignInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListXRPInitSignInfo(ctx context.Context, in *ListXRPInitSignInfoRequest, opts ...grpc.CallOption) (*ListXRPInitSignInfoResponse, error) {
	out := new(ListXRPInitSignInfoResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListXRPInitSignInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListTransfers(ctx context.Context, in *ListTransfersRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error) {
	out := new(ListTransfersResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListTransfersByFilter(ctx context.Context, in *ListTransfersByFilterRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error) {
	out := new(ListTransfersResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListTransfersByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetRateSnapshot(ctx context.Context, in *GetRateSnapshotRequest, opts ...grpc.CallOption) (*RateSnapshot, error) {
	out := new(RateSnapshot)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetRateSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetLatestRateSnapshot(ctx context.Context, in *GetLatestRateSnapshotRequest, opts ...grpc.CallOption) (*RateSnapshot, error) {
	out := new(RateSnapshot)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetLatestRateSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) SetRates(ctx context.Context, in *SetRatesRequest, opts ...grpc.CallOption) (*SetRatesResponse, error) {
	out := new(SetRatesResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/SetRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CreateLabeledAddress(ctx context.Context, in *CreateLabeledAddressRequest, opts ...grpc.CallOption) (*CreateLabeledAddressResponse, error) {
	out := new(CreateLabeledAddressResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CreateLabeledAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetLabeledAddress(ctx context.Context, in *GetLabeledAddressRequest, opts ...grpc.CallOption) (*LabeledAddress, error) {
	out := new(LabeledAddress)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetLabeledAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListLabeledAddresses(ctx context.Context, in *ListLabeledAddressesRequest, opts ...grpc.CallOption) (*ListLabeledAddressesResponse, error) {
	out := new(ListLabeledAddressesResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListLabeledAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) IsDeletableLabeledAddress(ctx context.Context, in *IsDeletableLabeledAddressRequest, opts ...grpc.CallOption) (*IsDeletableLabeledAddressResponse, error) {
	out := new(IsDeletableLabeledAddressResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/IsDeletableLabeledAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateLabeledAddress(ctx context.Context, in *UpdateLabeledAddressRequest, opts ...grpc.CallOption) (*LabeledAddress, error) {
	out := new(LabeledAddress)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateLabeledAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) DeleteAddress(ctx context.Context, in *DeleteLabeledAddressRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/DeleteAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ReviewLabeledAddressProposal(ctx context.Context, in *ReviewLabeledAddressProposalRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ReviewLabeledAddressProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CreateWhitelist(ctx context.Context, in *CreateWhitelistRequest, opts ...grpc.CallOption) (*CreateWhitelistResponse, error) {
	out := new(CreateWhitelistResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CreateWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetWhitelist(ctx context.Context, in *GetWhitelistRequest, opts ...grpc.CallOption) (*Whitelist, error) {
	out := new(Whitelist)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListWhitelists(ctx context.Context, in *ListWhitelistsRequest, opts ...grpc.CallOption) (*ListWhitelistsResponse, error) {
	out := new(ListWhitelistsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListWhitelists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) IsDeletableWhitelist(ctx context.Context, in *IsDeletableWhitelistRequest, opts ...grpc.CallOption) (*IsDeletableWhitelistResponse, error) {
	out := new(IsDeletableWhitelistResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/IsDeletableWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateWhitelist(ctx context.Context, in *UpdateWhitelistRequest, opts ...grpc.CallOption) (*Whitelist, error) {
	out := new(Whitelist)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateWhitelistAddresses(ctx context.Context, in *UpdateWhitelistAddressesRequest, opts ...grpc.CallOption) (*Whitelist, error) {
	out := new(Whitelist)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateWhitelistAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) DeleteWhitelist(ctx context.Context, in *DeleteWhitelistRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/DeleteWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CreateTransferLimit(ctx context.Context, in *CreateTransferLimitRequest, opts ...grpc.CallOption) (*CreateTransferLimitResponse, error) {
	out := new(CreateTransferLimitResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CreateTransferLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetTransferLimit(ctx context.Context, in *GetTransferLimitRequest, opts ...grpc.CallOption) (*TransferLimit, error) {
	out := new(TransferLimit)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetTransferLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListTransferLimits(ctx context.Context, in *ListTransferLimitsRequest, opts ...grpc.CallOption) (*ListTransferLimitsResponse, error) {
	out := new(ListTransferLimitsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListTransferLimits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) IsDeletableTransferLimit(ctx context.Context, in *IsDeletableTransferLimitRequest, opts ...grpc.CallOption) (*IsDeletableTransferLimitResponse, error) {
	out := new(IsDeletableTransferLimitResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/IsDeletableTransferLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateTransferLimit(ctx context.Context, in *UpdateTransferLimitRequest, opts ...grpc.CallOption) (*TransferLimit, error) {
	out := new(TransferLimit)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateTransferLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateTransferLimitName(ctx context.Context, in *UpdateTransferLimitNameRequest, opts ...grpc.CallOption) (*TransferLimit, error) {
	out := new(TransferLimit)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateTransferLimitName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) DeleteTransferLimit(ctx context.Context, in *DeleteTransferLimitRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/DeleteTransferLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ReviewTransferLimitProposal(ctx context.Context, in *ReviewTransferLimitProposalRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ReviewTransferLimitProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error) {
	out := new(CreatePolicyResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CreatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error) {
	out := new(ListPoliciesResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) IsDeletablePolicy(ctx context.Context, in *IsDeletablePolicyRequest, opts ...grpc.CallOption) (*IsDeletablePolicyResponse, error) {
	out := new(IsDeletablePolicyResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/IsDeletablePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ReviewPolicyProposal(ctx context.Context, in *ReviewPolicyProposalRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ReviewPolicyProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetSpendableBalance(ctx context.Context, in *GetSpendableBalanceRequest, opts ...grpc.CallOption) (*GetSpendableBalanceResponse, error) {
	out := new(GetSpendableBalanceResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetSpendableBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetTotalBalance(ctx context.Context, in *GetTotalBalanceRequest, opts ...grpc.CallOption) (*TotalBalance, error) {
	out := new(TotalBalance)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetTotalBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListBalanceSnapshots(ctx context.Context, in *ListBalanceSnapshotsRequest, opts ...grpc.CallOption) (*ListBalanceSnapshotsResponse, error) {
	out := new(ListBalanceSnapshotsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListBalanceSnapshots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CalculateFee(ctx context.Context, in *CalculateFeeRequest, opts ...grpc.CallOption) (*CalculateFeeResponse, error) {
	out := new(CalculateFeeResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CalculateFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetMembersDeactivatabilities(ctx context.Context, in *GetMembersDeactivatabilitiesRequest, opts ...grpc.CallOption) (*GetMembersDeactivatabilitiesResponse, error) {
	out := new(GetMembersDeactivatabilitiesResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetMembersDeactivatabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetRecommendedFeeRate(ctx context.Context, in *GetRecommendedFeeRateRequest, opts ...grpc.CallOption) (*GetRecommendedFeeRateResponse, error) {
	out := new(GetRecommendedFeeRateResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetRecommendedFeeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ValidateAddress(ctx context.Context, in *ValidateAddressRequest, opts ...grpc.CallOption) (*ValidateAddressResponse, error) {
	out := new(ValidateAddressResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ValidateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GlobalAPIServer is the server API for GlobalAPI service.
type GlobalAPIServer interface {
	// Wallet
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error)
	// Get wallet information. the wallet model includes balance, address etc.
	GetWallet(context.Context, *GetWalletRequest) (*Wallet, error)
	CancelWallet(context.Context, *CancelWalletRequest) (*empty.Empty, error)
	ArchiveWallet(context.Context, *ArchiveWalletRequest) (*empty.Empty, error)
	UnArchiveWallet(context.Context, *UnArchiveWalletRequest) (*empty.Empty, error)
	ListWallets(context.Context, *ListWalletsRequest) (*ListWalletsResponse, error)
	ListWalletsByFilter(context.Context, *ListWalletsByFilterRequest) (*ListWalletsResponse, error)
	ListBaseWallets(context.Context, *ListBaseWalletsRequest) (*ListBaseWalletsResponse, error)
	UpdateWalletName(context.Context, *UpdateWalletNameRequest) (*empty.Empty, error)
	UpdateWalletValidation(context.Context, *UpdateWalletValidationRequest) (*empty.Empty, error)
	UpdateWalletPolicy(context.Context, *UpdateWalletPolicyRequest) (*empty.Empty, error)
	ReviewWalletProposal(context.Context, *ReviewWalletProposalRequest) (*empty.Empty, error)
	FlushBalance(context.Context, *FlushBalanceRequest) (*FlushBalanceResponse, error)
	// Review
	ApproveWallet(context.Context, *ApproveWalletRequest) (*empty.Empty, error)
	ApproveTransaction(context.Context, *ApproveTransactionRequest) (*empty.Empty, error)
	// Address
	// Create a new address for an existing wallet
	CreateAddress(context.Context, *CreateAddressRequest) (*CreateAddressResponse, error)
	GetAddress(context.Context, *GetAddressRequest) (*Address, error)
	GetAddressByAddress(context.Context, *GetAddressByAddressRequest) (*Address, error)
	GetAddressByIndex(context.Context, *GetAddressByIndexRequest) (*Address, error)
	ListAddresses(context.Context, *ListAddressesRequest) (*ListAddressesResponse, error)
	ListAddressesWithBalance(context.Context, *ListAddressesWithBalanceRequest) (*ListAddressesWithBalanceResponse, error)
	UpdateAddressBalance(context.Context, *UpdateAddressBalanceRequest) (*empty.Empty, error)
	// Get an address which hold ETH for ethereum wallet/address creation etc
	GetEthereumFeeAddress(context.Context, *GetEthereumFeeAddressRequest) (*EthereumFeeAddress, error)
	// RegisterKey
	RegisterKey(context.Context, *RegisterKeyRequest) (*RegisterKeyResponse, error)
	// Transaction
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	CreateXRPInitTransactions(context.Context, *CreateXRPInitTransactionsRequest) (*empty.Empty, error)
	SignTransaction(context.Context, *SignTransactionRequest) (*empty.Empty, error)
	SignXRPInitTransactions(context.Context, *SignXRPInitTransactionsRequest) (*empty.Empty, error)
	SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error)
	SendXRPInitTransactions(context.Context, *SendXRPInitTransactionsRequest) (*SendXRPInitTransactionsResponse, error)
	CancelTransaction(context.Context, *CancelTransactionRequest) (*empty.Empty, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*Transaction, error)
	GetTransactionByTxID(context.Context, *GetTransactionByTxIDRequest) (*Transaction, error)
	ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error)
	ListTransactionsByFilter(context.Context, *ListTransactionsByFilterRequest) (*ListTransactionsResponse, error)
	// SignInfo
	GetSignInfo(context.Context, *GetSignInfoRequest) (*SignInfo, error)
	ListSignInfo(context.Context, *ListSignInfoRequest) (*ListSignInfoResponse, error)
	ListXRPInitSignInfo(context.Context, *ListXRPInitSignInfoRequest) (*ListXRPInitSignInfoResponse, error)
	// Transfer
	// List transfers for a given wallet. Ordered by update time desc
	ListTransfers(context.Context, *ListTransfersRequest) (*ListTransfersResponse, error)
	ListTransfersByFilter(context.Context, *ListTransfersByFilterRequest) (*ListTransfersResponse, error)
	// Rate
	// Get rates by snapshot id
	GetRateSnapshot(context.Context, *GetRateSnapshotRequest) (*RateSnapshot, error)
	// Get latest rates set to your organization
	GetLatestRateSnapshot(context.Context, *GetLatestRateSnapshotRequest) (*RateSnapshot, error)
	// Set rates to your organization
	SetRates(context.Context, *SetRatesRequest) (*SetRatesResponse, error)
	// policy
	CreateLabeledAddress(context.Context, *CreateLabeledAddressRequest) (*CreateLabeledAddressResponse, error)
	GetLabeledAddress(context.Context, *GetLabeledAddressRequest) (*LabeledAddress, error)
	ListLabeledAddresses(context.Context, *ListLabeledAddressesRequest) (*ListLabeledAddressesResponse, error)
	IsDeletableLabeledAddress(context.Context, *IsDeletableLabeledAddressRequest) (*IsDeletableLabeledAddressResponse, error)
	UpdateLabeledAddress(context.Context, *UpdateLabeledAddressRequest) (*LabeledAddress, error)
	DeleteAddress(context.Context, *DeleteLabeledAddressRequest) (*empty.Empty, error)
	ReviewLabeledAddressProposal(context.Context, *ReviewLabeledAddressProposalRequest) (*empty.Empty, error)
	CreateWhitelist(context.Context, *CreateWhitelistRequest) (*CreateWhitelistResponse, error)
	GetWhitelist(context.Context, *GetWhitelistRequest) (*Whitelist, error)
	ListWhitelists(context.Context, *ListWhitelistsRequest) (*ListWhitelistsResponse, error)
	IsDeletableWhitelist(context.Context, *IsDeletableWhitelistRequest) (*IsDeletableWhitelistResponse, error)
	UpdateWhitelist(context.Context, *UpdateWhitelistRequest) (*Whitelist, error)
	UpdateWhitelistAddresses(context.Context, *UpdateWhitelistAddressesRequest) (*Whitelist, error)
	DeleteWhitelist(context.Context, *DeleteWhitelistRequest) (*empty.Empty, error)
	CreateTransferLimit(context.Context, *CreateTransferLimitRequest) (*CreateTransferLimitResponse, error)
	GetTransferLimit(context.Context, *GetTransferLimitRequest) (*TransferLimit, error)
	ListTransferLimits(context.Context, *ListTransferLimitsRequest) (*ListTransferLimitsResponse, error)
	IsDeletableTransferLimit(context.Context, *IsDeletableTransferLimitRequest) (*IsDeletableTransferLimitResponse, error)
	UpdateTransferLimit(context.Context, *UpdateTransferLimitRequest) (*TransferLimit, error)
	UpdateTransferLimitName(context.Context, *UpdateTransferLimitNameRequest) (*TransferLimit, error)
	DeleteTransferLimit(context.Context, *DeleteTransferLimitRequest) (*empty.Empty, error)
	ReviewTransferLimitProposal(context.Context, *ReviewTransferLimitProposalRequest) (*empty.Empty, error)
	CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error)
	GetPolicy(context.Context, *GetPolicyRequest) (*Policy, error)
	ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error)
	IsDeletablePolicy(context.Context, *IsDeletablePolicyRequest) (*IsDeletablePolicyResponse, error)
	UpdatePolicy(context.Context, *UpdatePolicyRequest) (*Policy, error)
	DeletePolicy(context.Context, *DeletePolicyRequest) (*empty.Empty, error)
	ReviewPolicyProposal(context.Context, *ReviewPolicyProposalRequest) (*empty.Empty, error)
	// Utility
	GetSpendableBalance(context.Context, *GetSpendableBalanceRequest) (*GetSpendableBalanceResponse, error)
	GetTotalBalance(context.Context, *GetTotalBalanceRequest) (*TotalBalance, error)
	ListBalanceSnapshots(context.Context, *ListBalanceSnapshotsRequest) (*ListBalanceSnapshotsResponse, error)
	CalculateFee(context.Context, *CalculateFeeRequest) (*CalculateFeeResponse, error)
	GetMembersDeactivatabilities(context.Context, *GetMembersDeactivatabilitiesRequest) (*GetMembersDeactivatabilitiesResponse, error)
	GetRecommendedFeeRate(context.Context, *GetRecommendedFeeRateRequest) (*GetRecommendedFeeRateResponse, error)
	// Validate format of given address
	ValidateAddress(context.Context, *ValidateAddressRequest) (*ValidateAddressResponse, error)
}

// UnimplementedGlobalAPIServer can be embedded to have forward compatible implementations.
type UnimplementedGlobalAPIServer struct {
}

func (*UnimplementedGlobalAPIServer) CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (*UnimplementedGlobalAPIServer) GetWallet(context.Context, *GetWalletRequest) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallet not implemented")
}
func (*UnimplementedGlobalAPIServer) CancelWallet(context.Context, *CancelWalletRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWallet not implemented")
}
func (*UnimplementedGlobalAPIServer) ArchiveWallet(context.Context, *ArchiveWalletRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveWallet not implemented")
}
func (*UnimplementedGlobalAPIServer) UnArchiveWallet(context.Context, *UnArchiveWalletRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnArchiveWallet not implemented")
}
func (*UnimplementedGlobalAPIServer) ListWallets(context.Context, *ListWalletsRequest) (*ListWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWallets not implemented")
}
func (*UnimplementedGlobalAPIServer) ListWalletsByFilter(context.Context, *ListWalletsByFilterRequest) (*ListWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletsByFilter not implemented")
}
func (*UnimplementedGlobalAPIServer) ListBaseWallets(context.Context, *ListBaseWalletsRequest) (*ListBaseWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBaseWallets not implemented")
}
func (*UnimplementedGlobalAPIServer) UpdateWalletName(context.Context, *UpdateWalletNameRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWalletName not implemented")
}
func (*UnimplementedGlobalAPIServer) UpdateWalletValidation(context.Context, *UpdateWalletValidationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWalletValidation not implemented")
}
func (*UnimplementedGlobalAPIServer) UpdateWalletPolicy(context.Context, *UpdateWalletPolicyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWalletPolicy not implemented")
}
func (*UnimplementedGlobalAPIServer) ReviewWalletProposal(context.Context, *ReviewWalletProposalRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewWalletProposal not implemented")
}
func (*UnimplementedGlobalAPIServer) FlushBalance(context.Context, *FlushBalanceRequest) (*FlushBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushBalance not implemented")
}
func (*UnimplementedGlobalAPIServer) ApproveWallet(context.Context, *ApproveWalletRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveWallet not implemented")
}
func (*UnimplementedGlobalAPIServer) ApproveTransaction(context.Context, *ApproveTransactionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveTransaction not implemented")
}
func (*UnimplementedGlobalAPIServer) CreateAddress(context.Context, *CreateAddressRequest) (*CreateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddress not implemented")
}
func (*UnimplementedGlobalAPIServer) GetAddress(context.Context, *GetAddressRequest) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (*UnimplementedGlobalAPIServer) GetAddressByAddress(context.Context, *GetAddressByAddressRequest) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressByAddress not implemented")
}
func (*UnimplementedGlobalAPIServer) GetAddressByIndex(context.Context, *GetAddressByIndexRequest) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressByIndex not implemented")
}
func (*UnimplementedGlobalAPIServer) ListAddresses(context.Context, *ListAddressesRequest) (*ListAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddresses not implemented")
}
func (*UnimplementedGlobalAPIServer) ListAddressesWithBalance(context.Context, *ListAddressesWithBalanceRequest) (*ListAddressesWithBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddressesWithBalance not implemented")
}
func (*UnimplementedGlobalAPIServer) UpdateAddressBalance(context.Context, *UpdateAddressBalanceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddressBalance not implemented")
}
func (*UnimplementedGlobalAPIServer) GetEthereumFeeAddress(context.Context, *GetEthereumFeeAddressRequest) (*EthereumFeeAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEthereumFeeAddress not implemented")
}
func (*UnimplementedGlobalAPIServer) RegisterKey(context.Context, *RegisterKeyRequest) (*RegisterKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterKey not implemented")
}
func (*UnimplementedGlobalAPIServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (*UnimplementedGlobalAPIServer) CreateXRPInitTransactions(context.Context, *CreateXRPInitTransactionsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateXRPInitTransactions not implemented")
}
func (*UnimplementedGlobalAPIServer) SignTransaction(context.Context, *SignTransactionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransaction not implemented")
}
func (*UnimplementedGlobalAPIServer) SignXRPInitTransactions(context.Context, *SignXRPInitTransactionsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignXRPInitTransactions not implemented")
}
func (*UnimplementedGlobalAPIServer) SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (*UnimplementedGlobalAPIServer) SendXRPInitTransactions(context.Context, *SendXRPInitTransactionsRequest) (*SendXRPInitTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendXRPInitTransactions not implemented")
}
func (*UnimplementedGlobalAPIServer) CancelTransaction(context.Context, *CancelTransactionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTransaction not implemented")
}
func (*UnimplementedGlobalAPIServer) GetTransaction(context.Context, *GetTransactionRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (*UnimplementedGlobalAPIServer) GetTransactionByTxID(context.Context, *GetTransactionByTxIDRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByTxID not implemented")
}
func (*UnimplementedGlobalAPIServer) ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (*UnimplementedGlobalAPIServer) ListTransactionsByFilter(context.Context, *ListTransactionsByFilterRequest) (*ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactionsByFilter not implemented")
}
func (*UnimplementedGlobalAPIServer) GetSignInfo(context.Context, *GetSignInfoRequest) (*SignInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignInfo not implemented")
}
func (*UnimplementedGlobalAPIServer) ListSignInfo(context.Context, *ListSignInfoRequest) (*ListSignInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSignInfo not implemented")
}
func (*UnimplementedGlobalAPIServer) ListXRPInitSignInfo(context.Context, *ListXRPInitSignInfoRequest) (*ListXRPInitSignInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListXRPInitSignInfo not implemented")
}
func (*UnimplementedGlobalAPIServer) ListTransfers(context.Context, *ListTransfersRequest) (*ListTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransfers not implemented")
}
func (*UnimplementedGlobalAPIServer) ListTransfersByFilter(context.Context, *ListTransfersByFilterRequest) (*ListTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransfersByFilter not implemented")
}
func (*UnimplementedGlobalAPIServer) GetRateSnapshot(context.Context, *GetRateSnapshotRequest) (*RateSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRateSnapshot not implemented")
}
func (*UnimplementedGlobalAPIServer) GetLatestRateSnapshot(context.Context, *GetLatestRateSnapshotRequest) (*RateSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestRateSnapshot not implemented")
}
func (*UnimplementedGlobalAPIServer) SetRates(context.Context, *SetRatesRequest) (*SetRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRates not implemented")
}
func (*UnimplementedGlobalAPIServer) CreateLabeledAddress(context.Context, *CreateLabeledAddressRequest) (*CreateLabeledAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLabeledAddress not implemented")
}
func (*UnimplementedGlobalAPIServer) GetLabeledAddress(context.Context, *GetLabeledAddressRequest) (*LabeledAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabeledAddress not implemented")
}
func (*UnimplementedGlobalAPIServer) ListLabeledAddresses(context.Context, *ListLabeledAddressesRequest) (*ListLabeledAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabeledAddresses not implemented")
}
func (*UnimplementedGlobalAPIServer) IsDeletableLabeledAddress(context.Context, *IsDeletableLabeledAddressRequest) (*IsDeletableLabeledAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDeletableLabeledAddress not implemented")
}
func (*UnimplementedGlobalAPIServer) UpdateLabeledAddress(context.Context, *UpdateLabeledAddressRequest) (*LabeledAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabeledAddress not implemented")
}
func (*UnimplementedGlobalAPIServer) DeleteAddress(context.Context, *DeleteLabeledAddressRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAddress not implemented")
}
func (*UnimplementedGlobalAPIServer) ReviewLabeledAddressProposal(context.Context, *ReviewLabeledAddressProposalRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewLabeledAddressProposal not implemented")
}
func (*UnimplementedGlobalAPIServer) CreateWhitelist(context.Context, *CreateWhitelistRequest) (*CreateWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWhitelist not implemented")
}
func (*UnimplementedGlobalAPIServer) GetWhitelist(context.Context, *GetWhitelistRequest) (*Whitelist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWhitelist not implemented")
}
func (*UnimplementedGlobalAPIServer) ListWhitelists(context.Context, *ListWhitelistsRequest) (*ListWhitelistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWhitelists not implemented")
}
func (*UnimplementedGlobalAPIServer) IsDeletableWhitelist(context.Context, *IsDeletableWhitelistRequest) (*IsDeletableWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDeletableWhitelist not implemented")
}
func (*UnimplementedGlobalAPIServer) UpdateWhitelist(context.Context, *UpdateWhitelistRequest) (*Whitelist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWhitelist not implemented")
}
func (*UnimplementedGlobalAPIServer) UpdateWhitelistAddresses(context.Context, *UpdateWhitelistAddressesRequest) (*Whitelist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWhitelistAddresses not implemented")
}
func (*UnimplementedGlobalAPIServer) DeleteWhitelist(context.Context, *DeleteWhitelistRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWhitelist not implemented")
}
func (*UnimplementedGlobalAPIServer) CreateTransferLimit(context.Context, *CreateTransferLimitRequest) (*CreateTransferLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransferLimit not implemented")
}
func (*UnimplementedGlobalAPIServer) GetTransferLimit(context.Context, *GetTransferLimitRequest) (*TransferLimit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferLimit not implemented")
}
func (*UnimplementedGlobalAPIServer) ListTransferLimits(context.Context, *ListTransferLimitsRequest) (*ListTransferLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransferLimits not implemented")
}
func (*UnimplementedGlobalAPIServer) IsDeletableTransferLimit(context.Context, *IsDeletableTransferLimitRequest) (*IsDeletableTransferLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDeletableTransferLimit not implemented")
}
func (*UnimplementedGlobalAPIServer) UpdateTransferLimit(context.Context, *UpdateTransferLimitRequest) (*TransferLimit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransferLimit not implemented")
}
func (*UnimplementedGlobalAPIServer) UpdateTransferLimitName(context.Context, *UpdateTransferLimitNameRequest) (*TransferLimit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransferLimitName not implemented")
}
func (*UnimplementedGlobalAPIServer) DeleteTransferLimit(context.Context, *DeleteTransferLimitRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransferLimit not implemented")
}
func (*UnimplementedGlobalAPIServer) ReviewTransferLimitProposal(context.Context, *ReviewTransferLimitProposalRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewTransferLimitProposal not implemented")
}
func (*UnimplementedGlobalAPIServer) CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (*UnimplementedGlobalAPIServer) GetPolicy(context.Context, *GetPolicyRequest) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (*UnimplementedGlobalAPIServer) ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (*UnimplementedGlobalAPIServer) IsDeletablePolicy(context.Context, *IsDeletablePolicyRequest) (*IsDeletablePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDeletablePolicy not implemented")
}
func (*UnimplementedGlobalAPIServer) UpdatePolicy(context.Context, *UpdatePolicyRequest) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (*UnimplementedGlobalAPIServer) DeletePolicy(context.Context, *DeletePolicyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (*UnimplementedGlobalAPIServer) ReviewPolicyProposal(context.Context, *ReviewPolicyProposalRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewPolicyProposal not implemented")
}
func (*UnimplementedGlobalAPIServer) GetSpendableBalance(context.Context, *GetSpendableBalanceRequest) (*GetSpendableBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpendableBalance not implemented")
}
func (*UnimplementedGlobalAPIServer) GetTotalBalance(context.Context, *GetTotalBalanceRequest) (*TotalBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalBalance not implemented")
}
func (*UnimplementedGlobalAPIServer) ListBalanceSnapshots(context.Context, *ListBalanceSnapshotsRequest) (*ListBalanceSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBalanceSnapshots not implemented")
}
func (*UnimplementedGlobalAPIServer) CalculateFee(context.Context, *CalculateFeeRequest) (*CalculateFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFee not implemented")
}
func (*UnimplementedGlobalAPIServer) GetMembersDeactivatabilities(context.Context, *GetMembersDeactivatabilitiesRequest) (*GetMembersDeactivatabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembersDeactivatabilities not implemented")
}
func (*UnimplementedGlobalAPIServer) GetRecommendedFeeRate(context.Context, *GetRecommendedFeeRateRequest) (*GetRecommendedFeeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendedFeeRate not implemented")
}
func (*UnimplementedGlobalAPIServer) ValidateAddress(context.Context, *ValidateAddressRequest) (*ValidateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAddress not implemented")
}

func RegisterGlobalAPIServer(s *grpc.Server, srv GlobalAPIServer) {
	s.RegisterService(&_GlobalAPI_serviceDesc, srv)
}

func _GlobalAPI_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetWallet(ctx, req.(*GetWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CancelWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CancelWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CancelWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CancelWallet(ctx, req.(*CancelWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ArchiveWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ArchiveWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ArchiveWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ArchiveWallet(ctx, req.(*ArchiveWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UnArchiveWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnArchiveWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UnArchiveWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UnArchiveWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UnArchiveWallet(ctx, req.(*UnArchiveWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListWallets(ctx, req.(*ListWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListWalletsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListWalletsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListWalletsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListWalletsByFilter(ctx, req.(*ListWalletsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListBaseWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBaseWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListBaseWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListBaseWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListBaseWallets(ctx, req.(*ListBaseWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateWalletName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateWalletName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateWalletName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateWalletName(ctx, req.(*UpdateWalletNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateWalletValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateWalletValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateWalletValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateWalletValidation(ctx, req.(*UpdateWalletValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateWalletPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateWalletPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateWalletPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateWalletPolicy(ctx, req.(*UpdateWalletPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ReviewWalletProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewWalletProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ReviewWalletProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ReviewWalletProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ReviewWalletProposal(ctx, req.(*ReviewWalletProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_FlushBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).FlushBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/FlushBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).FlushBalance(ctx, req.(*FlushBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ApproveWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ApproveWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ApproveWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ApproveWallet(ctx, req.(*ApproveWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ApproveTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ApproveTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ApproveTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ApproveTransaction(ctx, req.(*ApproveTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CreateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CreateAddress(ctx, req.(*CreateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetAddress(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetAddressByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetAddressByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetAddressByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetAddressByAddress(ctx, req.(*GetAddressByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetAddressByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetAddressByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetAddressByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetAddressByIndex(ctx, req.(*GetAddressByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListAddresses(ctx, req.(*ListAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListAddressesWithBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressesWithBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListAddressesWithBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListAddressesWithBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListAddressesWithBalance(ctx, req.(*ListAddressesWithBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateAddressBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateAddressBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateAddressBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateAddressBalance(ctx, req.(*UpdateAddressBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetEthereumFeeAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEthereumFeeAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetEthereumFeeAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetEthereumFeeAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetEthereumFeeAddress(ctx, req.(*GetEthereumFeeAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_RegisterKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).RegisterKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/RegisterKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).RegisterKey(ctx, req.(*RegisterKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CreateXRPInitTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateXRPInitTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CreateXRPInitTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CreateXRPInitTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CreateXRPInitTransactions(ctx, req.(*CreateXRPInitTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).SignTransaction(ctx, req.(*SignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_SignXRPInitTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignXRPInitTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).SignXRPInitTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/SignXRPInitTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).SignXRPInitTransactions(ctx, req.(*SignXRPInitTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_SendXRPInitTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendXRPInitTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).SendXRPInitTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/SendXRPInitTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).SendXRPInitTransactions(ctx, req.(*SendXRPInitTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CancelTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CancelTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CancelTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CancelTransaction(ctx, req.(*CancelTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetTransactionByTxID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByTxIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetTransactionByTxID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetTransactionByTxID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetTransactionByTxID(ctx, req.(*GetTransactionByTxIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListTransactions(ctx, req.(*ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListTransactionsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListTransactionsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListTransactionsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListTransactionsByFilter(ctx, req.(*ListTransactionsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetSignInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetSignInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetSignInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetSignInfo(ctx, req.(*GetSignInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListSignInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSignInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListSignInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListSignInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListSignInfo(ctx, req.(*ListSignInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListXRPInitSignInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListXRPInitSignInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListXRPInitSignInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListXRPInitSignInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListXRPInitSignInfo(ctx, req.(*ListXRPInitSignInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListTransfers(ctx, req.(*ListTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListTransfersByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransfersByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListTransfersByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListTransfersByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListTransfersByFilter(ctx, req.(*ListTransfersByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetRateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetRateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetRateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetRateSnapshot(ctx, req.(*GetRateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetLatestRateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestRateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetLatestRateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetLatestRateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetLatestRateSnapshot(ctx, req.(*GetLatestRateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_SetRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).SetRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/SetRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).SetRates(ctx, req.(*SetRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CreateLabeledAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLabeledAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CreateLabeledAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CreateLabeledAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CreateLabeledAddress(ctx, req.(*CreateLabeledAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetLabeledAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabeledAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetLabeledAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetLabeledAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetLabeledAddress(ctx, req.(*GetLabeledAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListLabeledAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabeledAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListLabeledAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListLabeledAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListLabeledAddresses(ctx, req.(*ListLabeledAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_IsDeletableLabeledAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsDeletableLabeledAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).IsDeletableLabeledAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/IsDeletableLabeledAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).IsDeletableLabeledAddress(ctx, req.(*IsDeletableLabeledAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateLabeledAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabeledAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateLabeledAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateLabeledAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateLabeledAddress(ctx, req.(*UpdateLabeledAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_DeleteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabeledAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).DeleteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/DeleteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).DeleteAddress(ctx, req.(*DeleteLabeledAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ReviewLabeledAddressProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewLabeledAddressProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ReviewLabeledAddressProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ReviewLabeledAddressProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ReviewLabeledAddressProposal(ctx, req.(*ReviewLabeledAddressProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CreateWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CreateWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CreateWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CreateWhitelist(ctx, req.(*CreateWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetWhitelist(ctx, req.(*GetWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListWhitelists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWhitelistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListWhitelists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListWhitelists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListWhitelists(ctx, req.(*ListWhitelistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_IsDeletableWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsDeletableWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).IsDeletableWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/IsDeletableWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).IsDeletableWhitelist(ctx, req.(*IsDeletableWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateWhitelist(ctx, req.(*UpdateWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateWhitelistAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWhitelistAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateWhitelistAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateWhitelistAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateWhitelistAddresses(ctx, req.(*UpdateWhitelistAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_DeleteWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).DeleteWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/DeleteWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).DeleteWhitelist(ctx, req.(*DeleteWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CreateTransferLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransferLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CreateTransferLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CreateTransferLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CreateTransferLimit(ctx, req.(*CreateTransferLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetTransferLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetTransferLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetTransferLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetTransferLimit(ctx, req.(*GetTransferLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListTransferLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransferLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListTransferLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListTransferLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListTransferLimits(ctx, req.(*ListTransferLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_IsDeletableTransferLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsDeletableTransferLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).IsDeletableTransferLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/IsDeletableTransferLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).IsDeletableTransferLimit(ctx, req.(*IsDeletableTransferLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateTransferLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransferLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateTransferLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateTransferLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateTransferLimit(ctx, req.(*UpdateTransferLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateTransferLimitName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransferLimitNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateTransferLimitName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateTransferLimitName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateTransferLimitName(ctx, req.(*UpdateTransferLimitNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_DeleteTransferLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransferLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).DeleteTransferLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/DeleteTransferLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).DeleteTransferLimit(ctx, req.(*DeleteTransferLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ReviewTransferLimitProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewTransferLimitProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ReviewTransferLimitProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ReviewTransferLimitProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ReviewTransferLimitProposal(ctx, req.(*ReviewTransferLimitProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CreatePolicy(ctx, req.(*CreatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetPolicy(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListPolicies(ctx, req.(*ListPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_IsDeletablePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsDeletablePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).IsDeletablePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/IsDeletablePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).IsDeletablePolicy(ctx, req.(*IsDeletablePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdatePolicy(ctx, req.(*UpdatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).DeletePolicy(ctx, req.(*DeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ReviewPolicyProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewPolicyProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ReviewPolicyProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ReviewPolicyProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ReviewPolicyProposal(ctx, req.(*ReviewPolicyProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetSpendableBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpendableBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetSpendableBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetSpendableBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetSpendableBalance(ctx, req.(*GetSpendableBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetTotalBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetTotalBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetTotalBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetTotalBalance(ctx, req.(*GetTotalBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListBalanceSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBalanceSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListBalanceSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListBalanceSnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListBalanceSnapshots(ctx, req.(*ListBalanceSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CalculateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CalculateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CalculateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CalculateFee(ctx, req.(*CalculateFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetMembersDeactivatabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersDeactivatabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetMembersDeactivatabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetMembersDeactivatabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetMembersDeactivatabilities(ctx, req.(*GetMembersDeactivatabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetRecommendedFeeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendedFeeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetRecommendedFeeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetRecommendedFeeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetRecommendedFeeRate(ctx, req.(*GetRecommendedFeeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ValidateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ValidateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ValidateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ValidateAddress(ctx, req.(*ValidateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GlobalAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "adamant.global.v1.GlobalAPI",
	HandlerType: (*GlobalAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _GlobalAPI_CreateWallet_Handler,
		},
		{
			MethodName: "GetWallet",
			Handler:    _GlobalAPI_GetWallet_Handler,
		},
		{
			MethodName: "CancelWallet",
			Handler:    _GlobalAPI_CancelWallet_Handler,
		},
		{
			MethodName: "ArchiveWallet",
			Handler:    _GlobalAPI_ArchiveWallet_Handler,
		},
		{
			MethodName: "UnArchiveWallet",
			Handler:    _GlobalAPI_UnArchiveWallet_Handler,
		},
		{
			MethodName: "ListWallets",
			Handler:    _GlobalAPI_ListWallets_Handler,
		},
		{
			MethodName: "ListWalletsByFilter",
			Handler:    _GlobalAPI_ListWalletsByFilter_Handler,
		},
		{
			MethodName: "ListBaseWallets",
			Handler:    _GlobalAPI_ListBaseWallets_Handler,
		},
		{
			MethodName: "UpdateWalletName",
			Handler:    _GlobalAPI_UpdateWalletName_Handler,
		},
		{
			MethodName: "UpdateWalletValidation",
			Handler:    _GlobalAPI_UpdateWalletValidation_Handler,
		},
		{
			MethodName: "UpdateWalletPolicy",
			Handler:    _GlobalAPI_UpdateWalletPolicy_Handler,
		},
		{
			MethodName: "ReviewWalletProposal",
			Handler:    _GlobalAPI_ReviewWalletProposal_Handler,
		},
		{
			MethodName: "FlushBalance",
			Handler:    _GlobalAPI_FlushBalance_Handler,
		},
		{
			MethodName: "ApproveWallet",
			Handler:    _GlobalAPI_ApproveWallet_Handler,
		},
		{
			MethodName: "ApproveTransaction",
			Handler:    _GlobalAPI_ApproveTransaction_Handler,
		},
		{
			MethodName: "CreateAddress",
			Handler:    _GlobalAPI_CreateAddress_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _GlobalAPI_GetAddress_Handler,
		},
		{
			MethodName: "GetAddressByAddress",
			Handler:    _GlobalAPI_GetAddressByAddress_Handler,
		},
		{
			MethodName: "GetAddressByIndex",
			Handler:    _GlobalAPI_GetAddressByIndex_Handler,
		},
		{
			MethodName: "ListAddresses",
			Handler:    _GlobalAPI_ListAddresses_Handler,
		},
		{
			MethodName: "ListAddressesWithBalance",
			Handler:    _GlobalAPI_ListAddressesWithBalance_Handler,
		},
		{
			MethodName: "UpdateAddressBalance",
			Handler:    _GlobalAPI_UpdateAddressBalance_Handler,
		},
		{
			MethodName: "GetEthereumFeeAddress",
			Handler:    _GlobalAPI_GetEthereumFeeAddress_Handler,
		},
		{
			MethodName: "RegisterKey",
			Handler:    _GlobalAPI_RegisterKey_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _GlobalAPI_CreateTransaction_Handler,
		},
		{
			MethodName: "CreateXRPInitTransactions",
			Handler:    _GlobalAPI_CreateXRPInitTransactions_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _GlobalAPI_SignTransaction_Handler,
		},
		{
			MethodName: "SignXRPInitTransactions",
			Handler:    _GlobalAPI_SignXRPInitTransactions_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _GlobalAPI_SendTransaction_Handler,
		},
		{
			MethodName: "SendXRPInitTransactions",
			Handler:    _GlobalAPI_SendXRPInitTransactions_Handler,
		},
		{
			MethodName: "CancelTransaction",
			Handler:    _GlobalAPI_CancelTransaction_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _GlobalAPI_GetTransaction_Handler,
		},
		{
			MethodName: "GetTransactionByTxID",
			Handler:    _GlobalAPI_GetTransactionByTxID_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _GlobalAPI_ListTransactions_Handler,
		},
		{
			MethodName: "ListTransactionsByFilter",
			Handler:    _GlobalAPI_ListTransactionsByFilter_Handler,
		},
		{
			MethodName: "GetSignInfo",
			Handler:    _GlobalAPI_GetSignInfo_Handler,
		},
		{
			MethodName: "ListSignInfo",
			Handler:    _GlobalAPI_ListSignInfo_Handler,
		},
		{
			MethodName: "ListXRPInitSignInfo",
			Handler:    _GlobalAPI_ListXRPInitSignInfo_Handler,
		},
		{
			MethodName: "ListTransfers",
			Handler:    _GlobalAPI_ListTransfers_Handler,
		},
		{
			MethodName: "ListTransfersByFilter",
			Handler:    _GlobalAPI_ListTransfersByFilter_Handler,
		},
		{
			MethodName: "GetRateSnapshot",
			Handler:    _GlobalAPI_GetRateSnapshot_Handler,
		},
		{
			MethodName: "GetLatestRateSnapshot",
			Handler:    _GlobalAPI_GetLatestRateSnapshot_Handler,
		},
		{
			MethodName: "SetRates",
			Handler:    _GlobalAPI_SetRates_Handler,
		},
		{
			MethodName: "CreateLabeledAddress",
			Handler:    _GlobalAPI_CreateLabeledAddress_Handler,
		},
		{
			MethodName: "GetLabeledAddress",
			Handler:    _GlobalAPI_GetLabeledAddress_Handler,
		},
		{
			MethodName: "ListLabeledAddresses",
			Handler:    _GlobalAPI_ListLabeledAddresses_Handler,
		},
		{
			MethodName: "IsDeletableLabeledAddress",
			Handler:    _GlobalAPI_IsDeletableLabeledAddress_Handler,
		},
		{
			MethodName: "UpdateLabeledAddress",
			Handler:    _GlobalAPI_UpdateLabeledAddress_Handler,
		},
		{
			MethodName: "DeleteAddress",
			Handler:    _GlobalAPI_DeleteAddress_Handler,
		},
		{
			MethodName: "ReviewLabeledAddressProposal",
			Handler:    _GlobalAPI_ReviewLabeledAddressProposal_Handler,
		},
		{
			MethodName: "CreateWhitelist",
			Handler:    _GlobalAPI_CreateWhitelist_Handler,
		},
		{
			MethodName: "GetWhitelist",
			Handler:    _GlobalAPI_GetWhitelist_Handler,
		},
		{
			MethodName: "ListWhitelists",
			Handler:    _GlobalAPI_ListWhitelists_Handler,
		},
		{
			MethodName: "IsDeletableWhitelist",
			Handler:    _GlobalAPI_IsDeletableWhitelist_Handler,
		},
		{
			MethodName: "UpdateWhitelist",
			Handler:    _GlobalAPI_UpdateWhitelist_Handler,
		},
		{
			MethodName: "UpdateWhitelistAddresses",
			Handler:    _GlobalAPI_UpdateWhitelistAddresses_Handler,
		},
		{
			MethodName: "DeleteWhitelist",
			Handler:    _GlobalAPI_DeleteWhitelist_Handler,
		},
		{
			MethodName: "CreateTransferLimit",
			Handler:    _GlobalAPI_CreateTransferLimit_Handler,
		},
		{
			MethodName: "GetTransferLimit",
			Handler:    _GlobalAPI_GetTransferLimit_Handler,
		},
		{
			MethodName: "ListTransferLimits",
			Handler:    _GlobalAPI_ListTransferLimits_Handler,
		},
		{
			MethodName: "IsDeletableTransferLimit",
			Handler:    _GlobalAPI_IsDeletableTransferLimit_Handler,
		},
		{
			MethodName: "UpdateTransferLimit",
			Handler:    _GlobalAPI_UpdateTransferLimit_Handler,
		},
		{
			MethodName: "UpdateTransferLimitName",
			Handler:    _GlobalAPI_UpdateTransferLimitName_Handler,
		},
		{
			MethodName: "DeleteTransferLimit",
			Handler:    _GlobalAPI_DeleteTransferLimit_Handler,
		},
		{
			MethodName: "ReviewTransferLimitProposal",
			Handler:    _GlobalAPI_ReviewTransferLimitProposal_Handler,
		},
		{
			MethodName: "CreatePolicy",
			Handler:    _GlobalAPI_CreatePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _GlobalAPI_GetPolicy_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _GlobalAPI_ListPolicies_Handler,
		},
		{
			MethodName: "IsDeletablePolicy",
			Handler:    _GlobalAPI_IsDeletablePolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _GlobalAPI_UpdatePolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _GlobalAPI_DeletePolicy_Handler,
		},
		{
			MethodName: "ReviewPolicyProposal",
			Handler:    _GlobalAPI_ReviewPolicyProposal_Handler,
		},
		{
			MethodName: "GetSpendableBalance",
			Handler:    _GlobalAPI_GetSpendableBalance_Handler,
		},
		{
			MethodName: "GetTotalBalance",
			Handler:    _GlobalAPI_GetTotalBalance_Handler,
		},
		{
			MethodName: "ListBalanceSnapshots",
			Handler:    _GlobalAPI_ListBalanceSnapshots_Handler,
		},
		{
			MethodName: "CalculateFee",
			Handler:    _GlobalAPI_CalculateFee_Handler,
		},
		{
			MethodName: "GetMembersDeactivatabilities",
			Handler:    _GlobalAPI_GetMembersDeactivatabilities_Handler,
		},
		{
			MethodName: "GetRecommendedFeeRate",
			Handler:    _GlobalAPI_GetRecommendedFeeRate_Handler,
		},
		{
			MethodName: "ValidateAddress",
			Handler:    _GlobalAPI_ValidateAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gincoinc/adamant/global/v1/adamantglobalv1/global_api.proto",
}
