// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: gincoinc/adamant/global/v1/adamantglobalv1/audit_logger.proto

package adamantglobalv1

import (
	gincoincglobalv1 "github.com/GincoInc/gew-kmp/gen/gincoinc/global/v1/gincoincglobalv1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Model
type AuditLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuditLogId                string                   `protobuf:"bytes,1,opt,name=audit_log_id,json=auditLogId,proto3" json:"audit_log_id,omitempty"`
	AuditLogGroup             AuditLogGroup            `protobuf:"varint,2,opt,name=audit_log_group,json=auditLogGroup,proto3,enum=adamant.global.v1.AuditLogGroup" json:"audit_log_group,omitempty"`
	AuditLogType              AuditLogType             `protobuf:"varint,3,opt,name=audit_log_type,json=auditLogType,proto3,enum=adamant.global.v1.AuditLogType" json:"audit_log_type,omitempty"`
	AccountId                 string                   `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountName               string                   `protobuf:"bytes,5,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	TargetAccountId           string                   `protobuf:"bytes,6,opt,name=target_account_id,json=targetAccountId,proto3" json:"target_account_id,omitempty"`
	TargetAccountName         string                   `protobuf:"bytes,7,opt,name=target_account_name,json=targetAccountName,proto3" json:"target_account_name,omitempty"`
	Email                     string                   `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	RoleType                  RoleType                 `protobuf:"varint,9,opt,name=role_type,json=roleType,proto3,enum=adamant.global.v1.RoleType" json:"role_type,omitempty"`
	ServiceAccountId          string                   `protobuf:"bytes,10,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	ServiceAccountName        string                   `protobuf:"bytes,11,opt,name=service_account_name,json=serviceAccountName,proto3" json:"service_account_name,omitempty"`
	ServiceAccountKeyId       string                   `protobuf:"bytes,12,opt,name=service_account_key_id,json=serviceAccountKeyId,proto3" json:"service_account_key_id,omitempty"`
	WalletId                  string                   `protobuf:"bytes,13,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	WalletName                string                   `protobuf:"bytes,14,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	DestinationWalletId       string                   `protobuf:"bytes,39,opt,name=destination_wallet_id,json=destinationWalletId,proto3" json:"destination_wallet_id,omitempty"`
	DestinationWalletName     string                   `protobuf:"bytes,40,opt,name=destination_wallet_name,json=destinationWalletName,proto3" json:"destination_wallet_name,omitempty"`
	WalletGroupId             string                   `protobuf:"bytes,34,opt,name=wallet_group_id,json=walletGroupId,proto3" json:"wallet_group_id,omitempty"`
	WalletGroupName           string                   `protobuf:"bytes,35,opt,name=wallet_group_name,json=walletGroupName,proto3" json:"wallet_group_name,omitempty"`
	WalletNames               []string                 `protobuf:"bytes,36,rep,name=wallet_names,json=walletNames,proto3" json:"wallet_names,omitempty"`
	PreTransactionId          string                   `protobuf:"bytes,50,opt,name=pre_transaction_id,json=preTransactionId,proto3" json:"pre_transaction_id,omitempty"`
	TransactionId             string                   `protobuf:"bytes,15,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	CoinType                  gincoincglobalv1.Coin    `protobuf:"varint,16,opt,name=coin_type,json=coinType,proto3,enum=gincoinc.global.v1.Coin" json:"coin_type,omitempty"`
	StringValue               string                   `protobuf:"bytes,17,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	TxId                      string                   `protobuf:"bytes,18,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	PolicyId                  string                   `protobuf:"bytes,19,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	PolicyName                string                   `protobuf:"bytes,20,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	LabeledAddressId          string                   `protobuf:"bytes,21,opt,name=labeled_address_id,json=labeledAddressId,proto3" json:"labeled_address_id,omitempty"`
	Address                   string                   `protobuf:"bytes,22,opt,name=address,proto3" json:"address,omitempty"`
	AddressName               string                   `protobuf:"bytes,23,opt,name=address_name,json=addressName,proto3" json:"address_name,omitempty"`
	Message                   string                   `protobuf:"bytes,43,opt,name=message,proto3" json:"message,omitempty"`
	TransferLimitId           string                   `protobuf:"bytes,24,opt,name=transfer_limit_id,json=transferLimitId,proto3" json:"transfer_limit_id,omitempty"`
	TransferLimitName         string                   `protobuf:"bytes,25,opt,name=transfer_limit_name,json=transferLimitName,proto3" json:"transfer_limit_name,omitempty"`
	TransferOneTimeLimit      int64                    `protobuf:"varint,26,opt,name=transfer_one_time_limit,json=transferOneTimeLimit,proto3" json:"transfer_one_time_limit,omitempty"`
	TransferHourlyLimit       int64                    `protobuf:"varint,27,opt,name=transfer_hourly_limit,json=transferHourlyLimit,proto3" json:"transfer_hourly_limit,omitempty"`
	TransferDailyLimit        int64                    `protobuf:"varint,28,opt,name=transfer_daily_limit,json=transferDailyLimit,proto3" json:"transfer_daily_limit,omitempty"`
	WhitelistId               string                   `protobuf:"bytes,29,opt,name=whitelist_id,json=whitelistId,proto3" json:"whitelist_id,omitempty"`
	WhitelistName             string                   `protobuf:"bytes,30,opt,name=whitelist_name,json=whitelistName,proto3" json:"whitelist_name,omitempty"`
	OldValidators             []string                 `protobuf:"bytes,37,rep,name=old_validators,json=oldValidators,proto3" json:"old_validators,omitempty"`
	NewValidators             []string                 `protobuf:"bytes,38,rep,name=new_validators,json=newValidators,proto3" json:"new_validators,omitempty"`
	WhitelistAddresses        []string                 `protobuf:"bytes,31,rep,name=whitelist_addresses,json=whitelistAddresses,proto3" json:"whitelist_addresses,omitempty"`
	EventTime                 *timestamppb.Timestamp   `protobuf:"bytes,32,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	CreateTime                *timestamppb.Timestamp   `protobuf:"bytes,33,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	EnabledMails              []MailType               `protobuf:"varint,41,rep,packed,name=enabled_mails,json=enabledMails,proto3,enum=adamant.global.v1.MailType" json:"enabled_mails,omitempty"`
	DisabledMails             []MailType               `protobuf:"varint,42,rep,packed,name=disabled_mails,json=disabledMails,proto3,enum=adamant.global.v1.MailType" json:"disabled_mails,omitempty"`
	Network                   gincoincglobalv1.Network `protobuf:"varint,44,opt,name=network,proto3,enum=gincoinc.global.v1.Network" json:"network,omitempty"`
	PreTransactionThreshold   float64                  `protobuf:"fixed64,45,opt,name=pre_transaction_threshold,json=preTransactionThreshold,proto3" json:"pre_transaction_threshold,omitempty"`
	PreTransactionThresholdId string                   `protobuf:"bytes,46,opt,name=pre_transaction_threshold_id,json=preTransactionThresholdId,proto3" json:"pre_transaction_threshold_id,omitempty"`
	BlacklistAddressId        string                   `protobuf:"bytes,47,opt,name=blacklist_address_id,json=blacklistAddressId,proto3" json:"blacklist_address_id,omitempty"`
	FileName                  string                   `protobuf:"bytes,48,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	AddressCount              int64                    `protobuf:"varint,49,opt,name=address_count,json=addressCount,proto3" json:"address_count,omitempty"`
	PreviousTransactionId     string                   `protobuf:"bytes,51,opt,name=previous_transaction_id,json=previousTransactionId,proto3" json:"previous_transaction_id,omitempty"`
	NewTransactionId          string                   `protobuf:"bytes,52,opt,name=new_transaction_id,json=newTransactionId,proto3" json:"new_transaction_id,omitempty"`
}

func (x *AuditLog) Reset() {
	*x = AuditLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLog) ProtoMessage() {}

func (x *AuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLog.ProtoReflect.Descriptor instead.
func (*AuditLog) Descriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_rawDescGZIP(), []int{0}
}

func (x *AuditLog) GetAuditLogId() string {
	if x != nil {
		return x.AuditLogId
	}
	return ""
}

func (x *AuditLog) GetAuditLogGroup() AuditLogGroup {
	if x != nil {
		return x.AuditLogGroup
	}
	return AuditLogGroup_AUDIT_LOG_GROUP_INVALID
}

func (x *AuditLog) GetAuditLogType() AuditLogType {
	if x != nil {
		return x.AuditLogType
	}
	return AuditLogType_AUDIT_LOG_TYPE_INVALID
}

func (x *AuditLog) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AuditLog) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *AuditLog) GetTargetAccountId() string {
	if x != nil {
		return x.TargetAccountId
	}
	return ""
}

func (x *AuditLog) GetTargetAccountName() string {
	if x != nil {
		return x.TargetAccountName
	}
	return ""
}

func (x *AuditLog) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AuditLog) GetRoleType() RoleType {
	if x != nil {
		return x.RoleType
	}
	return RoleType_ROLE_TYPE_INVALID
}

func (x *AuditLog) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *AuditLog) GetServiceAccountName() string {
	if x != nil {
		return x.ServiceAccountName
	}
	return ""
}

func (x *AuditLog) GetServiceAccountKeyId() string {
	if x != nil {
		return x.ServiceAccountKeyId
	}
	return ""
}

func (x *AuditLog) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *AuditLog) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *AuditLog) GetDestinationWalletId() string {
	if x != nil {
		return x.DestinationWalletId
	}
	return ""
}

func (x *AuditLog) GetDestinationWalletName() string {
	if x != nil {
		return x.DestinationWalletName
	}
	return ""
}

func (x *AuditLog) GetWalletGroupId() string {
	if x != nil {
		return x.WalletGroupId
	}
	return ""
}

func (x *AuditLog) GetWalletGroupName() string {
	if x != nil {
		return x.WalletGroupName
	}
	return ""
}

func (x *AuditLog) GetWalletNames() []string {
	if x != nil {
		return x.WalletNames
	}
	return nil
}

func (x *AuditLog) GetPreTransactionId() string {
	if x != nil {
		return x.PreTransactionId
	}
	return ""
}

func (x *AuditLog) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *AuditLog) GetCoinType() gincoincglobalv1.Coin {
	if x != nil {
		return x.CoinType
	}
	return gincoincglobalv1.Coin(0)
}

func (x *AuditLog) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *AuditLog) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *AuditLog) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *AuditLog) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *AuditLog) GetLabeledAddressId() string {
	if x != nil {
		return x.LabeledAddressId
	}
	return ""
}

func (x *AuditLog) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AuditLog) GetAddressName() string {
	if x != nil {
		return x.AddressName
	}
	return ""
}

func (x *AuditLog) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AuditLog) GetTransferLimitId() string {
	if x != nil {
		return x.TransferLimitId
	}
	return ""
}

func (x *AuditLog) GetTransferLimitName() string {
	if x != nil {
		return x.TransferLimitName
	}
	return ""
}

func (x *AuditLog) GetTransferOneTimeLimit() int64 {
	if x != nil {
		return x.TransferOneTimeLimit
	}
	return 0
}

func (x *AuditLog) GetTransferHourlyLimit() int64 {
	if x != nil {
		return x.TransferHourlyLimit
	}
	return 0
}

func (x *AuditLog) GetTransferDailyLimit() int64 {
	if x != nil {
		return x.TransferDailyLimit
	}
	return 0
}

func (x *AuditLog) GetWhitelistId() string {
	if x != nil {
		return x.WhitelistId
	}
	return ""
}

func (x *AuditLog) GetWhitelistName() string {
	if x != nil {
		return x.WhitelistName
	}
	return ""
}

func (x *AuditLog) GetOldValidators() []string {
	if x != nil {
		return x.OldValidators
	}
	return nil
}

func (x *AuditLog) GetNewValidators() []string {
	if x != nil {
		return x.NewValidators
	}
	return nil
}

func (x *AuditLog) GetWhitelistAddresses() []string {
	if x != nil {
		return x.WhitelistAddresses
	}
	return nil
}

func (x *AuditLog) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *AuditLog) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *AuditLog) GetEnabledMails() []MailType {
	if x != nil {
		return x.EnabledMails
	}
	return nil
}

func (x *AuditLog) GetDisabledMails() []MailType {
	if x != nil {
		return x.DisabledMails
	}
	return nil
}

func (x *AuditLog) GetNetwork() gincoincglobalv1.Network {
	if x != nil {
		return x.Network
	}
	return gincoincglobalv1.Network(0)
}

func (x *AuditLog) GetPreTransactionThreshold() float64 {
	if x != nil {
		return x.PreTransactionThreshold
	}
	return 0
}

func (x *AuditLog) GetPreTransactionThresholdId() string {
	if x != nil {
		return x.PreTransactionThresholdId
	}
	return ""
}

func (x *AuditLog) GetBlacklistAddressId() string {
	if x != nil {
		return x.BlacklistAddressId
	}
	return ""
}

func (x *AuditLog) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *AuditLog) GetAddressCount() int64 {
	if x != nil {
		return x.AddressCount
	}
	return 0
}

func (x *AuditLog) GetPreviousTransactionId() string {
	if x != nil {
		return x.PreviousTransactionId
	}
	return ""
}

func (x *AuditLog) GetNewTransactionId() string {
	if x != nil {
		return x.NewTransactionId
	}
	return ""
}

var File_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto protoreflect.FileDescriptor

var file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x1a, 0x35, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f,
	0x69, 0x6e, 0x63, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x69,
	0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x12, 0x0a, 0x08, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x45, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x38,
	0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e,
	0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x13, 0x0a,
	0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x6e,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x1f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x12, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x29, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4d, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x42, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x4d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e,
	0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3a, 0x0a, 0x19,
	0x70, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x17, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x17, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x47, 0x69, 0x6e, 0x63, 0x6f, 0x49, 0x6e, 0x63, 0x2f, 0x67, 0x65, 0x77, 0x2d, 0x6b,
	0x6d, 0x70, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f,
	0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_rawDescOnce sync.Once
	file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_rawDescData = file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_rawDesc
)

func file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_rawDescGZIP() []byte {
	file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_rawDescOnce.Do(func() {
		file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_rawDescData = protoimpl.X.CompressGZIP(file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_rawDescData)
	})
	return file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_rawDescData
}

var file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_goTypes = []interface{}{
	(*AuditLog)(nil),              // 0: adamant.global.v1.AuditLog
	(AuditLogGroup)(0),            // 1: adamant.global.v1.AuditLogGroup
	(AuditLogType)(0),             // 2: adamant.global.v1.AuditLogType
	(RoleType)(0),                 // 3: adamant.global.v1.RoleType
	(gincoincglobalv1.Coin)(0),    // 4: gincoinc.global.v1.Coin
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
	(MailType)(0),                 // 6: adamant.global.v1.MailType
	(gincoincglobalv1.Network)(0), // 7: gincoinc.global.v1.Network
}
var file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_depIdxs = []int32{
	1, // 0: adamant.global.v1.AuditLog.audit_log_group:type_name -> adamant.global.v1.AuditLogGroup
	2, // 1: adamant.global.v1.AuditLog.audit_log_type:type_name -> adamant.global.v1.AuditLogType
	3, // 2: adamant.global.v1.AuditLog.role_type:type_name -> adamant.global.v1.RoleType
	4, // 3: adamant.global.v1.AuditLog.coin_type:type_name -> gincoinc.global.v1.Coin
	5, // 4: adamant.global.v1.AuditLog.event_time:type_name -> google.protobuf.Timestamp
	5, // 5: adamant.global.v1.AuditLog.create_time:type_name -> google.protobuf.Timestamp
	6, // 6: adamant.global.v1.AuditLog.enabled_mails:type_name -> adamant.global.v1.MailType
	6, // 7: adamant.global.v1.AuditLog.disabled_mails:type_name -> adamant.global.v1.MailType
	7, // 8: adamant.global.v1.AuditLog.network:type_name -> gincoinc.global.v1.Network
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_init() }
func file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_init() {
	if File_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto != nil {
		return
	}
	file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_goTypes,
		DependencyIndexes: file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_depIdxs,
		MessageInfos:      file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_msgTypes,
	}.Build()
	File_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto = out.File
	file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_rawDesc = nil
	file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_goTypes = nil
	file_gincoinc_adamant_global_v1_adamantglobalv1_audit_logger_proto_depIdxs = nil
}
