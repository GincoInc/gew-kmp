// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gincoinc/adamant/global/v1/adamantglobalv1/model.proto

package adamantglobalv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	gincoincglobalv1 "github.com/GincoInc/gew-kmp/gen/gincoinc/global/v1/gincoincglobalv1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.AddressType(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.AddressType(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.AddressType(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.AddressType(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.XRPTransactionType(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.TransferType(0)

	_ = gincoincglobalv1.TransactionState(0)

	_ = gincoincglobalv1.TransactionResult(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.TransferType(0)

	_ = gincoincglobalv1.TransferType(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)
)

// define the regex for a UUID once up-front
var _model_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Wallet with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Wallet) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	// no validation rules for Name

	// no validation rules for Coin

	// no validation rules for HdAccount

	// no validation rules for WalletType

	// no validation rules for AddressType

	// no validation rules for M

	// no validation rules for N

	// no validation rules for State

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WalletValidationError{
					field:  fmt.Sprintf("Keys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WalletValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for RequiredApprovalCount

	// no validation rules for Balance

	// no validation rules for StringBalance

	// no validation rules for Address

	// no validation rules for PolicyId

	if v, ok := interface{}(m.GetProposal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WalletValidationError{
				field:  "Proposal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DestinationWalletId

	// no validation rules for WatchOnly

	// no validation rules for AddressNumber

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WalletValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WalletValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WalletValidationError is the validation error returned by Wallet.Validate if
// the designated constraints aren't met.
type WalletValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletValidationError) ErrorName() string { return "WalletValidationError" }

// Error satisfies the builtin error interface
func (e WalletValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWallet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletValidationError{}

// Validate checks the field values on WalletWithoutBalance with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WalletWithoutBalance) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	// no validation rules for Name

	// no validation rules for Coin

	// no validation rules for HdAccount

	// no validation rules for WalletType

	// no validation rules for AddressType

	// no validation rules for M

	// no validation rules for N

	// no validation rules for State

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WalletWithoutBalanceValidationError{
					field:  fmt.Sprintf("Keys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WalletWithoutBalanceValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for RequiredApprovalCount

	// no validation rules for Address

	// no validation rules for PolicyId

	if v, ok := interface{}(m.GetProposal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WalletWithoutBalanceValidationError{
				field:  "Proposal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DestinationWalletId

	// no validation rules for WatchOnly

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WalletWithoutBalanceValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WalletWithoutBalanceValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WalletWithoutBalanceValidationError is the validation error returned by
// WalletWithoutBalance.Validate if the designated constraints aren't met.
type WalletWithoutBalanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletWithoutBalanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletWithoutBalanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletWithoutBalanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletWithoutBalanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletWithoutBalanceValidationError) ErrorName() string {
	return "WalletWithoutBalanceValidationError"
}

// Error satisfies the builtin error interface
func (e WalletWithoutBalanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWalletWithoutBalance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletWithoutBalanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletWithoutBalanceValidationError{}

// Validate checks the field values on WalletProposal with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WalletProposal) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProposalType

	// no validation rules for RequesterAccountId

	// no validation rules for RequesterName

	// no validation rules for ApproverAccountId

	// no validation rules for ApproverName

	// no validation rules for ProposedPolicy

	// no validation rules for ProposedRequiredApprovalCount

	// no validation rules for IsReviewed

	return nil
}

// WalletProposalValidationError is the validation error returned by
// WalletProposal.Validate if the designated constraints aren't met.
type WalletProposalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletProposalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletProposalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletProposalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletProposalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletProposalValidationError) ErrorName() string { return "WalletProposalValidationError" }

// Error satisfies the builtin error interface
func (e WalletProposalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWalletProposal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletProposalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletProposalValidationError{}

// Validate checks the field values on WalletMember with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WalletMember) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccountId

	// no validation rules for AccountType

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Role

	// no validation rules for IsKeyRegistered

	// no validation rules for IsMaster

	// no validation rules for IsValidatedToCreateWallet

	return nil
}

// WalletMemberValidationError is the validation error returned by
// WalletMember.Validate if the designated constraints aren't met.
type WalletMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletMemberValidationError) ErrorName() string { return "WalletMemberValidationError" }

// Error satisfies the builtin error interface
func (e WalletMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWalletMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletMemberValidationError{}

// Validate checks the field values on Key with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Key) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	// no validation rules for AccountId

	// no validation rules for AccountType

	// no validation rules for KeyId

	// no validation rules for KeyIndex

	return nil
}

// KeyValidationError is the validation error returned by Key.Validate if the
// designated constraints aren't met.
type KeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyValidationError) ErrorName() string { return "KeyValidationError" }

// Error satisfies the builtin error interface
func (e KeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyValidationError{}

// Validate checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Address) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	// no validation rules for AddressId

	// no validation rules for Coin

	// no validation rules for Address

	// no validation rules for Index

	// no validation rules for Balance

	// no validation rules for StringBalance

	// no validation rules for State

	// no validation rules for AddressType

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddressValidationError is the validation error returned by Address.Validate
// if the designated constraints aren't met.
type AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressValidationError) ErrorName() string { return "AddressValidationError" }

// Error satisfies the builtin error interface
func (e AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressValidationError{}

// Validate checks the field values on FlushedAddress with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FlushedAddress) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	// no validation rules for AddressId

	// no validation rules for Coin

	// no validation rules for Address

	// no validation rules for Index

	// no validation rules for Value

	// no validation rules for StringValue

	// no validation rules for State

	// no validation rules for AddressType

	return nil
}

// FlushedAddressValidationError is the validation error returned by
// FlushedAddress.Validate if the designated constraints aren't met.
type FlushedAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlushedAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlushedAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlushedAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlushedAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlushedAddressValidationError) ErrorName() string { return "FlushedAddressValidationError" }

// Error satisfies the builtin error interface
func (e FlushedAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlushedAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlushedAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlushedAddressValidationError{}

// Validate checks the field values on EthereumFeeAddress with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EthereumFeeAddress) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Address

	// no validation rules for Balance

	// no validation rules for StringBalance

	return nil
}

// EthereumFeeAddressValidationError is the validation error returned by
// EthereumFeeAddress.Validate if the designated constraints aren't met.
type EthereumFeeAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EthereumFeeAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EthereumFeeAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EthereumFeeAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EthereumFeeAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EthereumFeeAddressValidationError) ErrorName() string {
	return "EthereumFeeAddressValidationError"
}

// Error satisfies the builtin error interface
func (e EthereumFeeAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEthereumFeeAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EthereumFeeAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EthereumFeeAddressValidationError{}

// Validate checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Transaction) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	// no validation rules for TransactionId

	// no validation rules for Coin

	// no validation rules for TxId

	// no validation rules for Address

	// no validation rules for Value

	// no validation rules for StringValue

	// no validation rules for JpyRate

	// no validation rules for Fee

	// no validation rules for StringFee

	// no validation rules for FeeRate

	// no validation rules for State

	for idx, item := range m.GetSignedKeys() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionValidationError{
					field:  fmt.Sprintf("SignedKeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetBitcoinSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionValidationError{
				field:  "BitcoinSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEthereumSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionValidationError{
				field:  "EthereumSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLitecoinSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionValidationError{
				field:  "LitecoinSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetBitcoincashSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionValidationError{
				field:  "BitcoincashSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetXrpSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionValidationError{
				field:  "XrpSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TransactionValidationError is the validation error returned by
// Transaction.Validate if the designated constraints aren't met.
type TransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionValidationError) ErrorName() string { return "TransactionValidationError" }

// Error satisfies the builtin error interface
func (e TransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionValidationError{}

// Validate checks the field values on TransactionMember with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TransactionMember) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccountId

	// no validation rules for AccountType

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Role

	// no validation rules for Signed

	// no validation rules for Validated

	return nil
}

// TransactionMemberValidationError is the validation error returned by
// TransactionMember.Validate if the designated constraints aren't met.
type TransactionMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionMemberValidationError) ErrorName() string {
	return "TransactionMemberValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionMemberValidationError{}

// Validate checks the field values on TxInput with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TxInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TxId

	// no validation rules for TxIndex

	// no validation rules for Value

	// no validation rules for StringValue

	return nil
}

// TxInputValidationError is the validation error returned by TxInput.Validate
// if the designated constraints aren't met.
type TxInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxInputValidationError) ErrorName() string { return "TxInputValidationError" }

// Error satisfies the builtin error interface
func (e TxInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxInputValidationError{}

// Validate checks the field values on TxOutput with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TxOutput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Address

	// no validation rules for Value

	// no validation rules for StringValue

	// no validation rules for IsChange

	return nil
}

// TxOutputValidationError is the validation error returned by
// TxOutput.Validate if the designated constraints aren't met.
type TxOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxOutputValidationError) ErrorName() string { return "TxOutputValidationError" }

// Error satisfies the builtin error interface
func (e TxOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxOutputValidationError{}

// Validate checks the field values on BitcoinSpecific with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BitcoinSpecific) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTxInputs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BitcoinSpecificValidationError{
					field:  fmt.Sprintf("TxInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTxOutputs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BitcoinSpecificValidationError{
					field:  fmt.Sprintf("TxOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BitcoinSpecificValidationError is the validation error returned by
// BitcoinSpecific.Validate if the designated constraints aren't met.
type BitcoinSpecificValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BitcoinSpecificValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BitcoinSpecificValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BitcoinSpecificValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BitcoinSpecificValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BitcoinSpecificValidationError) ErrorName() string { return "BitcoinSpecificValidationError" }

// Error satisfies the builtin error interface
func (e BitcoinSpecificValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBitcoinSpecific.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BitcoinSpecificValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BitcoinSpecificValidationError{}

// Validate checks the field values on LitecoinSpecific with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LitecoinSpecific) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTxInputs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LitecoinSpecificValidationError{
					field:  fmt.Sprintf("TxInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTxOutputs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LitecoinSpecificValidationError{
					field:  fmt.Sprintf("TxOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// LitecoinSpecificValidationError is the validation error returned by
// LitecoinSpecific.Validate if the designated constraints aren't met.
type LitecoinSpecificValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LitecoinSpecificValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LitecoinSpecificValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LitecoinSpecificValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LitecoinSpecificValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LitecoinSpecificValidationError) ErrorName() string { return "LitecoinSpecificValidationError" }

// Error satisfies the builtin error interface
func (e LitecoinSpecificValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLitecoinSpecific.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LitecoinSpecificValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LitecoinSpecificValidationError{}

// Validate checks the field values on BitcoincashSpecific with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BitcoincashSpecific) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTxInputs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BitcoincashSpecificValidationError{
					field:  fmt.Sprintf("TxInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTxOutputs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BitcoincashSpecificValidationError{
					field:  fmt.Sprintf("TxOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BitcoincashSpecificValidationError is the validation error returned by
// BitcoincashSpecific.Validate if the designated constraints aren't met.
type BitcoincashSpecificValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BitcoincashSpecificValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BitcoincashSpecificValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BitcoincashSpecificValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BitcoincashSpecificValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BitcoincashSpecificValidationError) ErrorName() string {
	return "BitcoincashSpecificValidationError"
}

// Error satisfies the builtin error interface
func (e BitcoincashSpecificValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBitcoincashSpecific.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BitcoincashSpecificValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BitcoincashSpecificValidationError{}

// Validate checks the field values on EthereumSpecific with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EthereumSpecific) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GasLimit

	// no validation rules for Nonce

	// no validation rules for IsNextNonce

	return nil
}

// EthereumSpecificValidationError is the validation error returned by
// EthereumSpecific.Validate if the designated constraints aren't met.
type EthereumSpecificValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EthereumSpecificValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EthereumSpecificValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EthereumSpecificValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EthereumSpecificValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EthereumSpecificValidationError) ErrorName() string { return "EthereumSpecificValidationError" }

// Error satisfies the builtin error interface
func (e EthereumSpecificValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEthereumSpecific.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EthereumSpecificValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EthereumSpecificValidationError{}

// Validate checks the field values on XrpSpecific with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *XrpSpecific) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SequenceNumber

	// no validation rules for DestinationTag

	// no validation rules for TxType

	// no validation rules for IsNextSequenceNumber

	return nil
}

// XrpSpecificValidationError is the validation error returned by
// XrpSpecific.Validate if the designated constraints aren't met.
type XrpSpecificValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XrpSpecificValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XrpSpecificValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XrpSpecificValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XrpSpecificValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XrpSpecificValidationError) ErrorName() string { return "XrpSpecificValidationError" }

// Error satisfies the builtin error interface
func (e XrpSpecificValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXrpSpecific.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XrpSpecificValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XrpSpecificValidationError{}

// Validate checks the field values on SignInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SignInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	// no validation rules for TransactionId

	// no validation rules for KeyId

	// no validation rules for HdAccount

	// no validation rules for Coin

	// no validation rules for TxId

	// no validation rules for SignIndex

	// no validation rules for SignMessage

	// no validation rules for HdChange

	// no validation rules for HdIndex

	for idx, item := range m.GetSignTxInputs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignInfoValidationError{
					field:  fmt.Sprintf("SignTxInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SignInfoValidationError is the validation error returned by
// SignInfo.Validate if the designated constraints aren't met.
type SignInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInfoValidationError) ErrorName() string { return "SignInfoValidationError" }

// Error satisfies the builtin error interface
func (e SignInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInfoValidationError{}

// Validate checks the field values on SignTxInput with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SignTxInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TxInputIndex

	// no validation rules for SignMessage

	// no validation rules for HdChange

	// no validation rules for HdIndex

	return nil
}

// SignTxInputValidationError is the validation error returned by
// SignTxInput.Validate if the designated constraints aren't met.
type SignTxInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignTxInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignTxInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignTxInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignTxInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignTxInputValidationError) ErrorName() string { return "SignTxInputValidationError" }

// Error satisfies the builtin error interface
func (e SignTxInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignTxInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignTxInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignTxInputValidationError{}

// Validate checks the field values on Transfer with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Transfer) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	// no validation rules for TransferId

	// no validation rules for Coin

	// no validation rules for TxId

	// no validation rules for TransferType

	// no validation rules for Value

	// no validation rules for StringValue

	// no validation rules for JpyRate

	// no validation rules for PartnerWalletId

	// no validation rules for PartnerAddress

	// no validation rules for DestinationTag

	// no validation rules for State

	// no validation rules for Result

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TransferValidationError is the validation error returned by
// Transfer.Validate if the designated constraints aren't met.
type TransferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferValidationError) ErrorName() string { return "TransferValidationError" }

// Error satisfies the builtin error interface
func (e TransferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransfer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferValidationError{}

// Validate checks the field values on Rate with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Rate) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Coin

	// no validation rules for Jpy

	return nil
}

// RateValidationError is the validation error returned by Rate.Validate if the
// designated constraints aren't met.
type RateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RateValidationError) ErrorName() string { return "RateValidationError" }

// Error satisfies the builtin error interface
func (e RateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RateValidationError{}

// Validate checks the field values on RateSnapshot with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RateSnapshot) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RateSnapshotId

	// no validation rules for Rates

	return nil
}

// RateSnapshotValidationError is the validation error returned by
// RateSnapshot.Validate if the designated constraints aren't met.
type RateSnapshotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RateSnapshotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RateSnapshotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RateSnapshotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RateSnapshotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RateSnapshotValidationError) ErrorName() string { return "RateSnapshotValidationError" }

// Error satisfies the builtin error interface
func (e RateSnapshotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRateSnapshot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RateSnapshotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RateSnapshotValidationError{}

// Validate checks the field values on Deactivatability with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Deactivatability) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccountId

	// no validation rules for Deactivatable

	return nil
}

// DeactivatabilityValidationError is the validation error returned by
// Deactivatability.Validate if the designated constraints aren't met.
type DeactivatabilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivatabilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivatabilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivatabilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivatabilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivatabilityValidationError) ErrorName() string { return "DeactivatabilityValidationError" }

// Error satisfies the builtin error interface
func (e DeactivatabilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivatability.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivatabilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivatabilityValidationError{}

// Validate checks the field values on LabeledAddress with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LabeledAddress) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for LabeledAddressId

	// no validation rules for Name

	// no validation rules for Coin

	// no validation rules for Address

	if v, ok := interface{}(m.GetProposal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LabeledAddressValidationError{
				field:  "Proposal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsDeletable

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LabeledAddressValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LabeledAddressValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LabeledAddressValidationError is the validation error returned by
// LabeledAddress.Validate if the designated constraints aren't met.
type LabeledAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabeledAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabeledAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabeledAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabeledAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabeledAddressValidationError) ErrorName() string { return "LabeledAddressValidationError" }

// Error satisfies the builtin error interface
func (e LabeledAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabeledAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabeledAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabeledAddressValidationError{}

// Validate checks the field values on LabeledAddressProposal with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LabeledAddressProposal) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RequesterAccountId

	// no validation rules for RequesterName

	// no validation rules for ApproverAccountId

	// no validation rules for ApproverName

	// no validation rules for ProposedAddress

	// no validation rules for AddressIsReviewed

	return nil
}

// LabeledAddressProposalValidationError is the validation error returned by
// LabeledAddressProposal.Validate if the designated constraints aren't met.
type LabeledAddressProposalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabeledAddressProposalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabeledAddressProposalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabeledAddressProposalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabeledAddressProposalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabeledAddressProposalValidationError) ErrorName() string {
	return "LabeledAddressProposalValidationError"
}

// Error satisfies the builtin error interface
func (e LabeledAddressProposalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabeledAddressProposal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabeledAddressProposalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabeledAddressProposalValidationError{}

// Validate checks the field values on Whitelist with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Whitelist) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WhitelistId

	// no validation rules for Name

	// no validation rules for Coin

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WhitelistValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsDeletable

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WhitelistValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WhitelistValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WhitelistValidationError is the validation error returned by
// Whitelist.Validate if the designated constraints aren't met.
type WhitelistValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhitelistValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhitelistValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhitelistValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhitelistValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhitelistValidationError) ErrorName() string { return "WhitelistValidationError" }

// Error satisfies the builtin error interface
func (e WhitelistValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhitelist.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhitelistValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhitelistValidationError{}

// Validate checks the field values on TransferLimit with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TransferLimit) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TransferLimitId

	// no validation rules for Name

	// no validation rules for Coin

	// no validation rules for HourlyLimit

	// no validation rules for DailyLimit

	// no validation rules for OneTimeLimit

	if v, ok := interface{}(m.GetProposal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferLimitValidationError{
				field:  "Proposal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsReviewed

	// no validation rules for IsDeletable

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferLimitValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferLimitValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TransferLimitValidationError is the validation error returned by
// TransferLimit.Validate if the designated constraints aren't met.
type TransferLimitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferLimitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferLimitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferLimitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferLimitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferLimitValidationError) ErrorName() string { return "TransferLimitValidationError" }

// Error satisfies the builtin error interface
func (e TransferLimitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferLimit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferLimitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferLimitValidationError{}

// Validate checks the field values on TransferLimitProposal with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TransferLimitProposal) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RequesterAccountId

	// no validation rules for RequesterName

	// no validation rules for ApproverAccountId

	// no validation rules for ApproverName

	// no validation rules for ProposedHourlyLimit

	// no validation rules for ProposedDailyLimit

	// no validation rules for ProposedOneTimeLimit

	// no validation rules for IsReviewed

	return nil
}

// TransferLimitProposalValidationError is the validation error returned by
// TransferLimitProposal.Validate if the designated constraints aren't met.
type TransferLimitProposalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferLimitProposalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferLimitProposalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferLimitProposalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferLimitProposalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferLimitProposalValidationError) ErrorName() string {
	return "TransferLimitProposalValidationError"
}

// Error satisfies the builtin error interface
func (e TransferLimitProposalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferLimitProposal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferLimitProposalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferLimitProposalValidationError{}

// Validate checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Policy) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PolicyId

	// no validation rules for PolicyType

	// no validation rules for Name

	// no validation rules for IsBasePolicy

	// no validation rules for Coin

	if v, ok := interface{}(m.GetWhitelist()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyValidationError{
				field:  "Whitelist",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTransferLimit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyValidationError{
				field:  "TransferLimit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsDeletable

	if v, ok := interface{}(m.GetProposal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyValidationError{
				field:  "Proposal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PolicyValidationError is the validation error returned by Policy.Validate if
// the designated constraints aren't met.
type PolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyValidationError) ErrorName() string { return "PolicyValidationError" }

// Error satisfies the builtin error interface
func (e PolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyValidationError{}

// Validate checks the field values on PolicyProposal with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PolicyProposal) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RequesterAccountId

	// no validation rules for RequesterName

	// no validation rules for ApproverAccountId

	// no validation rules for ApproverName

	if v, ok := interface{}(m.GetProposedWhitelist()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyProposalValidationError{
				field:  "ProposedWhitelist",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsReviewed

	return nil
}

// PolicyProposalValidationError is the validation error returned by
// PolicyProposal.Validate if the designated constraints aren't met.
type PolicyProposalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyProposalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyProposalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyProposalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyProposalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyProposalValidationError) ErrorName() string { return "PolicyProposalValidationError" }

// Error satisfies the builtin error interface
func (e PolicyProposalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyProposal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyProposalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyProposalValidationError{}

// Validate checks the field values on TotalBalanceByCoin with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TotalBalanceByCoin) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Coin

	// no validation rules for ColdStringBalance

	// no validation rules for HotStringBalance

	return nil
}

// TotalBalanceByCoinValidationError is the validation error returned by
// TotalBalanceByCoin.Validate if the designated constraints aren't met.
type TotalBalanceByCoinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotalBalanceByCoinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotalBalanceByCoinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotalBalanceByCoinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotalBalanceByCoinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotalBalanceByCoinValidationError) ErrorName() string {
	return "TotalBalanceByCoinValidationError"
}

// Error satisfies the builtin error interface
func (e TotalBalanceByCoinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotalBalanceByCoin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotalBalanceByCoinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotalBalanceByCoinValidationError{}

// Validate checks the field values on TotalBalance with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TotalBalance) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetTotalBalances() {
		_ = val

		if val == nil {
			return TotalBalanceValidationError{
				field:  fmt.Sprintf("TotalBalances[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		// no validation rules for TotalBalances[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TotalBalanceValidationError{
					field:  fmt.Sprintf("TotalBalances[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TotalBalanceValidationError is the validation error returned by
// TotalBalance.Validate if the designated constraints aren't met.
type TotalBalanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotalBalanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotalBalanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotalBalanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotalBalanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotalBalanceValidationError) ErrorName() string { return "TotalBalanceValidationError" }

// Error satisfies the builtin error interface
func (e TotalBalanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotalBalance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotalBalanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotalBalanceValidationError{}

// Validate checks the field values on BalanceSnapshot with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BalanceSnapshot) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BalanceSnapshotValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetTotalBalances() {
		_ = val

		if val == nil {
			return BalanceSnapshotValidationError{
				field:  fmt.Sprintf("TotalBalances[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		// no validation rules for TotalBalances[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BalanceSnapshotValidationError{
					field:  fmt.Sprintf("TotalBalances[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetRates() {
		_ = val

		if val == nil {
			return BalanceSnapshotValidationError{
				field:  fmt.Sprintf("Rates[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		// no validation rules for Rates[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BalanceSnapshotValidationError{
					field:  fmt.Sprintf("Rates[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BalanceSnapshotValidationError is the validation error returned by
// BalanceSnapshot.Validate if the designated constraints aren't met.
type BalanceSnapshotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BalanceSnapshotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BalanceSnapshotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BalanceSnapshotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BalanceSnapshotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BalanceSnapshotValidationError) ErrorName() string { return "BalanceSnapshotValidationError" }

// Error satisfies the builtin error interface
func (e BalanceSnapshotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBalanceSnapshot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BalanceSnapshotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BalanceSnapshotValidationError{}

// Validate checks the field values on WalletBalanceSnapshotMap with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WalletBalanceSnapshotMap) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetWalletBalanceSnapshotMap() {
		_ = val

		if val == nil {
			return WalletBalanceSnapshotMapValidationError{
				field:  fmt.Sprintf("WalletBalanceSnapshotMap[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		// no validation rules for WalletBalanceSnapshotMap[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WalletBalanceSnapshotMapValidationError{
					field:  fmt.Sprintf("WalletBalanceSnapshotMap[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// WalletBalanceSnapshotMapValidationError is the validation error returned by
// WalletBalanceSnapshotMap.Validate if the designated constraints aren't met.
type WalletBalanceSnapshotMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletBalanceSnapshotMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletBalanceSnapshotMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletBalanceSnapshotMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletBalanceSnapshotMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletBalanceSnapshotMapValidationError) ErrorName() string {
	return "WalletBalanceSnapshotMapValidationError"
}

// Error satisfies the builtin error interface
func (e WalletBalanceSnapshotMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWalletBalanceSnapshotMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletBalanceSnapshotMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletBalanceSnapshotMapValidationError{}

// Validate checks the field values on ListWalletBalanceSnapshots with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListWalletBalanceSnapshots) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetWalletBalanceSnapshots() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWalletBalanceSnapshotsValidationError{
					field:  fmt.Sprintf("WalletBalanceSnapshots[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListWalletBalanceSnapshotsValidationError is the validation error returned
// by ListWalletBalanceSnapshots.Validate if the designated constraints aren't met.
type ListWalletBalanceSnapshotsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletBalanceSnapshotsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletBalanceSnapshotsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletBalanceSnapshotsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletBalanceSnapshotsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletBalanceSnapshotsValidationError) ErrorName() string {
	return "ListWalletBalanceSnapshotsValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletBalanceSnapshotsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletBalanceSnapshots.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletBalanceSnapshotsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletBalanceSnapshotsValidationError{}

// Validate checks the field values on WalletBalanceSnapshot with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WalletBalanceSnapshot) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WalletBalanceSnapshotValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StringBalance

	// no validation rules for Jpy

	return nil
}

// WalletBalanceSnapshotValidationError is the validation error returned by
// WalletBalanceSnapshot.Validate if the designated constraints aren't met.
type WalletBalanceSnapshotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletBalanceSnapshotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletBalanceSnapshotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletBalanceSnapshotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletBalanceSnapshotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletBalanceSnapshotValidationError) ErrorName() string {
	return "WalletBalanceSnapshotValidationError"
}

// Error satisfies the builtin error interface
func (e WalletBalanceSnapshotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWalletBalanceSnapshot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletBalanceSnapshotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletBalanceSnapshotValidationError{}

// Validate checks the field values on TransferVolumeSnapshots with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TransferVolumeSnapshots) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetTransferVolumeSnapshotByTransferType() {
		_ = val

		if val == nil {
			return TransferVolumeSnapshotsValidationError{
				field:  fmt.Sprintf("TransferVolumeSnapshotByTransferType[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		// no validation rules for TransferVolumeSnapshotByTransferType[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransferVolumeSnapshotsValidationError{
					field:  fmt.Sprintf("TransferVolumeSnapshotByTransferType[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TransferVolumeSnapshotsValidationError is the validation error returned by
// TransferVolumeSnapshots.Validate if the designated constraints aren't met.
type TransferVolumeSnapshotsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferVolumeSnapshotsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferVolumeSnapshotsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferVolumeSnapshotsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferVolumeSnapshotsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferVolumeSnapshotsValidationError) ErrorName() string {
	return "TransferVolumeSnapshotsValidationError"
}

// Error satisfies the builtin error interface
func (e TransferVolumeSnapshotsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferVolumeSnapshots.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferVolumeSnapshotsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferVolumeSnapshotsValidationError{}

// Validate checks the field values on ListTransferVolumeSnapshots with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTransferVolumeSnapshots) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTransferVolumeSnapshots() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTransferVolumeSnapshotsValidationError{
					field:  fmt.Sprintf("TransferVolumeSnapshots[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListTransferVolumeSnapshotsValidationError is the validation error returned
// by ListTransferVolumeSnapshots.Validate if the designated constraints
// aren't met.
type ListTransferVolumeSnapshotsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransferVolumeSnapshotsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransferVolumeSnapshotsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransferVolumeSnapshotsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransferVolumeSnapshotsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransferVolumeSnapshotsValidationError) ErrorName() string {
	return "ListTransferVolumeSnapshotsValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransferVolumeSnapshotsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransferVolumeSnapshots.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransferVolumeSnapshotsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransferVolumeSnapshotsValidationError{}

// Validate checks the field values on TransferVolumeSnapshot with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TransferVolumeSnapshot) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTargetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferVolumeSnapshotValidationError{
				field:  "TargetTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TransferVolumeByCoin

	return nil
}

// TransferVolumeSnapshotValidationError is the validation error returned by
// TransferVolumeSnapshot.Validate if the designated constraints aren't met.
type TransferVolumeSnapshotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferVolumeSnapshotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferVolumeSnapshotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferVolumeSnapshotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferVolumeSnapshotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferVolumeSnapshotValidationError) ErrorName() string {
	return "TransferVolumeSnapshotValidationError"
}

// Error satisfies the builtin error interface
func (e TransferVolumeSnapshotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferVolumeSnapshot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferVolumeSnapshotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferVolumeSnapshotValidationError{}

// Validate checks the field values on TransferVolume with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TransferVolume) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Coin

	// no validation rules for HotStringVolume

	// no validation rules for ColdStringVolume

	// no validation rules for HotStringJpyVolume

	// no validation rules for ColdStringJpyVolume

	// no validation rules for HotNumber

	// no validation rules for ColdNumber

	// no validation rules for TransferType

	return nil
}

// TransferVolumeValidationError is the validation error returned by
// TransferVolume.Validate if the designated constraints aren't met.
type TransferVolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferVolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferVolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferVolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferVolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferVolumeValidationError) ErrorName() string { return "TransferVolumeValidationError" }

// Error satisfies the builtin error interface
func (e TransferVolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferVolume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferVolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferVolumeValidationError{}

// Validate checks the field values on WalletTransferVolumeSnapshots with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WalletTransferVolumeSnapshots) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetWalletTransferVolumeSnapshotByWalletId() {
		_ = val

		if val == nil {
			return WalletTransferVolumeSnapshotsValidationError{
				field:  fmt.Sprintf("WalletTransferVolumeSnapshotByWalletId[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		// no validation rules for WalletTransferVolumeSnapshotByWalletId[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WalletTransferVolumeSnapshotsValidationError{
					field:  fmt.Sprintf("WalletTransferVolumeSnapshotByWalletId[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// WalletTransferVolumeSnapshotsValidationError is the validation error
// returned by WalletTransferVolumeSnapshots.Validate if the designated
// constraints aren't met.
type WalletTransferVolumeSnapshotsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletTransferVolumeSnapshotsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletTransferVolumeSnapshotsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletTransferVolumeSnapshotsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletTransferVolumeSnapshotsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletTransferVolumeSnapshotsValidationError) ErrorName() string {
	return "WalletTransferVolumeSnapshotsValidationError"
}

// Error satisfies the builtin error interface
func (e WalletTransferVolumeSnapshotsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWalletTransferVolumeSnapshots.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletTransferVolumeSnapshotsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletTransferVolumeSnapshotsValidationError{}

// Validate checks the field values on ListWalletTransferVolumeSnapshots with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListWalletTransferVolumeSnapshots) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetWalletTransferVolumeSnapshots() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWalletTransferVolumeSnapshotsValidationError{
					field:  fmt.Sprintf("WalletTransferVolumeSnapshots[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListWalletTransferVolumeSnapshotsValidationError is the validation error
// returned by ListWalletTransferVolumeSnapshots.Validate if the designated
// constraints aren't met.
type ListWalletTransferVolumeSnapshotsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletTransferVolumeSnapshotsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletTransferVolumeSnapshotsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletTransferVolumeSnapshotsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletTransferVolumeSnapshotsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletTransferVolumeSnapshotsValidationError) ErrorName() string {
	return "ListWalletTransferVolumeSnapshotsValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletTransferVolumeSnapshotsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletTransferVolumeSnapshots.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletTransferVolumeSnapshotsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletTransferVolumeSnapshotsValidationError{}

// Validate checks the field values on WalletTransferVolumeSnapshot with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WalletTransferVolumeSnapshot) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTargetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WalletTransferVolumeSnapshotValidationError{
				field:  "TargetTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WalletTransferVolumeByTransferType

	return nil
}

// WalletTransferVolumeSnapshotValidationError is the validation error returned
// by WalletTransferVolumeSnapshot.Validate if the designated constraints
// aren't met.
type WalletTransferVolumeSnapshotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletTransferVolumeSnapshotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletTransferVolumeSnapshotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletTransferVolumeSnapshotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletTransferVolumeSnapshotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletTransferVolumeSnapshotValidationError) ErrorName() string {
	return "WalletTransferVolumeSnapshotValidationError"
}

// Error satisfies the builtin error interface
func (e WalletTransferVolumeSnapshotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWalletTransferVolumeSnapshot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletTransferVolumeSnapshotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletTransferVolumeSnapshotValidationError{}

// Validate checks the field values on WalletTransferVolume with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WalletTransferVolume) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StringVolume

	// no validation rules for StringJpyVolume

	// no validation rules for Number

	// no validation rules for TransferType

	return nil
}

// WalletTransferVolumeValidationError is the validation error returned by
// WalletTransferVolume.Validate if the designated constraints aren't met.
type WalletTransferVolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletTransferVolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletTransferVolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletTransferVolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletTransferVolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletTransferVolumeValidationError) ErrorName() string {
	return "WalletTransferVolumeValidationError"
}

// Error satisfies the builtin error interface
func (e WalletTransferVolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWalletTransferVolume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletTransferVolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletTransferVolumeValidationError{}

// Validate checks the field values on Confirmation with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Confirmation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Coin

	// no validation rules for Confirmation

	return nil
}

// ConfirmationValidationError is the validation error returned by
// Confirmation.Validate if the designated constraints aren't met.
type ConfirmationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmationValidationError) ErrorName() string { return "ConfirmationValidationError" }

// Error satisfies the builtin error interface
func (e ConfirmationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmationValidationError{}

// Validate checks the field values on RequestTxOutput with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RequestTxOutput) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetAddress()) < 3 {
		return RequestTxOutputValidationError{
			field:  "Address",
			reason: "value length must be at least 3 runes",
		}
	}

	if utf8.RuneCountInString(m.GetStringValue()) < 1 {
		return RequestTxOutputValidationError{
			field:  "StringValue",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// RequestTxOutputValidationError is the validation error returned by
// RequestTxOutput.Validate if the designated constraints aren't met.
type RequestTxOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestTxOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestTxOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestTxOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestTxOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestTxOutputValidationError) ErrorName() string { return "RequestTxOutputValidationError" }

// Error satisfies the builtin error interface
func (e RequestTxOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestTxOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestTxOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestTxOutputValidationError{}

// Validate checks the field values on RequestSignedInfo with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RequestSignedInfo) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetSignatures()) < 1 {
		return RequestSignedInfoValidationError{
			field:  "Signatures",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetSignatures() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestSignedInfoValidationError{
					field:  fmt.Sprintf("Signatures[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RequestSignedInfoValidationError is the validation error returned by
// RequestSignedInfo.Validate if the designated constraints aren't met.
type RequestSignedInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestSignedInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestSignedInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestSignedInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestSignedInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestSignedInfoValidationError) ErrorName() string {
	return "RequestSignedInfoValidationError"
}

// Error satisfies the builtin error interface
func (e RequestSignedInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestSignedInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestSignedInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestSignedInfoValidationError{}

// Validate checks the field values on RequestSignature with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RequestSignature) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SignIndex

	if utf8.RuneCountInString(m.GetSignature()) < 1 {
		return RequestSignatureValidationError{
			field:  "Signature",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// RequestSignatureValidationError is the validation error returned by
// RequestSignature.Validate if the designated constraints aren't met.
type RequestSignatureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestSignatureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestSignatureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestSignatureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestSignatureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestSignatureValidationError) ErrorName() string { return "RequestSignatureValidationError" }

// Error satisfies the builtin error interface
func (e RequestSignatureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestSignature.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestSignatureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestSignatureValidationError{}

// Validate checks the field values on RequestTransferLimitEntry with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RequestTransferLimitEntry) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _RequestTransferLimitEntry_TransferLimitType_NotInLookup[m.GetTransferLimitType()]; ok {
		return RequestTransferLimitEntryValidationError{
			field:  "TransferLimitType",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := TransferLimitType_name[int32(m.GetTransferLimitType())]; !ok {
		return RequestTransferLimitEntryValidationError{
			field:  "TransferLimitType",
			reason: "value must be one of the defined enum values",
		}
	}

	if m.GetTransferLimitValue() < 0 {
		return RequestTransferLimitEntryValidationError{
			field:  "TransferLimitValue",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// RequestTransferLimitEntryValidationError is the validation error returned by
// RequestTransferLimitEntry.Validate if the designated constraints aren't met.
type RequestTransferLimitEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestTransferLimitEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestTransferLimitEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestTransferLimitEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestTransferLimitEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestTransferLimitEntryValidationError) ErrorName() string {
	return "RequestTransferLimitEntryValidationError"
}

// Error satisfies the builtin error interface
func (e RequestTransferLimitEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestTransferLimitEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestTransferLimitEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestTransferLimitEntryValidationError{}

var _RequestTransferLimitEntry_TransferLimitType_NotInLookup = map[TransferLimitType]struct{}{
	0: {},
}

// Validate checks the field values on RequestRate with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RequestRate) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _RequestRate_Coin_NotInLookup[m.GetCoin()]; ok {
		return RequestRateValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		return RequestRateValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
	}

	if m.GetJpy() < 0 {
		return RequestRateValidationError{
			field:  "Jpy",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// RequestRateValidationError is the validation error returned by
// RequestRate.Validate if the designated constraints aren't met.
type RequestRateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestRateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestRateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestRateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestRateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestRateValidationError) ErrorName() string { return "RequestRateValidationError" }

// Error satisfies the builtin error interface
func (e RequestRateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestRate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestRateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestRateValidationError{}

var _RequestRate_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}
