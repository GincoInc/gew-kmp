// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gincoinc/adamant/global/v1/adamantglobalv1/model.proto

package adamantglobalv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	gincoincglobalv1 "github.com/GincoInc/gew-kmp/gen/gincoinc/global/v1/gincoincglobalv1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.AddressType(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.AddressType(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.TransferType(0)

	_ = gincoincglobalv1.TransactionState(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)
)

// define the regex for a UUID once up-front
var _model_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Wallet with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Wallet) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	// no validation rules for Name

	// no validation rules for Coin

	// no validation rules for WalletType

	// no validation rules for AddressType

	// no validation rules for M

	// no validation rules for N

	// no validation rules for State

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WalletValidationError{
					field:  fmt.Sprintf("Keys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WalletValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Balance

	// no validation rules for StringBalance

	// no validation rules for Address

	// no validation rules for PolicyId

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WalletValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WalletValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WalletValidationError is the validation error returned by Wallet.Validate if
// the designated constraints aren't met.
type WalletValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletValidationError) ErrorName() string { return "WalletValidationError" }

// Error satisfies the builtin error interface
func (e WalletValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWallet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletValidationError{}

// Validate checks the field values on WalletMember with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WalletMember) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccountId

	// no validation rules for AccountType

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Role

	// no validation rules for IsKeyRegistered

	return nil
}

// WalletMemberValidationError is the validation error returned by
// WalletMember.Validate if the designated constraints aren't met.
type WalletMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletMemberValidationError) ErrorName() string { return "WalletMemberValidationError" }

// Error satisfies the builtin error interface
func (e WalletMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWalletMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletMemberValidationError{}

// Validate checks the field values on Key with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Key) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	// no validation rules for AccountId

	// no validation rules for AccountType

	// no validation rules for KeyId

	return nil
}

// KeyValidationError is the validation error returned by Key.Validate if the
// designated constraints aren't met.
type KeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyValidationError) ErrorName() string { return "KeyValidationError" }

// Error satisfies the builtin error interface
func (e KeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyValidationError{}

// Validate checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Address) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	// no validation rules for AddressId

	// no validation rules for Coin

	// no validation rules for Address

	// no validation rules for Index

	// no validation rules for Balance

	// no validation rules for StringBalance

	// no validation rules for State

	// no validation rules for AddressType

	// no validation rules for SequenceNumber

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddressValidationError is the validation error returned by Address.Validate
// if the designated constraints aren't met.
type AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressValidationError) ErrorName() string { return "AddressValidationError" }

// Error satisfies the builtin error interface
func (e AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressValidationError{}

// Validate checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Transaction) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	// no validation rules for TransactionId

	// no validation rules for Coin

	// no validation rules for TxId

	// no validation rules for Address

	// no validation rules for Value

	// no validation rules for StringValue

	// no validation rules for Fee

	// no validation rules for StringFee

	// no validation rules for FeeRate

	// no validation rules for State

	for idx, item := range m.GetSignedKeys() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionValidationError{
					field:  fmt.Sprintf("SignedKeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTxInputs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionValidationError{
					field:  fmt.Sprintf("TxInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTxOutputs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionValidationError{
					field:  fmt.Sprintf("TxOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TransactionValidationError is the validation error returned by
// Transaction.Validate if the designated constraints aren't met.
type TransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionValidationError) ErrorName() string { return "TransactionValidationError" }

// Error satisfies the builtin error interface
func (e TransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionValidationError{}

// Validate checks the field values on TransactionMember with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TransactionMember) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccountId

	// no validation rules for AccountType

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Role

	// no validation rules for Signed

	return nil
}

// TransactionMemberValidationError is the validation error returned by
// TransactionMember.Validate if the designated constraints aren't met.
type TransactionMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionMemberValidationError) ErrorName() string {
	return "TransactionMemberValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionMemberValidationError{}

// Validate checks the field values on TxInput with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TxInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TxId

	// no validation rules for TxIndex

	// no validation rules for Value

	// no validation rules for StringValue

	return nil
}

// TxInputValidationError is the validation error returned by TxInput.Validate
// if the designated constraints aren't met.
type TxInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxInputValidationError) ErrorName() string { return "TxInputValidationError" }

// Error satisfies the builtin error interface
func (e TxInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxInputValidationError{}

// Validate checks the field values on TxOutput with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TxOutput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Address

	// no validation rules for Value

	// no validation rules for StringValue

	// no validation rules for IsChange

	return nil
}

// TxOutputValidationError is the validation error returned by
// TxOutput.Validate if the designated constraints aren't met.
type TxOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxOutputValidationError) ErrorName() string { return "TxOutputValidationError" }

// Error satisfies the builtin error interface
func (e TxOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxOutputValidationError{}

// Validate checks the field values on SignInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SignInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	// no validation rules for TransactionId

	// no validation rules for KeyId

	// no validation rules for HdAccount

	// no validation rules for Coin

	// no validation rules for TxId

	// no validation rules for SignMessage

	// no validation rules for HdChange

	// no validation rules for HdIndex

	for idx, item := range m.GetSignTxInputs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignInfoValidationError{
					field:  fmt.Sprintf("SignTxInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SignInfoValidationError is the validation error returned by
// SignInfo.Validate if the designated constraints aren't met.
type SignInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInfoValidationError) ErrorName() string { return "SignInfoValidationError" }

// Error satisfies the builtin error interface
func (e SignInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInfoValidationError{}

// Validate checks the field values on SignTxInput with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SignTxInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TxInputIndex

	// no validation rules for SignMessage

	// no validation rules for HdChange

	// no validation rules for HdIndex

	return nil
}

// SignTxInputValidationError is the validation error returned by
// SignTxInput.Validate if the designated constraints aren't met.
type SignTxInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignTxInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignTxInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignTxInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignTxInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignTxInputValidationError) ErrorName() string { return "SignTxInputValidationError" }

// Error satisfies the builtin error interface
func (e SignTxInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignTxInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignTxInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignTxInputValidationError{}

// Validate checks the field values on Transfer with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Transfer) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	// no validation rules for TransferId

	// no validation rules for Coin

	// no validation rules for TxId

	// no validation rules for TransferType

	// no validation rules for Value

	// no validation rules for StringValue

	// no validation rules for PartnerWalletId

	// no validation rules for PartnerAddress

	// no validation rules for State

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TransferValidationError is the validation error returned by
// Transfer.Validate if the designated constraints aren't met.
type TransferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferValidationError) ErrorName() string { return "TransferValidationError" }

// Error satisfies the builtin error interface
func (e TransferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransfer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferValidationError{}

// Validate checks the field values on Rate with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Rate) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Coin

	// no validation rules for Jpy

	// no validation rules for StringJpy

	return nil
}

// RateValidationError is the validation error returned by Rate.Validate if the
// designated constraints aren't met.
type RateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RateValidationError) ErrorName() string { return "RateValidationError" }

// Error satisfies the builtin error interface
func (e RateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RateValidationError{}

// Validate checks the field values on Deactivatability with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Deactivatability) Validate() error {
	if m == nil {
		return nil
	}

	if !_Deactivatability_AccountId_Pattern.MatchString(m.GetAccountId()) {
		return DeactivatabilityValidationError{
			field:  "AccountId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	// no validation rules for Deactivatable

	return nil
}

// DeactivatabilityValidationError is the validation error returned by
// Deactivatability.Validate if the designated constraints aren't met.
type DeactivatabilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivatabilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivatabilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivatabilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivatabilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivatabilityValidationError) ErrorName() string { return "DeactivatabilityValidationError" }

// Error satisfies the builtin error interface
func (e DeactivatabilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivatability.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivatabilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivatabilityValidationError{}

var _Deactivatability_AccountId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on LabeledAddress with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LabeledAddress) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for LabeledAddressId

	// no validation rules for Name

	// no validation rules for Coin

	// no validation rules for Address

	if v, ok := interface{}(m.GetChangeRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LabeledAddressValidationError{
				field:  "ChangeRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CanDelete

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LabeledAddressValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LabeledAddressValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LabeledAddressValidationError is the validation error returned by
// LabeledAddress.Validate if the designated constraints aren't met.
type LabeledAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabeledAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabeledAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabeledAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabeledAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabeledAddressValidationError) ErrorName() string { return "LabeledAddressValidationError" }

// Error satisfies the builtin error interface
func (e LabeledAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabeledAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabeledAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabeledAddressValidationError{}

// Validate checks the field values on LabeledAddressChangeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LabeledAddressChangeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_LabeledAddressChangeRequest_RequesterAccountId_Pattern.MatchString(m.GetRequesterAccountId()) {
		return LabeledAddressChangeRequestValidationError{
			field:  "RequesterAccountId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	// no validation rules for RequesterName

	if !_LabeledAddressChangeRequest_ApproverAccountId_Pattern.MatchString(m.GetApproverAccountId()) {
		return LabeledAddressChangeRequestValidationError{
			field:  "ApproverAccountId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	// no validation rules for ApproverName

	// no validation rules for ProposedAddress

	// no validation rules for AddressIsReviewed

	return nil
}

// LabeledAddressChangeRequestValidationError is the validation error returned
// by LabeledAddressChangeRequest.Validate if the designated constraints
// aren't met.
type LabeledAddressChangeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabeledAddressChangeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabeledAddressChangeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabeledAddressChangeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabeledAddressChangeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabeledAddressChangeRequestValidationError) ErrorName() string {
	return "LabeledAddressChangeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LabeledAddressChangeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabeledAddressChangeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabeledAddressChangeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabeledAddressChangeRequestValidationError{}

var _LabeledAddressChangeRequest_RequesterAccountId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _LabeledAddressChangeRequest_ApproverAccountId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on Whitelist with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Whitelist) Validate() error {
	if m == nil {
		return nil
	}

	if !_Whitelist_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		return WhitelistValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	// no validation rules for Name

	// no validation rules for Coin

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WhitelistValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CanDelete

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WhitelistValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WhitelistValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WhitelistValidationError is the validation error returned by
// Whitelist.Validate if the designated constraints aren't met.
type WhitelistValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhitelistValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhitelistValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhitelistValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhitelistValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhitelistValidationError) ErrorName() string { return "WhitelistValidationError" }

// Error satisfies the builtin error interface
func (e WhitelistValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhitelist.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhitelistValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhitelistValidationError{}

var _Whitelist_WhitelistId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on TransferLimit with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TransferLimit) Validate() error {
	if m == nil {
		return nil
	}

	if !_TransferLimit_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		return TransferLimitValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	// no validation rules for Name

	// no validation rules for Coin

	// no validation rules for HourlyLimit

	// no validation rules for DailyLimit

	// no validation rules for OneTimeLimit

	if v, ok := interface{}(m.GetChangeRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferLimitValidationError{
				field:  "ChangeRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsReviewed

	// no validation rules for CanDelete

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferLimitValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferLimitValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TransferLimitValidationError is the validation error returned by
// TransferLimit.Validate if the designated constraints aren't met.
type TransferLimitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferLimitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferLimitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferLimitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferLimitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferLimitValidationError) ErrorName() string { return "TransferLimitValidationError" }

// Error satisfies the builtin error interface
func (e TransferLimitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferLimit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferLimitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferLimitValidationError{}

var _TransferLimit_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on TransferLimitChangeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TransferLimitChangeRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RequesterAccountId

	// no validation rules for RequesterName

	// no validation rules for ApproverAccountId

	// no validation rules for ApproverName

	// no validation rules for ProposedHourlyLimit

	// no validation rules for ProposedDailyLimit

	// no validation rules for ProposedOneTimeLimit

	// no validation rules for IsReviewed

	return nil
}

// TransferLimitChangeRequestValidationError is the validation error returned
// by TransferLimitChangeRequest.Validate if the designated constraints aren't met.
type TransferLimitChangeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferLimitChangeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferLimitChangeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferLimitChangeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferLimitChangeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferLimitChangeRequestValidationError) ErrorName() string {
	return "TransferLimitChangeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransferLimitChangeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferLimitChangeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferLimitChangeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferLimitChangeRequestValidationError{}

// Validate checks the field values on TransferLimitEntry with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TransferLimitEntry) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TransferLimitType

	// no validation rules for TransferLimitValue

	return nil
}

// TransferLimitEntryValidationError is the validation error returned by
// TransferLimitEntry.Validate if the designated constraints aren't met.
type TransferLimitEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferLimitEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferLimitEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferLimitEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferLimitEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferLimitEntryValidationError) ErrorName() string {
	return "TransferLimitEntryValidationError"
}

// Error satisfies the builtin error interface
func (e TransferLimitEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferLimitEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferLimitEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferLimitEntryValidationError{}

// Validate checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Policy) Validate() error {
	if m == nil {
		return nil
	}

	if !_Policy_PolicyId_Pattern.MatchString(m.GetPolicyId()) {
		return PolicyValidationError{
			field:  "PolicyId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	// no validation rules for PolicyType

	// no validation rules for Name

	// no validation rules for IsBasePolicy

	// no validation rules for Coin

	if v, ok := interface{}(m.GetWhitelist()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyValidationError{
				field:  "Whitelist",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTransferLimit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyValidationError{
				field:  "TransferLimit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CanDelete

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PolicyValidationError is the validation error returned by Policy.Validate if
// the designated constraints aren't met.
type PolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyValidationError) ErrorName() string { return "PolicyValidationError" }

// Error satisfies the builtin error interface
func (e PolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyValidationError{}

var _Policy_PolicyId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on RequestTxOutput with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RequestTxOutput) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetAddress()) < 3 {
		return RequestTxOutputValidationError{
			field:  "Address",
			reason: "value length must be at least 3 runes",
		}
	}

	if m.GetValue() <= 0 {
		return RequestTxOutputValidationError{
			field:  "Value",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RequestTxOutputValidationError is the validation error returned by
// RequestTxOutput.Validate if the designated constraints aren't met.
type RequestTxOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestTxOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestTxOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestTxOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestTxOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestTxOutputValidationError) ErrorName() string { return "RequestTxOutputValidationError" }

// Error satisfies the builtin error interface
func (e RequestTxOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestTxOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestTxOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestTxOutputValidationError{}

// Validate checks the field values on RequestSignedInfo with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RequestSignedInfo) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetSignatures()) < 1 {
		return RequestSignedInfoValidationError{
			field:  "Signatures",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetSignatures() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestSignedInfoValidationError{
					field:  fmt.Sprintf("Signatures[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RequestSignedInfoValidationError is the validation error returned by
// RequestSignedInfo.Validate if the designated constraints aren't met.
type RequestSignedInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestSignedInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestSignedInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestSignedInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestSignedInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestSignedInfoValidationError) ErrorName() string {
	return "RequestSignedInfoValidationError"
}

// Error satisfies the builtin error interface
func (e RequestSignedInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestSignedInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestSignedInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestSignedInfoValidationError{}

// Validate checks the field values on RequestSignature with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RequestSignature) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SignIndex

	if utf8.RuneCountInString(m.GetSignature()) < 1 {
		return RequestSignatureValidationError{
			field:  "Signature",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// RequestSignatureValidationError is the validation error returned by
// RequestSignature.Validate if the designated constraints aren't met.
type RequestSignatureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestSignatureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestSignatureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestSignatureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestSignatureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestSignatureValidationError) ErrorName() string { return "RequestSignatureValidationError" }

// Error satisfies the builtin error interface
func (e RequestSignatureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestSignature.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestSignatureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestSignatureValidationError{}
