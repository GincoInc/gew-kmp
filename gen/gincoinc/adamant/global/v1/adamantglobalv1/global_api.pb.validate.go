// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gincoinc/adamant/global/v1/adamantglobalv1/global_api.proto

package adamantglobalv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	gincoincglobalv1 "github.com/GincoInc/gew-kmp/gen/gincoinc/global/v1/gincoincglobalv1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = gincoincglobalv1.StakingValidatorStatus(0)
)

// Validate checks the field values on ApproveWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveWalletRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveWalletRequestMultiError, or nil if none found.
func (m *ApproveWalletRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveWalletRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ApproveWalletRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ApproveWalletRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ApproveWalletRequestMultiError(errors)
	}

	return nil
}

// ApproveWalletRequestMultiError is an error wrapping multiple validation
// errors returned by ApproveWalletRequest.ValidateAll() if the designated
// constraints aren't met.
type ApproveWalletRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveWalletRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveWalletRequestMultiError) AllErrors() []error { return m }

// ApproveWalletRequestValidationError is the validation error returned by
// ApproveWalletRequest.Validate if the designated constraints aren't met.
type ApproveWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveWalletRequestValidationError) ErrorName() string {
	return "ApproveWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveWalletRequestValidationError{}

var _ApproveWalletRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ApproveTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveTransactionRequestMultiError, or nil if none found.
func (m *ApproveTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ApproveTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ApproveTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ApproveTransactionRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		err := ApproveTransactionRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ApproveTransactionRequestMultiError(errors)
	}

	return nil
}

// ApproveTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by ApproveTransactionRequest.ValidateAll() if the
// designated constraints aren't met.
type ApproveTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveTransactionRequestMultiError) AllErrors() []error { return m }

// ApproveTransactionRequestValidationError is the validation error returned by
// ApproveTransactionRequest.Validate if the designated constraints aren't met.
type ApproveTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveTransactionRequestValidationError) ErrorName() string {
	return "ApproveTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveTransactionRequestValidationError{}

var _ApproveTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ApproveTransactionRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreateWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWalletRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWalletRequestMultiError, or nil if none found.
func (m *CreateWalletRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWalletRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetWalletName()); l < 1 || l > 40 {
		err := CreateWalletRequestValidationError{
			field:  "WalletName",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateWalletRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		err := CreateWalletRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := CreateWalletRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateWalletRequest_WalletType_NotInLookup[m.GetWalletType()]; ok {
		err := CreateWalletRequestValidationError{
			field:  "WalletType",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := WalletType_name[int32(m.GetWalletType())]; !ok {
		err := CreateWalletRequestValidationError{
			field:  "WalletType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateWalletRequest_AddressType_NotInLookup[m.GetAddressType()]; ok {
		err := CreateWalletRequestValidationError{
			field:  "AddressType",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := gincoincglobalv1.AddressType_name[int32(m.GetAddressType())]; !ok {
		err := CreateWalletRequestValidationError{
			field:  "AddressType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetM(); val < 1 || val > 5 {
		err := CreateWalletRequestValidationError{
			field:  "M",
			reason: "value must be inside range [1, 5]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetN(); val < 1 || val > 5 {
		err := CreateWalletRequestValidationError{
			field:  "N",
			reason: "value must be inside range [1, 5]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMembers()) < 1 {
		err := CreateWalletRequestValidationError{
			field:  "Members",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_CreateWalletRequest_Members_Unique := make(map[string]struct{}, len(m.GetMembers()))

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if _, exists := _CreateWalletRequest_Members_Unique[item]; exists {
			err := CreateWalletRequestValidationError{
				field:  fmt.Sprintf("Members[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CreateWalletRequest_Members_Unique[item] = struct{}{}
		}

		// no validation rules for Members[idx]
	}

	// no validation rules for RequiredApprovalCount

	if !_CreateWalletRequest_PolicyId_Pattern.MatchString(m.GetPolicyId()) {
		err := CreateWalletRequestValidationError{
			field:  "PolicyId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateWalletRequest_DestinationWalletId_Pattern.MatchString(m.GetDestinationWalletId()) {
		err := CreateWalletRequestValidationError{
			field:  "DestinationWalletId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WatchOnly

	if !_CreateWalletRequest_InheritWalletId_Pattern.MatchString(m.GetInheritWalletId()) {
		err := CreateWalletRequestValidationError{
			field:  "InheritWalletId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Network != nil {

		if _, ok := gincoincglobalv1.Network_name[int32(m.GetNetwork())]; !ok {
			err := CreateWalletRequestValidationError{
				field:  "Network",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateWalletRequestMultiError(errors)
	}

	return nil
}

// CreateWalletRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWalletRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWalletRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWalletRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWalletRequestMultiError) AllErrors() []error { return m }

// CreateWalletRequestValidationError is the validation error returned by
// CreateWalletRequest.Validate if the designated constraints aren't met.
type CreateWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWalletRequestValidationError) ErrorName() string {
	return "CreateWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWalletRequestValidationError{}

var _CreateWalletRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

var _CreateWalletRequest_WalletType_NotInLookup = map[WalletType]struct{}{
	0: {},
}

var _CreateWalletRequest_AddressType_NotInLookup = map[gincoincglobalv1.AddressType]struct{}{
	0: {},
}

var _CreateWalletRequest_PolicyId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _CreateWalletRequest_DestinationWalletId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _CreateWalletRequest_InheritWalletId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreateWalletResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWalletResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWalletResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWalletResponseMultiError, or nil if none found.
func (m *CreateWalletResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWalletResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WalletId

	if len(errors) > 0 {
		return CreateWalletResponseMultiError(errors)
	}

	return nil
}

// CreateWalletResponseMultiError is an error wrapping multiple validation
// errors returned by CreateWalletResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateWalletResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWalletResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWalletResponseMultiError) AllErrors() []error { return m }

// CreateWalletResponseValidationError is the validation error returned by
// CreateWalletResponse.Validate if the designated constraints aren't met.
type CreateWalletResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWalletResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWalletResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWalletResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWalletResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWalletResponseValidationError) ErrorName() string {
	return "CreateWalletResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWalletResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWalletResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWalletResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWalletResponseValidationError{}

// Validate checks the field values on GetWalletRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetWalletRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWalletRequestMultiError, or nil if none found.
func (m *GetWalletRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetWalletRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := GetWalletRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWalletRequestMultiError(errors)
	}

	return nil
}

// GetWalletRequestMultiError is an error wrapping multiple validation errors
// returned by GetWalletRequest.ValidateAll() if the designated constraints
// aren't met.
type GetWalletRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletRequestMultiError) AllErrors() []error { return m }

// GetWalletRequestValidationError is the validation error returned by
// GetWalletRequest.Validate if the designated constraints aren't met.
type GetWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletRequestValidationError) ErrorName() string { return "GetWalletRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletRequestValidationError{}

var _GetWalletRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on BatchGetWalletsWithoutBalanceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BatchGetWalletsWithoutBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchGetWalletsWithoutBalanceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BatchGetWalletsWithoutBalanceRequestMultiError, or nil if none found.
func (m *BatchGetWalletsWithoutBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchGetWalletsWithoutBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchGetWalletsWithoutBalanceRequestMultiError(errors)
	}

	return nil
}

// BatchGetWalletsWithoutBalanceRequestMultiError is an error wrapping multiple
// validation errors returned by
// BatchGetWalletsWithoutBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchGetWalletsWithoutBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchGetWalletsWithoutBalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchGetWalletsWithoutBalanceRequestMultiError) AllErrors() []error { return m }

// BatchGetWalletsWithoutBalanceRequestValidationError is the validation error
// returned by BatchGetWalletsWithoutBalanceRequest.Validate if the designated
// constraints aren't met.
type BatchGetWalletsWithoutBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGetWalletsWithoutBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGetWalletsWithoutBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGetWalletsWithoutBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGetWalletsWithoutBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGetWalletsWithoutBalanceRequestValidationError) ErrorName() string {
	return "BatchGetWalletsWithoutBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGetWalletsWithoutBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGetWalletsWithoutBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGetWalletsWithoutBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGetWalletsWithoutBalanceRequestValidationError{}

// Validate checks the field values on BatchGetWalletsWithoutBalanceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BatchGetWalletsWithoutBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchGetWalletsWithoutBalanceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BatchGetWalletsWithoutBalanceResponseMultiError, or nil if none found.
func (m *BatchGetWalletsWithoutBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchGetWalletsWithoutBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWallets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchGetWalletsWithoutBalanceResponseValidationError{
						field:  fmt.Sprintf("Wallets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchGetWalletsWithoutBalanceResponseValidationError{
						field:  fmt.Sprintf("Wallets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchGetWalletsWithoutBalanceResponseValidationError{
					field:  fmt.Sprintf("Wallets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchGetWalletsWithoutBalanceResponseMultiError(errors)
	}

	return nil
}

// BatchGetWalletsWithoutBalanceResponseMultiError is an error wrapping
// multiple validation errors returned by
// BatchGetWalletsWithoutBalanceResponse.ValidateAll() if the designated
// constraints aren't met.
type BatchGetWalletsWithoutBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchGetWalletsWithoutBalanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchGetWalletsWithoutBalanceResponseMultiError) AllErrors() []error { return m }

// BatchGetWalletsWithoutBalanceResponseValidationError is the validation error
// returned by BatchGetWalletsWithoutBalanceResponse.Validate if the
// designated constraints aren't met.
type BatchGetWalletsWithoutBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGetWalletsWithoutBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGetWalletsWithoutBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGetWalletsWithoutBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGetWalletsWithoutBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGetWalletsWithoutBalanceResponseValidationError) ErrorName() string {
	return "BatchGetWalletsWithoutBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGetWalletsWithoutBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGetWalletsWithoutBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGetWalletsWithoutBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGetWalletsWithoutBalanceResponseValidationError{}

// Validate checks the field values on CancelWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelWalletRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelWalletRequestMultiError, or nil if none found.
func (m *CancelWalletRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelWalletRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CancelWalletRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := CancelWalletRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelWalletRequestMultiError(errors)
	}

	return nil
}

// CancelWalletRequestMultiError is an error wrapping multiple validation
// errors returned by CancelWalletRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelWalletRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelWalletRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelWalletRequestMultiError) AllErrors() []error { return m }

// CancelWalletRequestValidationError is the validation error returned by
// CancelWalletRequest.Validate if the designated constraints aren't met.
type CancelWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelWalletRequestValidationError) ErrorName() string {
	return "CancelWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelWalletRequestValidationError{}

var _CancelWalletRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ArchiveWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArchiveWalletRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArchiveWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArchiveWalletRequestMultiError, or nil if none found.
func (m *ArchiveWalletRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ArchiveWalletRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ArchiveWalletRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ArchiveWalletRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ArchiveWalletRequestMultiError(errors)
	}

	return nil
}

// ArchiveWalletRequestMultiError is an error wrapping multiple validation
// errors returned by ArchiveWalletRequest.ValidateAll() if the designated
// constraints aren't met.
type ArchiveWalletRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArchiveWalletRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArchiveWalletRequestMultiError) AllErrors() []error { return m }

// ArchiveWalletRequestValidationError is the validation error returned by
// ArchiveWalletRequest.Validate if the designated constraints aren't met.
type ArchiveWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArchiveWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArchiveWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArchiveWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArchiveWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArchiveWalletRequestValidationError) ErrorName() string {
	return "ArchiveWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ArchiveWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArchiveWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArchiveWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArchiveWalletRequestValidationError{}

var _ArchiveWalletRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on UnArchiveWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnArchiveWalletRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnArchiveWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnArchiveWalletRequestMultiError, or nil if none found.
func (m *UnArchiveWalletRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnArchiveWalletRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UnArchiveWalletRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := UnArchiveWalletRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UnArchiveWalletRequestMultiError(errors)
	}

	return nil
}

// UnArchiveWalletRequestMultiError is an error wrapping multiple validation
// errors returned by UnArchiveWalletRequest.ValidateAll() if the designated
// constraints aren't met.
type UnArchiveWalletRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnArchiveWalletRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnArchiveWalletRequestMultiError) AllErrors() []error { return m }

// UnArchiveWalletRequestValidationError is the validation error returned by
// UnArchiveWalletRequest.Validate if the designated constraints aren't met.
type UnArchiveWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnArchiveWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnArchiveWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnArchiveWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnArchiveWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnArchiveWalletRequestValidationError) ErrorName() string {
	return "UnArchiveWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnArchiveWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnArchiveWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnArchiveWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnArchiveWalletRequestValidationError{}

var _UnArchiveWalletRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListWalletsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWalletsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWalletsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWalletsRequestMultiError, or nil if none found.
func (m *ListWalletsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWalletsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() > 100 {
		err := ListWalletsRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListWalletsRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		err := ListWalletsRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListWalletsRequestMultiError(errors)
	}

	return nil
}

// ListWalletsRequestMultiError is an error wrapping multiple validation errors
// returned by ListWalletsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListWalletsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWalletsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWalletsRequestMultiError) AllErrors() []error { return m }

// ListWalletsRequestValidationError is the validation error returned by
// ListWalletsRequest.Validate if the designated constraints aren't met.
type ListWalletsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletsRequestValidationError) ErrorName() string {
	return "ListWalletsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletsRequestValidationError{}

var _ListWalletsRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListWalletsByFilterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWalletsByFilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWalletsByFilterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWalletsByFilterRequestMultiError, or nil if none found.
func (m *ListWalletsByFilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWalletsByFilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _ListWalletsByFilterRequest_FilterType_NotInLookup[m.GetFilterType()]; ok {
		err := ListWalletsByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ListFilterType_name[int32(m.GetFilterType())]; !ok {
		err := ListWalletsByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WalletId

	if utf8.RuneCountInString(m.GetWalletName()) > 40 {
		err := ListWalletsByFilterRequestValidationError{
			field:  "WalletName",
			reason: "value length must be at most 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Address

	// no validation rules for WatchOnly

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := ListWalletsByFilterRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() > 100 {
		err := ListWalletsByFilterRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListWalletsByFilterRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		err := ListWalletsByFilterRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.OnlyIsStakingAvailable != nil {
		// no validation rules for OnlyIsStakingAvailable
	}

	if m.Network != nil {

		if _, ok := gincoincglobalv1.Network_name[int32(m.GetNetwork())]; !ok {
			err := ListWalletsByFilterRequestValidationError{
				field:  "Network",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListWalletsByFilterRequestMultiError(errors)
	}

	return nil
}

// ListWalletsByFilterRequestMultiError is an error wrapping multiple
// validation errors returned by ListWalletsByFilterRequest.ValidateAll() if
// the designated constraints aren't met.
type ListWalletsByFilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWalletsByFilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWalletsByFilterRequestMultiError) AllErrors() []error { return m }

// ListWalletsByFilterRequestValidationError is the validation error returned
// by ListWalletsByFilterRequest.Validate if the designated constraints aren't met.
type ListWalletsByFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletsByFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletsByFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletsByFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletsByFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletsByFilterRequestValidationError) ErrorName() string {
	return "ListWalletsByFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletsByFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletsByFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletsByFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletsByFilterRequestValidationError{}

var _ListWalletsByFilterRequest_FilterType_NotInLookup = map[ListFilterType]struct{}{
	0: {},
}

var _ListWalletsByFilterRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListWalletsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWalletsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWalletsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWalletsResponseMultiError, or nil if none found.
func (m *ListWalletsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWalletsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWallets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWalletsResponseValidationError{
						field:  fmt.Sprintf("Wallets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWalletsResponseValidationError{
						field:  fmt.Sprintf("Wallets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWalletsResponseValidationError{
					field:  fmt.Sprintf("Wallets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListWalletsResponseMultiError(errors)
	}

	return nil
}

// ListWalletsResponseMultiError is an error wrapping multiple validation
// errors returned by ListWalletsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWalletsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWalletsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWalletsResponseMultiError) AllErrors() []error { return m }

// ListWalletsResponseValidationError is the validation error returned by
// ListWalletsResponse.Validate if the designated constraints aren't met.
type ListWalletsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletsResponseValidationError) ErrorName() string {
	return "ListWalletsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletsResponseValidationError{}

// Validate checks the field values on ListBaseWalletsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBaseWalletsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBaseWalletsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBaseWalletsRequestMultiError, or nil if none found.
func (m *ListBaseWalletsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBaseWalletsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBaseWalletsRequestMultiError(errors)
	}

	return nil
}

// ListBaseWalletsRequestMultiError is an error wrapping multiple validation
// errors returned by ListBaseWalletsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBaseWalletsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBaseWalletsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBaseWalletsRequestMultiError) AllErrors() []error { return m }

// ListBaseWalletsRequestValidationError is the validation error returned by
// ListBaseWalletsRequest.Validate if the designated constraints aren't met.
type ListBaseWalletsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBaseWalletsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBaseWalletsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBaseWalletsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBaseWalletsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBaseWalletsRequestValidationError) ErrorName() string {
	return "ListBaseWalletsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBaseWalletsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBaseWalletsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBaseWalletsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBaseWalletsRequestValidationError{}

// Validate checks the field values on ListBaseWalletsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBaseWalletsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBaseWalletsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBaseWalletsResponseMultiError, or nil if none found.
func (m *ListBaseWalletsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBaseWalletsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWallets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBaseWalletsResponseValidationError{
						field:  fmt.Sprintf("Wallets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBaseWalletsResponseValidationError{
						field:  fmt.Sprintf("Wallets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBaseWalletsResponseValidationError{
					field:  fmt.Sprintf("Wallets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBaseWalletsResponseMultiError(errors)
	}

	return nil
}

// ListBaseWalletsResponseMultiError is an error wrapping multiple validation
// errors returned by ListBaseWalletsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBaseWalletsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBaseWalletsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBaseWalletsResponseMultiError) AllErrors() []error { return m }

// ListBaseWalletsResponseValidationError is the validation error returned by
// ListBaseWalletsResponse.Validate if the designated constraints aren't met.
type ListBaseWalletsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBaseWalletsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBaseWalletsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBaseWalletsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBaseWalletsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBaseWalletsResponseValidationError) ErrorName() string {
	return "ListBaseWalletsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBaseWalletsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBaseWalletsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBaseWalletsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBaseWalletsResponseValidationError{}

// Validate checks the field values on ListStakingWalletsByFilterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListStakingWalletsByFilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStakingWalletsByFilterRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListStakingWalletsByFilterRequestMultiError, or nil if none found.
func (m *ListStakingWalletsByFilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStakingWalletsByFilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _ListStakingWalletsByFilterRequest_FilterType_NotInLookup[m.GetFilterType()]; ok {
		err := ListStakingWalletsByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ListFilterType_name[int32(m.GetFilterType())]; !ok {
		err := ListStakingWalletsByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WalletId

	if utf8.RuneCountInString(m.GetWalletName()) > 40 {
		err := ListStakingWalletsByFilterRequestValidationError{
			field:  "WalletName",
			reason: "value length must be at most 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Address

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := ListStakingWalletsByFilterRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() > 100 {
		err := ListStakingWalletsByFilterRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListStakingWalletsByFilterRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		err := ListStakingWalletsByFilterRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListStakingWalletsByFilterRequestMultiError(errors)
	}

	return nil
}

// ListStakingWalletsByFilterRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListStakingWalletsByFilterRequest.ValidateAll() if the designated
// constraints aren't met.
type ListStakingWalletsByFilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStakingWalletsByFilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStakingWalletsByFilterRequestMultiError) AllErrors() []error { return m }

// ListStakingWalletsByFilterRequestValidationError is the validation error
// returned by ListStakingWalletsByFilterRequest.Validate if the designated
// constraints aren't met.
type ListStakingWalletsByFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStakingWalletsByFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStakingWalletsByFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStakingWalletsByFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStakingWalletsByFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStakingWalletsByFilterRequestValidationError) ErrorName() string {
	return "ListStakingWalletsByFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStakingWalletsByFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStakingWalletsByFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStakingWalletsByFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStakingWalletsByFilterRequestValidationError{}

var _ListStakingWalletsByFilterRequest_FilterType_NotInLookup = map[ListFilterType]struct{}{
	0: {},
}

var _ListStakingWalletsByFilterRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListStakingWalletsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStakingWalletsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStakingWalletsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStakingWalletsResponseMultiError, or nil if none found.
func (m *ListStakingWalletsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStakingWalletsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStakingWallets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStakingWalletsResponseValidationError{
						field:  fmt.Sprintf("StakingWallets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStakingWalletsResponseValidationError{
						field:  fmt.Sprintf("StakingWallets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStakingWalletsResponseValidationError{
					field:  fmt.Sprintf("StakingWallets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListStakingWalletsResponseMultiError(errors)
	}

	return nil
}

// ListStakingWalletsResponseMultiError is an error wrapping multiple
// validation errors returned by ListStakingWalletsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListStakingWalletsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStakingWalletsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStakingWalletsResponseMultiError) AllErrors() []error { return m }

// ListStakingWalletsResponseValidationError is the validation error returned
// by ListStakingWalletsResponse.Validate if the designated constraints aren't met.
type ListStakingWalletsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStakingWalletsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStakingWalletsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStakingWalletsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStakingWalletsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStakingWalletsResponseValidationError) ErrorName() string {
	return "ListStakingWalletsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStakingWalletsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStakingWalletsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStakingWalletsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStakingWalletsResponseValidationError{}

// Validate checks the field values on UpdateWalletNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWalletNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWalletNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWalletNameRequestMultiError, or nil if none found.
func (m *UpdateWalletNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWalletNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateWalletNameRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := UpdateWalletNameRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 40 {
		err := UpdateWalletNameRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateWalletNameRequestMultiError(errors)
	}

	return nil
}

// UpdateWalletNameRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWalletNameRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWalletNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWalletNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWalletNameRequestMultiError) AllErrors() []error { return m }

// UpdateWalletNameRequestValidationError is the validation error returned by
// UpdateWalletNameRequest.Validate if the designated constraints aren't met.
type UpdateWalletNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWalletNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWalletNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWalletNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWalletNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWalletNameRequestValidationError) ErrorName() string {
	return "UpdateWalletNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWalletNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWalletNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWalletNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWalletNameRequestValidationError{}

var _UpdateWalletNameRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on UpdateWalletValidationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWalletValidationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWalletValidationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateWalletValidationRequestMultiError, or nil if none found.
func (m *UpdateWalletValidationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWalletValidationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateWalletValidationRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := UpdateWalletValidationRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetNewValidatorIds() {
		_, _ = idx, item

		if !_UpdateWalletValidationRequest_NewValidatorIds_Pattern.MatchString(item) {
			err := UpdateWalletValidationRequestValidationError{
				field:  fmt.Sprintf("NewValidatorIds[%v]", idx),
				reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for NewRequiredApprovalCount

	if len(errors) > 0 {
		return UpdateWalletValidationRequestMultiError(errors)
	}

	return nil
}

// UpdateWalletValidationRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateWalletValidationRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateWalletValidationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWalletValidationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWalletValidationRequestMultiError) AllErrors() []error { return m }

// UpdateWalletValidationRequestValidationError is the validation error
// returned by UpdateWalletValidationRequest.Validate if the designated
// constraints aren't met.
type UpdateWalletValidationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWalletValidationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWalletValidationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWalletValidationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWalletValidationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWalletValidationRequestValidationError) ErrorName() string {
	return "UpdateWalletValidationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWalletValidationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWalletValidationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWalletValidationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWalletValidationRequestValidationError{}

var _UpdateWalletValidationRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _UpdateWalletValidationRequest_NewValidatorIds_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on UpdateWalletPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWalletPolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWalletPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWalletPolicyRequestMultiError, or nil if none found.
func (m *UpdateWalletPolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWalletPolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateWalletPolicyRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := UpdateWalletPolicyRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateWalletPolicyRequest_PolicyId_Pattern.MatchString(m.GetPolicyId()) {
		err := UpdateWalletPolicyRequestValidationError{
			field:  "PolicyId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateWalletPolicyRequestMultiError(errors)
	}

	return nil
}

// UpdateWalletPolicyRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWalletPolicyRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateWalletPolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWalletPolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWalletPolicyRequestMultiError) AllErrors() []error { return m }

// UpdateWalletPolicyRequestValidationError is the validation error returned by
// UpdateWalletPolicyRequest.Validate if the designated constraints aren't met.
type UpdateWalletPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWalletPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWalletPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWalletPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWalletPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWalletPolicyRequestValidationError) ErrorName() string {
	return "UpdateWalletPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWalletPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWalletPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWalletPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWalletPolicyRequestValidationError{}

var _UpdateWalletPolicyRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _UpdateWalletPolicyRequest_PolicyId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ReviewWalletProposalRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReviewWalletProposalRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewWalletProposalRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReviewWalletProposalRequestMultiError, or nil if none found.
func (m *ReviewWalletProposalRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewWalletProposalRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ReviewWalletProposalRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ReviewWalletProposalRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Approve

	if len(errors) > 0 {
		return ReviewWalletProposalRequestMultiError(errors)
	}

	return nil
}

// ReviewWalletProposalRequestMultiError is an error wrapping multiple
// validation errors returned by ReviewWalletProposalRequest.ValidateAll() if
// the designated constraints aren't met.
type ReviewWalletProposalRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewWalletProposalRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewWalletProposalRequestMultiError) AllErrors() []error { return m }

// ReviewWalletProposalRequestValidationError is the validation error returned
// by ReviewWalletProposalRequest.Validate if the designated constraints
// aren't met.
type ReviewWalletProposalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewWalletProposalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewWalletProposalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewWalletProposalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewWalletProposalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewWalletProposalRequestValidationError) ErrorName() string {
	return "ReviewWalletProposalRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewWalletProposalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewWalletProposalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewWalletProposalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewWalletProposalRequestValidationError{}

var _ReviewWalletProposalRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ExistsWalletByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExistsWalletByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistsWalletByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExistsWalletByNameRequestMultiError, or nil if none found.
func (m *ExistsWalletByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistsWalletByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ExistsWalletByNameRequestMultiError(errors)
	}

	return nil
}

// ExistsWalletByNameRequestMultiError is an error wrapping multiple validation
// errors returned by ExistsWalletByNameRequest.ValidateAll() if the
// designated constraints aren't met.
type ExistsWalletByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistsWalletByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistsWalletByNameRequestMultiError) AllErrors() []error { return m }

// ExistsWalletByNameRequestValidationError is the validation error returned by
// ExistsWalletByNameRequest.Validate if the designated constraints aren't met.
type ExistsWalletByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistsWalletByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistsWalletByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistsWalletByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistsWalletByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistsWalletByNameRequestValidationError) ErrorName() string {
	return "ExistsWalletByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExistsWalletByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistsWalletByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistsWalletByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistsWalletByNameRequestValidationError{}

// Validate checks the field values on ExistsWalletByNameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExistsWalletByNameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistsWalletByNameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExistsWalletByNameResponseMultiError, or nil if none found.
func (m *ExistsWalletByNameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistsWalletByNameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return ExistsWalletByNameResponseMultiError(errors)
	}

	return nil
}

// ExistsWalletByNameResponseMultiError is an error wrapping multiple
// validation errors returned by ExistsWalletByNameResponse.ValidateAll() if
// the designated constraints aren't met.
type ExistsWalletByNameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistsWalletByNameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistsWalletByNameResponseMultiError) AllErrors() []error { return m }

// ExistsWalletByNameResponseValidationError is the validation error returned
// by ExistsWalletByNameResponse.Validate if the designated constraints aren't met.
type ExistsWalletByNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistsWalletByNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistsWalletByNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistsWalletByNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistsWalletByNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistsWalletByNameResponseValidationError) ErrorName() string {
	return "ExistsWalletByNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExistsWalletByNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistsWalletByNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistsWalletByNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistsWalletByNameResponseValidationError{}

// Validate checks the field values on ExistsWalletGroupByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExistsWalletGroupByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistsWalletGroupByNameRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExistsWalletGroupByNameRequestMultiError, or nil if none found.
func (m *ExistsWalletGroupByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistsWalletGroupByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ExistsWalletGroupByNameRequestMultiError(errors)
	}

	return nil
}

// ExistsWalletGroupByNameRequestMultiError is an error wrapping multiple
// validation errors returned by ExistsWalletGroupByNameRequest.ValidateAll()
// if the designated constraints aren't met.
type ExistsWalletGroupByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistsWalletGroupByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistsWalletGroupByNameRequestMultiError) AllErrors() []error { return m }

// ExistsWalletGroupByNameRequestValidationError is the validation error
// returned by ExistsWalletGroupByNameRequest.Validate if the designated
// constraints aren't met.
type ExistsWalletGroupByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistsWalletGroupByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistsWalletGroupByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistsWalletGroupByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistsWalletGroupByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistsWalletGroupByNameRequestValidationError) ErrorName() string {
	return "ExistsWalletGroupByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExistsWalletGroupByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistsWalletGroupByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistsWalletGroupByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistsWalletGroupByNameRequestValidationError{}

// Validate checks the field values on ExistsWalletGroupByNameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExistsWalletGroupByNameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistsWalletGroupByNameResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExistsWalletGroupByNameResponseMultiError, or nil if none found.
func (m *ExistsWalletGroupByNameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistsWalletGroupByNameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return ExistsWalletGroupByNameResponseMultiError(errors)
	}

	return nil
}

// ExistsWalletGroupByNameResponseMultiError is an error wrapping multiple
// validation errors returned by ExistsWalletGroupByNameResponse.ValidateAll()
// if the designated constraints aren't met.
type ExistsWalletGroupByNameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistsWalletGroupByNameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistsWalletGroupByNameResponseMultiError) AllErrors() []error { return m }

// ExistsWalletGroupByNameResponseValidationError is the validation error
// returned by ExistsWalletGroupByNameResponse.Validate if the designated
// constraints aren't met.
type ExistsWalletGroupByNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistsWalletGroupByNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistsWalletGroupByNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistsWalletGroupByNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistsWalletGroupByNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistsWalletGroupByNameResponseValidationError) ErrorName() string {
	return "ExistsWalletGroupByNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExistsWalletGroupByNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistsWalletGroupByNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistsWalletGroupByNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistsWalletGroupByNameResponseValidationError{}

// Validate checks the field values on ExistsEnableWalletByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExistsEnableWalletByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistsEnableWalletByNameRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExistsEnableWalletByNameRequestMultiError, or nil if none found.
func (m *ExistsEnableWalletByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistsEnableWalletByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ExistsEnableWalletByNameRequestMultiError(errors)
	}

	return nil
}

// ExistsEnableWalletByNameRequestMultiError is an error wrapping multiple
// validation errors returned by ExistsEnableWalletByNameRequest.ValidateAll()
// if the designated constraints aren't met.
type ExistsEnableWalletByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistsEnableWalletByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistsEnableWalletByNameRequestMultiError) AllErrors() []error { return m }

// ExistsEnableWalletByNameRequestValidationError is the validation error
// returned by ExistsEnableWalletByNameRequest.Validate if the designated
// constraints aren't met.
type ExistsEnableWalletByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistsEnableWalletByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistsEnableWalletByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistsEnableWalletByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistsEnableWalletByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistsEnableWalletByNameRequestValidationError) ErrorName() string {
	return "ExistsEnableWalletByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExistsEnableWalletByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistsEnableWalletByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistsEnableWalletByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistsEnableWalletByNameRequestValidationError{}

// Validate checks the field values on ExistsEnableWalletByNameResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ExistsEnableWalletByNameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistsEnableWalletByNameResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExistsEnableWalletByNameResponseMultiError, or nil if none found.
func (m *ExistsEnableWalletByNameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistsEnableWalletByNameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return ExistsEnableWalletByNameResponseMultiError(errors)
	}

	return nil
}

// ExistsEnableWalletByNameResponseMultiError is an error wrapping multiple
// validation errors returned by
// ExistsEnableWalletByNameResponse.ValidateAll() if the designated
// constraints aren't met.
type ExistsEnableWalletByNameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistsEnableWalletByNameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistsEnableWalletByNameResponseMultiError) AllErrors() []error { return m }

// ExistsEnableWalletByNameResponseValidationError is the validation error
// returned by ExistsEnableWalletByNameResponse.Validate if the designated
// constraints aren't met.
type ExistsEnableWalletByNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistsEnableWalletByNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistsEnableWalletByNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistsEnableWalletByNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistsEnableWalletByNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistsEnableWalletByNameResponseValidationError) ErrorName() string {
	return "ExistsEnableWalletByNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExistsEnableWalletByNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistsEnableWalletByNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistsEnableWalletByNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistsEnableWalletByNameResponseValidationError{}

// Validate checks the field values on FlushBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FlushBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlushBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FlushBalanceRequestMultiError, or nil if none found.
func (m *FlushBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FlushBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_FlushBalanceRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := FlushBalanceRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FlushBalanceRequestMultiError(errors)
	}

	return nil
}

// FlushBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by FlushBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type FlushBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlushBalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlushBalanceRequestMultiError) AllErrors() []error { return m }

// FlushBalanceRequestValidationError is the validation error returned by
// FlushBalanceRequest.Validate if the designated constraints aren't met.
type FlushBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlushBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlushBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlushBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlushBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlushBalanceRequestValidationError) ErrorName() string {
	return "FlushBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FlushBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlushBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlushBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlushBalanceRequestValidationError{}

var _FlushBalanceRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on FlushBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FlushBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlushBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FlushBalanceResponseMultiError, or nil if none found.
func (m *FlushBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FlushBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFlushedAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FlushBalanceResponseValidationError{
						field:  fmt.Sprintf("FlushedAddresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FlushBalanceResponseValidationError{
						field:  fmt.Sprintf("FlushedAddresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FlushBalanceResponseValidationError{
					field:  fmt.Sprintf("FlushedAddresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FlushBalanceResponseMultiError(errors)
	}

	return nil
}

// FlushBalanceResponseMultiError is an error wrapping multiple validation
// errors returned by FlushBalanceResponse.ValidateAll() if the designated
// constraints aren't met.
type FlushBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlushBalanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlushBalanceResponseMultiError) AllErrors() []error { return m }

// FlushBalanceResponseValidationError is the validation error returned by
// FlushBalanceResponse.Validate if the designated constraints aren't met.
type FlushBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlushBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlushBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlushBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlushBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlushBalanceResponseValidationError) ErrorName() string {
	return "FlushBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FlushBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlushBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlushBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlushBalanceResponseValidationError{}

// Validate checks the field values on ListWalletFlushSettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWalletFlushSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWalletFlushSettingsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWalletFlushSettingsResponseMultiError, or nil if none found.
func (m *ListWalletFlushSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWalletFlushSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWalletFlushSettings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWalletFlushSettingsResponseValidationError{
						field:  fmt.Sprintf("WalletFlushSettings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWalletFlushSettingsResponseValidationError{
						field:  fmt.Sprintf("WalletFlushSettings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWalletFlushSettingsResponseValidationError{
					field:  fmt.Sprintf("WalletFlushSettings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWalletFlushSettingsResponseMultiError(errors)
	}

	return nil
}

// ListWalletFlushSettingsResponseMultiError is an error wrapping multiple
// validation errors returned by ListWalletFlushSettingsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListWalletFlushSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWalletFlushSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWalletFlushSettingsResponseMultiError) AllErrors() []error { return m }

// ListWalletFlushSettingsResponseValidationError is the validation error
// returned by ListWalletFlushSettingsResponse.Validate if the designated
// constraints aren't met.
type ListWalletFlushSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletFlushSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletFlushSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletFlushSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletFlushSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletFlushSettingsResponseValidationError) ErrorName() string {
	return "ListWalletFlushSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletFlushSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletFlushSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletFlushSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletFlushSettingsResponseValidationError{}

// Validate checks the field values on UpdateWalletFlushSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWalletFlushSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWalletFlushSettingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateWalletFlushSettingRequestMultiError, or nil if none found.
func (m *UpdateWalletFlushSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWalletFlushSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _UpdateWalletFlushSettingRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		err := UpdateWalletFlushSettingRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := UpdateWalletFlushSettingRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateWalletFlushSettingRequest_DestinationWalletId_Pattern.MatchString(m.GetDestinationWalletId()) {
		err := UpdateWalletFlushSettingRequestValidationError{
			field:  "DestinationWalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Network != nil {

		if _, ok := gincoincglobalv1.Network_name[int32(m.GetNetwork())]; !ok {
			err := UpdateWalletFlushSettingRequestValidationError{
				field:  "Network",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateWalletFlushSettingRequestMultiError(errors)
	}

	return nil
}

// UpdateWalletFlushSettingRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateWalletFlushSettingRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateWalletFlushSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWalletFlushSettingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWalletFlushSettingRequestMultiError) AllErrors() []error { return m }

// UpdateWalletFlushSettingRequestValidationError is the validation error
// returned by UpdateWalletFlushSettingRequest.Validate if the designated
// constraints aren't met.
type UpdateWalletFlushSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWalletFlushSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWalletFlushSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWalletFlushSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWalletFlushSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWalletFlushSettingRequestValidationError) ErrorName() string {
	return "UpdateWalletFlushSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWalletFlushSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWalletFlushSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWalletFlushSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWalletFlushSettingRequestValidationError{}

var _UpdateWalletFlushSettingRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

var _UpdateWalletFlushSettingRequest_DestinationWalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListCompensationFeeHistoriesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListCompensationFeeHistoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCompensationFeeHistoriesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListCompensationFeeHistoriesRequestMultiError, or nil if none found.
func (m *ListCompensationFeeHistoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCompensationFeeHistoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListCompensationFeeHistoriesRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ListCompensationFeeHistoriesRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddress()) < 25 {
		err := ListCompensationFeeHistoriesRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 25 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCompensationFeeHistoriesRequestMultiError(errors)
	}

	return nil
}

// ListCompensationFeeHistoriesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListCompensationFeeHistoriesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCompensationFeeHistoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCompensationFeeHistoriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCompensationFeeHistoriesRequestMultiError) AllErrors() []error { return m }

// ListCompensationFeeHistoriesRequestValidationError is the validation error
// returned by ListCompensationFeeHistoriesRequest.Validate if the designated
// constraints aren't met.
type ListCompensationFeeHistoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCompensationFeeHistoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCompensationFeeHistoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCompensationFeeHistoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCompensationFeeHistoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCompensationFeeHistoriesRequestValidationError) ErrorName() string {
	return "ListCompensationFeeHistoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCompensationFeeHistoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCompensationFeeHistoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCompensationFeeHistoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCompensationFeeHistoriesRequestValidationError{}

var _ListCompensationFeeHistoriesRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListCompensationFeeHistoriesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListCompensationFeeHistoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCompensationFeeHistoriesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListCompensationFeeHistoriesResponseMultiError, or nil if none found.
func (m *ListCompensationFeeHistoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCompensationFeeHistoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCompensationFees() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCompensationFeeHistoriesResponseValidationError{
						field:  fmt.Sprintf("CompensationFees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCompensationFeeHistoriesResponseValidationError{
						field:  fmt.Sprintf("CompensationFees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCompensationFeeHistoriesResponseValidationError{
					field:  fmt.Sprintf("CompensationFees[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCompensationFeeHistoriesResponseMultiError(errors)
	}

	return nil
}

// ListCompensationFeeHistoriesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListCompensationFeeHistoriesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCompensationFeeHistoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCompensationFeeHistoriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCompensationFeeHistoriesResponseMultiError) AllErrors() []error { return m }

// ListCompensationFeeHistoriesResponseValidationError is the validation error
// returned by ListCompensationFeeHistoriesResponse.Validate if the designated
// constraints aren't met.
type ListCompensationFeeHistoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCompensationFeeHistoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCompensationFeeHistoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCompensationFeeHistoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCompensationFeeHistoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCompensationFeeHistoriesResponseValidationError) ErrorName() string {
	return "ListCompensationFeeHistoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCompensationFeeHistoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCompensationFeeHistoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCompensationFeeHistoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCompensationFeeHistoriesResponseValidationError{}

// Validate checks the field values on ListUTXOsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUTXOsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUTXOsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUTXOsRequestMultiError, or nil if none found.
func (m *ListUTXOsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUTXOsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListUTXOsRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ListUTXOsRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListUTXOsRequestMultiError(errors)
	}

	return nil
}

// ListUTXOsRequestMultiError is an error wrapping multiple validation errors
// returned by ListUTXOsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUTXOsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUTXOsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUTXOsRequestMultiError) AllErrors() []error { return m }

// ListUTXOsRequestValidationError is the validation error returned by
// ListUTXOsRequest.Validate if the designated constraints aren't met.
type ListUTXOsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUTXOsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUTXOsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUTXOsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUTXOsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUTXOsRequestValidationError) ErrorName() string { return "ListUTXOsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUTXOsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUTXOsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUTXOsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUTXOsRequestValidationError{}

var _ListUTXOsRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListUTXOsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUTXOsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUTXOsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUTXOsResponseMultiError, or nil if none found.
func (m *ListUTXOsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUTXOsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUtxos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUTXOsResponseValidationError{
						field:  fmt.Sprintf("Utxos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUTXOsResponseValidationError{
						field:  fmt.Sprintf("Utxos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUTXOsResponseValidationError{
					field:  fmt.Sprintf("Utxos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUTXOsResponseMultiError(errors)
	}

	return nil
}

// ListUTXOsResponseMultiError is an error wrapping multiple validation errors
// returned by ListUTXOsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListUTXOsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUTXOsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUTXOsResponseMultiError) AllErrors() []error { return m }

// ListUTXOsResponseValidationError is the validation error returned by
// ListUTXOsResponse.Validate if the designated constraints aren't met.
type ListUTXOsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUTXOsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUTXOsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUTXOsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUTXOsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUTXOsResponseValidationError) ErrorName() string {
	return "ListUTXOsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUTXOsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUTXOsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUTXOsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUTXOsResponseValidationError{}

// Validate checks the field values on UpdateShouldCheckRemittanceFlagRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateShouldCheckRemittanceFlagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateShouldCheckRemittanceFlagRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateShouldCheckRemittanceFlagRequestMultiError, or nil if none found.
func (m *UpdateShouldCheckRemittanceFlagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShouldCheckRemittanceFlagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateShouldCheckRemittanceFlagRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := UpdateShouldCheckRemittanceFlagRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ShouldCheckRemittance

	if len(errors) > 0 {
		return UpdateShouldCheckRemittanceFlagRequestMultiError(errors)
	}

	return nil
}

// UpdateShouldCheckRemittanceFlagRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateShouldCheckRemittanceFlagRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateShouldCheckRemittanceFlagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShouldCheckRemittanceFlagRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShouldCheckRemittanceFlagRequestMultiError) AllErrors() []error { return m }

// UpdateShouldCheckRemittanceFlagRequestValidationError is the validation
// error returned by UpdateShouldCheckRemittanceFlagRequest.Validate if the
// designated constraints aren't met.
type UpdateShouldCheckRemittanceFlagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShouldCheckRemittanceFlagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShouldCheckRemittanceFlagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShouldCheckRemittanceFlagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShouldCheckRemittanceFlagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShouldCheckRemittanceFlagRequestValidationError) ErrorName() string {
	return "UpdateShouldCheckRemittanceFlagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShouldCheckRemittanceFlagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShouldCheckRemittanceFlagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShouldCheckRemittanceFlagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShouldCheckRemittanceFlagRequestValidationError{}

var _UpdateShouldCheckRemittanceFlagRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreateWalletGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWalletGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWalletGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWalletGroupRequestMultiError, or nil if none found.
func (m *CreateWalletGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWalletGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 40 {
		err := CreateWalletGroupRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateWalletGroupRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		err := CreateWalletGroupRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := CreateWalletGroupRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetWalletIds()) < 1 {
		err := CreateWalletGroupRequestValidationError{
			field:  "WalletIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WatchOnly

	if m.Network != nil {

		if _, ok := gincoincglobalv1.Network_name[int32(m.GetNetwork())]; !ok {
			err := CreateWalletGroupRequestValidationError{
				field:  "Network",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateWalletGroupRequestMultiError(errors)
	}

	return nil
}

// CreateWalletGroupRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWalletGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWalletGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWalletGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWalletGroupRequestMultiError) AllErrors() []error { return m }

// CreateWalletGroupRequestValidationError is the validation error returned by
// CreateWalletGroupRequest.Validate if the designated constraints aren't met.
type CreateWalletGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWalletGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWalletGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWalletGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWalletGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWalletGroupRequestValidationError) ErrorName() string {
	return "CreateWalletGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWalletGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWalletGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWalletGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWalletGroupRequestValidationError{}

var _CreateWalletGroupRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

// Validate checks the field values on CreateWalletGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWalletGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWalletGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWalletGroupResponseMultiError, or nil if none found.
func (m *CreateWalletGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWalletGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WalletGroupId

	if len(errors) > 0 {
		return CreateWalletGroupResponseMultiError(errors)
	}

	return nil
}

// CreateWalletGroupResponseMultiError is an error wrapping multiple validation
// errors returned by CreateWalletGroupResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateWalletGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWalletGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWalletGroupResponseMultiError) AllErrors() []error { return m }

// CreateWalletGroupResponseValidationError is the validation error returned by
// CreateWalletGroupResponse.Validate if the designated constraints aren't met.
type CreateWalletGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWalletGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWalletGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWalletGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWalletGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWalletGroupResponseValidationError) ErrorName() string {
	return "CreateWalletGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWalletGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWalletGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWalletGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWalletGroupResponseValidationError{}

// Validate checks the field values on UpdateWalletGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWalletGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWalletGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWalletGroupRequestMultiError, or nil if none found.
func (m *UpdateWalletGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWalletGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateWalletGroupRequest_WalletGroupId_Pattern.MatchString(m.GetWalletGroupId()) {
		err := UpdateWalletGroupRequestValidationError{
			field:  "WalletGroupId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetWalletIds()) < 1 {
		err := UpdateWalletGroupRequestValidationError{
			field:  "WalletIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateWalletGroupRequestMultiError(errors)
	}

	return nil
}

// UpdateWalletGroupRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWalletGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWalletGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWalletGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWalletGroupRequestMultiError) AllErrors() []error { return m }

// UpdateWalletGroupRequestValidationError is the validation error returned by
// UpdateWalletGroupRequest.Validate if the designated constraints aren't met.
type UpdateWalletGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWalletGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWalletGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWalletGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWalletGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWalletGroupRequestValidationError) ErrorName() string {
	return "UpdateWalletGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWalletGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWalletGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWalletGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWalletGroupRequestValidationError{}

var _UpdateWalletGroupRequest_WalletGroupId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on UpdateWalletGroupNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWalletGroupNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWalletGroupNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWalletGroupNameRequestMultiError, or nil if none found.
func (m *UpdateWalletGroupNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWalletGroupNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateWalletGroupNameRequest_WalletGroupId_Pattern.MatchString(m.GetWalletGroupId()) {
		err := UpdateWalletGroupNameRequestValidationError{
			field:  "WalletGroupId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 40 {
		err := UpdateWalletGroupNameRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateWalletGroupNameRequestMultiError(errors)
	}

	return nil
}

// UpdateWalletGroupNameRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateWalletGroupNameRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateWalletGroupNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWalletGroupNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWalletGroupNameRequestMultiError) AllErrors() []error { return m }

// UpdateWalletGroupNameRequestValidationError is the validation error returned
// by UpdateWalletGroupNameRequest.Validate if the designated constraints
// aren't met.
type UpdateWalletGroupNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWalletGroupNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWalletGroupNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWalletGroupNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWalletGroupNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWalletGroupNameRequestValidationError) ErrorName() string {
	return "UpdateWalletGroupNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWalletGroupNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWalletGroupNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWalletGroupNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWalletGroupNameRequestValidationError{}

var _UpdateWalletGroupNameRequest_WalletGroupId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetWalletGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWalletGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWalletGroupRequestMultiError, or nil if none found.
func (m *GetWalletGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetWalletGroupRequest_WalletGroupId_Pattern.MatchString(m.GetWalletGroupId()) {
		err := GetWalletGroupRequestValidationError{
			field:  "WalletGroupId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWalletGroupRequestMultiError(errors)
	}

	return nil
}

// GetWalletGroupRequestMultiError is an error wrapping multiple validation
// errors returned by GetWalletGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWalletGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletGroupRequestMultiError) AllErrors() []error { return m }

// GetWalletGroupRequestValidationError is the validation error returned by
// GetWalletGroupRequest.Validate if the designated constraints aren't met.
type GetWalletGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletGroupRequestValidationError) ErrorName() string {
	return "GetWalletGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletGroupRequestValidationError{}

var _GetWalletGroupRequest_WalletGroupId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListWalletGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWalletGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWalletGroupsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWalletGroupsRequestMultiError, or nil if none found.
func (m *ListWalletGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWalletGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WatchOnly

	if m.GetPageSize() > 100 {
		err := ListWalletGroupsRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListWalletGroupsRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		err := ListWalletGroupsRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListWalletGroupsRequestMultiError(errors)
	}

	return nil
}

// ListWalletGroupsRequestMultiError is an error wrapping multiple validation
// errors returned by ListWalletGroupsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWalletGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWalletGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWalletGroupsRequestMultiError) AllErrors() []error { return m }

// ListWalletGroupsRequestValidationError is the validation error returned by
// ListWalletGroupsRequest.Validate if the designated constraints aren't met.
type ListWalletGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletGroupsRequestValidationError) ErrorName() string {
	return "ListWalletGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletGroupsRequestValidationError{}

var _ListWalletGroupsRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListWalletGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWalletGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWalletGroupsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWalletGroupsResponseMultiError, or nil if none found.
func (m *ListWalletGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWalletGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWalletGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWalletGroupsResponseValidationError{
						field:  fmt.Sprintf("WalletGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWalletGroupsResponseValidationError{
						field:  fmt.Sprintf("WalletGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWalletGroupsResponseValidationError{
					field:  fmt.Sprintf("WalletGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListWalletGroupsResponseMultiError(errors)
	}

	return nil
}

// ListWalletGroupsResponseMultiError is an error wrapping multiple validation
// errors returned by ListWalletGroupsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWalletGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWalletGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWalletGroupsResponseMultiError) AllErrors() []error { return m }

// ListWalletGroupsResponseValidationError is the validation error returned by
// ListWalletGroupsResponse.Validate if the designated constraints aren't met.
type ListWalletGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletGroupsResponseValidationError) ErrorName() string {
	return "ListWalletGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletGroupsResponseValidationError{}

// Validate checks the field values on UpdateDestinationWalletIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateDestinationWalletIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDestinationWalletIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDestinationWalletIDRequestMultiError, or nil if none found.
func (m *UpdateDestinationWalletIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDestinationWalletIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateDestinationWalletIDRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := UpdateDestinationWalletIDRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateDestinationWalletIDRequest_DestinationWalletId_Pattern.MatchString(m.GetDestinationWalletId()) {
		err := UpdateDestinationWalletIDRequestValidationError{
			field:  "DestinationWalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDestinationWalletIDRequestMultiError(errors)
	}

	return nil
}

// UpdateDestinationWalletIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateDestinationWalletIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDestinationWalletIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDestinationWalletIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDestinationWalletIDRequestMultiError) AllErrors() []error { return m }

// UpdateDestinationWalletIDRequestValidationError is the validation error
// returned by UpdateDestinationWalletIDRequest.Validate if the designated
// constraints aren't met.
type UpdateDestinationWalletIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDestinationWalletIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDestinationWalletIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDestinationWalletIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDestinationWalletIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDestinationWalletIDRequestValidationError) ErrorName() string {
	return "UpdateDestinationWalletIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDestinationWalletIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDestinationWalletIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDestinationWalletIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDestinationWalletIDRequestValidationError{}

var _UpdateDestinationWalletIDRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _UpdateDestinationWalletIDRequest_DestinationWalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on EnableUTXORequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EnableUTXORequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableUTXORequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableUTXORequestMultiError, or nil if none found.
func (m *EnableUTXORequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableUTXORequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_EnableUTXORequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := EnableUTXORequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TxId

	// no validation rules for Vout

	if len(errors) > 0 {
		return EnableUTXORequestMultiError(errors)
	}

	return nil
}

// EnableUTXORequestMultiError is an error wrapping multiple validation errors
// returned by EnableUTXORequest.ValidateAll() if the designated constraints
// aren't met.
type EnableUTXORequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableUTXORequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableUTXORequestMultiError) AllErrors() []error { return m }

// EnableUTXORequestValidationError is the validation error returned by
// EnableUTXORequest.Validate if the designated constraints aren't met.
type EnableUTXORequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableUTXORequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableUTXORequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableUTXORequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableUTXORequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableUTXORequestValidationError) ErrorName() string {
	return "EnableUTXORequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableUTXORequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableUTXORequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableUTXORequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableUTXORequestValidationError{}

var _EnableUTXORequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on DisableUTXORequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableUTXORequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableUTXORequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableUTXORequestMultiError, or nil if none found.
func (m *DisableUTXORequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableUTXORequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_DisableUTXORequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := DisableUTXORequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TxId

	// no validation rules for Vout

	if len(errors) > 0 {
		return DisableUTXORequestMultiError(errors)
	}

	return nil
}

// DisableUTXORequestMultiError is an error wrapping multiple validation errors
// returned by DisableUTXORequest.ValidateAll() if the designated constraints
// aren't met.
type DisableUTXORequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableUTXORequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableUTXORequestMultiError) AllErrors() []error { return m }

// DisableUTXORequestValidationError is the validation error returned by
// DisableUTXORequest.Validate if the designated constraints aren't met.
type DisableUTXORequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableUTXORequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableUTXORequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableUTXORequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableUTXORequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableUTXORequestValidationError) ErrorName() string {
	return "DisableUTXORequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableUTXORequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableUTXORequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableUTXORequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableUTXORequestValidationError{}

var _DisableUTXORequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on UpdateWalletIsStakingAvailableRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateWalletIsStakingAvailableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWalletIsStakingAvailableRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateWalletIsStakingAvailableRequestMultiError, or nil if none found.
func (m *UpdateWalletIsStakingAvailableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWalletIsStakingAvailableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateWalletIsStakingAvailableRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := UpdateWalletIsStakingAvailableRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsStakingAvailable

	if len(errors) > 0 {
		return UpdateWalletIsStakingAvailableRequestMultiError(errors)
	}

	return nil
}

// UpdateWalletIsStakingAvailableRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateWalletIsStakingAvailableRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWalletIsStakingAvailableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWalletIsStakingAvailableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWalletIsStakingAvailableRequestMultiError) AllErrors() []error { return m }

// UpdateWalletIsStakingAvailableRequestValidationError is the validation error
// returned by UpdateWalletIsStakingAvailableRequest.Validate if the
// designated constraints aren't met.
type UpdateWalletIsStakingAvailableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWalletIsStakingAvailableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWalletIsStakingAvailableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWalletIsStakingAvailableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWalletIsStakingAvailableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWalletIsStakingAvailableRequestValidationError) ErrorName() string {
	return "UpdateWalletIsStakingAvailableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWalletIsStakingAvailableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWalletIsStakingAvailableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWalletIsStakingAvailableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWalletIsStakingAvailableRequestValidationError{}

var _UpdateWalletIsStakingAvailableRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on
// RefreshStakingWalletClaimableRewardRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RefreshStakingWalletClaimableRewardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RefreshStakingWalletClaimableRewardRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RefreshStakingWalletClaimableRewardRequestMultiError, or nil if none found.
func (m *RefreshStakingWalletClaimableRewardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshStakingWalletClaimableRewardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_RefreshStakingWalletClaimableRewardRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := RefreshStakingWalletClaimableRewardRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RefreshStakingWalletClaimableRewardRequestMultiError(errors)
	}

	return nil
}

// RefreshStakingWalletClaimableRewardRequestMultiError is an error wrapping
// multiple validation errors returned by
// RefreshStakingWalletClaimableRewardRequest.ValidateAll() if the designated
// constraints aren't met.
type RefreshStakingWalletClaimableRewardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshStakingWalletClaimableRewardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshStakingWalletClaimableRewardRequestMultiError) AllErrors() []error { return m }

// RefreshStakingWalletClaimableRewardRequestValidationError is the validation
// error returned by RefreshStakingWalletClaimableRewardRequest.Validate if
// the designated constraints aren't met.
type RefreshStakingWalletClaimableRewardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshStakingWalletClaimableRewardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshStakingWalletClaimableRewardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshStakingWalletClaimableRewardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshStakingWalletClaimableRewardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshStakingWalletClaimableRewardRequestValidationError) ErrorName() string {
	return "RefreshStakingWalletClaimableRewardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshStakingWalletClaimableRewardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshStakingWalletClaimableRewardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshStakingWalletClaimableRewardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshStakingWalletClaimableRewardRequestValidationError{}

var _RefreshStakingWalletClaimableRewardRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on
// RefreshStakingWalletClaimableRewardResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RefreshStakingWalletClaimableRewardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RefreshStakingWalletClaimableRewardResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RefreshStakingWalletClaimableRewardResponseMultiError, or nil if none found.
func (m *RefreshStakingWalletClaimableRewardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshStakingWalletClaimableRewardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClaimableReward

	// no validation rules for StringClaimableReward

	if len(errors) > 0 {
		return RefreshStakingWalletClaimableRewardResponseMultiError(errors)
	}

	return nil
}

// RefreshStakingWalletClaimableRewardResponseMultiError is an error wrapping
// multiple validation errors returned by
// RefreshStakingWalletClaimableRewardResponse.ValidateAll() if the designated
// constraints aren't met.
type RefreshStakingWalletClaimableRewardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshStakingWalletClaimableRewardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshStakingWalletClaimableRewardResponseMultiError) AllErrors() []error { return m }

// RefreshStakingWalletClaimableRewardResponseValidationError is the validation
// error returned by RefreshStakingWalletClaimableRewardResponse.Validate if
// the designated constraints aren't met.
type RefreshStakingWalletClaimableRewardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshStakingWalletClaimableRewardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshStakingWalletClaimableRewardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshStakingWalletClaimableRewardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshStakingWalletClaimableRewardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshStakingWalletClaimableRewardResponseValidationError) ErrorName() string {
	return "RefreshStakingWalletClaimableRewardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshStakingWalletClaimableRewardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshStakingWalletClaimableRewardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshStakingWalletClaimableRewardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshStakingWalletClaimableRewardResponseValidationError{}

// Validate checks the field values on RegisterKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterKeyRequestMultiError, or nil if none found.
func (m *RegisterKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_RegisterKeyRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := RegisterKeyRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPubKey()) < 64 {
		err := RegisterKeyRequestValidationError{
			field:  "PubKey",
			reason: "value length must be at least 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterKeyRequestMultiError(errors)
	}

	return nil
}

// RegisterKeyRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterKeyRequestMultiError) AllErrors() []error { return m }

// RegisterKeyRequestValidationError is the validation error returned by
// RegisterKeyRequest.Validate if the designated constraints aren't met.
type RegisterKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterKeyRequestValidationError) ErrorName() string {
	return "RegisterKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterKeyRequestValidationError{}

var _RegisterKeyRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on RegisterKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterKeyResponseMultiError, or nil if none found.
func (m *RegisterKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyId

	if len(errors) > 0 {
		return RegisterKeyResponseMultiError(errors)
	}

	return nil
}

// RegisterKeyResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterKeyResponseMultiError) AllErrors() []error { return m }

// RegisterKeyResponseValidationError is the validation error returned by
// RegisterKeyResponse.Validate if the designated constraints aren't met.
type RegisterKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterKeyResponseValidationError) ErrorName() string {
	return "RegisterKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterKeyResponseValidationError{}

// Validate checks the field values on CreateAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAddressRequestMultiError, or nil if none found.
func (m *CreateAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreateAddressRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := CreateAddressRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FeeRate

	if len(errors) > 0 {
		return CreateAddressRequestMultiError(errors)
	}

	return nil
}

// CreateAddressRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAddressRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAddressRequestMultiError) AllErrors() []error { return m }

// CreateAddressRequestValidationError is the validation error returned by
// CreateAddressRequest.Validate if the designated constraints aren't met.
type CreateAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAddressRequestValidationError) ErrorName() string {
	return "CreateAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAddressRequestValidationError{}

var _CreateAddressRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreateAddressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAddressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAddressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAddressResponseMultiError, or nil if none found.
func (m *CreateAddressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAddressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddressId

	if len(errors) > 0 {
		return CreateAddressResponseMultiError(errors)
	}

	return nil
}

// CreateAddressResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAddressResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAddressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAddressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAddressResponseMultiError) AllErrors() []error { return m }

// CreateAddressResponseValidationError is the validation error returned by
// CreateAddressResponse.Validate if the designated constraints aren't met.
type CreateAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAddressResponseValidationError) ErrorName() string {
	return "CreateAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAddressResponseValidationError{}

// Validate checks the field values on GetAddressRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAddressRequestMultiError, or nil if none found.
func (m *GetAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetAddressRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := GetAddressRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetAddressRequest_AddressId_Pattern.MatchString(m.GetAddressId()) {
		err := GetAddressRequestValidationError{
			field:  "AddressId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAddressRequestMultiError(errors)
	}

	return nil
}

// GetAddressRequestMultiError is an error wrapping multiple validation errors
// returned by GetAddressRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddressRequestMultiError) AllErrors() []error { return m }

// GetAddressRequestValidationError is the validation error returned by
// GetAddressRequest.Validate if the designated constraints aren't met.
type GetAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressRequestValidationError) ErrorName() string {
	return "GetAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressRequestValidationError{}

var _GetAddressRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _GetAddressRequest_AddressId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetAddressByAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAddressByAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAddressByAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAddressByAddressRequestMultiError, or nil if none found.
func (m *GetAddressByAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddressByAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetAddressByAddressRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := GetAddressByAddressRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Address

	if len(errors) > 0 {
		return GetAddressByAddressRequestMultiError(errors)
	}

	return nil
}

// GetAddressByAddressRequestMultiError is an error wrapping multiple
// validation errors returned by GetAddressByAddressRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAddressByAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddressByAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddressByAddressRequestMultiError) AllErrors() []error { return m }

// GetAddressByAddressRequestValidationError is the validation error returned
// by GetAddressByAddressRequest.Validate if the designated constraints aren't met.
type GetAddressByAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressByAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressByAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressByAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressByAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressByAddressRequestValidationError) ErrorName() string {
	return "GetAddressByAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressByAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressByAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressByAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressByAddressRequestValidationError{}

var _GetAddressByAddressRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetAddressByAddressCoinRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAddressByAddressCoinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAddressByAddressCoinRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAddressByAddressCoinRequestMultiError, or nil if none found.
func (m *GetAddressByAddressCoinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddressByAddressCoinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	if _, ok := _GetAddressByAddressCoinRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		err := GetAddressByAddressCoinRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := GetAddressByAddressCoinRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAddressByAddressCoinRequestMultiError(errors)
	}

	return nil
}

// GetAddressByAddressCoinRequestMultiError is an error wrapping multiple
// validation errors returned by GetAddressByAddressCoinRequest.ValidateAll()
// if the designated constraints aren't met.
type GetAddressByAddressCoinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddressByAddressCoinRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddressByAddressCoinRequestMultiError) AllErrors() []error { return m }

// GetAddressByAddressCoinRequestValidationError is the validation error
// returned by GetAddressByAddressCoinRequest.Validate if the designated
// constraints aren't met.
type GetAddressByAddressCoinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressByAddressCoinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressByAddressCoinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressByAddressCoinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressByAddressCoinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressByAddressCoinRequestValidationError) ErrorName() string {
	return "GetAddressByAddressCoinRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressByAddressCoinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressByAddressCoinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressByAddressCoinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressByAddressCoinRequestValidationError{}

var _GetAddressByAddressCoinRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

// Validate checks the field values on GetAddressByIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAddressByIndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAddressByIndexRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAddressByIndexRequestMultiError, or nil if none found.
func (m *GetAddressByIndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddressByIndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetAddressByIndexRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := GetAddressByIndexRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetIndex() < 0 {
		err := GetAddressByIndexRequestValidationError{
			field:  "Index",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAddressByIndexRequestMultiError(errors)
	}

	return nil
}

// GetAddressByIndexRequestMultiError is an error wrapping multiple validation
// errors returned by GetAddressByIndexRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAddressByIndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddressByIndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddressByIndexRequestMultiError) AllErrors() []error { return m }

// GetAddressByIndexRequestValidationError is the validation error returned by
// GetAddressByIndexRequest.Validate if the designated constraints aren't met.
type GetAddressByIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressByIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressByIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressByIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressByIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressByIndexRequestValidationError) ErrorName() string {
	return "GetAddressByIndexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressByIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressByIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressByIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressByIndexRequestValidationError{}

var _GetAddressByIndexRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetAddressWithoutBalanceByIndexRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetAddressWithoutBalanceByIndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetAddressWithoutBalanceByIndexRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetAddressWithoutBalanceByIndexRequestMultiError, or nil if none found.
func (m *GetAddressWithoutBalanceByIndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddressWithoutBalanceByIndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetAddressWithoutBalanceByIndexRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := GetAddressWithoutBalanceByIndexRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetIndex() < 0 {
		err := GetAddressWithoutBalanceByIndexRequestValidationError{
			field:  "Index",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAddressWithoutBalanceByIndexRequestMultiError(errors)
	}

	return nil
}

// GetAddressWithoutBalanceByIndexRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetAddressWithoutBalanceByIndexRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAddressWithoutBalanceByIndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddressWithoutBalanceByIndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddressWithoutBalanceByIndexRequestMultiError) AllErrors() []error { return m }

// GetAddressWithoutBalanceByIndexRequestValidationError is the validation
// error returned by GetAddressWithoutBalanceByIndexRequest.Validate if the
// designated constraints aren't met.
type GetAddressWithoutBalanceByIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressWithoutBalanceByIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressWithoutBalanceByIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressWithoutBalanceByIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressWithoutBalanceByIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressWithoutBalanceByIndexRequestValidationError) ErrorName() string {
	return "GetAddressWithoutBalanceByIndexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressWithoutBalanceByIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressWithoutBalanceByIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressWithoutBalanceByIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressWithoutBalanceByIndexRequestValidationError{}

var _GetAddressWithoutBalanceByIndexRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListAddressesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAddressesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAddressesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAddressesRequestMultiError, or nil if none found.
func (m *ListAddressesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAddressesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListAddressesRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ListAddressesRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OmitChange

	if m.GetPageSize() > 100 {
		err := ListAddressesRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListAddressesRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		err := ListAddressesRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListAddressesRequestMultiError(errors)
	}

	return nil
}

// ListAddressesRequestMultiError is an error wrapping multiple validation
// errors returned by ListAddressesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAddressesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAddressesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAddressesRequestMultiError) AllErrors() []error { return m }

// ListAddressesRequestValidationError is the validation error returned by
// ListAddressesRequest.Validate if the designated constraints aren't met.
type ListAddressesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAddressesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAddressesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAddressesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAddressesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAddressesRequestValidationError) ErrorName() string {
	return "ListAddressesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAddressesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAddressesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAddressesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAddressesRequestValidationError{}

var _ListAddressesRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ListAddressesRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListAddressesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAddressesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAddressesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAddressesResponseMultiError, or nil if none found.
func (m *ListAddressesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAddressesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAddressesResponseValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAddressesResponseValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAddressesResponseValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListAddressesResponseMultiError(errors)
	}

	return nil
}

// ListAddressesResponseMultiError is an error wrapping multiple validation
// errors returned by ListAddressesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAddressesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAddressesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAddressesResponseMultiError) AllErrors() []error { return m }

// ListAddressesResponseValidationError is the validation error returned by
// ListAddressesResponse.Validate if the designated constraints aren't met.
type ListAddressesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAddressesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAddressesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAddressesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAddressesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAddressesResponseValidationError) ErrorName() string {
	return "ListAddressesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAddressesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAddressesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAddressesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAddressesResponseValidationError{}

// Validate checks the field values on ListAddressesWithBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAddressesWithBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAddressesWithBalanceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListAddressesWithBalanceRequestMultiError, or nil if none found.
func (m *ListAddressesWithBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAddressesWithBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListAddressesWithBalanceRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ListAddressesWithBalanceRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListAddressesWithBalanceRequestMultiError(errors)
	}

	return nil
}

// ListAddressesWithBalanceRequestMultiError is an error wrapping multiple
// validation errors returned by ListAddressesWithBalanceRequest.ValidateAll()
// if the designated constraints aren't met.
type ListAddressesWithBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAddressesWithBalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAddressesWithBalanceRequestMultiError) AllErrors() []error { return m }

// ListAddressesWithBalanceRequestValidationError is the validation error
// returned by ListAddressesWithBalanceRequest.Validate if the designated
// constraints aren't met.
type ListAddressesWithBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAddressesWithBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAddressesWithBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAddressesWithBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAddressesWithBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAddressesWithBalanceRequestValidationError) ErrorName() string {
	return "ListAddressesWithBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAddressesWithBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAddressesWithBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAddressesWithBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAddressesWithBalanceRequestValidationError{}

var _ListAddressesWithBalanceRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListAddressesWithBalanceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListAddressesWithBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAddressesWithBalanceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListAddressesWithBalanceResponseMultiError, or nil if none found.
func (m *ListAddressesWithBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAddressesWithBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAddressesWithBalanceResponseValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAddressesWithBalanceResponseValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAddressesWithBalanceResponseValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAddressesWithBalanceResponseMultiError(errors)
	}

	return nil
}

// ListAddressesWithBalanceResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListAddressesWithBalanceResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAddressesWithBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAddressesWithBalanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAddressesWithBalanceResponseMultiError) AllErrors() []error { return m }

// ListAddressesWithBalanceResponseValidationError is the validation error
// returned by ListAddressesWithBalanceResponse.Validate if the designated
// constraints aren't met.
type ListAddressesWithBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAddressesWithBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAddressesWithBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAddressesWithBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAddressesWithBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAddressesWithBalanceResponseValidationError) ErrorName() string {
	return "ListAddressesWithBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAddressesWithBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAddressesWithBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAddressesWithBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAddressesWithBalanceResponseValidationError{}

// Validate checks the field values on UpdateAddressBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAddressBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAddressBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAddressBalanceRequestMultiError, or nil if none found.
func (m *UpdateAddressBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAddressBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateAddressBalanceRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := UpdateAddressBalanceRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Address

	if len(errors) > 0 {
		return UpdateAddressBalanceRequestMultiError(errors)
	}

	return nil
}

// UpdateAddressBalanceRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAddressBalanceRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateAddressBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAddressBalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAddressBalanceRequestMultiError) AllErrors() []error { return m }

// UpdateAddressBalanceRequestValidationError is the validation error returned
// by UpdateAddressBalanceRequest.Validate if the designated constraints
// aren't met.
type UpdateAddressBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAddressBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAddressBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAddressBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAddressBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAddressBalanceRequestValidationError) ErrorName() string {
	return "UpdateAddressBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAddressBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAddressBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAddressBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAddressBalanceRequestValidationError{}

var _UpdateAddressBalanceRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListAddressesWithoutBalanceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListAddressesWithoutBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAddressesWithoutBalanceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListAddressesWithoutBalanceRequestMultiError, or nil if none found.
func (m *ListAddressesWithoutBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAddressesWithoutBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListAddressesWithoutBalanceRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ListAddressesWithoutBalanceRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OmitChange

	if m.GetPageSize() > 100 {
		err := ListAddressesWithoutBalanceRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListAddressesWithoutBalanceRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		err := ListAddressesWithoutBalanceRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListAddressesWithoutBalanceRequestMultiError(errors)
	}

	return nil
}

// ListAddressesWithoutBalanceRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListAddressesWithoutBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAddressesWithoutBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAddressesWithoutBalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAddressesWithoutBalanceRequestMultiError) AllErrors() []error { return m }

// ListAddressesWithoutBalanceRequestValidationError is the validation error
// returned by ListAddressesWithoutBalanceRequest.Validate if the designated
// constraints aren't met.
type ListAddressesWithoutBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAddressesWithoutBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAddressesWithoutBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAddressesWithoutBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAddressesWithoutBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAddressesWithoutBalanceRequestValidationError) ErrorName() string {
	return "ListAddressesWithoutBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAddressesWithoutBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAddressesWithoutBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAddressesWithoutBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAddressesWithoutBalanceRequestValidationError{}

var _ListAddressesWithoutBalanceRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ListAddressesWithoutBalanceRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListAddressesWithoutBalanceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListAddressesWithoutBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAddressesWithoutBalanceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListAddressesWithoutBalanceResponseMultiError, or nil if none found.
func (m *ListAddressesWithoutBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAddressesWithoutBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAddressesWithoutBalanceResponseValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAddressesWithoutBalanceResponseValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAddressesWithoutBalanceResponseValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListAddressesWithoutBalanceResponseMultiError(errors)
	}

	return nil
}

// ListAddressesWithoutBalanceResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListAddressesWithoutBalanceResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAddressesWithoutBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAddressesWithoutBalanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAddressesWithoutBalanceResponseMultiError) AllErrors() []error { return m }

// ListAddressesWithoutBalanceResponseValidationError is the validation error
// returned by ListAddressesWithoutBalanceResponse.Validate if the designated
// constraints aren't met.
type ListAddressesWithoutBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAddressesWithoutBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAddressesWithoutBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAddressesWithoutBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAddressesWithoutBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAddressesWithoutBalanceResponseValidationError) ErrorName() string {
	return "ListAddressesWithoutBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAddressesWithoutBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAddressesWithoutBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAddressesWithoutBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAddressesWithoutBalanceResponseValidationError{}

// Validate checks the field values on GetEthereumFeeAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEthereumFeeAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEthereumFeeAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEthereumFeeAddressRequestMultiError, or nil if none found.
func (m *GetEthereumFeeAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEthereumFeeAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetEthereumFeeAddressRequestMultiError(errors)
	}

	return nil
}

// GetEthereumFeeAddressRequestMultiError is an error wrapping multiple
// validation errors returned by GetEthereumFeeAddressRequest.ValidateAll() if
// the designated constraints aren't met.
type GetEthereumFeeAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEthereumFeeAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEthereumFeeAddressRequestMultiError) AllErrors() []error { return m }

// GetEthereumFeeAddressRequestValidationError is the validation error returned
// by GetEthereumFeeAddressRequest.Validate if the designated constraints
// aren't met.
type GetEthereumFeeAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEthereumFeeAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEthereumFeeAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEthereumFeeAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEthereumFeeAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEthereumFeeAddressRequestValidationError) ErrorName() string {
	return "GetEthereumFeeAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEthereumFeeAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEthereumFeeAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEthereumFeeAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEthereumFeeAddressRequestValidationError{}

// Validate checks the field values on
// DeleteAllWatchOnlyAddressesByWalletIDRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteAllWatchOnlyAddressesByWalletIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteAllWatchOnlyAddressesByWalletIDRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DeleteAllWatchOnlyAddressesByWalletIDRequestMultiError, or nil if none found.
func (m *DeleteAllWatchOnlyAddressesByWalletIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAllWatchOnlyAddressesByWalletIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_DeleteAllWatchOnlyAddressesByWalletIDRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAllWatchOnlyAddressesByWalletIDRequestMultiError(errors)
	}

	return nil
}

// DeleteAllWatchOnlyAddressesByWalletIDRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteAllWatchOnlyAddressesByWalletIDRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteAllWatchOnlyAddressesByWalletIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAllWatchOnlyAddressesByWalletIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAllWatchOnlyAddressesByWalletIDRequestMultiError) AllErrors() []error { return m }

// DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError is the
// validation error returned by
// DeleteAllWatchOnlyAddressesByWalletIDRequest.Validate if the designated
// constraints aren't met.
type DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError) ErrorName() string {
	return "DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAllWatchOnlyAddressesByWalletIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError{}

var _DeleteAllWatchOnlyAddressesByWalletIDRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ImportAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportAddressRequestMultiError, or nil if none found.
func (m *ImportAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ImportAddressRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ImportAddressRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Address

	// no validation rules for IsChangeAddress

	if len(errors) > 0 {
		return ImportAddressRequestMultiError(errors)
	}

	return nil
}

// ImportAddressRequestMultiError is an error wrapping multiple validation
// errors returned by ImportAddressRequest.ValidateAll() if the designated
// constraints aren't met.
type ImportAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportAddressRequestMultiError) AllErrors() []error { return m }

// ImportAddressRequestValidationError is the validation error returned by
// ImportAddressRequest.Validate if the designated constraints aren't met.
type ImportAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportAddressRequestValidationError) ErrorName() string {
	return "ImportAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportAddressRequestValidationError{}

var _ImportAddressRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreateTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransactionRequestMultiError, or nil if none found.
func (m *CreateTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreateTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := CreateTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FeeRate

	for idx, item := range m.GetTxOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateTransactionRequestValidationError{
						field:  fmt.Sprintf("TxOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateTransactionRequestValidationError{
						field:  fmt.Sprintf("TxOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateTransactionRequestValidationError{
					field:  fmt.Sprintf("TxOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Address

	// no validation rules for DestinationTag

	// no validation rules for MemoId

	// no validation rules for StringValue

	if all {
		switch v := interface{}(m.GetSubstrateSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "SubstrateSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "SubstrateSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubstrateSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransactionRequestValidationError{
				field:  "SubstrateSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWalletConnectSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "WalletConnectSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "WalletConnectSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWalletConnectSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransactionRequestValidationError{
				field:  "WalletConnectSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNemSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "NemSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "NemSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNemSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransactionRequestValidationError{
				field:  "NemSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIostSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "IostSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "IostSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIostSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransactionRequestValidationError{
				field:  "IostSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetXymSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "XymSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "XymSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetXymSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransactionRequestValidationError{
				field:  "XymSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEthereumSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "EthereumSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "EthereumSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEthereumSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransactionRequestValidationError{
				field:  "EthereumSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCosmosSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "CosmosSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "CosmosSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCosmosSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransactionRequestValidationError{
				field:  "CosmosSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAlgorandSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "AlgorandSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "AlgorandSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAlgorandSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransactionRequestValidationError{
				field:  "AlgorandSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHederaSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "HederaSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "HederaSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHederaSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransactionRequestValidationError{
				field:  "HederaSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSolanaSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "SolanaSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "SolanaSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSolanaSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransactionRequestValidationError{
				field:  "SolanaSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUtxoSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "UtxoSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "UtxoSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUtxoSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransactionRequestValidationError{
				field:  "UtxoSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTransactionRequestMultiError(errors)
	}

	return nil
}

// CreateTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransactionRequestMultiError) AllErrors() []error { return m }

// CreateTransactionRequestValidationError is the validation error returned by
// CreateTransactionRequest.Validate if the designated constraints aren't met.
type CreateTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransactionRequestValidationError) ErrorName() string {
	return "CreateTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransactionRequestValidationError{}

var _CreateTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreateTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransactionResponseMultiError, or nil if none found.
func (m *CreateTransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	if len(errors) > 0 {
		return CreateTransactionResponseMultiError(errors)
	}

	return nil
}

// CreateTransactionResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTransactionResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateTransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransactionResponseMultiError) AllErrors() []error { return m }

// CreateTransactionResponseValidationError is the validation error returned by
// CreateTransactionResponse.Validate if the designated constraints aren't met.
type CreateTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransactionResponseValidationError) ErrorName() string {
	return "CreateTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransactionResponseValidationError{}

// Validate checks the field values on CreateXRPInitTransactionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateXRPInitTransactionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateXRPInitTransactionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateXRPInitTransactionsRequestMultiError, or nil if none found.
func (m *CreateXRPInitTransactionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateXRPInitTransactionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreateXRPInitTransactionsRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := CreateXRPInitTransactionsRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateXRPInitTransactionsRequestMultiError(errors)
	}

	return nil
}

// CreateXRPInitTransactionsRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateXRPInitTransactionsRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateXRPInitTransactionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateXRPInitTransactionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateXRPInitTransactionsRequestMultiError) AllErrors() []error { return m }

// CreateXRPInitTransactionsRequestValidationError is the validation error
// returned by CreateXRPInitTransactionsRequest.Validate if the designated
// constraints aren't met.
type CreateXRPInitTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateXRPInitTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateXRPInitTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateXRPInitTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateXRPInitTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateXRPInitTransactionsRequestValidationError) ErrorName() string {
	return "CreateXRPInitTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateXRPInitTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateXRPInitTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateXRPInitTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateXRPInitTransactionsRequestValidationError{}

var _CreateXRPInitTransactionsRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreateInitTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInitTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInitTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInitTransactionRequestMultiError, or nil if none found.
func (m *CreateInitTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInitTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreateInitTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := CreateInitTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetIostSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateInitTransactionRequestValidationError{
					field:  "IostSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateInitTransactionRequestValidationError{
					field:  "IostSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIostSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInitTransactionRequestValidationError{
				field:  "IostSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateInitTransactionRequestMultiError(errors)
	}

	return nil
}

// CreateInitTransactionRequestMultiError is an error wrapping multiple
// validation errors returned by CreateInitTransactionRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateInitTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInitTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInitTransactionRequestMultiError) AllErrors() []error { return m }

// CreateInitTransactionRequestValidationError is the validation error returned
// by CreateInitTransactionRequest.Validate if the designated constraints
// aren't met.
type CreateInitTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInitTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInitTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInitTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInitTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInitTransactionRequestValidationError) ErrorName() string {
	return "CreateInitTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInitTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInitTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInitTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInitTransactionRequestValidationError{}

var _CreateInitTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on SignTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SignTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignTransactionRequestMultiError, or nil if none found.
func (m *SignTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_SignTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := SignTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SignTransactionRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		err := SignTransactionRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SignTransactionRequest_KeyId_Pattern.MatchString(m.GetKeyId()) {
		err := SignTransactionRequestValidationError{
			field:  "KeyId",
			reason: "value does not match regex pattern \"^$|^[0-9A-F]{64}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSignedInfo() == nil {
		err := SignTransactionRequestValidationError{
			field:  "SignedInfo",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSignedInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignTransactionRequestValidationError{
					field:  "SignedInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignTransactionRequestValidationError{
					field:  "SignedInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignedInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignTransactionRequestValidationError{
				field:  "SignedInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SignTransactionRequestMultiError(errors)
	}

	return nil
}

// SignTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by SignTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type SignTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignTransactionRequestMultiError) AllErrors() []error { return m }

// SignTransactionRequestValidationError is the validation error returned by
// SignTransactionRequest.Validate if the designated constraints aren't met.
type SignTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignTransactionRequestValidationError) ErrorName() string {
	return "SignTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SignTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignTransactionRequestValidationError{}

var _SignTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _SignTransactionRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _SignTransactionRequest_KeyId_Pattern = regexp.MustCompile("^$|^[0-9A-F]{64}$")

// Validate checks the field values on SignXRPInitTransactionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SignXRPInitTransactionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignXRPInitTransactionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SignXRPInitTransactionsRequestMultiError, or nil if none found.
func (m *SignXRPInitTransactionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignXRPInitTransactionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_SignXRPInitTransactionsRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := SignXRPInitTransactionsRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SignXRPInitTransactionsRequest_KeyId_Pattern.MatchString(m.GetKeyId()) {
		err := SignXRPInitTransactionsRequestValidationError{
			field:  "KeyId",
			reason: "value does not match regex pattern \"^[0-9A-F]{64}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetSignedInfo()) < 1 {
		err := SignXRPInitTransactionsRequestValidationError{
			field:  "SignedInfo",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetSignedInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SignXRPInitTransactionsRequestValidationError{
						field:  fmt.Sprintf("SignedInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SignXRPInitTransactionsRequestValidationError{
						field:  fmt.Sprintf("SignedInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignXRPInitTransactionsRequestValidationError{
					field:  fmt.Sprintf("SignedInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SignXRPInitTransactionsRequestMultiError(errors)
	}

	return nil
}

// SignXRPInitTransactionsRequestMultiError is an error wrapping multiple
// validation errors returned by SignXRPInitTransactionsRequest.ValidateAll()
// if the designated constraints aren't met.
type SignXRPInitTransactionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignXRPInitTransactionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignXRPInitTransactionsRequestMultiError) AllErrors() []error { return m }

// SignXRPInitTransactionsRequestValidationError is the validation error
// returned by SignXRPInitTransactionsRequest.Validate if the designated
// constraints aren't met.
type SignXRPInitTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignXRPInitTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignXRPInitTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignXRPInitTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignXRPInitTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignXRPInitTransactionsRequestValidationError) ErrorName() string {
	return "SignXRPInitTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SignXRPInitTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignXRPInitTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignXRPInitTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignXRPInitTransactionsRequestValidationError{}

var _SignXRPInitTransactionsRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _SignXRPInitTransactionsRequest_KeyId_Pattern = regexp.MustCompile("^[0-9A-F]{64}$")

// Validate checks the field values on SignInitTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SignInitTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignInitTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignInitTransactionRequestMultiError, or nil if none found.
func (m *SignInitTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignInitTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_SignInitTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := SignInitTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SignInitTransactionRequest_KeyId_Pattern.MatchString(m.GetKeyId()) {
		err := SignInitTransactionRequestValidationError{
			field:  "KeyId",
			reason: "value does not match regex pattern \"^[0-9A-F]{64}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetSignedInfo()) < 1 {
		err := SignInitTransactionRequestValidationError{
			field:  "SignedInfo",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetSignedInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SignInitTransactionRequestValidationError{
						field:  fmt.Sprintf("SignedInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SignInitTransactionRequestValidationError{
						field:  fmt.Sprintf("SignedInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignInitTransactionRequestValidationError{
					field:  fmt.Sprintf("SignedInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SignInitTransactionRequestMultiError(errors)
	}

	return nil
}

// SignInitTransactionRequestMultiError is an error wrapping multiple
// validation errors returned by SignInitTransactionRequest.ValidateAll() if
// the designated constraints aren't met.
type SignInitTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignInitTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignInitTransactionRequestMultiError) AllErrors() []error { return m }

// SignInitTransactionRequestValidationError is the validation error returned
// by SignInitTransactionRequest.Validate if the designated constraints aren't met.
type SignInitTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInitTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInitTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInitTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInitTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInitTransactionRequestValidationError) ErrorName() string {
	return "SignInitTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SignInitTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInitTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInitTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInitTransactionRequestValidationError{}

var _SignInitTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _SignInitTransactionRequest_KeyId_Pattern = regexp.MustCompile("^[0-9A-F]{64}$")

// Validate checks the field values on SendTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendTransactionRequestMultiError, or nil if none found.
func (m *SendTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_SendTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := SendTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SendTransactionRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		err := SendTransactionRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ExecutorType

	if len(errors) > 0 {
		return SendTransactionRequestMultiError(errors)
	}

	return nil
}

// SendTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by SendTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type SendTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendTransactionRequestMultiError) AllErrors() []error { return m }

// SendTransactionRequestValidationError is the validation error returned by
// SendTransactionRequest.Validate if the designated constraints aren't met.
type SendTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTransactionRequestValidationError) ErrorName() string {
	return "SendTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTransactionRequestValidationError{}

var _SendTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _SendTransactionRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on SendTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendTransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendTransactionResponseMultiError, or nil if none found.
func (m *SendTransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendTransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TxId

	if len(errors) > 0 {
		return SendTransactionResponseMultiError(errors)
	}

	return nil
}

// SendTransactionResponseMultiError is an error wrapping multiple validation
// errors returned by SendTransactionResponse.ValidateAll() if the designated
// constraints aren't met.
type SendTransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendTransactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendTransactionResponseMultiError) AllErrors() []error { return m }

// SendTransactionResponseValidationError is the validation error returned by
// SendTransactionResponse.Validate if the designated constraints aren't met.
type SendTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTransactionResponseValidationError) ErrorName() string {
	return "SendTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTransactionResponseValidationError{}

// Validate checks the field values on ResendTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResendTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResendTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResendTransactionRequestMultiError, or nil if none found.
func (m *ResendTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResendTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ResendTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ResendTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResendTransactionRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		err := ResendTransactionRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ExecutorType

	if len(errors) > 0 {
		return ResendTransactionRequestMultiError(errors)
	}

	return nil
}

// ResendTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by ResendTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type ResendTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResendTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResendTransactionRequestMultiError) AllErrors() []error { return m }

// ResendTransactionRequestValidationError is the validation error returned by
// ResendTransactionRequest.Validate if the designated constraints aren't met.
type ResendTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendTransactionRequestValidationError) ErrorName() string {
	return "ResendTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResendTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendTransactionRequestValidationError{}

var _ResendTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ResendTransactionRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ResendTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResendTransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResendTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResendTransactionResponseMultiError, or nil if none found.
func (m *ResendTransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResendTransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TxId

	if len(errors) > 0 {
		return ResendTransactionResponseMultiError(errors)
	}

	return nil
}

// ResendTransactionResponseMultiError is an error wrapping multiple validation
// errors returned by ResendTransactionResponse.ValidateAll() if the
// designated constraints aren't met.
type ResendTransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResendTransactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResendTransactionResponseMultiError) AllErrors() []error { return m }

// ResendTransactionResponseValidationError is the validation error returned by
// ResendTransactionResponse.Validate if the designated constraints aren't met.
type ResendTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendTransactionResponseValidationError) ErrorName() string {
	return "ResendTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResendTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendTransactionResponseValidationError{}

// Validate checks the field values on SendXRPInitTransactionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendXRPInitTransactionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendXRPInitTransactionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendXRPInitTransactionsRequestMultiError, or nil if none found.
func (m *SendXRPInitTransactionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendXRPInitTransactionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_SendXRPInitTransactionsRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := SendXRPInitTransactionsRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendXRPInitTransactionsRequestMultiError(errors)
	}

	return nil
}

// SendXRPInitTransactionsRequestMultiError is an error wrapping multiple
// validation errors returned by SendXRPInitTransactionsRequest.ValidateAll()
// if the designated constraints aren't met.
type SendXRPInitTransactionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendXRPInitTransactionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendXRPInitTransactionsRequestMultiError) AllErrors() []error { return m }

// SendXRPInitTransactionsRequestValidationError is the validation error
// returned by SendXRPInitTransactionsRequest.Validate if the designated
// constraints aren't met.
type SendXRPInitTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendXRPInitTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendXRPInitTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendXRPInitTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendXRPInitTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendXRPInitTransactionsRequestValidationError) ErrorName() string {
	return "SendXRPInitTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendXRPInitTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendXRPInitTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendXRPInitTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendXRPInitTransactionsRequestValidationError{}

var _SendXRPInitTransactionsRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on SendXRPInitTransactionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendXRPInitTransactionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendXRPInitTransactionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendXRPInitTransactionsResponseMultiError, or nil if none found.
func (m *SendXRPInitTransactionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendXRPInitTransactionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendXRPInitTransactionsResponseMultiError(errors)
	}

	return nil
}

// SendXRPInitTransactionsResponseMultiError is an error wrapping multiple
// validation errors returned by SendXRPInitTransactionsResponse.ValidateAll()
// if the designated constraints aren't met.
type SendXRPInitTransactionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendXRPInitTransactionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendXRPInitTransactionsResponseMultiError) AllErrors() []error { return m }

// SendXRPInitTransactionsResponseValidationError is the validation error
// returned by SendXRPInitTransactionsResponse.Validate if the designated
// constraints aren't met.
type SendXRPInitTransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendXRPInitTransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendXRPInitTransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendXRPInitTransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendXRPInitTransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendXRPInitTransactionsResponseValidationError) ErrorName() string {
	return "SendXRPInitTransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendXRPInitTransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendXRPInitTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendXRPInitTransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendXRPInitTransactionsResponseValidationError{}

// Validate checks the field values on SendInitTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendInitTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendInitTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendInitTransactionRequestMultiError, or nil if none found.
func (m *SendInitTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendInitTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_SendInitTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := SendInitTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ExecutorType

	if len(errors) > 0 {
		return SendInitTransactionRequestMultiError(errors)
	}

	return nil
}

// SendInitTransactionRequestMultiError is an error wrapping multiple
// validation errors returned by SendInitTransactionRequest.ValidateAll() if
// the designated constraints aren't met.
type SendInitTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendInitTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendInitTransactionRequestMultiError) AllErrors() []error { return m }

// SendInitTransactionRequestValidationError is the validation error returned
// by SendInitTransactionRequest.Validate if the designated constraints aren't met.
type SendInitTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendInitTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendInitTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendInitTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendInitTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendInitTransactionRequestValidationError) ErrorName() string {
	return "SendInitTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendInitTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendInitTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendInitTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendInitTransactionRequestValidationError{}

var _SendInitTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on SendInitTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendInitTransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendInitTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendInitTransactionResponseMultiError, or nil if none found.
func (m *SendInitTransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendInitTransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendInitTransactionResponseMultiError(errors)
	}

	return nil
}

// SendInitTransactionResponseMultiError is an error wrapping multiple
// validation errors returned by SendInitTransactionResponse.ValidateAll() if
// the designated constraints aren't met.
type SendInitTransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendInitTransactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendInitTransactionResponseMultiError) AllErrors() []error { return m }

// SendInitTransactionResponseValidationError is the validation error returned
// by SendInitTransactionResponse.Validate if the designated constraints
// aren't met.
type SendInitTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendInitTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendInitTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendInitTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendInitTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendInitTransactionResponseValidationError) ErrorName() string {
	return "SendInitTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendInitTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendInitTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendInitTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendInitTransactionResponseValidationError{}

// Validate checks the field values on CancelTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelTransactionRequestMultiError, or nil if none found.
func (m *CancelTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CancelTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := CancelTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CancelTransactionRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		err := CancelTransactionRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelTransactionRequestMultiError(errors)
	}

	return nil
}

// CancelTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by CancelTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelTransactionRequestMultiError) AllErrors() []error { return m }

// CancelTransactionRequestValidationError is the validation error returned by
// CancelTransactionRequest.Validate if the designated constraints aren't met.
type CancelTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTransactionRequestValidationError) ErrorName() string {
	return "CancelTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTransactionRequestValidationError{}

var _CancelTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _CancelTransactionRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ReplaceTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReplaceTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplaceTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReplaceTransactionRequestMultiError, or nil if none found.
func (m *ReplaceTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplaceTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ReplaceTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ReplaceTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ReplaceTransactionRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		err := ReplaceTransactionRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FeeRate

	if len(errors) > 0 {
		return ReplaceTransactionRequestMultiError(errors)
	}

	return nil
}

// ReplaceTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by ReplaceTransactionRequest.ValidateAll() if the
// designated constraints aren't met.
type ReplaceTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplaceTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplaceTransactionRequestMultiError) AllErrors() []error { return m }

// ReplaceTransactionRequestValidationError is the validation error returned by
// ReplaceTransactionRequest.Validate if the designated constraints aren't met.
type ReplaceTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplaceTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplaceTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplaceTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplaceTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplaceTransactionRequestValidationError) ErrorName() string {
	return "ReplaceTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReplaceTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplaceTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplaceTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplaceTransactionRequestValidationError{}

var _ReplaceTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ReplaceTransactionRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ReplaceTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReplaceTransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplaceTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReplaceTransactionResponseMultiError, or nil if none found.
func (m *ReplaceTransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplaceTransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	if len(errors) > 0 {
		return ReplaceTransactionResponseMultiError(errors)
	}

	return nil
}

// ReplaceTransactionResponseMultiError is an error wrapping multiple
// validation errors returned by ReplaceTransactionResponse.ValidateAll() if
// the designated constraints aren't met.
type ReplaceTransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplaceTransactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplaceTransactionResponseMultiError) AllErrors() []error { return m }

// ReplaceTransactionResponseValidationError is the validation error returned
// by ReplaceTransactionResponse.Validate if the designated constraints aren't met.
type ReplaceTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplaceTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplaceTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplaceTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplaceTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplaceTransactionResponseValidationError) ErrorName() string {
	return "ReplaceTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReplaceTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplaceTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplaceTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplaceTransactionResponseValidationError{}

// Validate checks the field values on IsTransactionReplaceableRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsTransactionReplaceableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsTransactionReplaceableRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IsTransactionReplaceableRequestMultiError, or nil if none found.
func (m *IsTransactionReplaceableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsTransactionReplaceableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_IsTransactionReplaceableRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := IsTransactionReplaceableRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_IsTransactionReplaceableRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		err := IsTransactionReplaceableRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IsTransactionReplaceableRequestMultiError(errors)
	}

	return nil
}

// IsTransactionReplaceableRequestMultiError is an error wrapping multiple
// validation errors returned by IsTransactionReplaceableRequest.ValidateAll()
// if the designated constraints aren't met.
type IsTransactionReplaceableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsTransactionReplaceableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsTransactionReplaceableRequestMultiError) AllErrors() []error { return m }

// IsTransactionReplaceableRequestValidationError is the validation error
// returned by IsTransactionReplaceableRequest.Validate if the designated
// constraints aren't met.
type IsTransactionReplaceableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsTransactionReplaceableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsTransactionReplaceableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsTransactionReplaceableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsTransactionReplaceableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsTransactionReplaceableRequestValidationError) ErrorName() string {
	return "IsTransactionReplaceableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsTransactionReplaceableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsTransactionReplaceableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsTransactionReplaceableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsTransactionReplaceableRequestValidationError{}

var _IsTransactionReplaceableRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _IsTransactionReplaceableRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on IsTransactionReplaceableResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IsTransactionReplaceableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsTransactionReplaceableResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IsTransactionReplaceableResponseMultiError, or nil if none found.
func (m *IsTransactionReplaceableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsTransactionReplaceableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsTransactionReplacable

	if len(errors) > 0 {
		return IsTransactionReplaceableResponseMultiError(errors)
	}

	return nil
}

// IsTransactionReplaceableResponseMultiError is an error wrapping multiple
// validation errors returned by
// IsTransactionReplaceableResponse.ValidateAll() if the designated
// constraints aren't met.
type IsTransactionReplaceableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsTransactionReplaceableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsTransactionReplaceableResponseMultiError) AllErrors() []error { return m }

// IsTransactionReplaceableResponseValidationError is the validation error
// returned by IsTransactionReplaceableResponse.Validate if the designated
// constraints aren't met.
type IsTransactionReplaceableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsTransactionReplaceableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsTransactionReplaceableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsTransactionReplaceableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsTransactionReplaceableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsTransactionReplaceableResponseValidationError) ErrorName() string {
	return "IsTransactionReplaceableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsTransactionReplaceableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsTransactionReplaceableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsTransactionReplaceableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsTransactionReplaceableResponseValidationError{}

// Validate checks the field values on GetTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransactionRequestMultiError, or nil if none found.
func (m *GetTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := GetTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetTransactionRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		err := GetTransactionRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTransactionRequestMultiError(errors)
	}

	return nil
}

// GetTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by GetTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionRequestMultiError) AllErrors() []error { return m }

// GetTransactionRequestValidationError is the validation error returned by
// GetTransactionRequest.Validate if the designated constraints aren't met.
type GetTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionRequestValidationError) ErrorName() string {
	return "GetTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionRequestValidationError{}

var _GetTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _GetTransactionRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetTransactionByTxIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionByTxIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionByTxIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransactionByTxIDRequestMultiError, or nil if none found.
func (m *GetTransactionByTxIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionByTxIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetTransactionByTxIDRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := GetTransactionByTxIDRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TxId

	if len(errors) > 0 {
		return GetTransactionByTxIDRequestMultiError(errors)
	}

	return nil
}

// GetTransactionByTxIDRequestMultiError is an error wrapping multiple
// validation errors returned by GetTransactionByTxIDRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTransactionByTxIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionByTxIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionByTxIDRequestMultiError) AllErrors() []error { return m }

// GetTransactionByTxIDRequestValidationError is the validation error returned
// by GetTransactionByTxIDRequest.Validate if the designated constraints
// aren't met.
type GetTransactionByTxIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionByTxIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionByTxIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionByTxIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionByTxIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionByTxIDRequestValidationError) ErrorName() string {
	return "GetTransactionByTxIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionByTxIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionByTxIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionByTxIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionByTxIDRequestValidationError{}

var _GetTransactionByTxIDRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListTransactionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTransactionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransactionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTransactionsRequestMultiError, or nil if none found.
func (m *ListTransactionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransactionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListTransactionsRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ListTransactionsRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() > 100 {
		err := ListTransactionsRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListTransactionsRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		err := ListTransactionsRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListTransactionsRequestMultiError(errors)
	}

	return nil
}

// ListTransactionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListTransactionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTransactionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransactionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransactionsRequestMultiError) AllErrors() []error { return m }

// ListTransactionsRequestValidationError is the validation error returned by
// ListTransactionsRequest.Validate if the designated constraints aren't met.
type ListTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransactionsRequestValidationError) ErrorName() string {
	return "ListTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransactionsRequestValidationError{}

var _ListTransactionsRequest_WalletId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ListTransactionsRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListTransactionsByFilterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTransactionsByFilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransactionsByFilterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListTransactionsByFilterRequestMultiError, or nil if none found.
func (m *ListTransactionsByFilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransactionsByFilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _ListTransactionsByFilterRequest_FilterType_NotInLookup[m.GetFilterType()]; ok {
		err := ListTransactionsByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ListFilterType_name[int32(m.GetFilterType())]; !ok {
		err := ListTransactionsByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TransactionId

	// no validation rules for WalletId

	if utf8.RuneCountInString(m.GetWalletName()) > 40 {
		err := ListTransactionsByFilterRequestValidationError{
			field:  "WalletName",
			reason: "value length must be at most 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddressName()) > 40 {
		err := ListTransactionsByFilterRequestValidationError{
			field:  "AddressName",
			reason: "value length must be at most 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Address

	// no validation rules for Txid

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := ListTransactionsByFilterRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() > 100 {
		err := ListTransactionsByFilterRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListTransactionsByFilterRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		err := ListTransactionsByFilterRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Network != nil {

		if _, ok := gincoincglobalv1.Network_name[int32(m.GetNetwork())]; !ok {
			err := ListTransactionsByFilterRequestValidationError{
				field:  "Network",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListTransactionsByFilterRequestMultiError(errors)
	}

	return nil
}

// ListTransactionsByFilterRequestMultiError is an error wrapping multiple
// validation errors returned by ListTransactionsByFilterRequest.ValidateAll()
// if the designated constraints aren't met.
type ListTransactionsByFilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransactionsByFilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransactionsByFilterRequestMultiError) AllErrors() []error { return m }

// ListTransactionsByFilterRequestValidationError is the validation error
// returned by ListTransactionsByFilterRequest.Validate if the designated
// constraints aren't met.
type ListTransactionsByFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransactionsByFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransactionsByFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransactionsByFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransactionsByFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransactionsByFilterRequestValidationError) ErrorName() string {
	return "ListTransactionsByFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransactionsByFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransactionsByFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransactionsByFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransactionsByFilterRequestValidationError{}

var _ListTransactionsByFilterRequest_FilterType_NotInLookup = map[ListFilterType]struct{}{
	0: {},
}

var _ListTransactionsByFilterRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListTransactionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTransactionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransactionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTransactionsResponseMultiError, or nil if none found.
func (m *ListTransactionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransactionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTransactionsResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTransactionsResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTransactionsResponseValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListTransactionsResponseMultiError(errors)
	}

	return nil
}

// ListTransactionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListTransactionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTransactionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransactionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransactionsResponseMultiError) AllErrors() []error { return m }

// ListTransactionsResponseValidationError is the validation error returned by
// ListTransactionsResponse.Validate if the designated constraints aren't met.
type ListTransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransactionsResponseValidationError) ErrorName() string {
	return "ListTransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransactionsResponseValidationError{}

// Validate checks the field values on GetSignInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSignInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSignInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSignInfoRequestMultiError, or nil if none found.
func (m *GetSignInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSignInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetSignInfoRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := GetSignInfoRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetSignInfoRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		err := GetSignInfoRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSignInfoRequestMultiError(errors)
	}

	return nil
}

// GetSignInfoRequestMultiError is an error wrapping multiple validation errors
// returned by GetSignInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSignInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSignInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSignInfoRequestMultiError) AllErrors() []error { return m }

// GetSignInfoRequestValidationError is the validation error returned by
// GetSignInfoRequest.Validate if the designated constraints aren't met.
type GetSignInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSignInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSignInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSignInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSignInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSignInfoRequestValidationError) ErrorName() string {
	return "GetSignInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSignInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSignInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSignInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSignInfoRequestValidationError{}

var _GetSignInfoRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _GetSignInfoRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListSignInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSignInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSignInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSignInfoRequestMultiError, or nil if none found.
func (m *ListSignInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSignInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListSignInfoRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ListSignInfoRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListSignInfoRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		err := ListSignInfoRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListSignInfoRequestMultiError(errors)
	}

	return nil
}

// ListSignInfoRequestMultiError is an error wrapping multiple validation
// errors returned by ListSignInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSignInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSignInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSignInfoRequestMultiError) AllErrors() []error { return m }

// ListSignInfoRequestValidationError is the validation error returned by
// ListSignInfoRequest.Validate if the designated constraints aren't met.
type ListSignInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSignInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSignInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSignInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSignInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSignInfoRequestValidationError) ErrorName() string {
	return "ListSignInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSignInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSignInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSignInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSignInfoRequestValidationError{}

var _ListSignInfoRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ListSignInfoRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListSignInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSignInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSignInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSignInfoResponseMultiError, or nil if none found.
func (m *ListSignInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSignInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSignInfoList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSignInfoResponseValidationError{
						field:  fmt.Sprintf("SignInfoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSignInfoResponseValidationError{
						field:  fmt.Sprintf("SignInfoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSignInfoResponseValidationError{
					field:  fmt.Sprintf("SignInfoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSignInfoResponseMultiError(errors)
	}

	return nil
}

// ListSignInfoResponseMultiError is an error wrapping multiple validation
// errors returned by ListSignInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSignInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSignInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSignInfoResponseMultiError) AllErrors() []error { return m }

// ListSignInfoResponseValidationError is the validation error returned by
// ListSignInfoResponse.Validate if the designated constraints aren't met.
type ListSignInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSignInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSignInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSignInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSignInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSignInfoResponseValidationError) ErrorName() string {
	return "ListSignInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSignInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSignInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSignInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSignInfoResponseValidationError{}

// Validate checks the field values on ListXRPInitSignInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListXRPInitSignInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListXRPInitSignInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListXRPInitSignInfoRequestMultiError, or nil if none found.
func (m *ListXRPInitSignInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListXRPInitSignInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListXRPInitSignInfoRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ListXRPInitSignInfoRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListXRPInitSignInfoRequestMultiError(errors)
	}

	return nil
}

// ListXRPInitSignInfoRequestMultiError is an error wrapping multiple
// validation errors returned by ListXRPInitSignInfoRequest.ValidateAll() if
// the designated constraints aren't met.
type ListXRPInitSignInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListXRPInitSignInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListXRPInitSignInfoRequestMultiError) AllErrors() []error { return m }

// ListXRPInitSignInfoRequestValidationError is the validation error returned
// by ListXRPInitSignInfoRequest.Validate if the designated constraints aren't met.
type ListXRPInitSignInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListXRPInitSignInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListXRPInitSignInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListXRPInitSignInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListXRPInitSignInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListXRPInitSignInfoRequestValidationError) ErrorName() string {
	return "ListXRPInitSignInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListXRPInitSignInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListXRPInitSignInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListXRPInitSignInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListXRPInitSignInfoRequestValidationError{}

var _ListXRPInitSignInfoRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListXRPInitSignInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListXRPInitSignInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListXRPInitSignInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListXRPInitSignInfoResponseMultiError, or nil if none found.
func (m *ListXRPInitSignInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListXRPInitSignInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSignInfoList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListXRPInitSignInfoResponseValidationError{
						field:  fmt.Sprintf("SignInfoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListXRPInitSignInfoResponseValidationError{
						field:  fmt.Sprintf("SignInfoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListXRPInitSignInfoResponseValidationError{
					field:  fmt.Sprintf("SignInfoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListXRPInitSignInfoResponseMultiError(errors)
	}

	return nil
}

// ListXRPInitSignInfoResponseMultiError is an error wrapping multiple
// validation errors returned by ListXRPInitSignInfoResponse.ValidateAll() if
// the designated constraints aren't met.
type ListXRPInitSignInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListXRPInitSignInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListXRPInitSignInfoResponseMultiError) AllErrors() []error { return m }

// ListXRPInitSignInfoResponseValidationError is the validation error returned
// by ListXRPInitSignInfoResponse.Validate if the designated constraints
// aren't met.
type ListXRPInitSignInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListXRPInitSignInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListXRPInitSignInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListXRPInitSignInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListXRPInitSignInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListXRPInitSignInfoResponseValidationError) ErrorName() string {
	return "ListXRPInitSignInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListXRPInitSignInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListXRPInitSignInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListXRPInitSignInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListXRPInitSignInfoResponseValidationError{}

// Validate checks the field values on ListInitSignInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInitSignInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInitSignInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInitSignInfoRequestMultiError, or nil if none found.
func (m *ListInitSignInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInitSignInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListInitSignInfoRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ListInitSignInfoRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListInitSignInfoRequestMultiError(errors)
	}

	return nil
}

// ListInitSignInfoRequestMultiError is an error wrapping multiple validation
// errors returned by ListInitSignInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type ListInitSignInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInitSignInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInitSignInfoRequestMultiError) AllErrors() []error { return m }

// ListInitSignInfoRequestValidationError is the validation error returned by
// ListInitSignInfoRequest.Validate if the designated constraints aren't met.
type ListInitSignInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInitSignInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInitSignInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInitSignInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInitSignInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInitSignInfoRequestValidationError) ErrorName() string {
	return "ListInitSignInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInitSignInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInitSignInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInitSignInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInitSignInfoRequestValidationError{}

var _ListInitSignInfoRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListTransfersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTransfersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransfersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTransfersRequestMultiError, or nil if none found.
func (m *ListTransfersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransfersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListTransfersRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ListTransfersRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() > 100 {
		err := ListTransfersRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListTransfersRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		err := ListTransfersRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListTransfersRequestMultiError(errors)
	}

	return nil
}

// ListTransfersRequestMultiError is an error wrapping multiple validation
// errors returned by ListTransfersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTransfersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransfersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransfersRequestMultiError) AllErrors() []error { return m }

// ListTransfersRequestValidationError is the validation error returned by
// ListTransfersRequest.Validate if the designated constraints aren't met.
type ListTransfersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransfersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransfersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransfersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransfersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransfersRequestValidationError) ErrorName() string {
	return "ListTransfersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransfersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransfersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransfersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransfersRequestValidationError{}

var _ListTransfersRequest_WalletId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ListTransfersRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListTransfersByFilterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTransfersByFilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransfersByFilterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTransfersByFilterRequestMultiError, or nil if none found.
func (m *ListTransfersByFilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransfersByFilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _ListTransfersByFilterRequest_FilterType_NotInLookup[m.GetFilterType()]; ok {
		err := ListTransfersByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ListFilterType_name[int32(m.GetFilterType())]; !ok {
		err := ListTransfersByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TransferId

	// no validation rules for WalletId

	if utf8.RuneCountInString(m.GetWalletName()) > 40 {
		err := ListTransfersByFilterRequestValidationError{
			field:  "WalletName",
			reason: "value length must be at most 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddressName()) > 40 {
		err := ListTransfersByFilterRequestValidationError{
			field:  "AddressName",
			reason: "value length must be at most 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Address

	// no validation rules for Txid

	// no validation rules for WatchOnly

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := ListTransfersByFilterRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := gincoincglobalv1.TransferType_name[int32(m.GetTransferType())]; !ok {
		err := ListTransfersByFilterRequestValidationError{
			field:  "TransferType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() > 1000 {
		err := ListTransfersByFilterRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 1000",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListTransfersByFilterRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		err := ListTransfersByFilterRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTransfersByFilterRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTransfersByFilterRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTransfersByFilterRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTransfersByFilterRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTransfersByFilterRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTransfersByFilterRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Network != nil {

		if _, ok := gincoincglobalv1.Network_name[int32(m.GetNetwork())]; !ok {
			err := ListTransfersByFilterRequestValidationError{
				field:  "Network",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListTransfersByFilterRequestMultiError(errors)
	}

	return nil
}

// ListTransfersByFilterRequestMultiError is an error wrapping multiple
// validation errors returned by ListTransfersByFilterRequest.ValidateAll() if
// the designated constraints aren't met.
type ListTransfersByFilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransfersByFilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransfersByFilterRequestMultiError) AllErrors() []error { return m }

// ListTransfersByFilterRequestValidationError is the validation error returned
// by ListTransfersByFilterRequest.Validate if the designated constraints
// aren't met.
type ListTransfersByFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransfersByFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransfersByFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransfersByFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransfersByFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransfersByFilterRequestValidationError) ErrorName() string {
	return "ListTransfersByFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransfersByFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransfersByFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransfersByFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransfersByFilterRequestValidationError{}

var _ListTransfersByFilterRequest_FilterType_NotInLookup = map[ListFilterType]struct{}{
	0: {},
}

var _ListTransfersByFilterRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListTransfersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTransfersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransfersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTransfersResponseMultiError, or nil if none found.
func (m *ListTransfersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransfersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransfers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTransfersResponseValidationError{
						field:  fmt.Sprintf("Transfers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTransfersResponseValidationError{
						field:  fmt.Sprintf("Transfers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTransfersResponseValidationError{
					field:  fmt.Sprintf("Transfers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListTransfersResponseMultiError(errors)
	}

	return nil
}

// ListTransfersResponseMultiError is an error wrapping multiple validation
// errors returned by ListTransfersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTransfersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransfersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransfersResponseMultiError) AllErrors() []error { return m }

// ListTransfersResponseValidationError is the validation error returned by
// ListTransfersResponse.Validate if the designated constraints aren't met.
type ListTransfersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransfersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransfersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransfersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransfersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransfersResponseValidationError) ErrorName() string {
	return "ListTransfersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransfersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransfersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransfersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransfersResponseValidationError{}

// Validate checks the field values on ListUncheckedTransfersByFilterRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListUncheckedTransfersByFilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUncheckedTransfersByFilterRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListUncheckedTransfersByFilterRequestMultiError, or nil if none found.
func (m *ListUncheckedTransfersByFilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUncheckedTransfersByFilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HasChecked

	if m.GetPageSize() > 100 {
		err := ListUncheckedTransfersByFilterRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListUncheckedTransfersByFilterRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		err := ListUncheckedTransfersByFilterRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ListUncheckedTransfersByFilterRequest_FilterType_NotInLookup[m.GetFilterType()]; ok {
		err := ListUncheckedTransfersByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ListFilterType_name[int32(m.GetFilterType())]; !ok {
		err := ListUncheckedTransfersByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TransferId

	// no validation rules for WalletId

	if utf8.RuneCountInString(m.GetWalletName()) > 40 {
		err := ListUncheckedTransfersByFilterRequestValidationError{
			field:  "WalletName",
			reason: "value length must be at most 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Address

	// no validation rules for Txid

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := ListUncheckedTransfersByFilterRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := gincoincglobalv1.TransferType_name[int32(m.GetTransferType())]; !ok {
		err := ListUncheckedTransfersByFilterRequestValidationError{
			field:  "TransferType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUncheckedTransfersByFilterRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUncheckedTransfersByFilterRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUncheckedTransfersByFilterRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUncheckedTransfersByFilterRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUncheckedTransfersByFilterRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUncheckedTransfersByFilterRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Network != nil {

		if _, ok := gincoincglobalv1.Network_name[int32(m.GetNetwork())]; !ok {
			err := ListUncheckedTransfersByFilterRequestValidationError{
				field:  "Network",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListUncheckedTransfersByFilterRequestMultiError(errors)
	}

	return nil
}

// ListUncheckedTransfersByFilterRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListUncheckedTransfersByFilterRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUncheckedTransfersByFilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUncheckedTransfersByFilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUncheckedTransfersByFilterRequestMultiError) AllErrors() []error { return m }

// ListUncheckedTransfersByFilterRequestValidationError is the validation error
// returned by ListUncheckedTransfersByFilterRequest.Validate if the
// designated constraints aren't met.
type ListUncheckedTransfersByFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUncheckedTransfersByFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUncheckedTransfersByFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUncheckedTransfersByFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUncheckedTransfersByFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUncheckedTransfersByFilterRequestValidationError) ErrorName() string {
	return "ListUncheckedTransfersByFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUncheckedTransfersByFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUncheckedTransfersByFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUncheckedTransfersByFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUncheckedTransfersByFilterRequestValidationError{}

var _ListUncheckedTransfersByFilterRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

var _ListUncheckedTransfersByFilterRequest_FilterType_NotInLookup = map[ListFilterType]struct{}{
	0: {},
}

// Validate checks the field values on
// UpdateUncheckedTransferHasCheckedFlagRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateUncheckedTransferHasCheckedFlagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateUncheckedTransferHasCheckedFlagRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateUncheckedTransferHasCheckedFlagRequestMultiError, or nil if none found.
func (m *UpdateUncheckedTransferHasCheckedFlagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUncheckedTransferHasCheckedFlagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateUncheckedTransferHasCheckedFlagRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := UpdateUncheckedTransferHasCheckedFlagRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateUncheckedTransferHasCheckedFlagRequest_UncheckedTransferId_Pattern.MatchString(m.GetUncheckedTransferId()) {
		err := UpdateUncheckedTransferHasCheckedFlagRequestValidationError{
			field:  "UncheckedTransferId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateUncheckedTransferHasCheckedFlagRequestMultiError(errors)
	}

	return nil
}

// UpdateUncheckedTransferHasCheckedFlagRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateUncheckedTransferHasCheckedFlagRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateUncheckedTransferHasCheckedFlagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUncheckedTransferHasCheckedFlagRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUncheckedTransferHasCheckedFlagRequestMultiError) AllErrors() []error { return m }

// UpdateUncheckedTransferHasCheckedFlagRequestValidationError is the
// validation error returned by
// UpdateUncheckedTransferHasCheckedFlagRequest.Validate if the designated
// constraints aren't met.
type UpdateUncheckedTransferHasCheckedFlagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUncheckedTransferHasCheckedFlagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUncheckedTransferHasCheckedFlagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUncheckedTransferHasCheckedFlagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUncheckedTransferHasCheckedFlagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUncheckedTransferHasCheckedFlagRequestValidationError) ErrorName() string {
	return "UpdateUncheckedTransferHasCheckedFlagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUncheckedTransferHasCheckedFlagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUncheckedTransferHasCheckedFlagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUncheckedTransferHasCheckedFlagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUncheckedTransferHasCheckedFlagRequestValidationError{}

var _UpdateUncheckedTransferHasCheckedFlagRequest_WalletId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _UpdateUncheckedTransferHasCheckedFlagRequest_UncheckedTransferId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListUncheckedTransfersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUncheckedTransfersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUncheckedTransfersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListUncheckedTransfersResponseMultiError, or nil if none found.
func (m *ListUncheckedTransfersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUncheckedTransfersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUncheckedTransfers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUncheckedTransfersResponseValidationError{
						field:  fmt.Sprintf("UncheckedTransfers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUncheckedTransfersResponseValidationError{
						field:  fmt.Sprintf("UncheckedTransfers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUncheckedTransfersResponseValidationError{
					field:  fmt.Sprintf("UncheckedTransfers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListUncheckedTransfersResponseMultiError(errors)
	}

	return nil
}

// ListUncheckedTransfersResponseMultiError is an error wrapping multiple
// validation errors returned by ListUncheckedTransfersResponse.ValidateAll()
// if the designated constraints aren't met.
type ListUncheckedTransfersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUncheckedTransfersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUncheckedTransfersResponseMultiError) AllErrors() []error { return m }

// ListUncheckedTransfersResponseValidationError is the validation error
// returned by ListUncheckedTransfersResponse.Validate if the designated
// constraints aren't met.
type ListUncheckedTransfersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUncheckedTransfersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUncheckedTransfersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUncheckedTransfersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUncheckedTransfersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUncheckedTransfersResponseValidationError) ErrorName() string {
	return "ListUncheckedTransfersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUncheckedTransfersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUncheckedTransfersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUncheckedTransfersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUncheckedTransfersResponseValidationError{}

// Validate checks the field values on ListEventTriggeredMessagesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListEventTriggeredMessagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEventTriggeredMessagesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListEventTriggeredMessagesRequestMultiError, or nil if none found.
func (m *ListEventTriggeredMessagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEventTriggeredMessagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListEventTriggeredMessagesRequestMultiError(errors)
	}

	return nil
}

// ListEventTriggeredMessagesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListEventTriggeredMessagesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListEventTriggeredMessagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEventTriggeredMessagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEventTriggeredMessagesRequestMultiError) AllErrors() []error { return m }

// ListEventTriggeredMessagesRequestValidationError is the validation error
// returned by ListEventTriggeredMessagesRequest.Validate if the designated
// constraints aren't met.
type ListEventTriggeredMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventTriggeredMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventTriggeredMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventTriggeredMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventTriggeredMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventTriggeredMessagesRequestValidationError) ErrorName() string {
	return "ListEventTriggeredMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventTriggeredMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventTriggeredMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventTriggeredMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventTriggeredMessagesRequestValidationError{}

// Validate checks the field values on ListEventTriggeredMessagesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListEventTriggeredMessagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEventTriggeredMessagesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListEventTriggeredMessagesResponseMultiError, or nil if none found.
func (m *ListEventTriggeredMessagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEventTriggeredMessagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEventTriggeredMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEventTriggeredMessagesResponseValidationError{
						field:  fmt.Sprintf("EventTriggeredMessages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEventTriggeredMessagesResponseValidationError{
						field:  fmt.Sprintf("EventTriggeredMessages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEventTriggeredMessagesResponseValidationError{
					field:  fmt.Sprintf("EventTriggeredMessages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEventTriggeredMessagesResponseMultiError(errors)
	}

	return nil
}

// ListEventTriggeredMessagesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListEventTriggeredMessagesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListEventTriggeredMessagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEventTriggeredMessagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEventTriggeredMessagesResponseMultiError) AllErrors() []error { return m }

// ListEventTriggeredMessagesResponseValidationError is the validation error
// returned by ListEventTriggeredMessagesResponse.Validate if the designated
// constraints aren't met.
type ListEventTriggeredMessagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventTriggeredMessagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventTriggeredMessagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventTriggeredMessagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventTriggeredMessagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventTriggeredMessagesResponseValidationError) ErrorName() string {
	return "ListEventTriggeredMessagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventTriggeredMessagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventTriggeredMessagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventTriggeredMessagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventTriggeredMessagesResponseValidationError{}

// Validate checks the field values on CreateEventTriggeredMessageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateEventTriggeredMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEventTriggeredMessageRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateEventTriggeredMessageRequestMultiError, or nil if none found.
func (m *CreateEventTriggeredMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEventTriggeredMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventTriggeredMessageType

	// no validation rules for Destination

	if len(errors) > 0 {
		return CreateEventTriggeredMessageRequestMultiError(errors)
	}

	return nil
}

// CreateEventTriggeredMessageRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateEventTriggeredMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEventTriggeredMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventTriggeredMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventTriggeredMessageRequestMultiError) AllErrors() []error { return m }

// CreateEventTriggeredMessageRequestValidationError is the validation error
// returned by CreateEventTriggeredMessageRequest.Validate if the designated
// constraints aren't met.
type CreateEventTriggeredMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventTriggeredMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventTriggeredMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventTriggeredMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventTriggeredMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventTriggeredMessageRequestValidationError) ErrorName() string {
	return "CreateEventTriggeredMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventTriggeredMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventTriggeredMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventTriggeredMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventTriggeredMessageRequestValidationError{}

// Validate checks the field values on CreateEventTriggeredMessageResponce with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateEventTriggeredMessageResponce) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEventTriggeredMessageResponce
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateEventTriggeredMessageResponceMultiError, or nil if none found.
func (m *CreateEventTriggeredMessageResponce) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEventTriggeredMessageResponce) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventTriggeredMessageId

	if len(errors) > 0 {
		return CreateEventTriggeredMessageResponceMultiError(errors)
	}

	return nil
}

// CreateEventTriggeredMessageResponceMultiError is an error wrapping multiple
// validation errors returned by
// CreateEventTriggeredMessageResponce.ValidateAll() if the designated
// constraints aren't met.
type CreateEventTriggeredMessageResponceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventTriggeredMessageResponceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventTriggeredMessageResponceMultiError) AllErrors() []error { return m }

// CreateEventTriggeredMessageResponceValidationError is the validation error
// returned by CreateEventTriggeredMessageResponce.Validate if the designated
// constraints aren't met.
type CreateEventTriggeredMessageResponceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventTriggeredMessageResponceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventTriggeredMessageResponceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventTriggeredMessageResponceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventTriggeredMessageResponceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventTriggeredMessageResponceValidationError) ErrorName() string {
	return "CreateEventTriggeredMessageResponceValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventTriggeredMessageResponceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventTriggeredMessageResponce.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventTriggeredMessageResponceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventTriggeredMessageResponceValidationError{}

// Validate checks the field values on UpdateEventTriggeredMessageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateEventTriggeredMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEventTriggeredMessageRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateEventTriggeredMessageRequestMultiError, or nil if none found.
func (m *UpdateEventTriggeredMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEventTriggeredMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateEventTriggeredMessageRequest_EventTriggeredMessageId_Pattern.MatchString(m.GetEventTriggeredMessageId()) {
		err := UpdateEventTriggeredMessageRequestValidationError{
			field:  "EventTriggeredMessageId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Destination

	if len(errors) > 0 {
		return UpdateEventTriggeredMessageRequestMultiError(errors)
	}

	return nil
}

// UpdateEventTriggeredMessageRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateEventTriggeredMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEventTriggeredMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEventTriggeredMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEventTriggeredMessageRequestMultiError) AllErrors() []error { return m }

// UpdateEventTriggeredMessageRequestValidationError is the validation error
// returned by UpdateEventTriggeredMessageRequest.Validate if the designated
// constraints aren't met.
type UpdateEventTriggeredMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEventTriggeredMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEventTriggeredMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEventTriggeredMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEventTriggeredMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEventTriggeredMessageRequestValidationError) ErrorName() string {
	return "UpdateEventTriggeredMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEventTriggeredMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEventTriggeredMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEventTriggeredMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEventTriggeredMessageRequestValidationError{}

var _UpdateEventTriggeredMessageRequest_EventTriggeredMessageId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on DeleteEventTriggeredMessageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteEventTriggeredMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEventTriggeredMessageRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteEventTriggeredMessageRequestMultiError, or nil if none found.
func (m *DeleteEventTriggeredMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEventTriggeredMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_DeleteEventTriggeredMessageRequest_EventTriggeredMessageId_Pattern.MatchString(m.GetEventTriggeredMessageId()) {
		err := DeleteEventTriggeredMessageRequestValidationError{
			field:  "EventTriggeredMessageId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteEventTriggeredMessageRequestMultiError(errors)
	}

	return nil
}

// DeleteEventTriggeredMessageRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteEventTriggeredMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteEventTriggeredMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEventTriggeredMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEventTriggeredMessageRequestMultiError) AllErrors() []error { return m }

// DeleteEventTriggeredMessageRequestValidationError is the validation error
// returned by DeleteEventTriggeredMessageRequest.Validate if the designated
// constraints aren't met.
type DeleteEventTriggeredMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEventTriggeredMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEventTriggeredMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEventTriggeredMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEventTriggeredMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEventTriggeredMessageRequestValidationError) ErrorName() string {
	return "DeleteEventTriggeredMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEventTriggeredMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEventTriggeredMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEventTriggeredMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEventTriggeredMessageRequestValidationError{}

var _DeleteEventTriggeredMessageRequest_EventTriggeredMessageId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetRateSnapshotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRateSnapshotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRateSnapshotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRateSnapshotRequestMultiError, or nil if none found.
func (m *GetRateSnapshotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRateSnapshotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetRateSnapshotRequest_RateSnapshotId_Pattern.MatchString(m.GetRateSnapshotId()) {
		err := GetRateSnapshotRequestValidationError{
			field:  "RateSnapshotId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRateSnapshotRequestMultiError(errors)
	}

	return nil
}

// GetRateSnapshotRequestMultiError is an error wrapping multiple validation
// errors returned by GetRateSnapshotRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRateSnapshotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRateSnapshotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRateSnapshotRequestMultiError) AllErrors() []error { return m }

// GetRateSnapshotRequestValidationError is the validation error returned by
// GetRateSnapshotRequest.Validate if the designated constraints aren't met.
type GetRateSnapshotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRateSnapshotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRateSnapshotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRateSnapshotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRateSnapshotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRateSnapshotRequestValidationError) ErrorName() string {
	return "GetRateSnapshotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRateSnapshotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRateSnapshotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRateSnapshotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRateSnapshotRequestValidationError{}

var _GetRateSnapshotRequest_RateSnapshotId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetLatestRateSnapshotRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLatestRateSnapshotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLatestRateSnapshotRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLatestRateSnapshotRequestMultiError, or nil if none found.
func (m *GetLatestRateSnapshotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLatestRateSnapshotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetLatestRateSnapshotRequestMultiError(errors)
	}

	return nil
}

// GetLatestRateSnapshotRequestMultiError is an error wrapping multiple
// validation errors returned by GetLatestRateSnapshotRequest.ValidateAll() if
// the designated constraints aren't met.
type GetLatestRateSnapshotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLatestRateSnapshotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLatestRateSnapshotRequestMultiError) AllErrors() []error { return m }

// GetLatestRateSnapshotRequestValidationError is the validation error returned
// by GetLatestRateSnapshotRequest.Validate if the designated constraints
// aren't met.
type GetLatestRateSnapshotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLatestRateSnapshotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLatestRateSnapshotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLatestRateSnapshotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLatestRateSnapshotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLatestRateSnapshotRequestValidationError) ErrorName() string {
	return "GetLatestRateSnapshotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLatestRateSnapshotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLatestRateSnapshotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLatestRateSnapshotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLatestRateSnapshotRequestValidationError{}

// Validate checks the field values on SetRatesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetRatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetRatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetRatesRequestMultiError, or nil if none found.
func (m *SetRatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetRatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetRatesRequestValidationError{
						field:  fmt.Sprintf("Rates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetRatesRequestValidationError{
						field:  fmt.Sprintf("Rates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetRatesRequestValidationError{
					field:  fmt.Sprintf("Rates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SetRatesRequestMultiError(errors)
	}

	return nil
}

// SetRatesRequestMultiError is an error wrapping multiple validation errors
// returned by SetRatesRequest.ValidateAll() if the designated constraints
// aren't met.
type SetRatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetRatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetRatesRequestMultiError) AllErrors() []error { return m }

// SetRatesRequestValidationError is the validation error returned by
// SetRatesRequest.Validate if the designated constraints aren't met.
type SetRatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRatesRequestValidationError) ErrorName() string { return "SetRatesRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetRatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRatesRequestValidationError{}

// Validate checks the field values on SetDefaultRatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDefaultRatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDefaultRatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDefaultRatesRequestMultiError, or nil if none found.
func (m *SetDefaultRatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDefaultRatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetDefaultRatesRequestMultiError(errors)
	}

	return nil
}

// SetDefaultRatesRequestMultiError is an error wrapping multiple validation
// errors returned by SetDefaultRatesRequest.ValidateAll() if the designated
// constraints aren't met.
type SetDefaultRatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDefaultRatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDefaultRatesRequestMultiError) AllErrors() []error { return m }

// SetDefaultRatesRequestValidationError is the validation error returned by
// SetDefaultRatesRequest.Validate if the designated constraints aren't met.
type SetDefaultRatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultRatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultRatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultRatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultRatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultRatesRequestValidationError) ErrorName() string {
	return "SetDefaultRatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultRatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultRatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultRatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultRatesRequestValidationError{}

// Validate checks the field values on SetRatesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetRatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetRatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetRatesResponseMultiError, or nil if none found.
func (m *SetRatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetRatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RateSnapshotId

	if len(errors) > 0 {
		return SetRatesResponseMultiError(errors)
	}

	return nil
}

// SetRatesResponseMultiError is an error wrapping multiple validation errors
// returned by SetRatesResponse.ValidateAll() if the designated constraints
// aren't met.
type SetRatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetRatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetRatesResponseMultiError) AllErrors() []error { return m }

// SetRatesResponseValidationError is the validation error returned by
// SetRatesResponse.Validate if the designated constraints aren't met.
type SetRatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRatesResponseValidationError) ErrorName() string { return "SetRatesResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetRatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRatesResponseValidationError{}

// Validate checks the field values on SetDefaultRatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDefaultRatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDefaultRatesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDefaultRatesResponseMultiError, or nil if none found.
func (m *SetDefaultRatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDefaultRatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetDefaultRatesResponseMultiError(errors)
	}

	return nil
}

// SetDefaultRatesResponseMultiError is an error wrapping multiple validation
// errors returned by SetDefaultRatesResponse.ValidateAll() if the designated
// constraints aren't met.
type SetDefaultRatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDefaultRatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDefaultRatesResponseMultiError) AllErrors() []error { return m }

// SetDefaultRatesResponseValidationError is the validation error returned by
// SetDefaultRatesResponse.Validate if the designated constraints aren't met.
type SetDefaultRatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultRatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultRatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultRatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultRatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultRatesResponseValidationError) ErrorName() string {
	return "SetDefaultRatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultRatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultRatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultRatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultRatesResponseValidationError{}

// Validate checks the field values on GetSpendableBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpendableBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpendableBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpendableBalanceRequestMultiError, or nil if none found.
func (m *GetSpendableBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpendableBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetSpendableBalanceRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := GetSpendableBalanceRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSpendableBalanceRequestMultiError(errors)
	}

	return nil
}

// GetSpendableBalanceRequestMultiError is an error wrapping multiple
// validation errors returned by GetSpendableBalanceRequest.ValidateAll() if
// the designated constraints aren't met.
type GetSpendableBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpendableBalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpendableBalanceRequestMultiError) AllErrors() []error { return m }

// GetSpendableBalanceRequestValidationError is the validation error returned
// by GetSpendableBalanceRequest.Validate if the designated constraints aren't met.
type GetSpendableBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpendableBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpendableBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpendableBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpendableBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpendableBalanceRequestValidationError) ErrorName() string {
	return "GetSpendableBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpendableBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpendableBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpendableBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpendableBalanceRequestValidationError{}

var _GetSpendableBalanceRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetSpendableBalanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpendableBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpendableBalanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpendableBalanceResponseMultiError, or nil if none found.
func (m *GetSpendableBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpendableBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalSpendableBalance

	// no validation rules for StringTotalSpendableBalance

	// no validation rules for DailySpendableBalance

	// no validation rules for StringDailySpendableBalance

	// no validation rules for HourlySpendableBalance

	// no validation rules for StringHourlySpendableBalance

	// no validation rules for OneTimeSpendableBalance

	// no validation rules for StringOneTimeSpendableBalance

	if len(errors) > 0 {
		return GetSpendableBalanceResponseMultiError(errors)
	}

	return nil
}

// GetSpendableBalanceResponseMultiError is an error wrapping multiple
// validation errors returned by GetSpendableBalanceResponse.ValidateAll() if
// the designated constraints aren't met.
type GetSpendableBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpendableBalanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpendableBalanceResponseMultiError) AllErrors() []error { return m }

// GetSpendableBalanceResponseValidationError is the validation error returned
// by GetSpendableBalanceResponse.Validate if the designated constraints
// aren't met.
type GetSpendableBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpendableBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpendableBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpendableBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpendableBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpendableBalanceResponseValidationError) ErrorName() string {
	return "GetSpendableBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpendableBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpendableBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpendableBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpendableBalanceResponseValidationError{}

// Validate checks the field values on GetTotalBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTotalBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTotalBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTotalBalanceRequestMultiError, or nil if none found.
func (m *GetTotalBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTotalBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WatchOnly

	if len(errors) > 0 {
		return GetTotalBalanceRequestMultiError(errors)
	}

	return nil
}

// GetTotalBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by GetTotalBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTotalBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTotalBalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTotalBalanceRequestMultiError) AllErrors() []error { return m }

// GetTotalBalanceRequestValidationError is the validation error returned by
// GetTotalBalanceRequest.Validate if the designated constraints aren't met.
type GetTotalBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTotalBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTotalBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTotalBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTotalBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTotalBalanceRequestValidationError) ErrorName() string {
	return "GetTotalBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTotalBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTotalBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTotalBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTotalBalanceRequestValidationError{}

// Validate checks the field values on ListBalanceSnapshotsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBalanceSnapshotsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBalanceSnapshotsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBalanceSnapshotsRequestMultiError, or nil if none found.
func (m *ListBalanceSnapshotsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBalanceSnapshotsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WatchOnly

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListBalanceSnapshotsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListBalanceSnapshotsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListBalanceSnapshotsRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListBalanceSnapshotsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListBalanceSnapshotsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListBalanceSnapshotsRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListBalanceSnapshotsRequestMultiError(errors)
	}

	return nil
}

// ListBalanceSnapshotsRequestMultiError is an error wrapping multiple
// validation errors returned by ListBalanceSnapshotsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListBalanceSnapshotsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBalanceSnapshotsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBalanceSnapshotsRequestMultiError) AllErrors() []error { return m }

// ListBalanceSnapshotsRequestValidationError is the validation error returned
// by ListBalanceSnapshotsRequest.Validate if the designated constraints
// aren't met.
type ListBalanceSnapshotsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBalanceSnapshotsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBalanceSnapshotsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBalanceSnapshotsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBalanceSnapshotsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBalanceSnapshotsRequestValidationError) ErrorName() string {
	return "ListBalanceSnapshotsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBalanceSnapshotsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBalanceSnapshotsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBalanceSnapshotsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBalanceSnapshotsRequestValidationError{}

// Validate checks the field values on ListBalanceSnapshotsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBalanceSnapshotsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBalanceSnapshotsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBalanceSnapshotsResponseMultiError, or nil if none found.
func (m *ListBalanceSnapshotsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBalanceSnapshotsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBalanceSnapshots() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBalanceSnapshotsResponseValidationError{
						field:  fmt.Sprintf("BalanceSnapshots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBalanceSnapshotsResponseValidationError{
						field:  fmt.Sprintf("BalanceSnapshots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBalanceSnapshotsResponseValidationError{
					field:  fmt.Sprintf("BalanceSnapshots[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBalanceSnapshotsResponseMultiError(errors)
	}

	return nil
}

// ListBalanceSnapshotsResponseMultiError is an error wrapping multiple
// validation errors returned by ListBalanceSnapshotsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListBalanceSnapshotsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBalanceSnapshotsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBalanceSnapshotsResponseMultiError) AllErrors() []error { return m }

// ListBalanceSnapshotsResponseValidationError is the validation error returned
// by ListBalanceSnapshotsResponse.Validate if the designated constraints
// aren't met.
type ListBalanceSnapshotsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBalanceSnapshotsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBalanceSnapshotsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBalanceSnapshotsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBalanceSnapshotsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBalanceSnapshotsResponseValidationError) ErrorName() string {
	return "ListBalanceSnapshotsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBalanceSnapshotsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBalanceSnapshotsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBalanceSnapshotsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBalanceSnapshotsResponseValidationError{}

// Validate checks the field values on ListWalletBalanceSnapshotsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListWalletBalanceSnapshotsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWalletBalanceSnapshotsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListWalletBalanceSnapshotsRequestMultiError, or nil if none found.
func (m *ListWalletBalanceSnapshotsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWalletBalanceSnapshotsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWalletIds() {
		_, _ = idx, item

		if !_ListWalletBalanceSnapshotsRequest_WalletIds_Pattern.MatchString(item) {
			err := ListWalletBalanceSnapshotsRequestValidationError{
				field:  fmt.Sprintf("WalletIds[%v]", idx),
				reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWalletBalanceSnapshotsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWalletBalanceSnapshotsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWalletBalanceSnapshotsRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWalletBalanceSnapshotsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWalletBalanceSnapshotsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWalletBalanceSnapshotsRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListWalletBalanceSnapshotsRequestMultiError(errors)
	}

	return nil
}

// ListWalletBalanceSnapshotsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListWalletBalanceSnapshotsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWalletBalanceSnapshotsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWalletBalanceSnapshotsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWalletBalanceSnapshotsRequestMultiError) AllErrors() []error { return m }

// ListWalletBalanceSnapshotsRequestValidationError is the validation error
// returned by ListWalletBalanceSnapshotsRequest.Validate if the designated
// constraints aren't met.
type ListWalletBalanceSnapshotsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletBalanceSnapshotsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletBalanceSnapshotsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletBalanceSnapshotsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletBalanceSnapshotsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletBalanceSnapshotsRequestValidationError) ErrorName() string {
	return "ListWalletBalanceSnapshotsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletBalanceSnapshotsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletBalanceSnapshotsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletBalanceSnapshotsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletBalanceSnapshotsRequestValidationError{}

var _ListWalletBalanceSnapshotsRequest_WalletIds_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListWalletBalanceSnapshotsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListWalletBalanceSnapshotsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWalletBalanceSnapshotsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListWalletBalanceSnapshotsResponseMultiError, or nil if none found.
func (m *ListWalletBalanceSnapshotsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWalletBalanceSnapshotsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWalletBalanceSnapshotMap()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWalletBalanceSnapshotsResponseValidationError{
					field:  "WalletBalanceSnapshotMap",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWalletBalanceSnapshotsResponseValidationError{
					field:  "WalletBalanceSnapshotMap",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWalletBalanceSnapshotMap()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWalletBalanceSnapshotsResponseValidationError{
				field:  "WalletBalanceSnapshotMap",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListWalletBalanceSnapshotsResponseMultiError(errors)
	}

	return nil
}

// ListWalletBalanceSnapshotsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListWalletBalanceSnapshotsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWalletBalanceSnapshotsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWalletBalanceSnapshotsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWalletBalanceSnapshotsResponseMultiError) AllErrors() []error { return m }

// ListWalletBalanceSnapshotsResponseValidationError is the validation error
// returned by ListWalletBalanceSnapshotsResponse.Validate if the designated
// constraints aren't met.
type ListWalletBalanceSnapshotsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletBalanceSnapshotsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletBalanceSnapshotsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletBalanceSnapshotsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletBalanceSnapshotsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletBalanceSnapshotsResponseValidationError) ErrorName() string {
	return "ListWalletBalanceSnapshotsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletBalanceSnapshotsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletBalanceSnapshotsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletBalanceSnapshotsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletBalanceSnapshotsResponseValidationError{}

// Validate checks the field values on ListTransferVolumeSnapshotsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTransferVolumeSnapshotsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransferVolumeSnapshotsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListTransferVolumeSnapshotsRequestMultiError, or nil if none found.
func (m *ListTransferVolumeSnapshotsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransferVolumeSnapshotsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WatchOnly

	if m.GetStartTime() == nil {
		err := ListTransferVolumeSnapshotsRequestValidationError{
			field:  "StartTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEndTime() == nil {
		err := ListTransferVolumeSnapshotsRequestValidationError{
			field:  "EndTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListTransferVolumeSnapshotsRequestMultiError(errors)
	}

	return nil
}

// ListTransferVolumeSnapshotsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListTransferVolumeSnapshotsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTransferVolumeSnapshotsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransferVolumeSnapshotsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransferVolumeSnapshotsRequestMultiError) AllErrors() []error { return m }

// ListTransferVolumeSnapshotsRequestValidationError is the validation error
// returned by ListTransferVolumeSnapshotsRequest.Validate if the designated
// constraints aren't met.
type ListTransferVolumeSnapshotsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransferVolumeSnapshotsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransferVolumeSnapshotsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransferVolumeSnapshotsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransferVolumeSnapshotsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransferVolumeSnapshotsRequestValidationError) ErrorName() string {
	return "ListTransferVolumeSnapshotsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransferVolumeSnapshotsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransferVolumeSnapshotsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransferVolumeSnapshotsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransferVolumeSnapshotsRequestValidationError{}

// Validate checks the field values on ListTransferVolumeSnapshotsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTransferVolumeSnapshotsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransferVolumeSnapshotsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListTransferVolumeSnapshotsResponseMultiError, or nil if none found.
func (m *ListTransferVolumeSnapshotsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransferVolumeSnapshotsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransferVolumeSnapshots()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTransferVolumeSnapshotsResponseValidationError{
					field:  "TransferVolumeSnapshots",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTransferVolumeSnapshotsResponseValidationError{
					field:  "TransferVolumeSnapshots",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransferVolumeSnapshots()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTransferVolumeSnapshotsResponseValidationError{
				field:  "TransferVolumeSnapshots",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListTransferVolumeSnapshotsResponseMultiError(errors)
	}

	return nil
}

// ListTransferVolumeSnapshotsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListTransferVolumeSnapshotsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTransferVolumeSnapshotsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransferVolumeSnapshotsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransferVolumeSnapshotsResponseMultiError) AllErrors() []error { return m }

// ListTransferVolumeSnapshotsResponseValidationError is the validation error
// returned by ListTransferVolumeSnapshotsResponse.Validate if the designated
// constraints aren't met.
type ListTransferVolumeSnapshotsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransferVolumeSnapshotsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransferVolumeSnapshotsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransferVolumeSnapshotsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransferVolumeSnapshotsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransferVolumeSnapshotsResponseValidationError) ErrorName() string {
	return "ListTransferVolumeSnapshotsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransferVolumeSnapshotsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransferVolumeSnapshotsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransferVolumeSnapshotsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransferVolumeSnapshotsResponseValidationError{}

// Validate checks the field values on ListWalletTransferVolumeSnapshotsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListWalletTransferVolumeSnapshotsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListWalletTransferVolumeSnapshotsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListWalletTransferVolumeSnapshotsRequestMultiError, or nil if none found.
func (m *ListWalletTransferVolumeSnapshotsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWalletTransferVolumeSnapshotsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWalletIds() {
		_, _ = idx, item

		if !_ListWalletTransferVolumeSnapshotsRequest_WalletIds_Pattern.MatchString(item) {
			err := ListWalletTransferVolumeSnapshotsRequestValidationError{
				field:  fmt.Sprintf("WalletIds[%v]", idx),
				reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetStartTime() == nil {
		err := ListWalletTransferVolumeSnapshotsRequestValidationError{
			field:  "StartTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEndTime() == nil {
		err := ListWalletTransferVolumeSnapshotsRequestValidationError{
			field:  "EndTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListWalletTransferVolumeSnapshotsRequestMultiError(errors)
	}

	return nil
}

// ListWalletTransferVolumeSnapshotsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListWalletTransferVolumeSnapshotsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWalletTransferVolumeSnapshotsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWalletTransferVolumeSnapshotsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWalletTransferVolumeSnapshotsRequestMultiError) AllErrors() []error { return m }

// ListWalletTransferVolumeSnapshotsRequestValidationError is the validation
// error returned by ListWalletTransferVolumeSnapshotsRequest.Validate if the
// designated constraints aren't met.
type ListWalletTransferVolumeSnapshotsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletTransferVolumeSnapshotsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletTransferVolumeSnapshotsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletTransferVolumeSnapshotsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletTransferVolumeSnapshotsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletTransferVolumeSnapshotsRequestValidationError) ErrorName() string {
	return "ListWalletTransferVolumeSnapshotsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletTransferVolumeSnapshotsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletTransferVolumeSnapshotsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletTransferVolumeSnapshotsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletTransferVolumeSnapshotsRequestValidationError{}

var _ListWalletTransferVolumeSnapshotsRequest_WalletIds_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on
// ListWalletTransferVolumeSnapshotsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListWalletTransferVolumeSnapshotsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListWalletTransferVolumeSnapshotsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListWalletTransferVolumeSnapshotsResponseMultiError, or nil if none found.
func (m *ListWalletTransferVolumeSnapshotsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWalletTransferVolumeSnapshotsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWalletTransferVolumeSnapshots()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWalletTransferVolumeSnapshotsResponseValidationError{
					field:  "WalletTransferVolumeSnapshots",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWalletTransferVolumeSnapshotsResponseValidationError{
					field:  "WalletTransferVolumeSnapshots",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWalletTransferVolumeSnapshots()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWalletTransferVolumeSnapshotsResponseValidationError{
				field:  "WalletTransferVolumeSnapshots",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListWalletTransferVolumeSnapshotsResponseMultiError(errors)
	}

	return nil
}

// ListWalletTransferVolumeSnapshotsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListWalletTransferVolumeSnapshotsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWalletTransferVolumeSnapshotsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWalletTransferVolumeSnapshotsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWalletTransferVolumeSnapshotsResponseMultiError) AllErrors() []error { return m }

// ListWalletTransferVolumeSnapshotsResponseValidationError is the validation
// error returned by ListWalletTransferVolumeSnapshotsResponse.Validate if the
// designated constraints aren't met.
type ListWalletTransferVolumeSnapshotsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletTransferVolumeSnapshotsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletTransferVolumeSnapshotsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletTransferVolumeSnapshotsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletTransferVolumeSnapshotsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletTransferVolumeSnapshotsResponseValidationError) ErrorName() string {
	return "ListWalletTransferVolumeSnapshotsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletTransferVolumeSnapshotsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletTransferVolumeSnapshotsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletTransferVolumeSnapshotsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletTransferVolumeSnapshotsResponseValidationError{}

// Validate checks the field values on CalculateFeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalculateFeeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalculateFeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CalculateFeeRequestMultiError, or nil if none found.
func (m *CalculateFeeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CalculateFeeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CalculateFeeRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := CalculateFeeRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FeeRate

	for idx, item := range m.GetTxOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CalculateFeeRequestValidationError{
						field:  fmt.Sprintf("TxOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CalculateFeeRequestValidationError{
						field:  fmt.Sprintf("TxOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CalculateFeeRequestValidationError{
					field:  fmt.Sprintf("TxOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Address

	// no validation rules for DestinationTag

	// no validation rules for StringValue

	if all {
		switch v := interface{}(m.GetSubstrateSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CalculateFeeRequestValidationError{
					field:  "SubstrateSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CalculateFeeRequestValidationError{
					field:  "SubstrateSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubstrateSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CalculateFeeRequestValidationError{
				field:  "SubstrateSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNemSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CalculateFeeRequestValidationError{
					field:  "NemSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CalculateFeeRequestValidationError{
					field:  "NemSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNemSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CalculateFeeRequestValidationError{
				field:  "NemSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSymbolSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CalculateFeeRequestValidationError{
					field:  "SymbolSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CalculateFeeRequestValidationError{
					field:  "SymbolSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSymbolSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CalculateFeeRequestValidationError{
				field:  "SymbolSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEthereumSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CalculateFeeRequestValidationError{
					field:  "EthereumSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CalculateFeeRequestValidationError{
					field:  "EthereumSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEthereumSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CalculateFeeRequestValidationError{
				field:  "EthereumSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCosmosSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CalculateFeeRequestValidationError{
					field:  "CosmosSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CalculateFeeRequestValidationError{
					field:  "CosmosSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCosmosSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CalculateFeeRequestValidationError{
				field:  "CosmosSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHederaSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CalculateFeeRequestValidationError{
					field:  "HederaSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CalculateFeeRequestValidationError{
					field:  "HederaSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHederaSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CalculateFeeRequestValidationError{
				field:  "HederaSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRbfSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CalculateFeeRequestValidationError{
					field:  "RbfSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CalculateFeeRequestValidationError{
					field:  "RbfSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRbfSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CalculateFeeRequestValidationError{
				field:  "RbfSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUtxoSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CalculateFeeRequestValidationError{
					field:  "UtxoSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CalculateFeeRequestValidationError{
					field:  "UtxoSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUtxoSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CalculateFeeRequestValidationError{
				field:  "UtxoSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSolanaSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CalculateFeeRequestValidationError{
					field:  "SolanaSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CalculateFeeRequestValidationError{
					field:  "SolanaSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSolanaSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CalculateFeeRequestValidationError{
				field:  "SolanaSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CalculateFeeRequestMultiError(errors)
	}

	return nil
}

// CalculateFeeRequestMultiError is an error wrapping multiple validation
// errors returned by CalculateFeeRequest.ValidateAll() if the designated
// constraints aren't met.
type CalculateFeeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalculateFeeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalculateFeeRequestMultiError) AllErrors() []error { return m }

// CalculateFeeRequestValidationError is the validation error returned by
// CalculateFeeRequest.Validate if the designated constraints aren't met.
type CalculateFeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateFeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateFeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateFeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateFeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateFeeRequestValidationError) ErrorName() string {
	return "CalculateFeeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateFeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateFeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateFeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateFeeRequestValidationError{}

var _CalculateFeeRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CalculateFeeSubstrateSpecific with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalculateFeeSubstrateSpecific) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalculateFeeSubstrateSpecific with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CalculateFeeSubstrateSpecificMultiError, or nil if none found.
func (m *CalculateFeeSubstrateSpecific) ValidateAll() error {
	return m.validate(true)
}

func (m *CalculateFeeSubstrateSpecific) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallType

	// no validation rules for MultisigCallType

	if len(errors) > 0 {
		return CalculateFeeSubstrateSpecificMultiError(errors)
	}

	return nil
}

// CalculateFeeSubstrateSpecificMultiError is an error wrapping multiple
// validation errors returned by CalculateFeeSubstrateSpecific.ValidateAll()
// if the designated constraints aren't met.
type CalculateFeeSubstrateSpecificMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalculateFeeSubstrateSpecificMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalculateFeeSubstrateSpecificMultiError) AllErrors() []error { return m }

// CalculateFeeSubstrateSpecificValidationError is the validation error
// returned by CalculateFeeSubstrateSpecific.Validate if the designated
// constraints aren't met.
type CalculateFeeSubstrateSpecificValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateFeeSubstrateSpecificValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateFeeSubstrateSpecificValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateFeeSubstrateSpecificValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateFeeSubstrateSpecificValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateFeeSubstrateSpecificValidationError) ErrorName() string {
	return "CalculateFeeSubstrateSpecificValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateFeeSubstrateSpecificValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateFeeSubstrateSpecific.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateFeeSubstrateSpecificValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateFeeSubstrateSpecificValidationError{}

// Validate checks the field values on CalculateFeeNemSpecific with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalculateFeeNemSpecific) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalculateFeeNemSpecific with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CalculateFeeNemSpecificMultiError, or nil if none found.
func (m *CalculateFeeNemSpecific) ValidateAll() error {
	return m.validate(true)
}

func (m *CalculateFeeNemSpecific) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return CalculateFeeNemSpecificMultiError(errors)
	}

	return nil
}

// CalculateFeeNemSpecificMultiError is an error wrapping multiple validation
// errors returned by CalculateFeeNemSpecific.ValidateAll() if the designated
// constraints aren't met.
type CalculateFeeNemSpecificMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalculateFeeNemSpecificMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalculateFeeNemSpecificMultiError) AllErrors() []error { return m }

// CalculateFeeNemSpecificValidationError is the validation error returned by
// CalculateFeeNemSpecific.Validate if the designated constraints aren't met.
type CalculateFeeNemSpecificValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateFeeNemSpecificValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateFeeNemSpecificValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateFeeNemSpecificValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateFeeNemSpecificValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateFeeNemSpecificValidationError) ErrorName() string {
	return "CalculateFeeNemSpecificValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateFeeNemSpecificValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateFeeNemSpecific.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateFeeNemSpecificValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateFeeNemSpecificValidationError{}

// Validate checks the field values on CalculateFeeSymbolSpecific with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalculateFeeSymbolSpecific) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalculateFeeSymbolSpecific with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CalculateFeeSymbolSpecificMultiError, or nil if none found.
func (m *CalculateFeeSymbolSpecific) ValidateAll() error {
	return m.validate(true)
}

func (m *CalculateFeeSymbolSpecific) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return CalculateFeeSymbolSpecificMultiError(errors)
	}

	return nil
}

// CalculateFeeSymbolSpecificMultiError is an error wrapping multiple
// validation errors returned by CalculateFeeSymbolSpecific.ValidateAll() if
// the designated constraints aren't met.
type CalculateFeeSymbolSpecificMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalculateFeeSymbolSpecificMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalculateFeeSymbolSpecificMultiError) AllErrors() []error { return m }

// CalculateFeeSymbolSpecificValidationError is the validation error returned
// by CalculateFeeSymbolSpecific.Validate if the designated constraints aren't met.
type CalculateFeeSymbolSpecificValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateFeeSymbolSpecificValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateFeeSymbolSpecificValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateFeeSymbolSpecificValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateFeeSymbolSpecificValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateFeeSymbolSpecificValidationError) ErrorName() string {
	return "CalculateFeeSymbolSpecificValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateFeeSymbolSpecificValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateFeeSymbolSpecific.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateFeeSymbolSpecificValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateFeeSymbolSpecificValidationError{}

// Validate checks the field values on CalculateFeeEthereumSpecific with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalculateFeeEthereumSpecific) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalculateFeeEthereumSpecific with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CalculateFeeEthereumSpecificMultiError, or nil if none found.
func (m *CalculateFeeEthereumSpecific) ValidateAll() error {
	return m.validate(true)
}

func (m *CalculateFeeEthereumSpecific) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if m.IsStakingTransaction != nil {
		// no validation rules for IsStakingTransaction
	}

	if len(errors) > 0 {
		return CalculateFeeEthereumSpecificMultiError(errors)
	}

	return nil
}

// CalculateFeeEthereumSpecificMultiError is an error wrapping multiple
// validation errors returned by CalculateFeeEthereumSpecific.ValidateAll() if
// the designated constraints aren't met.
type CalculateFeeEthereumSpecificMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalculateFeeEthereumSpecificMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalculateFeeEthereumSpecificMultiError) AllErrors() []error { return m }

// CalculateFeeEthereumSpecificValidationError is the validation error returned
// by CalculateFeeEthereumSpecific.Validate if the designated constraints
// aren't met.
type CalculateFeeEthereumSpecificValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateFeeEthereumSpecificValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateFeeEthereumSpecificValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateFeeEthereumSpecificValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateFeeEthereumSpecificValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateFeeEthereumSpecificValidationError) ErrorName() string {
	return "CalculateFeeEthereumSpecificValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateFeeEthereumSpecificValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateFeeEthereumSpecific.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateFeeEthereumSpecificValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateFeeEthereumSpecificValidationError{}

// Validate checks the field values on CalculateFeeCosmosSpecific with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalculateFeeCosmosSpecific) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalculateFeeCosmosSpecific with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CalculateFeeCosmosSpecificMultiError, or nil if none found.
func (m *CalculateFeeCosmosSpecific) ValidateAll() error {
	return m.validate(true)
}

func (m *CalculateFeeCosmosSpecific) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Memo

	if len(errors) > 0 {
		return CalculateFeeCosmosSpecificMultiError(errors)
	}

	return nil
}

// CalculateFeeCosmosSpecificMultiError is an error wrapping multiple
// validation errors returned by CalculateFeeCosmosSpecific.ValidateAll() if
// the designated constraints aren't met.
type CalculateFeeCosmosSpecificMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalculateFeeCosmosSpecificMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalculateFeeCosmosSpecificMultiError) AllErrors() []error { return m }

// CalculateFeeCosmosSpecificValidationError is the validation error returned
// by CalculateFeeCosmosSpecific.Validate if the designated constraints aren't met.
type CalculateFeeCosmosSpecificValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateFeeCosmosSpecificValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateFeeCosmosSpecificValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateFeeCosmosSpecificValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateFeeCosmosSpecificValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateFeeCosmosSpecificValidationError) ErrorName() string {
	return "CalculateFeeCosmosSpecificValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateFeeCosmosSpecificValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateFeeCosmosSpecific.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateFeeCosmosSpecificValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateFeeCosmosSpecificValidationError{}

// Validate checks the field values on CalculateFeeHederaSpecific with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalculateFeeHederaSpecific) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalculateFeeHederaSpecific with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CalculateFeeHederaSpecificMultiError, or nil if none found.
func (m *CalculateFeeHederaSpecific) ValidateAll() error {
	return m.validate(true)
}

func (m *CalculateFeeHederaSpecific) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Memo

	if len(errors) > 0 {
		return CalculateFeeHederaSpecificMultiError(errors)
	}

	return nil
}

// CalculateFeeHederaSpecificMultiError is an error wrapping multiple
// validation errors returned by CalculateFeeHederaSpecific.ValidateAll() if
// the designated constraints aren't met.
type CalculateFeeHederaSpecificMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalculateFeeHederaSpecificMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalculateFeeHederaSpecificMultiError) AllErrors() []error { return m }

// CalculateFeeHederaSpecificValidationError is the validation error returned
// by CalculateFeeHederaSpecific.Validate if the designated constraints aren't met.
type CalculateFeeHederaSpecificValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateFeeHederaSpecificValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateFeeHederaSpecificValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateFeeHederaSpecificValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateFeeHederaSpecificValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateFeeHederaSpecificValidationError) ErrorName() string {
	return "CalculateFeeHederaSpecificValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateFeeHederaSpecificValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateFeeHederaSpecific.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateFeeHederaSpecificValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateFeeHederaSpecificValidationError{}

// Validate checks the field values on CalculateFeeSolanaSpecific with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalculateFeeSolanaSpecific) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalculateFeeSolanaSpecific with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CalculateFeeSolanaSpecificMultiError, or nil if none found.
func (m *CalculateFeeSolanaSpecific) ValidateAll() error {
	return m.validate(true)
}

func (m *CalculateFeeSolanaSpecific) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventType

	if len(errors) > 0 {
		return CalculateFeeSolanaSpecificMultiError(errors)
	}

	return nil
}

// CalculateFeeSolanaSpecificMultiError is an error wrapping multiple
// validation errors returned by CalculateFeeSolanaSpecific.ValidateAll() if
// the designated constraints aren't met.
type CalculateFeeSolanaSpecificMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalculateFeeSolanaSpecificMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalculateFeeSolanaSpecificMultiError) AllErrors() []error { return m }

// CalculateFeeSolanaSpecificValidationError is the validation error returned
// by CalculateFeeSolanaSpecific.Validate if the designated constraints aren't met.
type CalculateFeeSolanaSpecificValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateFeeSolanaSpecificValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateFeeSolanaSpecificValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateFeeSolanaSpecificValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateFeeSolanaSpecificValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateFeeSolanaSpecificValidationError) ErrorName() string {
	return "CalculateFeeSolanaSpecificValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateFeeSolanaSpecificValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateFeeSolanaSpecific.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateFeeSolanaSpecificValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateFeeSolanaSpecificValidationError{}

// Validate checks the field values on CalculateFeeRbfSpecific with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalculateFeeRbfSpecific) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalculateFeeRbfSpecific with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CalculateFeeRbfSpecificMultiError, or nil if none found.
func (m *CalculateFeeRbfSpecific) ValidateAll() error {
	return m.validate(true)
}

func (m *CalculateFeeRbfSpecific) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CalculateFeeRbfSpecific_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		err := CalculateFeeRbfSpecificValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CalculateFeeRbfSpecificMultiError(errors)
	}

	return nil
}

// CalculateFeeRbfSpecificMultiError is an error wrapping multiple validation
// errors returned by CalculateFeeRbfSpecific.ValidateAll() if the designated
// constraints aren't met.
type CalculateFeeRbfSpecificMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalculateFeeRbfSpecificMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalculateFeeRbfSpecificMultiError) AllErrors() []error { return m }

// CalculateFeeRbfSpecificValidationError is the validation error returned by
// CalculateFeeRbfSpecific.Validate if the designated constraints aren't met.
type CalculateFeeRbfSpecificValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateFeeRbfSpecificValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateFeeRbfSpecificValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateFeeRbfSpecificValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateFeeRbfSpecificValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateFeeRbfSpecificValidationError) ErrorName() string {
	return "CalculateFeeRbfSpecificValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateFeeRbfSpecificValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateFeeRbfSpecific.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateFeeRbfSpecificValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateFeeRbfSpecificValidationError{}

var _CalculateFeeRbfSpecific_TransactionId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on UtxoSpecific with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UtxoSpecific) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UtxoSpecific with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UtxoSpecificMultiError, or
// nil if none found.
func (m *UtxoSpecific) ValidateAll() error {
	return m.validate(true)
}

func (m *UtxoSpecific) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSelectedUtxos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UtxoSpecificValidationError{
						field:  fmt.Sprintf("SelectedUtxos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UtxoSpecificValidationError{
						field:  fmt.Sprintf("SelectedUtxos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UtxoSpecificValidationError{
					field:  fmt.Sprintf("SelectedUtxos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UtxoSpecificMultiError(errors)
	}

	return nil
}

// UtxoSpecificMultiError is an error wrapping multiple validation errors
// returned by UtxoSpecific.ValidateAll() if the designated constraints aren't met.
type UtxoSpecificMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UtxoSpecificMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UtxoSpecificMultiError) AllErrors() []error { return m }

// UtxoSpecificValidationError is the validation error returned by
// UtxoSpecific.Validate if the designated constraints aren't met.
type UtxoSpecificValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UtxoSpecificValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UtxoSpecificValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UtxoSpecificValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UtxoSpecificValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UtxoSpecificValidationError) ErrorName() string { return "UtxoSpecificValidationError" }

// Error satisfies the builtin error interface
func (e UtxoSpecificValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUtxoSpecific.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UtxoSpecificValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UtxoSpecificValidationError{}

// Validate checks the field values on CalculateFeeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalculateFeeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalculateFeeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CalculateFeeResponseMultiError, or nil if none found.
func (m *CalculateFeeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CalculateFeeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fee

	// no validation rules for StringFee

	if len(errors) > 0 {
		return CalculateFeeResponseMultiError(errors)
	}

	return nil
}

// CalculateFeeResponseMultiError is an error wrapping multiple validation
// errors returned by CalculateFeeResponse.ValidateAll() if the designated
// constraints aren't met.
type CalculateFeeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalculateFeeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalculateFeeResponseMultiError) AllErrors() []error { return m }

// CalculateFeeResponseValidationError is the validation error returned by
// CalculateFeeResponse.Validate if the designated constraints aren't met.
type CalculateFeeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateFeeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateFeeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateFeeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateFeeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateFeeResponseValidationError) ErrorName() string {
	return "CalculateFeeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateFeeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateFeeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateFeeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateFeeResponseValidationError{}

// Validate checks the field values on GetMembersDeactivatabilitiesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetMembersDeactivatabilitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMembersDeactivatabilitiesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetMembersDeactivatabilitiesRequestMultiError, or nil if none found.
func (m *GetMembersDeactivatabilitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMembersDeactivatabilitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMembersDeactivatabilitiesRequestMultiError(errors)
	}

	return nil
}

// GetMembersDeactivatabilitiesRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetMembersDeactivatabilitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMembersDeactivatabilitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMembersDeactivatabilitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMembersDeactivatabilitiesRequestMultiError) AllErrors() []error { return m }

// GetMembersDeactivatabilitiesRequestValidationError is the validation error
// returned by GetMembersDeactivatabilitiesRequest.Validate if the designated
// constraints aren't met.
type GetMembersDeactivatabilitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMembersDeactivatabilitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMembersDeactivatabilitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMembersDeactivatabilitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMembersDeactivatabilitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMembersDeactivatabilitiesRequestValidationError) ErrorName() string {
	return "GetMembersDeactivatabilitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMembersDeactivatabilitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMembersDeactivatabilitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMembersDeactivatabilitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMembersDeactivatabilitiesRequestValidationError{}

// Validate checks the field values on GetMembersDeactivatabilitiesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetMembersDeactivatabilitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMembersDeactivatabilitiesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetMembersDeactivatabilitiesResponseMultiError, or nil if none found.
func (m *GetMembersDeactivatabilitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMembersDeactivatabilitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDeactivatabilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMembersDeactivatabilitiesResponseValidationError{
						field:  fmt.Sprintf("Deactivatabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMembersDeactivatabilitiesResponseValidationError{
						field:  fmt.Sprintf("Deactivatabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMembersDeactivatabilitiesResponseValidationError{
					field:  fmt.Sprintf("Deactivatabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMembersDeactivatabilitiesResponseMultiError(errors)
	}

	return nil
}

// GetMembersDeactivatabilitiesResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetMembersDeactivatabilitiesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMembersDeactivatabilitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMembersDeactivatabilitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMembersDeactivatabilitiesResponseMultiError) AllErrors() []error { return m }

// GetMembersDeactivatabilitiesResponseValidationError is the validation error
// returned by GetMembersDeactivatabilitiesResponse.Validate if the designated
// constraints aren't met.
type GetMembersDeactivatabilitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMembersDeactivatabilitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMembersDeactivatabilitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMembersDeactivatabilitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMembersDeactivatabilitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMembersDeactivatabilitiesResponseValidationError) ErrorName() string {
	return "GetMembersDeactivatabilitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMembersDeactivatabilitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMembersDeactivatabilitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMembersDeactivatabilitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMembersDeactivatabilitiesResponseValidationError{}

// Validate checks the field values on GetRecommendedFeeRateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRecommendedFeeRateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecommendedFeeRateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRecommendedFeeRateRequestMultiError, or nil if none found.
func (m *GetRecommendedFeeRateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecommendedFeeRateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _GetRecommendedFeeRateRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		err := GetRecommendedFeeRateRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := GetRecommendedFeeRateRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Network != nil {

		if _, ok := gincoincglobalv1.Network_name[int32(m.GetNetwork())]; !ok {
			err := GetRecommendedFeeRateRequestValidationError{
				field:  "Network",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetRecommendedFeeRateRequestMultiError(errors)
	}

	return nil
}

// GetRecommendedFeeRateRequestMultiError is an error wrapping multiple
// validation errors returned by GetRecommendedFeeRateRequest.ValidateAll() if
// the designated constraints aren't met.
type GetRecommendedFeeRateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecommendedFeeRateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecommendedFeeRateRequestMultiError) AllErrors() []error { return m }

// GetRecommendedFeeRateRequestValidationError is the validation error returned
// by GetRecommendedFeeRateRequest.Validate if the designated constraints
// aren't met.
type GetRecommendedFeeRateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecommendedFeeRateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecommendedFeeRateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecommendedFeeRateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecommendedFeeRateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecommendedFeeRateRequestValidationError) ErrorName() string {
	return "GetRecommendedFeeRateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecommendedFeeRateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecommendedFeeRateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecommendedFeeRateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecommendedFeeRateRequestValidationError{}

var _GetRecommendedFeeRateRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

// Validate checks the field values on GetRecommendedFeeRateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRecommendedFeeRateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecommendedFeeRateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetRecommendedFeeRateResponseMultiError, or nil if none found.
func (m *GetRecommendedFeeRateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecommendedFeeRateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fastest

	// no validation rules for Fast

	// no validation rules for Average

	// no validation rules for SafeLow

	if len(errors) > 0 {
		return GetRecommendedFeeRateResponseMultiError(errors)
	}

	return nil
}

// GetRecommendedFeeRateResponseMultiError is an error wrapping multiple
// validation errors returned by GetRecommendedFeeRateResponse.ValidateAll()
// if the designated constraints aren't met.
type GetRecommendedFeeRateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecommendedFeeRateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecommendedFeeRateResponseMultiError) AllErrors() []error { return m }

// GetRecommendedFeeRateResponseValidationError is the validation error
// returned by GetRecommendedFeeRateResponse.Validate if the designated
// constraints aren't met.
type GetRecommendedFeeRateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecommendedFeeRateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecommendedFeeRateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecommendedFeeRateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecommendedFeeRateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecommendedFeeRateResponseValidationError) ErrorName() string {
	return "GetRecommendedFeeRateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecommendedFeeRateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecommendedFeeRateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecommendedFeeRateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecommendedFeeRateResponseValidationError{}

// Validate checks the field values on ValidateAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateAddressRequestMultiError, or nil if none found.
func (m *ValidateAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _ValidateAddressRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		err := ValidateAddressRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := ValidateAddressRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Address

	if len(errors) > 0 {
		return ValidateAddressRequestMultiError(errors)
	}

	return nil
}

// ValidateAddressRequestMultiError is an error wrapping multiple validation
// errors returned by ValidateAddressRequest.ValidateAll() if the designated
// constraints aren't met.
type ValidateAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateAddressRequestMultiError) AllErrors() []error { return m }

// ValidateAddressRequestValidationError is the validation error returned by
// ValidateAddressRequest.Validate if the designated constraints aren't met.
type ValidateAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateAddressRequestValidationError) ErrorName() string {
	return "ValidateAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateAddressRequestValidationError{}

var _ValidateAddressRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

// Validate checks the field values on ValidateAddressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateAddressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateAddressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateAddressResponseMultiError, or nil if none found.
func (m *ValidateAddressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateAddressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Valid

	if len(errors) > 0 {
		return ValidateAddressResponseMultiError(errors)
	}

	return nil
}

// ValidateAddressResponseMultiError is an error wrapping multiple validation
// errors returned by ValidateAddressResponse.ValidateAll() if the designated
// constraints aren't met.
type ValidateAddressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateAddressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateAddressResponseMultiError) AllErrors() []error { return m }

// ValidateAddressResponseValidationError is the validation error returned by
// ValidateAddressResponse.Validate if the designated constraints aren't met.
type ValidateAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateAddressResponseValidationError) ErrorName() string {
	return "ValidateAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateAddressResponseValidationError{}

// Validate checks the field values on ListConfirmationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConfirmationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConfirmationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConfirmationsRequestMultiError, or nil if none found.
func (m *ListConfirmationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConfirmationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListConfirmationsRequestMultiError(errors)
	}

	return nil
}

// ListConfirmationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListConfirmationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListConfirmationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConfirmationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConfirmationsRequestMultiError) AllErrors() []error { return m }

// ListConfirmationsRequestValidationError is the validation error returned by
// ListConfirmationsRequest.Validate if the designated constraints aren't met.
type ListConfirmationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfirmationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfirmationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfirmationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfirmationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfirmationsRequestValidationError) ErrorName() string {
	return "ListConfirmationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfirmationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfirmationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfirmationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfirmationsRequestValidationError{}

// Validate checks the field values on ListConfirmationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConfirmationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConfirmationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConfirmationsResponseMultiError, or nil if none found.
func (m *ListConfirmationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConfirmationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConfirmations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListConfirmationsResponseValidationError{
						field:  fmt.Sprintf("Confirmations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListConfirmationsResponseValidationError{
						field:  fmt.Sprintf("Confirmations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListConfirmationsResponseValidationError{
					field:  fmt.Sprintf("Confirmations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListConfirmationsResponseMultiError(errors)
	}

	return nil
}

// ListConfirmationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListConfirmationsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListConfirmationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConfirmationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConfirmationsResponseMultiError) AllErrors() []error { return m }

// ListConfirmationsResponseValidationError is the validation error returned by
// ListConfirmationsResponse.Validate if the designated constraints aren't met.
type ListConfirmationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfirmationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfirmationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfirmationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfirmationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfirmationsResponseValidationError) ErrorName() string {
	return "ListConfirmationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfirmationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfirmationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfirmationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfirmationsResponseValidationError{}

// Validate checks the field values on ListAuditLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAuditLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuditLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuditLogsRequestMultiError, or nil if none found.
func (m *ListAuditLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuditLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuditLogGroup

	if !_ListAuditLogsRequest_AccountId_Pattern.MatchString(m.GetAccountId()) {
		err := ListAuditLogsRequestValidationError{
			field:  "AccountId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() > 100 {
		err := ListAuditLogsRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListAuditLogsRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		err := ListAuditLogsRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListAuditLogsRequestMultiError(errors)
	}

	return nil
}

// ListAuditLogsRequestMultiError is an error wrapping multiple validation
// errors returned by ListAuditLogsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAuditLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuditLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuditLogsRequestMultiError) AllErrors() []error { return m }

// ListAuditLogsRequestValidationError is the validation error returned by
// ListAuditLogsRequest.Validate if the designated constraints aren't met.
type ListAuditLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuditLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuditLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuditLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuditLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuditLogsRequestValidationError) ErrorName() string {
	return "ListAuditLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuditLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuditLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuditLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuditLogsRequestValidationError{}

var _ListAuditLogsRequest_AccountId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ListAuditLogsRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListAuditLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAuditLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuditLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuditLogsResponseMultiError, or nil if none found.
func (m *ListAuditLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuditLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAuditLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAuditLogsResponseValidationError{
						field:  fmt.Sprintf("AuditLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAuditLogsResponseValidationError{
						field:  fmt.Sprintf("AuditLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAuditLogsResponseValidationError{
					field:  fmt.Sprintf("AuditLogs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListAuditLogsResponseMultiError(errors)
	}

	return nil
}

// ListAuditLogsResponseMultiError is an error wrapping multiple validation
// errors returned by ListAuditLogsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAuditLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuditLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuditLogsResponseMultiError) AllErrors() []error { return m }

// ListAuditLogsResponseValidationError is the validation error returned by
// ListAuditLogsResponse.Validate if the designated constraints aren't met.
type ListAuditLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuditLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuditLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuditLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuditLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuditLogsResponseValidationError) ErrorName() string {
	return "ListAuditLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuditLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuditLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuditLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuditLogsResponseValidationError{}

// Validate checks the field values on CreateLabeledAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLabeledAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLabeledAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLabeledAddressRequestMultiError, or nil if none found.
func (m *CreateLabeledAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLabeledAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 40 {
		err := CreateLabeledAddressRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateLabeledAddressRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		err := CreateLabeledAddressRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := CreateLabeledAddressRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Address

	if m.Network != nil {

		if _, ok := gincoincglobalv1.Network_name[int32(m.GetNetwork())]; !ok {
			err := CreateLabeledAddressRequestValidationError{
				field:  "Network",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateLabeledAddressRequestMultiError(errors)
	}

	return nil
}

// CreateLabeledAddressRequestMultiError is an error wrapping multiple
// validation errors returned by CreateLabeledAddressRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateLabeledAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLabeledAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLabeledAddressRequestMultiError) AllErrors() []error { return m }

// CreateLabeledAddressRequestValidationError is the validation error returned
// by CreateLabeledAddressRequest.Validate if the designated constraints
// aren't met.
type CreateLabeledAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLabeledAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLabeledAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLabeledAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLabeledAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLabeledAddressRequestValidationError) ErrorName() string {
	return "CreateLabeledAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLabeledAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLabeledAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLabeledAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLabeledAddressRequestValidationError{}

var _CreateLabeledAddressRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

// Validate checks the field values on CreateLabeledAddressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLabeledAddressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLabeledAddressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLabeledAddressResponseMultiError, or nil if none found.
func (m *CreateLabeledAddressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLabeledAddressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LabeledAddressId

	if len(errors) > 0 {
		return CreateLabeledAddressResponseMultiError(errors)
	}

	return nil
}

// CreateLabeledAddressResponseMultiError is an error wrapping multiple
// validation errors returned by CreateLabeledAddressResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateLabeledAddressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLabeledAddressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLabeledAddressResponseMultiError) AllErrors() []error { return m }

// CreateLabeledAddressResponseValidationError is the validation error returned
// by CreateLabeledAddressResponse.Validate if the designated constraints
// aren't met.
type CreateLabeledAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLabeledAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLabeledAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLabeledAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLabeledAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLabeledAddressResponseValidationError) ErrorName() string {
	return "CreateLabeledAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLabeledAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLabeledAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLabeledAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLabeledAddressResponseValidationError{}

// Validate checks the field values on UpdateLabeledAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLabeledAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLabeledAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLabeledAddressRequestMultiError, or nil if none found.
func (m *UpdateLabeledAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLabeledAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateLabeledAddressRequest_LabeledAddressId_Pattern.MatchString(m.GetLabeledAddressId()) {
		err := UpdateLabeledAddressRequestValidationError{
			field:  "LabeledAddressId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 40 {
		err := UpdateLabeledAddressRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateLabeledAddressRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		err := UpdateLabeledAddressRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := UpdateLabeledAddressRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Address

	if m.Network != nil {

		if _, ok := gincoincglobalv1.Network_name[int32(m.GetNetwork())]; !ok {
			err := UpdateLabeledAddressRequestValidationError{
				field:  "Network",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateLabeledAddressRequestMultiError(errors)
	}

	return nil
}

// UpdateLabeledAddressRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateLabeledAddressRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateLabeledAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLabeledAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLabeledAddressRequestMultiError) AllErrors() []error { return m }

// UpdateLabeledAddressRequestValidationError is the validation error returned
// by UpdateLabeledAddressRequest.Validate if the designated constraints
// aren't met.
type UpdateLabeledAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLabeledAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLabeledAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLabeledAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLabeledAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLabeledAddressRequestValidationError) ErrorName() string {
	return "UpdateLabeledAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLabeledAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLabeledAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLabeledAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLabeledAddressRequestValidationError{}

var _UpdateLabeledAddressRequest_LabeledAddressId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _UpdateLabeledAddressRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

// Validate checks the field values on GetLabeledAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLabeledAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLabeledAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLabeledAddressRequestMultiError, or nil if none found.
func (m *GetLabeledAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLabeledAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetLabeledAddressRequest_LabeledAddressId_Pattern.MatchString(m.GetLabeledAddressId()) {
		err := GetLabeledAddressRequestValidationError{
			field:  "LabeledAddressId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLabeledAddressRequestMultiError(errors)
	}

	return nil
}

// GetLabeledAddressRequestMultiError is an error wrapping multiple validation
// errors returned by GetLabeledAddressRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLabeledAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLabeledAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLabeledAddressRequestMultiError) AllErrors() []error { return m }

// GetLabeledAddressRequestValidationError is the validation error returned by
// GetLabeledAddressRequest.Validate if the designated constraints aren't met.
type GetLabeledAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLabeledAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLabeledAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLabeledAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLabeledAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLabeledAddressRequestValidationError) ErrorName() string {
	return "GetLabeledAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLabeledAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLabeledAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLabeledAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLabeledAddressRequestValidationError{}

var _GetLabeledAddressRequest_LabeledAddressId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListLabeledAddressesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLabeledAddressesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLabeledAddressesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLabeledAddressesRequestMultiError, or nil if none found.
func (m *ListLabeledAddressesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLabeledAddressesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListLabeledAddressesRequestMultiError(errors)
	}

	return nil
}

// ListLabeledAddressesRequestMultiError is an error wrapping multiple
// validation errors returned by ListLabeledAddressesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListLabeledAddressesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLabeledAddressesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLabeledAddressesRequestMultiError) AllErrors() []error { return m }

// ListLabeledAddressesRequestValidationError is the validation error returned
// by ListLabeledAddressesRequest.Validate if the designated constraints
// aren't met.
type ListLabeledAddressesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLabeledAddressesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLabeledAddressesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLabeledAddressesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLabeledAddressesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLabeledAddressesRequestValidationError) ErrorName() string {
	return "ListLabeledAddressesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLabeledAddressesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLabeledAddressesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLabeledAddressesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLabeledAddressesRequestValidationError{}

// Validate checks the field values on ListLabeledAddressesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLabeledAddressesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLabeledAddressesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLabeledAddressesResponseMultiError, or nil if none found.
func (m *ListLabeledAddressesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLabeledAddressesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLabeledAddressesResponseValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLabeledAddressesResponseValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLabeledAddressesResponseValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLabeledAddressesResponseMultiError(errors)
	}

	return nil
}

// ListLabeledAddressesResponseMultiError is an error wrapping multiple
// validation errors returned by ListLabeledAddressesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListLabeledAddressesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLabeledAddressesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLabeledAddressesResponseMultiError) AllErrors() []error { return m }

// ListLabeledAddressesResponseValidationError is the validation error returned
// by ListLabeledAddressesResponse.Validate if the designated constraints
// aren't met.
type ListLabeledAddressesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLabeledAddressesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLabeledAddressesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLabeledAddressesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLabeledAddressesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLabeledAddressesResponseValidationError) ErrorName() string {
	return "ListLabeledAddressesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLabeledAddressesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLabeledAddressesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLabeledAddressesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLabeledAddressesResponseValidationError{}

// Validate checks the field values on ListLabeledAddressesByFilterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListLabeledAddressesByFilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLabeledAddressesByFilterRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListLabeledAddressesByFilterRequestMultiError, or nil if none found.
func (m *ListLabeledAddressesByFilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLabeledAddressesByFilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := ListFilterType_name[int32(m.GetFilterType())]; !ok {
		err := ListLabeledAddressesByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListLabeledAddressesByFilterRequest_AddressId_Pattern.MatchString(m.GetAddressId()) {
		err := ListLabeledAddressesByFilterRequestValidationError{
			field:  "AddressId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Address

	if utf8.RuneCountInString(m.GetAddressName()) > 40 {
		err := ListLabeledAddressesByFilterRequestValidationError{
			field:  "AddressName",
			reason: "value length must be at most 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := ListLabeledAddressesByFilterRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() > 100 {
		err := ListLabeledAddressesByFilterRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListLabeledAddressesByFilterRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		err := ListLabeledAddressesByFilterRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Network != nil {

		if _, ok := gincoincglobalv1.Network_name[int32(m.GetNetwork())]; !ok {
			err := ListLabeledAddressesByFilterRequestValidationError{
				field:  "Network",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListLabeledAddressesByFilterRequestMultiError(errors)
	}

	return nil
}

// ListLabeledAddressesByFilterRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListLabeledAddressesByFilterRequest.ValidateAll() if the designated
// constraints aren't met.
type ListLabeledAddressesByFilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLabeledAddressesByFilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLabeledAddressesByFilterRequestMultiError) AllErrors() []error { return m }

// ListLabeledAddressesByFilterRequestValidationError is the validation error
// returned by ListLabeledAddressesByFilterRequest.Validate if the designated
// constraints aren't met.
type ListLabeledAddressesByFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLabeledAddressesByFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLabeledAddressesByFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLabeledAddressesByFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLabeledAddressesByFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLabeledAddressesByFilterRequestValidationError) ErrorName() string {
	return "ListLabeledAddressesByFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLabeledAddressesByFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLabeledAddressesByFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLabeledAddressesByFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLabeledAddressesByFilterRequestValidationError{}

var _ListLabeledAddressesByFilterRequest_AddressId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ListLabeledAddressesByFilterRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListLabeledAddressesByFilterResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListLabeledAddressesByFilterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLabeledAddressesByFilterResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListLabeledAddressesByFilterResponseMultiError, or nil if none found.
func (m *ListLabeledAddressesByFilterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLabeledAddressesByFilterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLabeledAddressesByFilterResponseValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLabeledAddressesByFilterResponseValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLabeledAddressesByFilterResponseValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListLabeledAddressesByFilterResponseMultiError(errors)
	}

	return nil
}

// ListLabeledAddressesByFilterResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListLabeledAddressesByFilterResponse.ValidateAll() if the designated
// constraints aren't met.
type ListLabeledAddressesByFilterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLabeledAddressesByFilterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLabeledAddressesByFilterResponseMultiError) AllErrors() []error { return m }

// ListLabeledAddressesByFilterResponseValidationError is the validation error
// returned by ListLabeledAddressesByFilterResponse.Validate if the designated
// constraints aren't met.
type ListLabeledAddressesByFilterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLabeledAddressesByFilterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLabeledAddressesByFilterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLabeledAddressesByFilterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLabeledAddressesByFilterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLabeledAddressesByFilterResponseValidationError) ErrorName() string {
	return "ListLabeledAddressesByFilterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLabeledAddressesByFilterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLabeledAddressesByFilterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLabeledAddressesByFilterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLabeledAddressesByFilterResponseValidationError{}

// Validate checks the field values on DeleteLabeledAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLabeledAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLabeledAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLabeledAddressRequestMultiError, or nil if none found.
func (m *DeleteLabeledAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLabeledAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_DeleteLabeledAddressRequest_LabeledAddressId_Pattern.MatchString(m.GetLabeledAddressId()) {
		err := DeleteLabeledAddressRequestValidationError{
			field:  "LabeledAddressId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteLabeledAddressRequestMultiError(errors)
	}

	return nil
}

// DeleteLabeledAddressRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteLabeledAddressRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteLabeledAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLabeledAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLabeledAddressRequestMultiError) AllErrors() []error { return m }

// DeleteLabeledAddressRequestValidationError is the validation error returned
// by DeleteLabeledAddressRequest.Validate if the designated constraints
// aren't met.
type DeleteLabeledAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLabeledAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLabeledAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLabeledAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLabeledAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLabeledAddressRequestValidationError) ErrorName() string {
	return "DeleteLabeledAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLabeledAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLabeledAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLabeledAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLabeledAddressRequestValidationError{}

var _DeleteLabeledAddressRequest_LabeledAddressId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ReviewLabeledAddressProposalRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReviewLabeledAddressProposalRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewLabeledAddressProposalRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReviewLabeledAddressProposalRequestMultiError, or nil if none found.
func (m *ReviewLabeledAddressProposalRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewLabeledAddressProposalRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ReviewLabeledAddressProposalRequest_LabeledAddressId_Pattern.MatchString(m.GetLabeledAddressId()) {
		err := ReviewLabeledAddressProposalRequestValidationError{
			field:  "LabeledAddressId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Approve

	if len(errors) > 0 {
		return ReviewLabeledAddressProposalRequestMultiError(errors)
	}

	return nil
}

// ReviewLabeledAddressProposalRequestMultiError is an error wrapping multiple
// validation errors returned by
// ReviewLabeledAddressProposalRequest.ValidateAll() if the designated
// constraints aren't met.
type ReviewLabeledAddressProposalRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewLabeledAddressProposalRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewLabeledAddressProposalRequestMultiError) AllErrors() []error { return m }

// ReviewLabeledAddressProposalRequestValidationError is the validation error
// returned by ReviewLabeledAddressProposalRequest.Validate if the designated
// constraints aren't met.
type ReviewLabeledAddressProposalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewLabeledAddressProposalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewLabeledAddressProposalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewLabeledAddressProposalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewLabeledAddressProposalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewLabeledAddressProposalRequestValidationError) ErrorName() string {
	return "ReviewLabeledAddressProposalRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewLabeledAddressProposalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewLabeledAddressProposalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewLabeledAddressProposalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewLabeledAddressProposalRequestValidationError{}

var _ReviewLabeledAddressProposalRequest_LabeledAddressId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreateWhitelistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWhitelistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWhitelistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWhitelistRequestMultiError, or nil if none found.
func (m *CreateWhitelistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWhitelistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 40 {
		err := CreateWhitelistRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateWhitelistRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		err := CreateWhitelistRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := CreateWhitelistRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_CreateWhitelistRequest_AddressIds_Unique := make(map[string]struct{}, len(m.GetAddressIds()))

	for idx, item := range m.GetAddressIds() {
		_, _ = idx, item

		if _, exists := _CreateWhitelistRequest_AddressIds_Unique[item]; exists {
			err := CreateWhitelistRequestValidationError{
				field:  fmt.Sprintf("AddressIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CreateWhitelistRequest_AddressIds_Unique[item] = struct{}{}
		}

		// no validation rules for AddressIds[idx]
	}

	if m.Network != nil {

		if _, ok := gincoincglobalv1.Network_name[int32(m.GetNetwork())]; !ok {
			err := CreateWhitelistRequestValidationError{
				field:  "Network",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateWhitelistRequestMultiError(errors)
	}

	return nil
}

// CreateWhitelistRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWhitelistRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWhitelistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWhitelistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWhitelistRequestMultiError) AllErrors() []error { return m }

// CreateWhitelistRequestValidationError is the validation error returned by
// CreateWhitelistRequest.Validate if the designated constraints aren't met.
type CreateWhitelistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWhitelistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWhitelistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWhitelistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWhitelistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWhitelistRequestValidationError) ErrorName() string {
	return "CreateWhitelistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWhitelistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWhitelistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWhitelistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWhitelistRequestValidationError{}

var _CreateWhitelistRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

// Validate checks the field values on CreateWhitelistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWhitelistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWhitelistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWhitelistResponseMultiError, or nil if none found.
func (m *CreateWhitelistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWhitelistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WhitelistId

	if len(errors) > 0 {
		return CreateWhitelistResponseMultiError(errors)
	}

	return nil
}

// CreateWhitelistResponseMultiError is an error wrapping multiple validation
// errors returned by CreateWhitelistResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateWhitelistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWhitelistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWhitelistResponseMultiError) AllErrors() []error { return m }

// CreateWhitelistResponseValidationError is the validation error returned by
// CreateWhitelistResponse.Validate if the designated constraints aren't met.
type CreateWhitelistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWhitelistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWhitelistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWhitelistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWhitelistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWhitelistResponseValidationError) ErrorName() string {
	return "CreateWhitelistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWhitelistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWhitelistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWhitelistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWhitelistResponseValidationError{}

// Validate checks the field values on GetWhitelistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWhitelistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWhitelistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWhitelistRequestMultiError, or nil if none found.
func (m *GetWhitelistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWhitelistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetWhitelistRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		err := GetWhitelistRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWhitelistRequestMultiError(errors)
	}

	return nil
}

// GetWhitelistRequestMultiError is an error wrapping multiple validation
// errors returned by GetWhitelistRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWhitelistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWhitelistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWhitelistRequestMultiError) AllErrors() []error { return m }

// GetWhitelistRequestValidationError is the validation error returned by
// GetWhitelistRequest.Validate if the designated constraints aren't met.
type GetWhitelistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWhitelistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWhitelistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWhitelistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWhitelistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWhitelistRequestValidationError) ErrorName() string {
	return "GetWhitelistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWhitelistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWhitelistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWhitelistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWhitelistRequestValidationError{}

var _GetWhitelistRequest_WhitelistId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListWhitelistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWhitelistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWhitelistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWhitelistsRequestMultiError, or nil if none found.
func (m *ListWhitelistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWhitelistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListWhitelistsRequestMultiError(errors)
	}

	return nil
}

// ListWhitelistsRequestMultiError is an error wrapping multiple validation
// errors returned by ListWhitelistsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWhitelistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWhitelistsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWhitelistsRequestMultiError) AllErrors() []error { return m }

// ListWhitelistsRequestValidationError is the validation error returned by
// ListWhitelistsRequest.Validate if the designated constraints aren't met.
type ListWhitelistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWhitelistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWhitelistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWhitelistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWhitelistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWhitelistsRequestValidationError) ErrorName() string {
	return "ListWhitelistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWhitelistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWhitelistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWhitelistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWhitelistsRequestValidationError{}

// Validate checks the field values on ListWhitelistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWhitelistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWhitelistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWhitelistsResponseMultiError, or nil if none found.
func (m *ListWhitelistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWhitelistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWhitelists() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWhitelistsResponseValidationError{
						field:  fmt.Sprintf("Whitelists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWhitelistsResponseValidationError{
						field:  fmt.Sprintf("Whitelists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWhitelistsResponseValidationError{
					field:  fmt.Sprintf("Whitelists[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWhitelistsResponseMultiError(errors)
	}

	return nil
}

// ListWhitelistsResponseMultiError is an error wrapping multiple validation
// errors returned by ListWhitelistsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWhitelistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWhitelistsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWhitelistsResponseMultiError) AllErrors() []error { return m }

// ListWhitelistsResponseValidationError is the validation error returned by
// ListWhitelistsResponse.Validate if the designated constraints aren't met.
type ListWhitelistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWhitelistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWhitelistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWhitelistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWhitelistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWhitelistsResponseValidationError) ErrorName() string {
	return "ListWhitelistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWhitelistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWhitelistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWhitelistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWhitelistsResponseValidationError{}

// Validate checks the field values on ListWhitelistsByFilterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWhitelistsByFilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWhitelistsByFilterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWhitelistsByFilterRequestMultiError, or nil if none found.
func (m *ListWhitelistsByFilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWhitelistsByFilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := ListFilterType_name[int32(m.GetFilterType())]; !ok {
		err := ListWhitelistsByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListWhitelistsByFilterRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		err := ListWhitelistsByFilterRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWhitelistName()) > 40 {
		err := ListWhitelistsByFilterRequestValidationError{
			field:  "WhitelistName",
			reason: "value length must be at most 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := ListWhitelistsByFilterRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() > 100 {
		err := ListWhitelistsByFilterRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListWhitelistsByFilterRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		err := ListWhitelistsByFilterRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Network != nil {

		if _, ok := gincoincglobalv1.Network_name[int32(m.GetNetwork())]; !ok {
			err := ListWhitelistsByFilterRequestValidationError{
				field:  "Network",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListWhitelistsByFilterRequestMultiError(errors)
	}

	return nil
}

// ListWhitelistsByFilterRequestMultiError is an error wrapping multiple
// validation errors returned by ListWhitelistsByFilterRequest.ValidateAll()
// if the designated constraints aren't met.
type ListWhitelistsByFilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWhitelistsByFilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWhitelistsByFilterRequestMultiError) AllErrors() []error { return m }

// ListWhitelistsByFilterRequestValidationError is the validation error
// returned by ListWhitelistsByFilterRequest.Validate if the designated
// constraints aren't met.
type ListWhitelistsByFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWhitelistsByFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWhitelistsByFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWhitelistsByFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWhitelistsByFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWhitelistsByFilterRequestValidationError) ErrorName() string {
	return "ListWhitelistsByFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWhitelistsByFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWhitelistsByFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWhitelistsByFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWhitelistsByFilterRequestValidationError{}

var _ListWhitelistsByFilterRequest_WhitelistId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ListWhitelistsByFilterRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListWhitelistsByFilterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWhitelistsByFilterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWhitelistsByFilterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWhitelistsByFilterResponseMultiError, or nil if none found.
func (m *ListWhitelistsByFilterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWhitelistsByFilterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWhitelists() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWhitelistsByFilterResponseValidationError{
						field:  fmt.Sprintf("Whitelists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWhitelistsByFilterResponseValidationError{
						field:  fmt.Sprintf("Whitelists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWhitelistsByFilterResponseValidationError{
					field:  fmt.Sprintf("Whitelists[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListWhitelistsByFilterResponseMultiError(errors)
	}

	return nil
}

// ListWhitelistsByFilterResponseMultiError is an error wrapping multiple
// validation errors returned by ListWhitelistsByFilterResponse.ValidateAll()
// if the designated constraints aren't met.
type ListWhitelistsByFilterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWhitelistsByFilterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWhitelistsByFilterResponseMultiError) AllErrors() []error { return m }

// ListWhitelistsByFilterResponseValidationError is the validation error
// returned by ListWhitelistsByFilterResponse.Validate if the designated
// constraints aren't met.
type ListWhitelistsByFilterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWhitelistsByFilterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWhitelistsByFilterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWhitelistsByFilterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWhitelistsByFilterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWhitelistsByFilterResponseValidationError) ErrorName() string {
	return "ListWhitelistsByFilterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWhitelistsByFilterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWhitelistsByFilterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWhitelistsByFilterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWhitelistsByFilterResponseValidationError{}

// Validate checks the field values on UpdateWhitelistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWhitelistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWhitelistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWhitelistRequestMultiError, or nil if none found.
func (m *UpdateWhitelistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWhitelistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateWhitelistRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		err := UpdateWhitelistRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 40 {
		err := UpdateWhitelistRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateWhitelistRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		err := UpdateWhitelistRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := UpdateWhitelistRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_UpdateWhitelistRequest_AddressIds_Unique := make(map[string]struct{}, len(m.GetAddressIds()))

	for idx, item := range m.GetAddressIds() {
		_, _ = idx, item

		if _, exists := _UpdateWhitelistRequest_AddressIds_Unique[item]; exists {
			err := UpdateWhitelistRequestValidationError{
				field:  fmt.Sprintf("AddressIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_UpdateWhitelistRequest_AddressIds_Unique[item] = struct{}{}
		}

		// no validation rules for AddressIds[idx]
	}

	if len(errors) > 0 {
		return UpdateWhitelistRequestMultiError(errors)
	}

	return nil
}

// UpdateWhitelistRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWhitelistRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWhitelistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWhitelistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWhitelistRequestMultiError) AllErrors() []error { return m }

// UpdateWhitelistRequestValidationError is the validation error returned by
// UpdateWhitelistRequest.Validate if the designated constraints aren't met.
type UpdateWhitelistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWhitelistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWhitelistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWhitelistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWhitelistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWhitelistRequestValidationError) ErrorName() string {
	return "UpdateWhitelistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWhitelistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWhitelistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWhitelistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWhitelistRequestValidationError{}

var _UpdateWhitelistRequest_WhitelistId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _UpdateWhitelistRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

// Validate checks the field values on UpdateWhitelistAddressesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWhitelistAddressesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWhitelistAddressesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateWhitelistAddressesRequestMultiError, or nil if none found.
func (m *UpdateWhitelistAddressesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWhitelistAddressesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateWhitelistAddressesRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		err := UpdateWhitelistAddressesRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_UpdateWhitelistAddressesRequest_AddressIds_Unique := make(map[string]struct{}, len(m.GetAddressIds()))

	for idx, item := range m.GetAddressIds() {
		_, _ = idx, item

		if _, exists := _UpdateWhitelistAddressesRequest_AddressIds_Unique[item]; exists {
			err := UpdateWhitelistAddressesRequestValidationError{
				field:  fmt.Sprintf("AddressIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_UpdateWhitelistAddressesRequest_AddressIds_Unique[item] = struct{}{}
		}

		// no validation rules for AddressIds[idx]
	}

	if len(errors) > 0 {
		return UpdateWhitelistAddressesRequestMultiError(errors)
	}

	return nil
}

// UpdateWhitelistAddressesRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateWhitelistAddressesRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateWhitelistAddressesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWhitelistAddressesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWhitelistAddressesRequestMultiError) AllErrors() []error { return m }

// UpdateWhitelistAddressesRequestValidationError is the validation error
// returned by UpdateWhitelistAddressesRequest.Validate if the designated
// constraints aren't met.
type UpdateWhitelistAddressesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWhitelistAddressesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWhitelistAddressesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWhitelistAddressesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWhitelistAddressesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWhitelistAddressesRequestValidationError) ErrorName() string {
	return "UpdateWhitelistAddressesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWhitelistAddressesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWhitelistAddressesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWhitelistAddressesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWhitelistAddressesRequestValidationError{}

var _UpdateWhitelistAddressesRequest_WhitelistId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on DeleteWhitelistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWhitelistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWhitelistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWhitelistRequestMultiError, or nil if none found.
func (m *DeleteWhitelistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWhitelistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_DeleteWhitelistRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		err := DeleteWhitelistRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteWhitelistRequestMultiError(errors)
	}

	return nil
}

// DeleteWhitelistRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteWhitelistRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteWhitelistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWhitelistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWhitelistRequestMultiError) AllErrors() []error { return m }

// DeleteWhitelistRequestValidationError is the validation error returned by
// DeleteWhitelistRequest.Validate if the designated constraints aren't met.
type DeleteWhitelistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWhitelistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWhitelistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWhitelistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWhitelistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWhitelistRequestValidationError) ErrorName() string {
	return "DeleteWhitelistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWhitelistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWhitelistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWhitelistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWhitelistRequestValidationError{}

var _DeleteWhitelistRequest_WhitelistId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreateTransferLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransferLimitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransferLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransferLimitRequestMultiError, or nil if none found.
func (m *CreateTransferLimitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransferLimitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 40 {
		err := CreateTransferLimitRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateTransferLimitRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		err := CreateTransferLimitRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := CreateTransferLimitRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTransferLimits()) < 1 {
		err := CreateTransferLimitRequestValidationError{
			field:  "TransferLimits",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTransferLimits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateTransferLimitRequestValidationError{
						field:  fmt.Sprintf("TransferLimits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateTransferLimitRequestValidationError{
						field:  fmt.Sprintf("TransferLimits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateTransferLimitRequestValidationError{
					field:  fmt.Sprintf("TransferLimits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Network != nil {

		if _, ok := gincoincglobalv1.Network_name[int32(m.GetNetwork())]; !ok {
			err := CreateTransferLimitRequestValidationError{
				field:  "Network",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateTransferLimitRequestMultiError(errors)
	}

	return nil
}

// CreateTransferLimitRequestMultiError is an error wrapping multiple
// validation errors returned by CreateTransferLimitRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateTransferLimitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransferLimitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransferLimitRequestMultiError) AllErrors() []error { return m }

// CreateTransferLimitRequestValidationError is the validation error returned
// by CreateTransferLimitRequest.Validate if the designated constraints aren't met.
type CreateTransferLimitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransferLimitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransferLimitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransferLimitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransferLimitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransferLimitRequestValidationError) ErrorName() string {
	return "CreateTransferLimitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransferLimitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransferLimitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransferLimitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransferLimitRequestValidationError{}

var _CreateTransferLimitRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

// Validate checks the field values on CreateTransferLimitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransferLimitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransferLimitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransferLimitResponseMultiError, or nil if none found.
func (m *CreateTransferLimitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransferLimitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransferLimitId

	if len(errors) > 0 {
		return CreateTransferLimitResponseMultiError(errors)
	}

	return nil
}

// CreateTransferLimitResponseMultiError is an error wrapping multiple
// validation errors returned by CreateTransferLimitResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateTransferLimitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransferLimitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransferLimitResponseMultiError) AllErrors() []error { return m }

// CreateTransferLimitResponseValidationError is the validation error returned
// by CreateTransferLimitResponse.Validate if the designated constraints
// aren't met.
type CreateTransferLimitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransferLimitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransferLimitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransferLimitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransferLimitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransferLimitResponseValidationError) ErrorName() string {
	return "CreateTransferLimitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransferLimitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransferLimitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransferLimitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransferLimitResponseValidationError{}

// Validate checks the field values on GetTransferLimitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransferLimitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransferLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransferLimitRequestMultiError, or nil if none found.
func (m *GetTransferLimitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransferLimitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetTransferLimitRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		err := GetTransferLimitRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTransferLimitRequestMultiError(errors)
	}

	return nil
}

// GetTransferLimitRequestMultiError is an error wrapping multiple validation
// errors returned by GetTransferLimitRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTransferLimitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransferLimitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransferLimitRequestMultiError) AllErrors() []error { return m }

// GetTransferLimitRequestValidationError is the validation error returned by
// GetTransferLimitRequest.Validate if the designated constraints aren't met.
type GetTransferLimitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransferLimitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransferLimitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransferLimitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransferLimitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransferLimitRequestValidationError) ErrorName() string {
	return "GetTransferLimitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransferLimitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransferLimitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransferLimitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransferLimitRequestValidationError{}

var _GetTransferLimitRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListTransferLimitsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTransferLimitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransferLimitsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTransferLimitsRequestMultiError, or nil if none found.
func (m *ListTransferLimitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransferLimitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTransferLimitsRequestMultiError(errors)
	}

	return nil
}

// ListTransferLimitsRequestMultiError is an error wrapping multiple validation
// errors returned by ListTransferLimitsRequest.ValidateAll() if the
// designated constraints aren't met.
type ListTransferLimitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransferLimitsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransferLimitsRequestMultiError) AllErrors() []error { return m }

// ListTransferLimitsRequestValidationError is the validation error returned by
// ListTransferLimitsRequest.Validate if the designated constraints aren't met.
type ListTransferLimitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransferLimitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransferLimitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransferLimitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransferLimitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransferLimitsRequestValidationError) ErrorName() string {
	return "ListTransferLimitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransferLimitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransferLimitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransferLimitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransferLimitsRequestValidationError{}

// Validate checks the field values on ListTransferLimitsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTransferLimitsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransferLimitsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTransferLimitsResponseMultiError, or nil if none found.
func (m *ListTransferLimitsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransferLimitsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransferLimits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTransferLimitsResponseValidationError{
						field:  fmt.Sprintf("TransferLimits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTransferLimitsResponseValidationError{
						field:  fmt.Sprintf("TransferLimits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTransferLimitsResponseValidationError{
					field:  fmt.Sprintf("TransferLimits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTransferLimitsResponseMultiError(errors)
	}

	return nil
}

// ListTransferLimitsResponseMultiError is an error wrapping multiple
// validation errors returned by ListTransferLimitsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListTransferLimitsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransferLimitsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransferLimitsResponseMultiError) AllErrors() []error { return m }

// ListTransferLimitsResponseValidationError is the validation error returned
// by ListTransferLimitsResponse.Validate if the designated constraints aren't met.
type ListTransferLimitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransferLimitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransferLimitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransferLimitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransferLimitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransferLimitsResponseValidationError) ErrorName() string {
	return "ListTransferLimitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransferLimitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransferLimitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransferLimitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransferLimitsResponseValidationError{}

// Validate checks the field values on ListTransferLimitsByFilterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTransferLimitsByFilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransferLimitsByFilterRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListTransferLimitsByFilterRequestMultiError, or nil if none found.
func (m *ListTransferLimitsByFilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransferLimitsByFilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := ListFilterType_name[int32(m.GetFilterType())]; !ok {
		err := ListTransferLimitsByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListTransferLimitsByFilterRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		err := ListTransferLimitsByFilterRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTransferLimitName()) > 40 {
		err := ListTransferLimitsByFilterRequestValidationError{
			field:  "TransferLimitName",
			reason: "value length must be at most 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := ListTransferLimitsByFilterRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() > 100 {
		err := ListTransferLimitsByFilterRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListTransferLimitsByFilterRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		err := ListTransferLimitsByFilterRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Network != nil {

		if _, ok := gincoincglobalv1.Network_name[int32(m.GetNetwork())]; !ok {
			err := ListTransferLimitsByFilterRequestValidationError{
				field:  "Network",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListTransferLimitsByFilterRequestMultiError(errors)
	}

	return nil
}

// ListTransferLimitsByFilterRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListTransferLimitsByFilterRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTransferLimitsByFilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransferLimitsByFilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransferLimitsByFilterRequestMultiError) AllErrors() []error { return m }

// ListTransferLimitsByFilterRequestValidationError is the validation error
// returned by ListTransferLimitsByFilterRequest.Validate if the designated
// constraints aren't met.
type ListTransferLimitsByFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransferLimitsByFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransferLimitsByFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransferLimitsByFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransferLimitsByFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransferLimitsByFilterRequestValidationError) ErrorName() string {
	return "ListTransferLimitsByFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransferLimitsByFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransferLimitsByFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransferLimitsByFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransferLimitsByFilterRequestValidationError{}

var _ListTransferLimitsByFilterRequest_TransferLimitId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ListTransferLimitsByFilterRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListTransferLimitsByFilterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTransferLimitsByFilterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransferLimitsByFilterResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListTransferLimitsByFilterResponseMultiError, or nil if none found.
func (m *ListTransferLimitsByFilterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransferLimitsByFilterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransferLimits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTransferLimitsByFilterResponseValidationError{
						field:  fmt.Sprintf("TransferLimits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTransferLimitsByFilterResponseValidationError{
						field:  fmt.Sprintf("TransferLimits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTransferLimitsByFilterResponseValidationError{
					field:  fmt.Sprintf("TransferLimits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListTransferLimitsByFilterResponseMultiError(errors)
	}

	return nil
}

// ListTransferLimitsByFilterResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListTransferLimitsByFilterResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTransferLimitsByFilterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransferLimitsByFilterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransferLimitsByFilterResponseMultiError) AllErrors() []error { return m }

// ListTransferLimitsByFilterResponseValidationError is the validation error
// returned by ListTransferLimitsByFilterResponse.Validate if the designated
// constraints aren't met.
type ListTransferLimitsByFilterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransferLimitsByFilterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransferLimitsByFilterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransferLimitsByFilterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransferLimitsByFilterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransferLimitsByFilterResponseValidationError) ErrorName() string {
	return "ListTransferLimitsByFilterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransferLimitsByFilterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransferLimitsByFilterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransferLimitsByFilterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransferLimitsByFilterResponseValidationError{}

// Validate checks the field values on UpdateTransferLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTransferLimitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTransferLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTransferLimitRequestMultiError, or nil if none found.
func (m *UpdateTransferLimitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTransferLimitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateTransferLimitRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		err := UpdateTransferLimitRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTransferLimits()) < 1 {
		err := UpdateTransferLimitRequestValidationError{
			field:  "TransferLimits",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTransferLimits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateTransferLimitRequestValidationError{
						field:  fmt.Sprintf("TransferLimits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateTransferLimitRequestValidationError{
						field:  fmt.Sprintf("TransferLimits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateTransferLimitRequestValidationError{
					field:  fmt.Sprintf("TransferLimits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateTransferLimitRequestMultiError(errors)
	}

	return nil
}

// UpdateTransferLimitRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateTransferLimitRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateTransferLimitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTransferLimitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTransferLimitRequestMultiError) AllErrors() []error { return m }

// UpdateTransferLimitRequestValidationError is the validation error returned
// by UpdateTransferLimitRequest.Validate if the designated constraints aren't met.
type UpdateTransferLimitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTransferLimitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTransferLimitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTransferLimitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTransferLimitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTransferLimitRequestValidationError) ErrorName() string {
	return "UpdateTransferLimitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTransferLimitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTransferLimitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTransferLimitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTransferLimitRequestValidationError{}

var _UpdateTransferLimitRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on UpdateTransferLimitNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTransferLimitNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTransferLimitNameRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateTransferLimitNameRequestMultiError, or nil if none found.
func (m *UpdateTransferLimitNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTransferLimitNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateTransferLimitNameRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		err := UpdateTransferLimitNameRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 40 {
		err := UpdateTransferLimitNameRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateTransferLimitNameRequestMultiError(errors)
	}

	return nil
}

// UpdateTransferLimitNameRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateTransferLimitNameRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateTransferLimitNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTransferLimitNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTransferLimitNameRequestMultiError) AllErrors() []error { return m }

// UpdateTransferLimitNameRequestValidationError is the validation error
// returned by UpdateTransferLimitNameRequest.Validate if the designated
// constraints aren't met.
type UpdateTransferLimitNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTransferLimitNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTransferLimitNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTransferLimitNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTransferLimitNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTransferLimitNameRequestValidationError) ErrorName() string {
	return "UpdateTransferLimitNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTransferLimitNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTransferLimitNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTransferLimitNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTransferLimitNameRequestValidationError{}

var _UpdateTransferLimitNameRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on DeleteTransferLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTransferLimitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTransferLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTransferLimitRequestMultiError, or nil if none found.
func (m *DeleteTransferLimitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTransferLimitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_DeleteTransferLimitRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		err := DeleteTransferLimitRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteTransferLimitRequestMultiError(errors)
	}

	return nil
}

// DeleteTransferLimitRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteTransferLimitRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteTransferLimitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTransferLimitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTransferLimitRequestMultiError) AllErrors() []error { return m }

// DeleteTransferLimitRequestValidationError is the validation error returned
// by DeleteTransferLimitRequest.Validate if the designated constraints aren't met.
type DeleteTransferLimitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTransferLimitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTransferLimitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTransferLimitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTransferLimitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTransferLimitRequestValidationError) ErrorName() string {
	return "DeleteTransferLimitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTransferLimitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTransferLimitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTransferLimitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTransferLimitRequestValidationError{}

var _DeleteTransferLimitRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ReviewTransferLimitProposalRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReviewTransferLimitProposalRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewTransferLimitProposalRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReviewTransferLimitProposalRequestMultiError, or nil if none found.
func (m *ReviewTransferLimitProposalRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewTransferLimitProposalRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ReviewTransferLimitProposalRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		err := ReviewTransferLimitProposalRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Approve

	if len(errors) > 0 {
		return ReviewTransferLimitProposalRequestMultiError(errors)
	}

	return nil
}

// ReviewTransferLimitProposalRequestMultiError is an error wrapping multiple
// validation errors returned by
// ReviewTransferLimitProposalRequest.ValidateAll() if the designated
// constraints aren't met.
type ReviewTransferLimitProposalRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewTransferLimitProposalRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewTransferLimitProposalRequestMultiError) AllErrors() []error { return m }

// ReviewTransferLimitProposalRequestValidationError is the validation error
// returned by ReviewTransferLimitProposalRequest.Validate if the designated
// constraints aren't met.
type ReviewTransferLimitProposalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewTransferLimitProposalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewTransferLimitProposalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewTransferLimitProposalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewTransferLimitProposalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewTransferLimitProposalRequestValidationError) ErrorName() string {
	return "ReviewTransferLimitProposalRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewTransferLimitProposalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewTransferLimitProposalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewTransferLimitProposalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewTransferLimitProposalRequestValidationError{}

var _ReviewTransferLimitProposalRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePolicyRequestMultiError, or nil if none found.
func (m *CreatePolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 40 {
		err := CreatePolicyRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreatePolicyRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		err := CreatePolicyRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := CreatePolicyRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreatePolicyRequest_Type_NotInLookup[m.GetType()]; ok {
		err := CreatePolicyRequestValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := PolicyType_name[int32(m.GetType())]; !ok {
		err := CreatePolicyRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreatePolicyRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		err := CreatePolicyRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreatePolicyRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		err := CreatePolicyRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Network != nil {

		if _, ok := gincoincglobalv1.Network_name[int32(m.GetNetwork())]; !ok {
			err := CreatePolicyRequestValidationError{
				field:  "Network",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreatePolicyRequestMultiError(errors)
	}

	return nil
}

// CreatePolicyRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePolicyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePolicyRequestMultiError) AllErrors() []error { return m }

// CreatePolicyRequestValidationError is the validation error returned by
// CreatePolicyRequest.Validate if the designated constraints aren't met.
type CreatePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicyRequestValidationError) ErrorName() string {
	return "CreatePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicyRequestValidationError{}

var _CreatePolicyRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

var _CreatePolicyRequest_Type_NotInLookup = map[PolicyType]struct{}{
	0: {},
}

var _CreatePolicyRequest_WhitelistId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _CreatePolicyRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreatePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePolicyResponseMultiError, or nil if none found.
func (m *CreatePolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicyId

	if len(errors) > 0 {
		return CreatePolicyResponseMultiError(errors)
	}

	return nil
}

// CreatePolicyResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePolicyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePolicyResponseMultiError) AllErrors() []error { return m }

// CreatePolicyResponseValidationError is the validation error returned by
// CreatePolicyResponse.Validate if the designated constraints aren't met.
type CreatePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicyResponseValidationError) ErrorName() string {
	return "CreatePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicyResponseValidationError{}

// Validate checks the field values on GetPolicyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPolicyRequestMultiError, or nil if none found.
func (m *GetPolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetPolicyRequest_PolicyId_Pattern.MatchString(m.GetPolicyId()) {
		err := GetPolicyRequestValidationError{
			field:  "PolicyId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPolicyRequestMultiError(errors)
	}

	return nil
}

// GetPolicyRequestMultiError is an error wrapping multiple validation errors
// returned by GetPolicyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPolicyRequestMultiError) AllErrors() []error { return m }

// GetPolicyRequestValidationError is the validation error returned by
// GetPolicyRequest.Validate if the designated constraints aren't met.
type GetPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPolicyRequestValidationError) ErrorName() string { return "GetPolicyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPolicyRequestValidationError{}

var _GetPolicyRequest_PolicyId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListPoliciesByFilterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPoliciesByFilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPoliciesByFilterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPoliciesByFilterRequestMultiError, or nil if none found.
func (m *ListPoliciesByFilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPoliciesByFilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := ListFilterType_name[int32(m.GetFilterType())]; !ok {
		err := ListPoliciesByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListPoliciesByFilterRequest_PolicyId_Pattern.MatchString(m.GetPolicyId()) {
		err := ListPoliciesByFilterRequestValidationError{
			field:  "PolicyId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPolicyName()) > 40 {
		err := ListPoliciesByFilterRequestValidationError{
			field:  "PolicyName",
			reason: "value length must be at most 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := ListPoliciesByFilterRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := PolicyType_name[int32(m.GetPolicyType())]; !ok {
		err := ListPoliciesByFilterRequestValidationError{
			field:  "PolicyType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() > 100 {
		err := ListPoliciesByFilterRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListPoliciesByFilterRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		err := ListPoliciesByFilterRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Network != nil {

		if _, ok := gincoincglobalv1.Network_name[int32(m.GetNetwork())]; !ok {
			err := ListPoliciesByFilterRequestValidationError{
				field:  "Network",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListPoliciesByFilterRequestMultiError(errors)
	}

	return nil
}

// ListPoliciesByFilterRequestMultiError is an error wrapping multiple
// validation errors returned by ListPoliciesByFilterRequest.ValidateAll() if
// the designated constraints aren't met.
type ListPoliciesByFilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPoliciesByFilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPoliciesByFilterRequestMultiError) AllErrors() []error { return m }

// ListPoliciesByFilterRequestValidationError is the validation error returned
// by ListPoliciesByFilterRequest.Validate if the designated constraints
// aren't met.
type ListPoliciesByFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPoliciesByFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPoliciesByFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPoliciesByFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPoliciesByFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPoliciesByFilterRequestValidationError) ErrorName() string {
	return "ListPoliciesByFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPoliciesByFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPoliciesByFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPoliciesByFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPoliciesByFilterRequestValidationError{}

var _ListPoliciesByFilterRequest_PolicyId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ListPoliciesByFilterRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListPoliciesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPoliciesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPoliciesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPoliciesRequestMultiError, or nil if none found.
func (m *ListPoliciesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPoliciesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPoliciesRequestMultiError(errors)
	}

	return nil
}

// ListPoliciesRequestMultiError is an error wrapping multiple validation
// errors returned by ListPoliciesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPoliciesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPoliciesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPoliciesRequestMultiError) AllErrors() []error { return m }

// ListPoliciesRequestValidationError is the validation error returned by
// ListPoliciesRequest.Validate if the designated constraints aren't met.
type ListPoliciesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPoliciesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPoliciesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPoliciesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPoliciesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPoliciesRequestValidationError) ErrorName() string {
	return "ListPoliciesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPoliciesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPoliciesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPoliciesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPoliciesRequestValidationError{}

// Validate checks the field values on IsDeletablePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsDeletablePolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsDeletablePolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsDeletablePolicyRequestMultiError, or nil if none found.
func (m *IsDeletablePolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsDeletablePolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_IsDeletablePolicyRequest_PolicyId_Pattern.MatchString(m.GetPolicyId()) {
		err := IsDeletablePolicyRequestValidationError{
			field:  "PolicyId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IsDeletablePolicyRequestMultiError(errors)
	}

	return nil
}

// IsDeletablePolicyRequestMultiError is an error wrapping multiple validation
// errors returned by IsDeletablePolicyRequest.ValidateAll() if the designated
// constraints aren't met.
type IsDeletablePolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsDeletablePolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsDeletablePolicyRequestMultiError) AllErrors() []error { return m }

// IsDeletablePolicyRequestValidationError is the validation error returned by
// IsDeletablePolicyRequest.Validate if the designated constraints aren't met.
type IsDeletablePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsDeletablePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsDeletablePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsDeletablePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsDeletablePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsDeletablePolicyRequestValidationError) ErrorName() string {
	return "IsDeletablePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsDeletablePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsDeletablePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsDeletablePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsDeletablePolicyRequestValidationError{}

var _IsDeletablePolicyRequest_PolicyId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on IsDeletablePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsDeletablePolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsDeletablePolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsDeletablePolicyResponseMultiError, or nil if none found.
func (m *IsDeletablePolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsDeletablePolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsDeletable

	if len(errors) > 0 {
		return IsDeletablePolicyResponseMultiError(errors)
	}

	return nil
}

// IsDeletablePolicyResponseMultiError is an error wrapping multiple validation
// errors returned by IsDeletablePolicyResponse.ValidateAll() if the
// designated constraints aren't met.
type IsDeletablePolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsDeletablePolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsDeletablePolicyResponseMultiError) AllErrors() []error { return m }

// IsDeletablePolicyResponseValidationError is the validation error returned by
// IsDeletablePolicyResponse.Validate if the designated constraints aren't met.
type IsDeletablePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsDeletablePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsDeletablePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsDeletablePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsDeletablePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsDeletablePolicyResponseValidationError) ErrorName() string {
	return "IsDeletablePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsDeletablePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsDeletablePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsDeletablePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsDeletablePolicyResponseValidationError{}

// Validate checks the field values on IsDeletableLabeledAddressRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IsDeletableLabeledAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsDeletableLabeledAddressRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IsDeletableLabeledAddressRequestMultiError, or nil if none found.
func (m *IsDeletableLabeledAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsDeletableLabeledAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_IsDeletableLabeledAddressRequest_LabeledAddressId_Pattern.MatchString(m.GetLabeledAddressId()) {
		err := IsDeletableLabeledAddressRequestValidationError{
			field:  "LabeledAddressId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IsDeletableLabeledAddressRequestMultiError(errors)
	}

	return nil
}

// IsDeletableLabeledAddressRequestMultiError is an error wrapping multiple
// validation errors returned by
// IsDeletableLabeledAddressRequest.ValidateAll() if the designated
// constraints aren't met.
type IsDeletableLabeledAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsDeletableLabeledAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsDeletableLabeledAddressRequestMultiError) AllErrors() []error { return m }

// IsDeletableLabeledAddressRequestValidationError is the validation error
// returned by IsDeletableLabeledAddressRequest.Validate if the designated
// constraints aren't met.
type IsDeletableLabeledAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsDeletableLabeledAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsDeletableLabeledAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsDeletableLabeledAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsDeletableLabeledAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsDeletableLabeledAddressRequestValidationError) ErrorName() string {
	return "IsDeletableLabeledAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsDeletableLabeledAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsDeletableLabeledAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsDeletableLabeledAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsDeletableLabeledAddressRequestValidationError{}

var _IsDeletableLabeledAddressRequest_LabeledAddressId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on IsDeletableLabeledAddressResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IsDeletableLabeledAddressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsDeletableLabeledAddressResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IsDeletableLabeledAddressResponseMultiError, or nil if none found.
func (m *IsDeletableLabeledAddressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsDeletableLabeledAddressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsDeletable

	if len(errors) > 0 {
		return IsDeletableLabeledAddressResponseMultiError(errors)
	}

	return nil
}

// IsDeletableLabeledAddressResponseMultiError is an error wrapping multiple
// validation errors returned by
// IsDeletableLabeledAddressResponse.ValidateAll() if the designated
// constraints aren't met.
type IsDeletableLabeledAddressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsDeletableLabeledAddressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsDeletableLabeledAddressResponseMultiError) AllErrors() []error { return m }

// IsDeletableLabeledAddressResponseValidationError is the validation error
// returned by IsDeletableLabeledAddressResponse.Validate if the designated
// constraints aren't met.
type IsDeletableLabeledAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsDeletableLabeledAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsDeletableLabeledAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsDeletableLabeledAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsDeletableLabeledAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsDeletableLabeledAddressResponseValidationError) ErrorName() string {
	return "IsDeletableLabeledAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsDeletableLabeledAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsDeletableLabeledAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsDeletableLabeledAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsDeletableLabeledAddressResponseValidationError{}

// Validate checks the field values on IsDeletableWhitelistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsDeletableWhitelistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsDeletableWhitelistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsDeletableWhitelistRequestMultiError, or nil if none found.
func (m *IsDeletableWhitelistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsDeletableWhitelistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_IsDeletableWhitelistRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		err := IsDeletableWhitelistRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IsDeletableWhitelistRequestMultiError(errors)
	}

	return nil
}

// IsDeletableWhitelistRequestMultiError is an error wrapping multiple
// validation errors returned by IsDeletableWhitelistRequest.ValidateAll() if
// the designated constraints aren't met.
type IsDeletableWhitelistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsDeletableWhitelistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsDeletableWhitelistRequestMultiError) AllErrors() []error { return m }

// IsDeletableWhitelistRequestValidationError is the validation error returned
// by IsDeletableWhitelistRequest.Validate if the designated constraints
// aren't met.
type IsDeletableWhitelistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsDeletableWhitelistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsDeletableWhitelistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsDeletableWhitelistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsDeletableWhitelistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsDeletableWhitelistRequestValidationError) ErrorName() string {
	return "IsDeletableWhitelistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsDeletableWhitelistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsDeletableWhitelistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsDeletableWhitelistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsDeletableWhitelistRequestValidationError{}

var _IsDeletableWhitelistRequest_WhitelistId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on IsDeletableWhitelistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsDeletableWhitelistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsDeletableWhitelistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsDeletableWhitelistResponseMultiError, or nil if none found.
func (m *IsDeletableWhitelistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsDeletableWhitelistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsDeletable

	if len(errors) > 0 {
		return IsDeletableWhitelistResponseMultiError(errors)
	}

	return nil
}

// IsDeletableWhitelistResponseMultiError is an error wrapping multiple
// validation errors returned by IsDeletableWhitelistResponse.ValidateAll() if
// the designated constraints aren't met.
type IsDeletableWhitelistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsDeletableWhitelistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsDeletableWhitelistResponseMultiError) AllErrors() []error { return m }

// IsDeletableWhitelistResponseValidationError is the validation error returned
// by IsDeletableWhitelistResponse.Validate if the designated constraints
// aren't met.
type IsDeletableWhitelistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsDeletableWhitelistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsDeletableWhitelistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsDeletableWhitelistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsDeletableWhitelistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsDeletableWhitelistResponseValidationError) ErrorName() string {
	return "IsDeletableWhitelistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsDeletableWhitelistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsDeletableWhitelistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsDeletableWhitelistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsDeletableWhitelistResponseValidationError{}

// Validate checks the field values on IsDeletableTransferLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsDeletableTransferLimitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsDeletableTransferLimitRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IsDeletableTransferLimitRequestMultiError, or nil if none found.
func (m *IsDeletableTransferLimitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsDeletableTransferLimitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_IsDeletableTransferLimitRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		err := IsDeletableTransferLimitRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IsDeletableTransferLimitRequestMultiError(errors)
	}

	return nil
}

// IsDeletableTransferLimitRequestMultiError is an error wrapping multiple
// validation errors returned by IsDeletableTransferLimitRequest.ValidateAll()
// if the designated constraints aren't met.
type IsDeletableTransferLimitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsDeletableTransferLimitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsDeletableTransferLimitRequestMultiError) AllErrors() []error { return m }

// IsDeletableTransferLimitRequestValidationError is the validation error
// returned by IsDeletableTransferLimitRequest.Validate if the designated
// constraints aren't met.
type IsDeletableTransferLimitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsDeletableTransferLimitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsDeletableTransferLimitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsDeletableTransferLimitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsDeletableTransferLimitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsDeletableTransferLimitRequestValidationError) ErrorName() string {
	return "IsDeletableTransferLimitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsDeletableTransferLimitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsDeletableTransferLimitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsDeletableTransferLimitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsDeletableTransferLimitRequestValidationError{}

var _IsDeletableTransferLimitRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on IsDeletableTransferLimitResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IsDeletableTransferLimitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsDeletableTransferLimitResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IsDeletableTransferLimitResponseMultiError, or nil if none found.
func (m *IsDeletableTransferLimitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsDeletableTransferLimitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsDeletable

	if len(errors) > 0 {
		return IsDeletableTransferLimitResponseMultiError(errors)
	}

	return nil
}

// IsDeletableTransferLimitResponseMultiError is an error wrapping multiple
// validation errors returned by
// IsDeletableTransferLimitResponse.ValidateAll() if the designated
// constraints aren't met.
type IsDeletableTransferLimitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsDeletableTransferLimitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsDeletableTransferLimitResponseMultiError) AllErrors() []error { return m }

// IsDeletableTransferLimitResponseValidationError is the validation error
// returned by IsDeletableTransferLimitResponse.Validate if the designated
// constraints aren't met.
type IsDeletableTransferLimitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsDeletableTransferLimitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsDeletableTransferLimitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsDeletableTransferLimitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsDeletableTransferLimitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsDeletableTransferLimitResponseValidationError) ErrorName() string {
	return "IsDeletableTransferLimitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsDeletableTransferLimitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsDeletableTransferLimitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsDeletableTransferLimitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsDeletableTransferLimitResponseValidationError{}

// Validate checks the field values on ListPoliciesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPoliciesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPoliciesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPoliciesResponseMultiError, or nil if none found.
func (m *ListPoliciesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPoliciesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPoliciesResponseValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPoliciesResponseValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPoliciesResponseValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPoliciesResponseMultiError(errors)
	}

	return nil
}

// ListPoliciesResponseMultiError is an error wrapping multiple validation
// errors returned by ListPoliciesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPoliciesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPoliciesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPoliciesResponseMultiError) AllErrors() []error { return m }

// ListPoliciesResponseValidationError is the validation error returned by
// ListPoliciesResponse.Validate if the designated constraints aren't met.
type ListPoliciesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPoliciesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPoliciesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPoliciesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPoliciesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPoliciesResponseValidationError) ErrorName() string {
	return "ListPoliciesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPoliciesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPoliciesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPoliciesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPoliciesResponseValidationError{}

// Validate checks the field values on ListPoliciesByFilterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPoliciesByFilterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPoliciesByFilterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPoliciesByFilterResponseMultiError, or nil if none found.
func (m *ListPoliciesByFilterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPoliciesByFilterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPoliciesByFilterResponseValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPoliciesByFilterResponseValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPoliciesByFilterResponseValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListPoliciesByFilterResponseMultiError(errors)
	}

	return nil
}

// ListPoliciesByFilterResponseMultiError is an error wrapping multiple
// validation errors returned by ListPoliciesByFilterResponse.ValidateAll() if
// the designated constraints aren't met.
type ListPoliciesByFilterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPoliciesByFilterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPoliciesByFilterResponseMultiError) AllErrors() []error { return m }

// ListPoliciesByFilterResponseValidationError is the validation error returned
// by ListPoliciesByFilterResponse.Validate if the designated constraints
// aren't met.
type ListPoliciesByFilterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPoliciesByFilterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPoliciesByFilterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPoliciesByFilterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPoliciesByFilterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPoliciesByFilterResponseValidationError) ErrorName() string {
	return "ListPoliciesByFilterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPoliciesByFilterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPoliciesByFilterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPoliciesByFilterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPoliciesByFilterResponseValidationError{}

// Validate checks the field values on UpdatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePolicyRequestMultiError, or nil if none found.
func (m *UpdatePolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdatePolicyRequest_PolicyId_Pattern.MatchString(m.GetPolicyId()) {
		err := UpdatePolicyRequestValidationError{
			field:  "PolicyId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 40 {
		err := UpdatePolicyRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdatePolicyRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		err := UpdatePolicyRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdatePolicyRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		err := UpdatePolicyRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdatePolicyRequestMultiError(errors)
	}

	return nil
}

// UpdatePolicyRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePolicyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePolicyRequestMultiError) AllErrors() []error { return m }

// UpdatePolicyRequestValidationError is the validation error returned by
// UpdatePolicyRequest.Validate if the designated constraints aren't met.
type UpdatePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePolicyRequestValidationError) ErrorName() string {
	return "UpdatePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePolicyRequestValidationError{}

var _UpdatePolicyRequest_PolicyId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _UpdatePolicyRequest_WhitelistId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _UpdatePolicyRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on DeletePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePolicyRequestMultiError, or nil if none found.
func (m *DeletePolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_DeletePolicyRequest_PolicyId_Pattern.MatchString(m.GetPolicyId()) {
		err := DeletePolicyRequestValidationError{
			field:  "PolicyId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeletePolicyRequestMultiError(errors)
	}

	return nil
}

// DeletePolicyRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePolicyRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePolicyRequestMultiError) AllErrors() []error { return m }

// DeletePolicyRequestValidationError is the validation error returned by
// DeletePolicyRequest.Validate if the designated constraints aren't met.
type DeletePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePolicyRequestValidationError) ErrorName() string {
	return "DeletePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePolicyRequestValidationError{}

var _DeletePolicyRequest_PolicyId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ReviewPolicyProposalRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReviewPolicyProposalRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewPolicyProposalRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReviewPolicyProposalRequestMultiError, or nil if none found.
func (m *ReviewPolicyProposalRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewPolicyProposalRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ReviewPolicyProposalRequest_PolicyId_Pattern.MatchString(m.GetPolicyId()) {
		err := ReviewPolicyProposalRequestValidationError{
			field:  "PolicyId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Approve

	if len(errors) > 0 {
		return ReviewPolicyProposalRequestMultiError(errors)
	}

	return nil
}

// ReviewPolicyProposalRequestMultiError is an error wrapping multiple
// validation errors returned by ReviewPolicyProposalRequest.ValidateAll() if
// the designated constraints aren't met.
type ReviewPolicyProposalRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewPolicyProposalRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewPolicyProposalRequestMultiError) AllErrors() []error { return m }

// ReviewPolicyProposalRequestValidationError is the validation error returned
// by ReviewPolicyProposalRequest.Validate if the designated constraints
// aren't met.
type ReviewPolicyProposalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewPolicyProposalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewPolicyProposalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewPolicyProposalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewPolicyProposalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewPolicyProposalRequestValidationError) ErrorName() string {
	return "ReviewPolicyProposalRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewPolicyProposalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewPolicyProposalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewPolicyProposalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewPolicyProposalRequestValidationError{}

var _ReviewPolicyProposalRequest_PolicyId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListSubstrateChildAddressesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListSubstrateChildAddressesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubstrateChildAddressesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListSubstrateChildAddressesRequestMultiError, or nil if none found.
func (m *ListSubstrateChildAddressesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubstrateChildAddressesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListSubstrateChildAddressesRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ListSubstrateChildAddressesRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListSubstrateChildAddressesRequestMultiError(errors)
	}

	return nil
}

// ListSubstrateChildAddressesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListSubstrateChildAddressesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSubstrateChildAddressesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubstrateChildAddressesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubstrateChildAddressesRequestMultiError) AllErrors() []error { return m }

// ListSubstrateChildAddressesRequestValidationError is the validation error
// returned by ListSubstrateChildAddressesRequest.Validate if the designated
// constraints aren't met.
type ListSubstrateChildAddressesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubstrateChildAddressesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubstrateChildAddressesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubstrateChildAddressesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubstrateChildAddressesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubstrateChildAddressesRequestValidationError) ErrorName() string {
	return "ListSubstrateChildAddressesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubstrateChildAddressesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubstrateChildAddressesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubstrateChildAddressesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubstrateChildAddressesRequestValidationError{}

var _ListSubstrateChildAddressesRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListSubstrateChildAddressesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListSubstrateChildAddressesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubstrateChildAddressesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListSubstrateChildAddressesResponseMultiError, or nil if none found.
func (m *ListSubstrateChildAddressesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubstrateChildAddressesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubstrateChildAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSubstrateChildAddressesResponseValidationError{
						field:  fmt.Sprintf("SubstrateChildAddresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSubstrateChildAddressesResponseValidationError{
						field:  fmt.Sprintf("SubstrateChildAddresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSubstrateChildAddressesResponseValidationError{
					field:  fmt.Sprintf("SubstrateChildAddresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSubstrateChildAddressesResponseMultiError(errors)
	}

	return nil
}

// ListSubstrateChildAddressesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListSubstrateChildAddressesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSubstrateChildAddressesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubstrateChildAddressesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubstrateChildAddressesResponseMultiError) AllErrors() []error { return m }

// ListSubstrateChildAddressesResponseValidationError is the validation error
// returned by ListSubstrateChildAddressesResponse.Validate if the designated
// constraints aren't met.
type ListSubstrateChildAddressesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubstrateChildAddressesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubstrateChildAddressesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubstrateChildAddressesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubstrateChildAddressesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubstrateChildAddressesResponseValidationError) ErrorName() string {
	return "ListSubstrateChildAddressesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubstrateChildAddressesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubstrateChildAddressesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubstrateChildAddressesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubstrateChildAddressesResponseValidationError{}

// Validate checks the field values on ListSymbolChildAddressesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSymbolChildAddressesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSymbolChildAddressesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListSymbolChildAddressesRequestMultiError, or nil if none found.
func (m *ListSymbolChildAddressesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSymbolChildAddressesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListSymbolChildAddressesRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ListSymbolChildAddressesRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListSymbolChildAddressesRequestMultiError(errors)
	}

	return nil
}

// ListSymbolChildAddressesRequestMultiError is an error wrapping multiple
// validation errors returned by ListSymbolChildAddressesRequest.ValidateAll()
// if the designated constraints aren't met.
type ListSymbolChildAddressesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSymbolChildAddressesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSymbolChildAddressesRequestMultiError) AllErrors() []error { return m }

// ListSymbolChildAddressesRequestValidationError is the validation error
// returned by ListSymbolChildAddressesRequest.Validate if the designated
// constraints aren't met.
type ListSymbolChildAddressesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSymbolChildAddressesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSymbolChildAddressesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSymbolChildAddressesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSymbolChildAddressesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSymbolChildAddressesRequestValidationError) ErrorName() string {
	return "ListSymbolChildAddressesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSymbolChildAddressesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSymbolChildAddressesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSymbolChildAddressesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSymbolChildAddressesRequestValidationError{}

var _ListSymbolChildAddressesRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListSymbolChildAddressesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListSymbolChildAddressesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSymbolChildAddressesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListSymbolChildAddressesResponseMultiError, or nil if none found.
func (m *ListSymbolChildAddressesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSymbolChildAddressesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSymbolChildAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSymbolChildAddressesResponseValidationError{
						field:  fmt.Sprintf("SymbolChildAddresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSymbolChildAddressesResponseValidationError{
						field:  fmt.Sprintf("SymbolChildAddresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSymbolChildAddressesResponseValidationError{
					field:  fmt.Sprintf("SymbolChildAddresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSymbolChildAddressesResponseMultiError(errors)
	}

	return nil
}

// ListSymbolChildAddressesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListSymbolChildAddressesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSymbolChildAddressesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSymbolChildAddressesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSymbolChildAddressesResponseMultiError) AllErrors() []error { return m }

// ListSymbolChildAddressesResponseValidationError is the validation error
// returned by ListSymbolChildAddressesResponse.Validate if the designated
// constraints aren't met.
type ListSymbolChildAddressesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSymbolChildAddressesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSymbolChildAddressesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSymbolChildAddressesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSymbolChildAddressesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSymbolChildAddressesResponseValidationError) ErrorName() string {
	return "ListSymbolChildAddressesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSymbolChildAddressesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSymbolChildAddressesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSymbolChildAddressesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSymbolChildAddressesResponseValidationError{}

// Validate checks the field values on ListIOSTChildAccountsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIOSTChildAccountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIOSTChildAccountsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIOSTChildAccountsRequestMultiError, or nil if none found.
func (m *ListIOSTChildAccountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIOSTChildAccountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListIOSTChildAccountsRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ListIOSTChildAccountsRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListIOSTChildAccountsRequestMultiError(errors)
	}

	return nil
}

// ListIOSTChildAccountsRequestMultiError is an error wrapping multiple
// validation errors returned by ListIOSTChildAccountsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListIOSTChildAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIOSTChildAccountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIOSTChildAccountsRequestMultiError) AllErrors() []error { return m }

// ListIOSTChildAccountsRequestValidationError is the validation error returned
// by ListIOSTChildAccountsRequest.Validate if the designated constraints
// aren't met.
type ListIOSTChildAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIOSTChildAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIOSTChildAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIOSTChildAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIOSTChildAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIOSTChildAccountsRequestValidationError) ErrorName() string {
	return "ListIOSTChildAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListIOSTChildAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIOSTChildAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIOSTChildAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIOSTChildAccountsRequestValidationError{}

var _ListIOSTChildAccountsRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListIOSTChildAccountsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIOSTChildAccountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIOSTChildAccountsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListIOSTChildAccountsResponseMultiError, or nil if none found.
func (m *ListIOSTChildAccountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIOSTChildAccountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIostChildAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListIOSTChildAccountsResponseValidationError{
						field:  fmt.Sprintf("IostChildAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListIOSTChildAccountsResponseValidationError{
						field:  fmt.Sprintf("IostChildAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIOSTChildAccountsResponseValidationError{
					field:  fmt.Sprintf("IostChildAccounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListIOSTChildAccountsResponseMultiError(errors)
	}

	return nil
}

// ListIOSTChildAccountsResponseMultiError is an error wrapping multiple
// validation errors returned by ListIOSTChildAccountsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListIOSTChildAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIOSTChildAccountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIOSTChildAccountsResponseMultiError) AllErrors() []error { return m }

// ListIOSTChildAccountsResponseValidationError is the validation error
// returned by ListIOSTChildAccountsResponse.Validate if the designated
// constraints aren't met.
type ListIOSTChildAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIOSTChildAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIOSTChildAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIOSTChildAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIOSTChildAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIOSTChildAccountsResponseValidationError) ErrorName() string {
	return "ListIOSTChildAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListIOSTChildAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIOSTChildAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIOSTChildAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIOSTChildAccountsResponseValidationError{}

// Validate checks the field values on DownloadResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadResourceRequestMultiError, or nil if none found.
func (m *DownloadResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DownloadResourceType

	// no validation rules for WatchOnly

	// no validation rules for WalletId

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DownloadResourceRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DownloadResourceRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DownloadResourceRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DownloadResourceRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DownloadResourceRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DownloadResourceRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DownloadResourceRequestMultiError(errors)
	}

	return nil
}

// DownloadResourceRequestMultiError is an error wrapping multiple validation
// errors returned by DownloadResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type DownloadResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadResourceRequestMultiError) AllErrors() []error { return m }

// DownloadResourceRequestValidationError is the validation error returned by
// DownloadResourceRequest.Validate if the designated constraints aren't met.
type DownloadResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadResourceRequestValidationError) ErrorName() string {
	return "DownloadResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadResourceRequestValidationError{}

// Validate checks the field values on ExitEthereumStakingValidatorsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ExitEthereumStakingValidatorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExitEthereumStakingValidatorsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ExitEthereumStakingValidatorsRequestMultiError, or nil if none found.
func (m *ExitEthereumStakingValidatorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExitEthereumStakingValidatorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ExitEthereumStakingValidatorsRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := ExitEthereumStakingValidatorsRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExitEthereumStakingValidatorsRequestMultiError(errors)
	}

	return nil
}

// ExitEthereumStakingValidatorsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ExitEthereumStakingValidatorsRequest.ValidateAll() if the designated
// constraints aren't met.
type ExitEthereumStakingValidatorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExitEthereumStakingValidatorsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExitEthereumStakingValidatorsRequestMultiError) AllErrors() []error { return m }

// ExitEthereumStakingValidatorsRequestValidationError is the validation error
// returned by ExitEthereumStakingValidatorsRequest.Validate if the designated
// constraints aren't met.
type ExitEthereumStakingValidatorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExitEthereumStakingValidatorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExitEthereumStakingValidatorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExitEthereumStakingValidatorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExitEthereumStakingValidatorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExitEthereumStakingValidatorsRequestValidationError) ErrorName() string {
	return "ExitEthereumStakingValidatorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExitEthereumStakingValidatorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExitEthereumStakingValidatorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExitEthereumStakingValidatorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExitEthereumStakingValidatorsRequestValidationError{}

var _ExitEthereumStakingValidatorsRequest_WalletId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ExitEthereumStakingValidatorsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ExitEthereumStakingValidatorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExitEthereumStakingValidatorsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ExitEthereumStakingValidatorsResponseMultiError, or nil if none found.
func (m *ExitEthereumStakingValidatorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExitEthereumStakingValidatorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ExitEthereumStakingValidatorsResponseMultiError(errors)
	}

	return nil
}

// ExitEthereumStakingValidatorsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ExitEthereumStakingValidatorsResponse.ValidateAll() if the designated
// constraints aren't met.
type ExitEthereumStakingValidatorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExitEthereumStakingValidatorsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExitEthereumStakingValidatorsResponseMultiError) AllErrors() []error { return m }

// ExitEthereumStakingValidatorsResponseValidationError is the validation error
// returned by ExitEthereumStakingValidatorsResponse.Validate if the
// designated constraints aren't met.
type ExitEthereumStakingValidatorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExitEthereumStakingValidatorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExitEthereumStakingValidatorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExitEthereumStakingValidatorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExitEthereumStakingValidatorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExitEthereumStakingValidatorsResponseValidationError) ErrorName() string {
	return "ExitEthereumStakingValidatorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExitEthereumStakingValidatorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExitEthereumStakingValidatorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExitEthereumStakingValidatorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExitEthereumStakingValidatorsResponseValidationError{}

// Validate checks the field values on CreateIOSTAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateIOSTAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIOSTAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIOSTAccountRequestMultiError, or nil if none found.
func (m *CreateIOSTAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIOSTAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreateIOSTAccountRequest_AccountName_Pattern.MatchString(m.GetAccountName()) {
		err := CreateIOSTAccountRequestValidationError{
			field:  "AccountName",
			reason: "value does not match regex pattern \"^([a-z0-9_]{5,11})$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WalletId

	// no validation rules for AccountId

	if len(errors) > 0 {
		return CreateIOSTAccountRequestMultiError(errors)
	}

	return nil
}

// CreateIOSTAccountRequestMultiError is an error wrapping multiple validation
// errors returned by CreateIOSTAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateIOSTAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIOSTAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIOSTAccountRequestMultiError) AllErrors() []error { return m }

// CreateIOSTAccountRequestValidationError is the validation error returned by
// CreateIOSTAccountRequest.Validate if the designated constraints aren't met.
type CreateIOSTAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIOSTAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIOSTAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIOSTAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIOSTAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIOSTAccountRequestValidationError) ErrorName() string {
	return "CreateIOSTAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIOSTAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIOSTAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIOSTAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIOSTAccountRequestValidationError{}

var _CreateIOSTAccountRequest_AccountName_Pattern = regexp.MustCompile("^([a-z0-9_]{5,11})$")

// Validate checks the field values on CreateIOSTAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateIOSTAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIOSTAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIOSTAccountResponseMultiError, or nil if none found.
func (m *CreateIOSTAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIOSTAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddressId

	if len(errors) > 0 {
		return CreateIOSTAccountResponseMultiError(errors)
	}

	return nil
}

// CreateIOSTAccountResponseMultiError is an error wrapping multiple validation
// errors returned by CreateIOSTAccountResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateIOSTAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIOSTAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIOSTAccountResponseMultiError) AllErrors() []error { return m }

// CreateIOSTAccountResponseValidationError is the validation error returned by
// CreateIOSTAccountResponse.Validate if the designated constraints aren't met.
type CreateIOSTAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIOSTAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIOSTAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIOSTAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIOSTAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIOSTAccountResponseValidationError) ErrorName() string {
	return "CreateIOSTAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIOSTAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIOSTAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIOSTAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIOSTAccountResponseValidationError{}

// Validate checks the field values on ExistsIOSTAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExistsIOSTAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistsIOSTAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExistsIOSTAccountRequestMultiError, or nil if none found.
func (m *ExistsIOSTAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistsIOSTAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ExistsIOSTAccountRequest_AccountName_Pattern.MatchString(m.GetAccountName()) {
		err := ExistsIOSTAccountRequestValidationError{
			field:  "AccountName",
			reason: "value does not match regex pattern \"^([a-z0-9_]{5,11})$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExistsIOSTAccountRequestMultiError(errors)
	}

	return nil
}

// ExistsIOSTAccountRequestMultiError is an error wrapping multiple validation
// errors returned by ExistsIOSTAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type ExistsIOSTAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistsIOSTAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistsIOSTAccountRequestMultiError) AllErrors() []error { return m }

// ExistsIOSTAccountRequestValidationError is the validation error returned by
// ExistsIOSTAccountRequest.Validate if the designated constraints aren't met.
type ExistsIOSTAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistsIOSTAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistsIOSTAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistsIOSTAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistsIOSTAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistsIOSTAccountRequestValidationError) ErrorName() string {
	return "ExistsIOSTAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExistsIOSTAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistsIOSTAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistsIOSTAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistsIOSTAccountRequestValidationError{}

var _ExistsIOSTAccountRequest_AccountName_Pattern = regexp.MustCompile("^([a-z0-9_]{5,11})$")

// Validate checks the field values on ExistsIOSTAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExistsIOSTAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistsIOSTAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExistsIOSTAccountResponseMultiError, or nil if none found.
func (m *ExistsIOSTAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistsIOSTAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return ExistsIOSTAccountResponseMultiError(errors)
	}

	return nil
}

// ExistsIOSTAccountResponseMultiError is an error wrapping multiple validation
// errors returned by ExistsIOSTAccountResponse.ValidateAll() if the
// designated constraints aren't met.
type ExistsIOSTAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistsIOSTAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistsIOSTAccountResponseMultiError) AllErrors() []error { return m }

// ExistsIOSTAccountResponseValidationError is the validation error returned by
// ExistsIOSTAccountResponse.Validate if the designated constraints aren't met.
type ExistsIOSTAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistsIOSTAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistsIOSTAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistsIOSTAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistsIOSTAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistsIOSTAccountResponseValidationError) ErrorName() string {
	return "ExistsIOSTAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExistsIOSTAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistsIOSTAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistsIOSTAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistsIOSTAccountResponseValidationError{}

// Validate checks the field values on GetIOSTCallerAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIOSTCallerAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIOSTCallerAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIOSTCallerAccountRequestMultiError, or nil if none found.
func (m *GetIOSTCallerAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIOSTCallerAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetIOSTCallerAccountRequestMultiError(errors)
	}

	return nil
}

// GetIOSTCallerAccountRequestMultiError is an error wrapping multiple
// validation errors returned by GetIOSTCallerAccountRequest.ValidateAll() if
// the designated constraints aren't met.
type GetIOSTCallerAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIOSTCallerAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIOSTCallerAccountRequestMultiError) AllErrors() []error { return m }

// GetIOSTCallerAccountRequestValidationError is the validation error returned
// by GetIOSTCallerAccountRequest.Validate if the designated constraints
// aren't met.
type GetIOSTCallerAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIOSTCallerAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIOSTCallerAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIOSTCallerAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIOSTCallerAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIOSTCallerAccountRequestValidationError) ErrorName() string {
	return "GetIOSTCallerAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIOSTCallerAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIOSTCallerAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIOSTCallerAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIOSTCallerAccountRequestValidationError{}

// Validate checks the field values on ListCallersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCallersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCallersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCallersRequestMultiError, or nil if none found.
func (m *ListCallersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCallersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCallersRequestMultiError(errors)
	}

	return nil
}

// ListCallersRequestMultiError is an error wrapping multiple validation errors
// returned by ListCallersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListCallersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCallersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCallersRequestMultiError) AllErrors() []error { return m }

// ListCallersRequestValidationError is the validation error returned by
// ListCallersRequest.Validate if the designated constraints aren't met.
type ListCallersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCallersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCallersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCallersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCallersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCallersRequestValidationError) ErrorName() string {
	return "ListCallersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCallersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCallersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCallersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCallersRequestValidationError{}

// Validate checks the field values on ListCallersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCallersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCallersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCallersResponseMultiError, or nil if none found.
func (m *ListCallersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCallersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCallerAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCallersResponseValidationError{
						field:  fmt.Sprintf("CallerAddresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCallersResponseValidationError{
						field:  fmt.Sprintf("CallerAddresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCallersResponseValidationError{
					field:  fmt.Sprintf("CallerAddresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCallersResponseMultiError(errors)
	}

	return nil
}

// ListCallersResponseMultiError is an error wrapping multiple validation
// errors returned by ListCallersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCallersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCallersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCallersResponseMultiError) AllErrors() []error { return m }

// ListCallersResponseValidationError is the validation error returned by
// ListCallersResponse.Validate if the designated constraints aren't met.
type ListCallersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCallersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCallersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCallersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCallersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCallersResponseValidationError) ErrorName() string {
	return "ListCallersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCallersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCallersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCallersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCallersResponseValidationError{}

// Validate checks the field values on ListFeeDepositsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFeeDepositsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFeeDepositsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFeeDepositsRequestMultiError, or nil if none found.
func (m *ListFeeDepositsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeeDepositsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListFeeDepositsRequestMultiError(errors)
	}

	return nil
}

// ListFeeDepositsRequestMultiError is an error wrapping multiple validation
// errors returned by ListFeeDepositsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListFeeDepositsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeeDepositsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeeDepositsRequestMultiError) AllErrors() []error { return m }

// ListFeeDepositsRequestValidationError is the validation error returned by
// ListFeeDepositsRequest.Validate if the designated constraints aren't met.
type ListFeeDepositsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeeDepositsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeeDepositsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeeDepositsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeeDepositsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeeDepositsRequestValidationError) ErrorName() string {
	return "ListFeeDepositsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFeeDepositsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeeDepositsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeeDepositsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeeDepositsRequestValidationError{}

// Validate checks the field values on ListFeeDepositsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFeeDepositsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFeeDepositsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFeeDepositsResponseMultiError, or nil if none found.
func (m *ListFeeDepositsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeeDepositsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFeeDepositAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFeeDepositsResponseValidationError{
						field:  fmt.Sprintf("FeeDepositAddresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFeeDepositsResponseValidationError{
						field:  fmt.Sprintf("FeeDepositAddresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFeeDepositsResponseValidationError{
					field:  fmt.Sprintf("FeeDepositAddresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFeeDepositsResponseMultiError(errors)
	}

	return nil
}

// ListFeeDepositsResponseMultiError is an error wrapping multiple validation
// errors returned by ListFeeDepositsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListFeeDepositsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeeDepositsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeeDepositsResponseMultiError) AllErrors() []error { return m }

// ListFeeDepositsResponseValidationError is the validation error returned by
// ListFeeDepositsResponse.Validate if the designated constraints aren't met.
type ListFeeDepositsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeeDepositsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeeDepositsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeeDepositsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeeDepositsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeeDepositsResponseValidationError) ErrorName() string {
	return "ListFeeDepositsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFeeDepositsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeeDepositsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeeDepositsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeeDepositsResponseValidationError{}

// Validate checks the field values on GetCosmosBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCosmosBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCosmosBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCosmosBalanceRequestMultiError, or nil if none found.
func (m *GetCosmosBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCosmosBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetCosmosBalanceRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		err := GetCosmosBalanceRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCosmosBalanceRequestMultiError(errors)
	}

	return nil
}

// GetCosmosBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by GetCosmosBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCosmosBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCosmosBalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCosmosBalanceRequestMultiError) AllErrors() []error { return m }

// GetCosmosBalanceRequestValidationError is the validation error returned by
// GetCosmosBalanceRequest.Validate if the designated constraints aren't met.
type GetCosmosBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCosmosBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCosmosBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCosmosBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCosmosBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCosmosBalanceRequestValidationError) ErrorName() string {
	return "GetCosmosBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCosmosBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCosmosBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCosmosBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCosmosBalanceRequestValidationError{}

var _GetCosmosBalanceRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetCosmosBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCosmosBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCosmosBalanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCosmosBalanceResponseMultiError, or nil if none found.
func (m *GetCosmosBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCosmosBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDelegations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCosmosBalanceResponseValidationError{
						field:  fmt.Sprintf("Delegations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCosmosBalanceResponseValidationError{
						field:  fmt.Sprintf("Delegations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCosmosBalanceResponseValidationError{
					field:  fmt.Sprintf("Delegations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Available

	// no validation rules for Reward

	// no validation rules for Unbonding

	if len(errors) > 0 {
		return GetCosmosBalanceResponseMultiError(errors)
	}

	return nil
}

// GetCosmosBalanceResponseMultiError is an error wrapping multiple validation
// errors returned by GetCosmosBalanceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCosmosBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCosmosBalanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCosmosBalanceResponseMultiError) AllErrors() []error { return m }

// GetCosmosBalanceResponseValidationError is the validation error returned by
// GetCosmosBalanceResponse.Validate if the designated constraints aren't met.
type GetCosmosBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCosmosBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCosmosBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCosmosBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCosmosBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCosmosBalanceResponseValidationError) ErrorName() string {
	return "GetCosmosBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCosmosBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCosmosBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCosmosBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCosmosBalanceResponseValidationError{}

// Validate checks the field values on ListCosmosDelegateHistoriesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListCosmosDelegateHistoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCosmosDelegateHistoriesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListCosmosDelegateHistoriesRequestMultiError, or nil if none found.
func (m *ListCosmosDelegateHistoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCosmosDelegateHistoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WalletId

	if len(errors) > 0 {
		return ListCosmosDelegateHistoriesRequestMultiError(errors)
	}

	return nil
}

// ListCosmosDelegateHistoriesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListCosmosDelegateHistoriesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCosmosDelegateHistoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCosmosDelegateHistoriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCosmosDelegateHistoriesRequestMultiError) AllErrors() []error { return m }

// ListCosmosDelegateHistoriesRequestValidationError is the validation error
// returned by ListCosmosDelegateHistoriesRequest.Validate if the designated
// constraints aren't met.
type ListCosmosDelegateHistoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCosmosDelegateHistoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCosmosDelegateHistoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCosmosDelegateHistoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCosmosDelegateHistoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCosmosDelegateHistoriesRequestValidationError) ErrorName() string {
	return "ListCosmosDelegateHistoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCosmosDelegateHistoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCosmosDelegateHistoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCosmosDelegateHistoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCosmosDelegateHistoriesRequestValidationError{}

// Validate checks the field values on ListCosmosDelegateHistoriesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListCosmosDelegateHistoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCosmosDelegateHistoriesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListCosmosDelegateHistoriesResponseMultiError, or nil if none found.
func (m *ListCosmosDelegateHistoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCosmosDelegateHistoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDelegateHistories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCosmosDelegateHistoriesResponseValidationError{
						field:  fmt.Sprintf("DelegateHistories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCosmosDelegateHistoriesResponseValidationError{
						field:  fmt.Sprintf("DelegateHistories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCosmosDelegateHistoriesResponseValidationError{
					field:  fmt.Sprintf("DelegateHistories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCosmosDelegateHistoriesResponseMultiError(errors)
	}

	return nil
}

// ListCosmosDelegateHistoriesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListCosmosDelegateHistoriesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCosmosDelegateHistoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCosmosDelegateHistoriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCosmosDelegateHistoriesResponseMultiError) AllErrors() []error { return m }

// ListCosmosDelegateHistoriesResponseValidationError is the validation error
// returned by ListCosmosDelegateHistoriesResponse.Validate if the designated
// constraints aren't met.
type ListCosmosDelegateHistoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCosmosDelegateHistoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCosmosDelegateHistoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCosmosDelegateHistoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCosmosDelegateHistoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCosmosDelegateHistoriesResponseValidationError) ErrorName() string {
	return "ListCosmosDelegateHistoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCosmosDelegateHistoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCosmosDelegateHistoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCosmosDelegateHistoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCosmosDelegateHistoriesResponseValidationError{}

// Validate checks the field values on CosmosDelegateHistory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CosmosDelegateHistory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CosmosDelegateHistory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CosmosDelegateHistoryMultiError, or nil if none found.
func (m *CosmosDelegateHistory) ValidateAll() error {
	return m.validate(true)
}

func (m *CosmosDelegateHistory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TxId

	// no validation rules for WalletId

	// no validation rules for Type

	// no validation rules for DelegateAmount

	// no validation rules for RewardAmount

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CosmosDelegateHistoryValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CosmosDelegateHistoryValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CosmosDelegateHistoryValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CosmosDelegateHistoryMultiError(errors)
	}

	return nil
}

// CosmosDelegateHistoryMultiError is an error wrapping multiple validation
// errors returned by CosmosDelegateHistory.ValidateAll() if the designated
// constraints aren't met.
type CosmosDelegateHistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CosmosDelegateHistoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CosmosDelegateHistoryMultiError) AllErrors() []error { return m }

// CosmosDelegateHistoryValidationError is the validation error returned by
// CosmosDelegateHistory.Validate if the designated constraints aren't met.
type CosmosDelegateHistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CosmosDelegateHistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CosmosDelegateHistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CosmosDelegateHistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CosmosDelegateHistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CosmosDelegateHistoryValidationError) ErrorName() string {
	return "CosmosDelegateHistoryValidationError"
}

// Error satisfies the builtin error interface
func (e CosmosDelegateHistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCosmosDelegateHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CosmosDelegateHistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CosmosDelegateHistoryValidationError{}

// Validate checks the field values on ForwardingThreshold with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardingThreshold) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardingThreshold with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardingThresholdMultiError, or nil if none found.
func (m *ForwardingThreshold) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardingThreshold) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := ForwardingThresholdValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FeeRate

	// no validation rules for Value

	if len(errors) > 0 {
		return ForwardingThresholdMultiError(errors)
	}

	return nil
}

// ForwardingThresholdMultiError is an error wrapping multiple validation
// errors returned by ForwardingThreshold.ValidateAll() if the designated
// constraints aren't met.
type ForwardingThresholdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardingThresholdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardingThresholdMultiError) AllErrors() []error { return m }

// ForwardingThresholdValidationError is the validation error returned by
// ForwardingThreshold.Validate if the designated constraints aren't met.
type ForwardingThresholdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardingThresholdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardingThresholdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardingThresholdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardingThresholdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardingThresholdValidationError) ErrorName() string {
	return "ForwardingThresholdValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardingThresholdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardingThreshold.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardingThresholdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardingThresholdValidationError{}

// Validate checks the field values on ListForwardingThresholdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListForwardingThresholdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListForwardingThresholdsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListForwardingThresholdsRequestMultiError, or nil if none found.
func (m *ListForwardingThresholdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListForwardingThresholdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListForwardingThresholdsRequestMultiError(errors)
	}

	return nil
}

// ListForwardingThresholdsRequestMultiError is an error wrapping multiple
// validation errors returned by ListForwardingThresholdsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListForwardingThresholdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListForwardingThresholdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListForwardingThresholdsRequestMultiError) AllErrors() []error { return m }

// ListForwardingThresholdsRequestValidationError is the validation error
// returned by ListForwardingThresholdsRequest.Validate if the designated
// constraints aren't met.
type ListForwardingThresholdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListForwardingThresholdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListForwardingThresholdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListForwardingThresholdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListForwardingThresholdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListForwardingThresholdsRequestValidationError) ErrorName() string {
	return "ListForwardingThresholdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListForwardingThresholdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListForwardingThresholdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListForwardingThresholdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListForwardingThresholdsRequestValidationError{}

// Validate checks the field values on ListForwardingThresholdsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListForwardingThresholdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListForwardingThresholdsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListForwardingThresholdsResponseMultiError, or nil if none found.
func (m *ListForwardingThresholdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListForwardingThresholdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetForwardingThresholds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListForwardingThresholdsResponseValidationError{
						field:  fmt.Sprintf("ForwardingThresholds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListForwardingThresholdsResponseValidationError{
						field:  fmt.Sprintf("ForwardingThresholds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListForwardingThresholdsResponseValidationError{
					field:  fmt.Sprintf("ForwardingThresholds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListForwardingThresholdsResponseMultiError(errors)
	}

	return nil
}

// ListForwardingThresholdsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListForwardingThresholdsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListForwardingThresholdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListForwardingThresholdsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListForwardingThresholdsResponseMultiError) AllErrors() []error { return m }

// ListForwardingThresholdsResponseValidationError is the validation error
// returned by ListForwardingThresholdsResponse.Validate if the designated
// constraints aren't met.
type ListForwardingThresholdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListForwardingThresholdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListForwardingThresholdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListForwardingThresholdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListForwardingThresholdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListForwardingThresholdsResponseValidationError) ErrorName() string {
	return "ListForwardingThresholdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListForwardingThresholdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListForwardingThresholdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListForwardingThresholdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListForwardingThresholdsResponseValidationError{}

// Validate checks the field values on UpsertForwardingThresholdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpsertForwardingThresholdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertForwardingThresholdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpsertForwardingThresholdRequestMultiError, or nil if none found.
func (m *UpsertForwardingThresholdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertForwardingThresholdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetForwardingThreshold()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertForwardingThresholdRequestValidationError{
					field:  "ForwardingThreshold",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertForwardingThresholdRequestValidationError{
					field:  "ForwardingThreshold",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetForwardingThreshold()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertForwardingThresholdRequestValidationError{
				field:  "ForwardingThreshold",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertForwardingThresholdRequestMultiError(errors)
	}

	return nil
}

// UpsertForwardingThresholdRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpsertForwardingThresholdRequest.ValidateAll() if the designated
// constraints aren't met.
type UpsertForwardingThresholdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertForwardingThresholdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertForwardingThresholdRequestMultiError) AllErrors() []error { return m }

// UpsertForwardingThresholdRequestValidationError is the validation error
// returned by UpsertForwardingThresholdRequest.Validate if the designated
// constraints aren't met.
type UpsertForwardingThresholdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertForwardingThresholdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertForwardingThresholdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertForwardingThresholdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertForwardingThresholdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertForwardingThresholdRequestValidationError) ErrorName() string {
	return "UpsertForwardingThresholdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertForwardingThresholdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertForwardingThresholdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertForwardingThresholdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertForwardingThresholdRequestValidationError{}

// Validate checks the field values on UpsertForwardingThresholdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpsertForwardingThresholdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertForwardingThresholdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpsertForwardingThresholdResponseMultiError, or nil if none found.
func (m *UpsertForwardingThresholdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertForwardingThresholdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetForwardingThreshold()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertForwardingThresholdResponseValidationError{
					field:  "ForwardingThreshold",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertForwardingThresholdResponseValidationError{
					field:  "ForwardingThreshold",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetForwardingThreshold()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertForwardingThresholdResponseValidationError{
				field:  "ForwardingThreshold",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertForwardingThresholdResponseMultiError(errors)
	}

	return nil
}

// UpsertForwardingThresholdResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpsertForwardingThresholdResponse.ValidateAll() if the designated
// constraints aren't met.
type UpsertForwardingThresholdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertForwardingThresholdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertForwardingThresholdResponseMultiError) AllErrors() []error { return m }

// UpsertForwardingThresholdResponseValidationError is the validation error
// returned by UpsertForwardingThresholdResponse.Validate if the designated
// constraints aren't met.
type UpsertForwardingThresholdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertForwardingThresholdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertForwardingThresholdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertForwardingThresholdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertForwardingThresholdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertForwardingThresholdResponseValidationError) ErrorName() string {
	return "UpsertForwardingThresholdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertForwardingThresholdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertForwardingThresholdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertForwardingThresholdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertForwardingThresholdResponseValidationError{}

// Validate checks the field values on ListStakingHistoriesByFilterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListStakingHistoriesByFilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStakingHistoriesByFilterRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListStakingHistoriesByFilterRequestMultiError, or nil if none found.
func (m *ListStakingHistoriesByFilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStakingHistoriesByFilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _ListStakingHistoriesByFilterRequest_FilterType_NotInLookup[m.GetFilterType()]; ok {
		err := ListStakingHistoriesByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ListFilterType_name[int32(m.GetFilterType())]; !ok {
		err := ListStakingHistoriesByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StakingHistoryId

	// no validation rules for WalletId

	if utf8.RuneCountInString(m.GetWalletName()) > 40 {
		err := ListStakingHistoriesByFilterRequestValidationError{
			field:  "WalletName",
			reason: "value length must be at most 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ValidatorId

	// no validation rules for Address

	// no validation rules for Txid

	// no validation rules for BlockHash

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := ListStakingHistoriesByFilterRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() > 1000 {
		err := ListStakingHistoriesByFilterRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 1000",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListStakingHistoriesByFilterRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		err := ListStakingHistoriesByFilterRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListStakingHistoriesByFilterRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListStakingHistoriesByFilterRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStakingHistoriesByFilterRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListStakingHistoriesByFilterRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListStakingHistoriesByFilterRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStakingHistoriesByFilterRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListStakingHistoriesByFilterRequestMultiError(errors)
	}

	return nil
}

// ListStakingHistoriesByFilterRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListStakingHistoriesByFilterRequest.ValidateAll() if the designated
// constraints aren't met.
type ListStakingHistoriesByFilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStakingHistoriesByFilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStakingHistoriesByFilterRequestMultiError) AllErrors() []error { return m }

// ListStakingHistoriesByFilterRequestValidationError is the validation error
// returned by ListStakingHistoriesByFilterRequest.Validate if the designated
// constraints aren't met.
type ListStakingHistoriesByFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStakingHistoriesByFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStakingHistoriesByFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStakingHistoriesByFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStakingHistoriesByFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStakingHistoriesByFilterRequestValidationError) ErrorName() string {
	return "ListStakingHistoriesByFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStakingHistoriesByFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStakingHistoriesByFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStakingHistoriesByFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStakingHistoriesByFilterRequestValidationError{}

var _ListStakingHistoriesByFilterRequest_FilterType_NotInLookup = map[ListFilterType]struct{}{
	0: {},
}

var _ListStakingHistoriesByFilterRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListStakingHistoriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStakingHistoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStakingHistoriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStakingHistoriesResponseMultiError, or nil if none found.
func (m *ListStakingHistoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStakingHistoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStakingHistories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStakingHistoriesResponseValidationError{
						field:  fmt.Sprintf("StakingHistories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStakingHistoriesResponseValidationError{
						field:  fmt.Sprintf("StakingHistories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStakingHistoriesResponseValidationError{
					field:  fmt.Sprintf("StakingHistories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListStakingHistoriesResponseMultiError(errors)
	}

	return nil
}

// ListStakingHistoriesResponseMultiError is an error wrapping multiple
// validation errors returned by ListStakingHistoriesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListStakingHistoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStakingHistoriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStakingHistoriesResponseMultiError) AllErrors() []error { return m }

// ListStakingHistoriesResponseValidationError is the validation error returned
// by ListStakingHistoriesResponse.Validate if the designated constraints
// aren't met.
type ListStakingHistoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStakingHistoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStakingHistoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStakingHistoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStakingHistoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStakingHistoriesResponseValidationError) ErrorName() string {
	return "ListStakingHistoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStakingHistoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStakingHistoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStakingHistoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStakingHistoriesResponseValidationError{}

// Validate checks the field values on ListStakingValidatorsByFilterRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListStakingValidatorsByFilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStakingValidatorsByFilterRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListStakingValidatorsByFilterRequestMultiError, or nil if none found.
func (m *ListStakingValidatorsByFilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStakingValidatorsByFilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _ListStakingValidatorsByFilterRequest_FilterType_NotInLookup[m.GetFilterType()]; ok {
		err := ListStakingValidatorsByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ListFilterType_name[int32(m.GetFilterType())]; !ok {
		err := ListStakingValidatorsByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StakingValidatorId

	// no validation rules for WalletId

	if utf8.RuneCountInString(m.GetWalletName()) > 40 {
		err := ListStakingValidatorsByFilterRequestValidationError{
			field:  "WalletName",
			reason: "value length must be at most 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ValidatorId

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		err := ListStakingValidatorsByFilterRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() > 1000 {
		err := ListStakingValidatorsByFilterRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 1000",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListStakingValidatorsByFilterRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		err := ListStakingValidatorsByFilterRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListStakingValidatorsByFilterRequestMultiError(errors)
	}

	return nil
}

// ListStakingValidatorsByFilterRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListStakingValidatorsByFilterRequest.ValidateAll() if the designated
// constraints aren't met.
type ListStakingValidatorsByFilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStakingValidatorsByFilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStakingValidatorsByFilterRequestMultiError) AllErrors() []error { return m }

// ListStakingValidatorsByFilterRequestValidationError is the validation error
// returned by ListStakingValidatorsByFilterRequest.Validate if the designated
// constraints aren't met.
type ListStakingValidatorsByFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStakingValidatorsByFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStakingValidatorsByFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStakingValidatorsByFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStakingValidatorsByFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStakingValidatorsByFilterRequestValidationError) ErrorName() string {
	return "ListStakingValidatorsByFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStakingValidatorsByFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStakingValidatorsByFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStakingValidatorsByFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStakingValidatorsByFilterRequestValidationError{}

var _ListStakingValidatorsByFilterRequest_FilterType_NotInLookup = map[ListFilterType]struct{}{
	0: {},
}

var _ListStakingValidatorsByFilterRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListStakingValidatorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStakingValidatorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStakingValidatorsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListStakingValidatorsResponseMultiError, or nil if none found.
func (m *ListStakingValidatorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStakingValidatorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStakingValidators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStakingValidatorsResponseValidationError{
						field:  fmt.Sprintf("StakingValidators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStakingValidatorsResponseValidationError{
						field:  fmt.Sprintf("StakingValidators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStakingValidatorsResponseValidationError{
					field:  fmt.Sprintf("StakingValidators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListStakingValidatorsResponseMultiError(errors)
	}

	return nil
}

// ListStakingValidatorsResponseMultiError is an error wrapping multiple
// validation errors returned by ListStakingValidatorsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListStakingValidatorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStakingValidatorsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStakingValidatorsResponseMultiError) AllErrors() []error { return m }

// ListStakingValidatorsResponseValidationError is the validation error
// returned by ListStakingValidatorsResponse.Validate if the designated
// constraints aren't met.
type ListStakingValidatorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStakingValidatorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStakingValidatorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStakingValidatorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStakingValidatorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStakingValidatorsResponseValidationError) ErrorName() string {
	return "ListStakingValidatorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStakingValidatorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStakingValidatorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStakingValidatorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStakingValidatorsResponseValidationError{}
