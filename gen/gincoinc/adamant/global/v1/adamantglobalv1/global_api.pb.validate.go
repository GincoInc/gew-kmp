// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gincoinc/adamant/global/v1/adamantglobalv1/global_api.proto

package adamantglobalv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	gincoincglobalv1 "github.com/GincoInc/gew-kmp/gen/gincoinc/global/v1/gincoincglobalv1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.AddressType(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.TransferType(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)

	_ = gincoincglobalv1.Coin(0)
)

// define the regex for a UUID once up-front
var _global_api_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ApproveWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveWalletRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ApproveWalletRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return ApproveWalletRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// ApproveWalletRequestValidationError is the validation error returned by
// ApproveWalletRequest.Validate if the designated constraints aren't met.
type ApproveWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveWalletRequestValidationError) ErrorName() string {
	return "ApproveWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveWalletRequestValidationError{}

var _ApproveWalletRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ApproveTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ApproveTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return ApproveTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_ApproveTransactionRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		return ApproveTransactionRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// ApproveTransactionRequestValidationError is the validation error returned by
// ApproveTransactionRequest.Validate if the designated constraints aren't met.
type ApproveTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveTransactionRequestValidationError) ErrorName() string {
	return "ApproveTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveTransactionRequestValidationError{}

var _ApproveTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ApproveTransactionRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreateWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateWalletRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetWalletName()); l < 1 || l > 20 {
		return CreateWalletRequestValidationError{
			field:  "WalletName",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	if _, ok := _CreateWalletRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		return CreateWalletRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		return CreateWalletRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := _CreateWalletRequest_WalletType_NotInLookup[m.GetWalletType()]; ok {
		return CreateWalletRequestValidationError{
			field:  "WalletType",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := WalletType_name[int32(m.GetWalletType())]; !ok {
		return CreateWalletRequestValidationError{
			field:  "WalletType",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := _CreateWalletRequest_AddressType_NotInLookup[m.GetAddressType()]; ok {
		return CreateWalletRequestValidationError{
			field:  "AddressType",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := gincoincglobalv1.AddressType_name[int32(m.GetAddressType())]; !ok {
		return CreateWalletRequestValidationError{
			field:  "AddressType",
			reason: "value must be one of the defined enum values",
		}
	}

	if val := m.GetM(); val < 1 || val > 5 {
		return CreateWalletRequestValidationError{
			field:  "M",
			reason: "value must be inside range [1, 5]",
		}
	}

	if val := m.GetN(); val < 1 || val > 5 {
		return CreateWalletRequestValidationError{
			field:  "N",
			reason: "value must be inside range [1, 5]",
		}
	}

	_CreateWalletRequest_Members_Unique := make(map[string]struct{}, len(m.GetMembers()))

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if _, exists := _CreateWalletRequest_Members_Unique[item]; exists {
			return CreateWalletRequestValidationError{
				field:  fmt.Sprintf("Members[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_CreateWalletRequest_Members_Unique[item] = struct{}{}
		}

		// no validation rules for Members[idx]
	}

	// no validation rules for RequiredApprovalCount

	if !_CreateWalletRequest_PolicyId_Pattern.MatchString(m.GetPolicyId()) {
		return CreateWalletRequestValidationError{
			field:  "PolicyId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_CreateWalletRequest_DestinationWalletId_Pattern.MatchString(m.GetDestinationWalletId()) {
		return CreateWalletRequestValidationError{
			field:  "DestinationWalletId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	// no validation rules for WatchOnly

	if !_CreateWalletRequest_InheritWalletId_Pattern.MatchString(m.GetInheritWalletId()) {
		return CreateWalletRequestValidationError{
			field:  "InheritWalletId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// CreateWalletRequestValidationError is the validation error returned by
// CreateWalletRequest.Validate if the designated constraints aren't met.
type CreateWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWalletRequestValidationError) ErrorName() string {
	return "CreateWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWalletRequestValidationError{}

var _CreateWalletRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

var _CreateWalletRequest_WalletType_NotInLookup = map[WalletType]struct{}{
	0: {},
}

var _CreateWalletRequest_AddressType_NotInLookup = map[gincoincglobalv1.AddressType]struct{}{
	0: {},
}

var _CreateWalletRequest_PolicyId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _CreateWalletRequest_DestinationWalletId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _CreateWalletRequest_InheritWalletId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreateWalletResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateWalletResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WalletId

	return nil
}

// CreateWalletResponseValidationError is the validation error returned by
// CreateWalletResponse.Validate if the designated constraints aren't met.
type CreateWalletResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWalletResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWalletResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWalletResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWalletResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWalletResponseValidationError) ErrorName() string {
	return "CreateWalletResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWalletResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWalletResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWalletResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWalletResponseValidationError{}

// Validate checks the field values on GetWalletRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetWalletRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetWalletRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return GetWalletRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// GetWalletRequestValidationError is the validation error returned by
// GetWalletRequest.Validate if the designated constraints aren't met.
type GetWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletRequestValidationError) ErrorName() string { return "GetWalletRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletRequestValidationError{}

var _GetWalletRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on BatchGetWalletsWithoutBalanceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *BatchGetWalletsWithoutBalanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// BatchGetWalletsWithoutBalanceRequestValidationError is the validation error
// returned by BatchGetWalletsWithoutBalanceRequest.Validate if the designated
// constraints aren't met.
type BatchGetWalletsWithoutBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGetWalletsWithoutBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGetWalletsWithoutBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGetWalletsWithoutBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGetWalletsWithoutBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGetWalletsWithoutBalanceRequestValidationError) ErrorName() string {
	return "BatchGetWalletsWithoutBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGetWalletsWithoutBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGetWalletsWithoutBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGetWalletsWithoutBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGetWalletsWithoutBalanceRequestValidationError{}

// Validate checks the field values on BatchGetWalletsWithoutBalanceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *BatchGetWalletsWithoutBalanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetWallets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchGetWalletsWithoutBalanceResponseValidationError{
					field:  fmt.Sprintf("Wallets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BatchGetWalletsWithoutBalanceResponseValidationError is the validation error
// returned by BatchGetWalletsWithoutBalanceResponse.Validate if the
// designated constraints aren't met.
type BatchGetWalletsWithoutBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGetWalletsWithoutBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGetWalletsWithoutBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGetWalletsWithoutBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGetWalletsWithoutBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGetWalletsWithoutBalanceResponseValidationError) ErrorName() string {
	return "BatchGetWalletsWithoutBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGetWalletsWithoutBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGetWalletsWithoutBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGetWalletsWithoutBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGetWalletsWithoutBalanceResponseValidationError{}

// Validate checks the field values on CancelWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelWalletRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CancelWalletRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return CancelWalletRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// CancelWalletRequestValidationError is the validation error returned by
// CancelWalletRequest.Validate if the designated constraints aren't met.
type CancelWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelWalletRequestValidationError) ErrorName() string {
	return "CancelWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelWalletRequestValidationError{}

var _CancelWalletRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ArchiveWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ArchiveWalletRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ArchiveWalletRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return ArchiveWalletRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// ArchiveWalletRequestValidationError is the validation error returned by
// ArchiveWalletRequest.Validate if the designated constraints aren't met.
type ArchiveWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArchiveWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArchiveWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArchiveWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArchiveWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArchiveWalletRequestValidationError) ErrorName() string {
	return "ArchiveWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ArchiveWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArchiveWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArchiveWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArchiveWalletRequestValidationError{}

var _ArchiveWalletRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on UnArchiveWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnArchiveWalletRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UnArchiveWalletRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return UnArchiveWalletRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// UnArchiveWalletRequestValidationError is the validation error returned by
// UnArchiveWalletRequest.Validate if the designated constraints aren't met.
type UnArchiveWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnArchiveWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnArchiveWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnArchiveWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnArchiveWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnArchiveWalletRequestValidationError) ErrorName() string {
	return "UnArchiveWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnArchiveWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnArchiveWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnArchiveWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnArchiveWalletRequestValidationError{}

var _UnArchiveWalletRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListWalletsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListWalletsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPageSize() > 100 {
		return ListWalletsRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
	}

	if !_ListWalletsRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		return ListWalletsRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
	}

	return nil
}

// ListWalletsRequestValidationError is the validation error returned by
// ListWalletsRequest.Validate if the designated constraints aren't met.
type ListWalletsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletsRequestValidationError) ErrorName() string {
	return "ListWalletsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletsRequestValidationError{}

var _ListWalletsRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListWalletsByFilterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListWalletsByFilterRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _ListWalletsByFilterRequest_FilterType_NotInLookup[m.GetFilterType()]; ok {
		return ListWalletsByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := ListFilterType_name[int32(m.GetFilterType())]; !ok {
		return ListWalletsByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for WalletId

	if utf8.RuneCountInString(m.GetWalletName()) > 20 {
		return ListWalletsByFilterRequestValidationError{
			field:  "WalletName",
			reason: "value length must be at most 20 runes",
		}
	}

	// no validation rules for Address

	// no validation rules for WatchOnly

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		return ListWalletsByFilterRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
	}

	if m.GetPageSize() > 100 {
		return ListWalletsByFilterRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
	}

	if !_ListWalletsByFilterRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		return ListWalletsByFilterRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
	}

	return nil
}

// ListWalletsByFilterRequestValidationError is the validation error returned
// by ListWalletsByFilterRequest.Validate if the designated constraints aren't met.
type ListWalletsByFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletsByFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletsByFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletsByFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletsByFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletsByFilterRequestValidationError) ErrorName() string {
	return "ListWalletsByFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletsByFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletsByFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletsByFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletsByFilterRequestValidationError{}

var _ListWalletsByFilterRequest_FilterType_NotInLookup = map[ListFilterType]struct{}{
	0: {},
}

var _ListWalletsByFilterRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListWalletsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListWalletsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetWallets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWalletsResponseValidationError{
					field:  fmt.Sprintf("Wallets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	return nil
}

// ListWalletsResponseValidationError is the validation error returned by
// ListWalletsResponse.Validate if the designated constraints aren't met.
type ListWalletsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletsResponseValidationError) ErrorName() string {
	return "ListWalletsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletsResponseValidationError{}

// Validate checks the field values on UpdateWalletNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateWalletNameRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdateWalletNameRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return UpdateWalletNameRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		return UpdateWalletNameRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	return nil
}

// UpdateWalletNameRequestValidationError is the validation error returned by
// UpdateWalletNameRequest.Validate if the designated constraints aren't met.
type UpdateWalletNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWalletNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWalletNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWalletNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWalletNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWalletNameRequestValidationError) ErrorName() string {
	return "UpdateWalletNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWalletNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWalletNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWalletNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWalletNameRequestValidationError{}

var _UpdateWalletNameRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on UpdateWalletValidationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateWalletValidationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdateWalletValidationRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return UpdateWalletValidationRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	for idx, item := range m.GetNewValidatorIds() {
		_, _ = idx, item

		if !_UpdateWalletValidationRequest_NewValidatorIds_Pattern.MatchString(item) {
			return UpdateWalletValidationRequestValidationError{
				field:  fmt.Sprintf("NewValidatorIds[%v]", idx),
				reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
			}
		}

	}

	// no validation rules for NewRequiredApprovalCount

	return nil
}

// UpdateWalletValidationRequestValidationError is the validation error
// returned by UpdateWalletValidationRequest.Validate if the designated
// constraints aren't met.
type UpdateWalletValidationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWalletValidationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWalletValidationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWalletValidationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWalletValidationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWalletValidationRequestValidationError) ErrorName() string {
	return "UpdateWalletValidationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWalletValidationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWalletValidationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWalletValidationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWalletValidationRequestValidationError{}

var _UpdateWalletValidationRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _UpdateWalletValidationRequest_NewValidatorIds_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on UpdateWalletPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateWalletPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdateWalletPolicyRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return UpdateWalletPolicyRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_UpdateWalletPolicyRequest_PolicyId_Pattern.MatchString(m.GetPolicyId()) {
		return UpdateWalletPolicyRequestValidationError{
			field:  "PolicyId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// UpdateWalletPolicyRequestValidationError is the validation error returned by
// UpdateWalletPolicyRequest.Validate if the designated constraints aren't met.
type UpdateWalletPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWalletPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWalletPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWalletPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWalletPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWalletPolicyRequestValidationError) ErrorName() string {
	return "UpdateWalletPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWalletPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWalletPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWalletPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWalletPolicyRequestValidationError{}

var _UpdateWalletPolicyRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _UpdateWalletPolicyRequest_PolicyId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ReviewWalletProposalRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReviewWalletProposalRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ReviewWalletProposalRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return ReviewWalletProposalRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	// no validation rules for Approve

	return nil
}

// ReviewWalletProposalRequestValidationError is the validation error returned
// by ReviewWalletProposalRequest.Validate if the designated constraints
// aren't met.
type ReviewWalletProposalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewWalletProposalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewWalletProposalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewWalletProposalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewWalletProposalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewWalletProposalRequestValidationError) ErrorName() string {
	return "ReviewWalletProposalRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewWalletProposalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewWalletProposalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewWalletProposalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewWalletProposalRequestValidationError{}

var _ReviewWalletProposalRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ExistsWalletByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExistsWalletByNameRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// ExistsWalletByNameRequestValidationError is the validation error returned by
// ExistsWalletByNameRequest.Validate if the designated constraints aren't met.
type ExistsWalletByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistsWalletByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistsWalletByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistsWalletByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistsWalletByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistsWalletByNameRequestValidationError) ErrorName() string {
	return "ExistsWalletByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExistsWalletByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistsWalletByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistsWalletByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistsWalletByNameRequestValidationError{}

// Validate checks the field values on ExistsWalletByNameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExistsWalletByNameResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Exists

	return nil
}

// ExistsWalletByNameResponseValidationError is the validation error returned
// by ExistsWalletByNameResponse.Validate if the designated constraints aren't met.
type ExistsWalletByNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistsWalletByNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistsWalletByNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistsWalletByNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistsWalletByNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistsWalletByNameResponseValidationError) ErrorName() string {
	return "ExistsWalletByNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExistsWalletByNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistsWalletByNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistsWalletByNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistsWalletByNameResponseValidationError{}

// Validate checks the field values on FlushBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FlushBalanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_FlushBalanceRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return FlushBalanceRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// FlushBalanceRequestValidationError is the validation error returned by
// FlushBalanceRequest.Validate if the designated constraints aren't met.
type FlushBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlushBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlushBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlushBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlushBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlushBalanceRequestValidationError) ErrorName() string {
	return "FlushBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FlushBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlushBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlushBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlushBalanceRequestValidationError{}

var _FlushBalanceRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on FlushBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FlushBalanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetFlushedAddresses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FlushBalanceResponseValidationError{
					field:  fmt.Sprintf("FlushedAddresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// FlushBalanceResponseValidationError is the validation error returned by
// FlushBalanceResponse.Validate if the designated constraints aren't met.
type FlushBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlushBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlushBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlushBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlushBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlushBalanceResponseValidationError) ErrorName() string {
	return "FlushBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FlushBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlushBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlushBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlushBalanceResponseValidationError{}

// Validate checks the field values on ListWalletFlushSettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListWalletFlushSettingsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetWalletFlushSettings() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWalletFlushSettingsResponseValidationError{
					field:  fmt.Sprintf("WalletFlushSettings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListWalletFlushSettingsResponseValidationError is the validation error
// returned by ListWalletFlushSettingsResponse.Validate if the designated
// constraints aren't met.
type ListWalletFlushSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletFlushSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletFlushSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletFlushSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletFlushSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletFlushSettingsResponseValidationError) ErrorName() string {
	return "ListWalletFlushSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletFlushSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletFlushSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletFlushSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletFlushSettingsResponseValidationError{}

// Validate checks the field values on UpdateWalletFlushSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateWalletFlushSettingRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _UpdateWalletFlushSettingRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		return UpdateWalletFlushSettingRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		return UpdateWalletFlushSettingRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
	}

	if !_UpdateWalletFlushSettingRequest_DestinationWalletId_Pattern.MatchString(m.GetDestinationWalletId()) {
		return UpdateWalletFlushSettingRequestValidationError{
			field:  "DestinationWalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// UpdateWalletFlushSettingRequestValidationError is the validation error
// returned by UpdateWalletFlushSettingRequest.Validate if the designated
// constraints aren't met.
type UpdateWalletFlushSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWalletFlushSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWalletFlushSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWalletFlushSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWalletFlushSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWalletFlushSettingRequestValidationError) ErrorName() string {
	return "UpdateWalletFlushSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWalletFlushSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWalletFlushSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWalletFlushSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWalletFlushSettingRequestValidationError{}

var _UpdateWalletFlushSettingRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

var _UpdateWalletFlushSettingRequest_DestinationWalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListCompensationFeeHistoriesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListCompensationFeeHistoriesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListCompensationFeeHistoriesRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return ListCompensationFeeHistoriesRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if utf8.RuneCountInString(m.GetAddress()) < 25 {
		return ListCompensationFeeHistoriesRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 25 runes",
		}
	}

	return nil
}

// ListCompensationFeeHistoriesRequestValidationError is the validation error
// returned by ListCompensationFeeHistoriesRequest.Validate if the designated
// constraints aren't met.
type ListCompensationFeeHistoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCompensationFeeHistoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCompensationFeeHistoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCompensationFeeHistoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCompensationFeeHistoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCompensationFeeHistoriesRequestValidationError) ErrorName() string {
	return "ListCompensationFeeHistoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCompensationFeeHistoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCompensationFeeHistoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCompensationFeeHistoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCompensationFeeHistoriesRequestValidationError{}

var _ListCompensationFeeHistoriesRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListCompensationFeeHistoriesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListCompensationFeeHistoriesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetCompensationFees() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCompensationFeeHistoriesResponseValidationError{
					field:  fmt.Sprintf("CompensationFees[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCompensationFeeHistoriesResponseValidationError is the validation error
// returned by ListCompensationFeeHistoriesResponse.Validate if the designated
// constraints aren't met.
type ListCompensationFeeHistoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCompensationFeeHistoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCompensationFeeHistoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCompensationFeeHistoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCompensationFeeHistoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCompensationFeeHistoriesResponseValidationError) ErrorName() string {
	return "ListCompensationFeeHistoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCompensationFeeHistoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCompensationFeeHistoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCompensationFeeHistoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCompensationFeeHistoriesResponseValidationError{}

// Validate checks the field values on RegisterKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisterKeyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_RegisterKeyRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return RegisterKeyRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if utf8.RuneCountInString(m.GetPubKey()) < 64 {
		return RegisterKeyRequestValidationError{
			field:  "PubKey",
			reason: "value length must be at least 64 runes",
		}
	}

	return nil
}

// RegisterKeyRequestValidationError is the validation error returned by
// RegisterKeyRequest.Validate if the designated constraints aren't met.
type RegisterKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterKeyRequestValidationError) ErrorName() string {
	return "RegisterKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterKeyRequestValidationError{}

var _RegisterKeyRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on RegisterKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisterKeyResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for KeyId

	return nil
}

// RegisterKeyResponseValidationError is the validation error returned by
// RegisterKeyResponse.Validate if the designated constraints aren't met.
type RegisterKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterKeyResponseValidationError) ErrorName() string {
	return "RegisterKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterKeyResponseValidationError{}

// Validate checks the field values on CreateAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CreateAddressRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return CreateAddressRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	// no validation rules for FeeRate

	return nil
}

// CreateAddressRequestValidationError is the validation error returned by
// CreateAddressRequest.Validate if the designated constraints aren't met.
type CreateAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAddressRequestValidationError) ErrorName() string {
	return "CreateAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAddressRequestValidationError{}

var _CreateAddressRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreateAddressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAddressResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AddressId

	return nil
}

// CreateAddressResponseValidationError is the validation error returned by
// CreateAddressResponse.Validate if the designated constraints aren't met.
type CreateAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAddressResponseValidationError) ErrorName() string {
	return "CreateAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAddressResponseValidationError{}

// Validate checks the field values on GetAddressRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetAddressRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return GetAddressRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_GetAddressRequest_AddressId_Pattern.MatchString(m.GetAddressId()) {
		return GetAddressRequestValidationError{
			field:  "AddressId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// GetAddressRequestValidationError is the validation error returned by
// GetAddressRequest.Validate if the designated constraints aren't met.
type GetAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressRequestValidationError) ErrorName() string {
	return "GetAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressRequestValidationError{}

var _GetAddressRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _GetAddressRequest_AddressId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetAddressByAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAddressByAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetAddressByAddressRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return GetAddressByAddressRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if utf8.RuneCountInString(m.GetAddress()) < 25 {
		return GetAddressByAddressRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 25 runes",
		}
	}

	return nil
}

// GetAddressByAddressRequestValidationError is the validation error returned
// by GetAddressByAddressRequest.Validate if the designated constraints aren't met.
type GetAddressByAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressByAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressByAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressByAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressByAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressByAddressRequestValidationError) ErrorName() string {
	return "GetAddressByAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressByAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressByAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressByAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressByAddressRequestValidationError{}

var _GetAddressByAddressRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetAddressByIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAddressByIndexRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetAddressByIndexRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return GetAddressByIndexRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if m.GetIndex() < 0 {
		return GetAddressByIndexRequestValidationError{
			field:  "Index",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// GetAddressByIndexRequestValidationError is the validation error returned by
// GetAddressByIndexRequest.Validate if the designated constraints aren't met.
type GetAddressByIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressByIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressByIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressByIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressByIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressByIndexRequestValidationError) ErrorName() string {
	return "GetAddressByIndexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressByIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressByIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressByIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressByIndexRequestValidationError{}

var _GetAddressByIndexRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetAddressWithoutBalanceByIndexRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetAddressWithoutBalanceByIndexRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetAddressWithoutBalanceByIndexRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return GetAddressWithoutBalanceByIndexRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if m.GetIndex() < 0 {
		return GetAddressWithoutBalanceByIndexRequestValidationError{
			field:  "Index",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// GetAddressWithoutBalanceByIndexRequestValidationError is the validation
// error returned by GetAddressWithoutBalanceByIndexRequest.Validate if the
// designated constraints aren't met.
type GetAddressWithoutBalanceByIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressWithoutBalanceByIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressWithoutBalanceByIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressWithoutBalanceByIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressWithoutBalanceByIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressWithoutBalanceByIndexRequestValidationError) ErrorName() string {
	return "GetAddressWithoutBalanceByIndexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressWithoutBalanceByIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressWithoutBalanceByIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressWithoutBalanceByIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressWithoutBalanceByIndexRequestValidationError{}

var _GetAddressWithoutBalanceByIndexRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListAddressesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAddressesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListAddressesRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return ListAddressesRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	// no validation rules for OmitChange

	if m.GetPageSize() > 100 {
		return ListAddressesRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
	}

	if !_ListAddressesRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		return ListAddressesRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
	}

	return nil
}

// ListAddressesRequestValidationError is the validation error returned by
// ListAddressesRequest.Validate if the designated constraints aren't met.
type ListAddressesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAddressesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAddressesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAddressesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAddressesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAddressesRequestValidationError) ErrorName() string {
	return "ListAddressesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAddressesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAddressesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAddressesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAddressesRequestValidationError{}

var _ListAddressesRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ListAddressesRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListAddressesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAddressesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAddressesResponseValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	return nil
}

// ListAddressesResponseValidationError is the validation error returned by
// ListAddressesResponse.Validate if the designated constraints aren't met.
type ListAddressesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAddressesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAddressesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAddressesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAddressesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAddressesResponseValidationError) ErrorName() string {
	return "ListAddressesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAddressesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAddressesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAddressesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAddressesResponseValidationError{}

// Validate checks the field values on ListAddressesWithBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAddressesWithBalanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListAddressesWithBalanceRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return ListAddressesWithBalanceRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// ListAddressesWithBalanceRequestValidationError is the validation error
// returned by ListAddressesWithBalanceRequest.Validate if the designated
// constraints aren't met.
type ListAddressesWithBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAddressesWithBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAddressesWithBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAddressesWithBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAddressesWithBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAddressesWithBalanceRequestValidationError) ErrorName() string {
	return "ListAddressesWithBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAddressesWithBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAddressesWithBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAddressesWithBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAddressesWithBalanceRequestValidationError{}

var _ListAddressesWithBalanceRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListAddressesWithBalanceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListAddressesWithBalanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAddressesWithBalanceResponseValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAddressesWithBalanceResponseValidationError is the validation error
// returned by ListAddressesWithBalanceResponse.Validate if the designated
// constraints aren't met.
type ListAddressesWithBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAddressesWithBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAddressesWithBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAddressesWithBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAddressesWithBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAddressesWithBalanceResponseValidationError) ErrorName() string {
	return "ListAddressesWithBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAddressesWithBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAddressesWithBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAddressesWithBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAddressesWithBalanceResponseValidationError{}

// Validate checks the field values on UpdateAddressBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAddressBalanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdateAddressBalanceRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return UpdateAddressBalanceRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	// no validation rules for Address

	return nil
}

// UpdateAddressBalanceRequestValidationError is the validation error returned
// by UpdateAddressBalanceRequest.Validate if the designated constraints
// aren't met.
type UpdateAddressBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAddressBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAddressBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAddressBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAddressBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAddressBalanceRequestValidationError) ErrorName() string {
	return "UpdateAddressBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAddressBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAddressBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAddressBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAddressBalanceRequestValidationError{}

var _UpdateAddressBalanceRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListAddressesWithoutBalanceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListAddressesWithoutBalanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListAddressesWithoutBalanceRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return ListAddressesWithoutBalanceRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	// no validation rules for OmitChange

	if m.GetPageSize() > 100 {
		return ListAddressesWithoutBalanceRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
	}

	if !_ListAddressesWithoutBalanceRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		return ListAddressesWithoutBalanceRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
	}

	return nil
}

// ListAddressesWithoutBalanceRequestValidationError is the validation error
// returned by ListAddressesWithoutBalanceRequest.Validate if the designated
// constraints aren't met.
type ListAddressesWithoutBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAddressesWithoutBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAddressesWithoutBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAddressesWithoutBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAddressesWithoutBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAddressesWithoutBalanceRequestValidationError) ErrorName() string {
	return "ListAddressesWithoutBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAddressesWithoutBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAddressesWithoutBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAddressesWithoutBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAddressesWithoutBalanceRequestValidationError{}

var _ListAddressesWithoutBalanceRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ListAddressesWithoutBalanceRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListAddressesWithoutBalanceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListAddressesWithoutBalanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAddressesWithoutBalanceResponseValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	return nil
}

// ListAddressesWithoutBalanceResponseValidationError is the validation error
// returned by ListAddressesWithoutBalanceResponse.Validate if the designated
// constraints aren't met.
type ListAddressesWithoutBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAddressesWithoutBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAddressesWithoutBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAddressesWithoutBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAddressesWithoutBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAddressesWithoutBalanceResponseValidationError) ErrorName() string {
	return "ListAddressesWithoutBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAddressesWithoutBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAddressesWithoutBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAddressesWithoutBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAddressesWithoutBalanceResponseValidationError{}

// Validate checks the field values on GetEthereumFeeAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEthereumFeeAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetEthereumFeeAddressRequestValidationError is the validation error returned
// by GetEthereumFeeAddressRequest.Validate if the designated constraints
// aren't met.
type GetEthereumFeeAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEthereumFeeAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEthereumFeeAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEthereumFeeAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEthereumFeeAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEthereumFeeAddressRequestValidationError) ErrorName() string {
	return "GetEthereumFeeAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEthereumFeeAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEthereumFeeAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEthereumFeeAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEthereumFeeAddressRequestValidationError{}

// Validate checks the field values on
// DeleteAllWatchOnlyAddressesByWalletIDRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DeleteAllWatchOnlyAddressesByWalletIDRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeleteAllWatchOnlyAddressesByWalletIDRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError is the
// validation error returned by
// DeleteAllWatchOnlyAddressesByWalletIDRequest.Validate if the designated
// constraints aren't met.
type DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError) ErrorName() string {
	return "DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAllWatchOnlyAddressesByWalletIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAllWatchOnlyAddressesByWalletIDRequestValidationError{}

var _DeleteAllWatchOnlyAddressesByWalletIDRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreateTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CreateTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return CreateTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	// no validation rules for FeeRate

	for idx, item := range m.GetTxOutputs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateTransactionRequestValidationError{
					field:  fmt.Sprintf("TxOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Address

	// no validation rules for DestinationTag

	// no validation rules for StringValue

	return nil
}

// CreateTransactionRequestValidationError is the validation error returned by
// CreateTransactionRequest.Validate if the designated constraints aren't met.
type CreateTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransactionRequestValidationError) ErrorName() string {
	return "CreateTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransactionRequestValidationError{}

var _CreateTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreateTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTransactionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TransactionId

	return nil
}

// CreateTransactionResponseValidationError is the validation error returned by
// CreateTransactionResponse.Validate if the designated constraints aren't met.
type CreateTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransactionResponseValidationError) ErrorName() string {
	return "CreateTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransactionResponseValidationError{}

// Validate checks the field values on CreateXRPInitTransactionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CreateXRPInitTransactionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CreateXRPInitTransactionsRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return CreateXRPInitTransactionsRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// CreateXRPInitTransactionsRequestValidationError is the validation error
// returned by CreateXRPInitTransactionsRequest.Validate if the designated
// constraints aren't met.
type CreateXRPInitTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateXRPInitTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateXRPInitTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateXRPInitTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateXRPInitTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateXRPInitTransactionsRequestValidationError) ErrorName() string {
	return "CreateXRPInitTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateXRPInitTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateXRPInitTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateXRPInitTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateXRPInitTransactionsRequestValidationError{}

var _CreateXRPInitTransactionsRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreateInitTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateInitTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CreateInitTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return CreateInitTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// CreateInitTransactionRequestValidationError is the validation error returned
// by CreateInitTransactionRequest.Validate if the designated constraints
// aren't met.
type CreateInitTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInitTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInitTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInitTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInitTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInitTransactionRequestValidationError) ErrorName() string {
	return "CreateInitTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInitTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInitTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInitTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInitTransactionRequestValidationError{}

var _CreateInitTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on SignTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SignTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_SignTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return SignTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_SignTransactionRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		return SignTransactionRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_SignTransactionRequest_KeyId_Pattern.MatchString(m.GetKeyId()) {
		return SignTransactionRequestValidationError{
			field:  "KeyId",
			reason: "value does not match regex pattern \"^$|^[0-9A-F]{64}$\"",
		}
	}

	if m.GetSignedInfo() == nil {
		return SignTransactionRequestValidationError{
			field:  "SignedInfo",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignedInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignTransactionRequestValidationError{
				field:  "SignedInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SignTransactionRequestValidationError is the validation error returned by
// SignTransactionRequest.Validate if the designated constraints aren't met.
type SignTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignTransactionRequestValidationError) ErrorName() string {
	return "SignTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SignTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignTransactionRequestValidationError{}

var _SignTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _SignTransactionRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _SignTransactionRequest_KeyId_Pattern = regexp.MustCompile("^$|^[0-9A-F]{64}$")

// Validate checks the field values on SignXRPInitTransactionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SignXRPInitTransactionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_SignXRPInitTransactionsRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return SignXRPInitTransactionsRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_SignXRPInitTransactionsRequest_KeyId_Pattern.MatchString(m.GetKeyId()) {
		return SignXRPInitTransactionsRequestValidationError{
			field:  "KeyId",
			reason: "value does not match regex pattern \"^[0-9A-F]{64}$\"",
		}
	}

	if len(m.GetSignedInfo()) < 1 {
		return SignXRPInitTransactionsRequestValidationError{
			field:  "SignedInfo",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetSignedInfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignXRPInitTransactionsRequestValidationError{
					field:  fmt.Sprintf("SignedInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SignXRPInitTransactionsRequestValidationError is the validation error
// returned by SignXRPInitTransactionsRequest.Validate if the designated
// constraints aren't met.
type SignXRPInitTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignXRPInitTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignXRPInitTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignXRPInitTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignXRPInitTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignXRPInitTransactionsRequestValidationError) ErrorName() string {
	return "SignXRPInitTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SignXRPInitTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignXRPInitTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignXRPInitTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignXRPInitTransactionsRequestValidationError{}

var _SignXRPInitTransactionsRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _SignXRPInitTransactionsRequest_KeyId_Pattern = regexp.MustCompile("^[0-9A-F]{64}$")

// Validate checks the field values on SignInitTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SignInitTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_SignInitTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return SignInitTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_SignInitTransactionRequest_KeyId_Pattern.MatchString(m.GetKeyId()) {
		return SignInitTransactionRequestValidationError{
			field:  "KeyId",
			reason: "value does not match regex pattern \"^[0-9A-F]{64}$\"",
		}
	}

	if len(m.GetSignedInfo()) < 1 {
		return SignInitTransactionRequestValidationError{
			field:  "SignedInfo",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetSignedInfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignInitTransactionRequestValidationError{
					field:  fmt.Sprintf("SignedInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SignInitTransactionRequestValidationError is the validation error returned
// by SignInitTransactionRequest.Validate if the designated constraints aren't met.
type SignInitTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInitTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInitTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInitTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInitTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInitTransactionRequestValidationError) ErrorName() string {
	return "SignInitTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SignInitTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInitTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInitTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInitTransactionRequestValidationError{}

var _SignInitTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _SignInitTransactionRequest_KeyId_Pattern = regexp.MustCompile("^[0-9A-F]{64}$")

// Validate checks the field values on SendTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_SendTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return SendTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_SendTransactionRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		return SendTransactionRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// SendTransactionRequestValidationError is the validation error returned by
// SendTransactionRequest.Validate if the designated constraints aren't met.
type SendTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTransactionRequestValidationError) ErrorName() string {
	return "SendTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTransactionRequestValidationError{}

var _SendTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _SendTransactionRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on SendTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendTransactionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TxId

	return nil
}

// SendTransactionResponseValidationError is the validation error returned by
// SendTransactionResponse.Validate if the designated constraints aren't met.
type SendTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTransactionResponseValidationError) ErrorName() string {
	return "SendTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTransactionResponseValidationError{}

// Validate checks the field values on SendXRPInitTransactionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendXRPInitTransactionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_SendXRPInitTransactionsRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return SendXRPInitTransactionsRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// SendXRPInitTransactionsRequestValidationError is the validation error
// returned by SendXRPInitTransactionsRequest.Validate if the designated
// constraints aren't met.
type SendXRPInitTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendXRPInitTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendXRPInitTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendXRPInitTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendXRPInitTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendXRPInitTransactionsRequestValidationError) ErrorName() string {
	return "SendXRPInitTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendXRPInitTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendXRPInitTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendXRPInitTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendXRPInitTransactionsRequestValidationError{}

var _SendXRPInitTransactionsRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on SendXRPInitTransactionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendXRPInitTransactionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SendXRPInitTransactionsResponseValidationError is the validation error
// returned by SendXRPInitTransactionsResponse.Validate if the designated
// constraints aren't met.
type SendXRPInitTransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendXRPInitTransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendXRPInitTransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendXRPInitTransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendXRPInitTransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendXRPInitTransactionsResponseValidationError) ErrorName() string {
	return "SendXRPInitTransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendXRPInitTransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendXRPInitTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendXRPInitTransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendXRPInitTransactionsResponseValidationError{}

// Validate checks the field values on SendInitTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendInitTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_SendInitTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return SendInitTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// SendInitTransactionRequestValidationError is the validation error returned
// by SendInitTransactionRequest.Validate if the designated constraints aren't met.
type SendInitTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendInitTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendInitTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendInitTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendInitTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendInitTransactionRequestValidationError) ErrorName() string {
	return "SendInitTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendInitTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendInitTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendInitTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendInitTransactionRequestValidationError{}

var _SendInitTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on SendInitTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendInitTransactionResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SendInitTransactionResponseValidationError is the validation error returned
// by SendInitTransactionResponse.Validate if the designated constraints
// aren't met.
type SendInitTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendInitTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendInitTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendInitTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendInitTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendInitTransactionResponseValidationError) ErrorName() string {
	return "SendInitTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendInitTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendInitTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendInitTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendInitTransactionResponseValidationError{}

// Validate checks the field values on CancelTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CancelTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return CancelTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_CancelTransactionRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		return CancelTransactionRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// CancelTransactionRequestValidationError is the validation error returned by
// CancelTransactionRequest.Validate if the designated constraints aren't met.
type CancelTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTransactionRequestValidationError) ErrorName() string {
	return "CancelTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTransactionRequestValidationError{}

var _CancelTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _CancelTransactionRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetTransactionRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return GetTransactionRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_GetTransactionRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		return GetTransactionRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// GetTransactionRequestValidationError is the validation error returned by
// GetTransactionRequest.Validate if the designated constraints aren't met.
type GetTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionRequestValidationError) ErrorName() string {
	return "GetTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionRequestValidationError{}

var _GetTransactionRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _GetTransactionRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetTransactionByTxIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTransactionByTxIDRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetTransactionByTxIDRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return GetTransactionByTxIDRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_GetTransactionByTxIDRequest_TxId_Pattern.MatchString(m.GetTxId()) {
		return GetTransactionByTxIDRequestValidationError{
			field:  "TxId",
			reason: "value does not match regex pattern \"^(0x)?[0-9a-fA-F]{64}$\"",
		}
	}

	return nil
}

// GetTransactionByTxIDRequestValidationError is the validation error returned
// by GetTransactionByTxIDRequest.Validate if the designated constraints
// aren't met.
type GetTransactionByTxIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionByTxIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionByTxIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionByTxIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionByTxIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionByTxIDRequestValidationError) ErrorName() string {
	return "GetTransactionByTxIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionByTxIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionByTxIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionByTxIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionByTxIDRequestValidationError{}

var _GetTransactionByTxIDRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _GetTransactionByTxIDRequest_TxId_Pattern = regexp.MustCompile("^(0x)?[0-9a-fA-F]{64}$")

// Validate checks the field values on ListTransactionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTransactionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListTransactionsRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return ListTransactionsRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if m.GetPageSize() > 100 {
		return ListTransactionsRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
	}

	if !_ListTransactionsRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		return ListTransactionsRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
	}

	return nil
}

// ListTransactionsRequestValidationError is the validation error returned by
// ListTransactionsRequest.Validate if the designated constraints aren't met.
type ListTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransactionsRequestValidationError) ErrorName() string {
	return "ListTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransactionsRequestValidationError{}

var _ListTransactionsRequest_WalletId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ListTransactionsRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListTransactionsByFilterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTransactionsByFilterRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _ListTransactionsByFilterRequest_FilterType_NotInLookup[m.GetFilterType()]; ok {
		return ListTransactionsByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := ListFilterType_name[int32(m.GetFilterType())]; !ok {
		return ListTransactionsByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for TransactionId

	if utf8.RuneCountInString(m.GetWalletName()) > 20 {
		return ListTransactionsByFilterRequestValidationError{
			field:  "WalletName",
			reason: "value length must be at most 20 runes",
		}
	}

	if utf8.RuneCountInString(m.GetAddressName()) > 20 {
		return ListTransactionsByFilterRequestValidationError{
			field:  "AddressName",
			reason: "value length must be at most 20 runes",
		}
	}

	// no validation rules for Address

	// no validation rules for Txid

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		return ListTransactionsByFilterRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
	}

	if m.GetPageSize() > 100 {
		return ListTransactionsByFilterRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
	}

	if !_ListTransactionsByFilterRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		return ListTransactionsByFilterRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
	}

	return nil
}

// ListTransactionsByFilterRequestValidationError is the validation error
// returned by ListTransactionsByFilterRequest.Validate if the designated
// constraints aren't met.
type ListTransactionsByFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransactionsByFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransactionsByFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransactionsByFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransactionsByFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransactionsByFilterRequestValidationError) ErrorName() string {
	return "ListTransactionsByFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransactionsByFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransactionsByFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransactionsByFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransactionsByFilterRequestValidationError{}

var _ListTransactionsByFilterRequest_FilterType_NotInLookup = map[ListFilterType]struct{}{
	0: {},
}

var _ListTransactionsByFilterRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListTransactionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTransactionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTransactionsResponseValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	return nil
}

// ListTransactionsResponseValidationError is the validation error returned by
// ListTransactionsResponse.Validate if the designated constraints aren't met.
type ListTransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransactionsResponseValidationError) ErrorName() string {
	return "ListTransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransactionsResponseValidationError{}

// Validate checks the field values on GetSignInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSignInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetSignInfoRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return GetSignInfoRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_GetSignInfoRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		return GetSignInfoRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// GetSignInfoRequestValidationError is the validation error returned by
// GetSignInfoRequest.Validate if the designated constraints aren't met.
type GetSignInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSignInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSignInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSignInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSignInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSignInfoRequestValidationError) ErrorName() string {
	return "GetSignInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSignInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSignInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSignInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSignInfoRequestValidationError{}

var _GetSignInfoRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _GetSignInfoRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListSignInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSignInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListSignInfoRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return ListSignInfoRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_ListSignInfoRequest_TransactionId_Pattern.MatchString(m.GetTransactionId()) {
		return ListSignInfoRequestValidationError{
			field:  "TransactionId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// ListSignInfoRequestValidationError is the validation error returned by
// ListSignInfoRequest.Validate if the designated constraints aren't met.
type ListSignInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSignInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSignInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSignInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSignInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSignInfoRequestValidationError) ErrorName() string {
	return "ListSignInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSignInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSignInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSignInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSignInfoRequestValidationError{}

var _ListSignInfoRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ListSignInfoRequest_TransactionId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListSignInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSignInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSignInfoList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSignInfoResponseValidationError{
					field:  fmt.Sprintf("SignInfoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListSignInfoResponseValidationError is the validation error returned by
// ListSignInfoResponse.Validate if the designated constraints aren't met.
type ListSignInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSignInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSignInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSignInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSignInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSignInfoResponseValidationError) ErrorName() string {
	return "ListSignInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSignInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSignInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSignInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSignInfoResponseValidationError{}

// Validate checks the field values on ListXRPInitSignInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListXRPInitSignInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListXRPInitSignInfoRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return ListXRPInitSignInfoRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// ListXRPInitSignInfoRequestValidationError is the validation error returned
// by ListXRPInitSignInfoRequest.Validate if the designated constraints aren't met.
type ListXRPInitSignInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListXRPInitSignInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListXRPInitSignInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListXRPInitSignInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListXRPInitSignInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListXRPInitSignInfoRequestValidationError) ErrorName() string {
	return "ListXRPInitSignInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListXRPInitSignInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListXRPInitSignInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListXRPInitSignInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListXRPInitSignInfoRequestValidationError{}

var _ListXRPInitSignInfoRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListXRPInitSignInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListXRPInitSignInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSignInfoList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListXRPInitSignInfoResponseValidationError{
					field:  fmt.Sprintf("SignInfoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListXRPInitSignInfoResponseValidationError is the validation error returned
// by ListXRPInitSignInfoResponse.Validate if the designated constraints
// aren't met.
type ListXRPInitSignInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListXRPInitSignInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListXRPInitSignInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListXRPInitSignInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListXRPInitSignInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListXRPInitSignInfoResponseValidationError) ErrorName() string {
	return "ListXRPInitSignInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListXRPInitSignInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListXRPInitSignInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListXRPInitSignInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListXRPInitSignInfoResponseValidationError{}

// Validate checks the field values on ListInitSignInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListInitSignInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListInitSignInfoRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return ListInitSignInfoRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// ListInitSignInfoRequestValidationError is the validation error returned by
// ListInitSignInfoRequest.Validate if the designated constraints aren't met.
type ListInitSignInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInitSignInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInitSignInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInitSignInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInitSignInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInitSignInfoRequestValidationError) ErrorName() string {
	return "ListInitSignInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInitSignInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInitSignInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInitSignInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInitSignInfoRequestValidationError{}

var _ListInitSignInfoRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListTransfersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTransfersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListTransfersRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return ListTransfersRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if m.GetPageSize() > 100 {
		return ListTransfersRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
	}

	if !_ListTransfersRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		return ListTransfersRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
	}

	return nil
}

// ListTransfersRequestValidationError is the validation error returned by
// ListTransfersRequest.Validate if the designated constraints aren't met.
type ListTransfersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransfersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransfersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransfersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransfersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransfersRequestValidationError) ErrorName() string {
	return "ListTransfersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransfersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransfersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransfersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransfersRequestValidationError{}

var _ListTransfersRequest_WalletId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _ListTransfersRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListTransfersByFilterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTransfersByFilterRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _ListTransfersByFilterRequest_FilterType_NotInLookup[m.GetFilterType()]; ok {
		return ListTransfersByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := ListFilterType_name[int32(m.GetFilterType())]; !ok {
		return ListTransfersByFilterRequestValidationError{
			field:  "FilterType",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for TransferId

	// no validation rules for WalletId

	if utf8.RuneCountInString(m.GetWalletName()) > 20 {
		return ListTransfersByFilterRequestValidationError{
			field:  "WalletName",
			reason: "value length must be at most 20 runes",
		}
	}

	if utf8.RuneCountInString(m.GetAddressName()) > 20 {
		return ListTransfersByFilterRequestValidationError{
			field:  "AddressName",
			reason: "value length must be at most 20 runes",
		}
	}

	// no validation rules for Address

	// no validation rules for Txid

	// no validation rules for WatchOnly

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		return ListTransfersByFilterRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := gincoincglobalv1.TransferType_name[int32(m.GetTransferType())]; !ok {
		return ListTransfersByFilterRequestValidationError{
			field:  "TransferType",
			reason: "value must be one of the defined enum values",
		}
	}

	if m.GetPageSize() > 100 {
		return ListTransfersByFilterRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
	}

	if !_ListTransfersByFilterRequest_PageToken_Pattern.MatchString(m.GetPageToken()) {
		return ListTransfersByFilterRequestValidationError{
			field:  "PageToken",
			reason: "value does not match regex pattern \"^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$\"",
		}
	}

	if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTransfersByFilterRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTransfersByFilterRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListTransfersByFilterRequestValidationError is the validation error returned
// by ListTransfersByFilterRequest.Validate if the designated constraints
// aren't met.
type ListTransfersByFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransfersByFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransfersByFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransfersByFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransfersByFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransfersByFilterRequestValidationError) ErrorName() string {
	return "ListTransfersByFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransfersByFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransfersByFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransfersByFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransfersByFilterRequestValidationError{}

var _ListTransfersByFilterRequest_FilterType_NotInLookup = map[ListFilterType]struct{}{
	0: {},
}

var _ListTransfersByFilterRequest_PageToken_Pattern = regexp.MustCompile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$")

// Validate checks the field values on ListTransfersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTransfersResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTransfers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTransfersResponseValidationError{
					field:  fmt.Sprintf("Transfers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	return nil
}

// ListTransfersResponseValidationError is the validation error returned by
// ListTransfersResponse.Validate if the designated constraints aren't met.
type ListTransfersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransfersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransfersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransfersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransfersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransfersResponseValidationError) ErrorName() string {
	return "ListTransfersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransfersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransfersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransfersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransfersResponseValidationError{}

// Validate checks the field values on GetRateSnapshotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRateSnapshotRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetRateSnapshotRequest_RateSnapshotId_Pattern.MatchString(m.GetRateSnapshotId()) {
		return GetRateSnapshotRequestValidationError{
			field:  "RateSnapshotId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// GetRateSnapshotRequestValidationError is the validation error returned by
// GetRateSnapshotRequest.Validate if the designated constraints aren't met.
type GetRateSnapshotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRateSnapshotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRateSnapshotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRateSnapshotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRateSnapshotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRateSnapshotRequestValidationError) ErrorName() string {
	return "GetRateSnapshotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRateSnapshotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRateSnapshotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRateSnapshotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRateSnapshotRequestValidationError{}

var _GetRateSnapshotRequest_RateSnapshotId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetLatestRateSnapshotRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetLatestRateSnapshotRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetLatestRateSnapshotRequestValidationError is the validation error returned
// by GetLatestRateSnapshotRequest.Validate if the designated constraints
// aren't met.
type GetLatestRateSnapshotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLatestRateSnapshotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLatestRateSnapshotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLatestRateSnapshotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLatestRateSnapshotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLatestRateSnapshotRequestValidationError) ErrorName() string {
	return "GetLatestRateSnapshotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLatestRateSnapshotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLatestRateSnapshotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLatestRateSnapshotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLatestRateSnapshotRequestValidationError{}

// Validate checks the field values on SetRatesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SetRatesRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRates() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetRatesRequestValidationError{
					field:  fmt.Sprintf("Rates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SetRatesRequestValidationError is the validation error returned by
// SetRatesRequest.Validate if the designated constraints aren't met.
type SetRatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRatesRequestValidationError) ErrorName() string { return "SetRatesRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetRatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRatesRequestValidationError{}

// Validate checks the field values on SetRatesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SetRatesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RateSnapshotId

	return nil
}

// SetRatesResponseValidationError is the validation error returned by
// SetRatesResponse.Validate if the designated constraints aren't met.
type SetRatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRatesResponseValidationError) ErrorName() string { return "SetRatesResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetRatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRatesResponseValidationError{}

// Validate checks the field values on GetSpendableBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSpendableBalanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetSpendableBalanceRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return GetSpendableBalanceRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// GetSpendableBalanceRequestValidationError is the validation error returned
// by GetSpendableBalanceRequest.Validate if the designated constraints aren't met.
type GetSpendableBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpendableBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpendableBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpendableBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpendableBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpendableBalanceRequestValidationError) ErrorName() string {
	return "GetSpendableBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpendableBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpendableBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpendableBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpendableBalanceRequestValidationError{}

var _GetSpendableBalanceRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on GetSpendableBalanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSpendableBalanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalSpendableBalance

	// no validation rules for StringTotalSpendableBalance

	// no validation rules for DailySpendableBalance

	// no validation rules for StringDailySpendableBalance

	// no validation rules for HourlySpendableBalance

	// no validation rules for StringHourlySpendableBalance

	// no validation rules for OneTimeSpendableBalance

	// no validation rules for StringOneTimeSpendableBalance

	return nil
}

// GetSpendableBalanceResponseValidationError is the validation error returned
// by GetSpendableBalanceResponse.Validate if the designated constraints
// aren't met.
type GetSpendableBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpendableBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpendableBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpendableBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpendableBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpendableBalanceResponseValidationError) ErrorName() string {
	return "GetSpendableBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpendableBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpendableBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpendableBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpendableBalanceResponseValidationError{}

// Validate checks the field values on GetTotalBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTotalBalanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WatchOnly

	return nil
}

// GetTotalBalanceRequestValidationError is the validation error returned by
// GetTotalBalanceRequest.Validate if the designated constraints aren't met.
type GetTotalBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTotalBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTotalBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTotalBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTotalBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTotalBalanceRequestValidationError) ErrorName() string {
	return "GetTotalBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTotalBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTotalBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTotalBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTotalBalanceRequestValidationError{}

// Validate checks the field values on ListBalanceSnapshotsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListBalanceSnapshotsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WatchOnly

	if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListBalanceSnapshotsRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListBalanceSnapshotsRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListBalanceSnapshotsRequestValidationError is the validation error returned
// by ListBalanceSnapshotsRequest.Validate if the designated constraints
// aren't met.
type ListBalanceSnapshotsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBalanceSnapshotsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBalanceSnapshotsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBalanceSnapshotsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBalanceSnapshotsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBalanceSnapshotsRequestValidationError) ErrorName() string {
	return "ListBalanceSnapshotsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBalanceSnapshotsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBalanceSnapshotsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBalanceSnapshotsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBalanceSnapshotsRequestValidationError{}

// Validate checks the field values on ListBalanceSnapshotsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListBalanceSnapshotsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetBalanceSnapshots() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBalanceSnapshotsResponseValidationError{
					field:  fmt.Sprintf("BalanceSnapshots[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListBalanceSnapshotsResponseValidationError is the validation error returned
// by ListBalanceSnapshotsResponse.Validate if the designated constraints
// aren't met.
type ListBalanceSnapshotsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBalanceSnapshotsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBalanceSnapshotsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBalanceSnapshotsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBalanceSnapshotsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBalanceSnapshotsResponseValidationError) ErrorName() string {
	return "ListBalanceSnapshotsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBalanceSnapshotsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBalanceSnapshotsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBalanceSnapshotsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBalanceSnapshotsResponseValidationError{}

// Validate checks the field values on ListWalletBalanceSnapshotsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListWalletBalanceSnapshotsRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetWalletIds() {
		_, _ = idx, item

		if !_ListWalletBalanceSnapshotsRequest_WalletIds_Pattern.MatchString(item) {
			return ListWalletBalanceSnapshotsRequestValidationError{
				field:  fmt.Sprintf("WalletIds[%v]", idx),
				reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
			}
		}

	}

	if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWalletBalanceSnapshotsRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWalletBalanceSnapshotsRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListWalletBalanceSnapshotsRequestValidationError is the validation error
// returned by ListWalletBalanceSnapshotsRequest.Validate if the designated
// constraints aren't met.
type ListWalletBalanceSnapshotsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletBalanceSnapshotsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletBalanceSnapshotsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletBalanceSnapshotsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletBalanceSnapshotsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletBalanceSnapshotsRequestValidationError) ErrorName() string {
	return "ListWalletBalanceSnapshotsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletBalanceSnapshotsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletBalanceSnapshotsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletBalanceSnapshotsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletBalanceSnapshotsRequestValidationError{}

var _ListWalletBalanceSnapshotsRequest_WalletIds_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListWalletBalanceSnapshotsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListWalletBalanceSnapshotsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetWalletBalanceSnapshotMap()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWalletBalanceSnapshotsResponseValidationError{
				field:  "WalletBalanceSnapshotMap",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListWalletBalanceSnapshotsResponseValidationError is the validation error
// returned by ListWalletBalanceSnapshotsResponse.Validate if the designated
// constraints aren't met.
type ListWalletBalanceSnapshotsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletBalanceSnapshotsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletBalanceSnapshotsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletBalanceSnapshotsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletBalanceSnapshotsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletBalanceSnapshotsResponseValidationError) ErrorName() string {
	return "ListWalletBalanceSnapshotsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletBalanceSnapshotsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletBalanceSnapshotsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletBalanceSnapshotsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletBalanceSnapshotsResponseValidationError{}

// Validate checks the field values on ListTransferVolumeSnapshotsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListTransferVolumeSnapshotsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WatchOnly

	if m.GetStartTime() == nil {
		return ListTransferVolumeSnapshotsRequestValidationError{
			field:  "StartTime",
			reason: "value is required",
		}
	}

	if m.GetEndTime() == nil {
		return ListTransferVolumeSnapshotsRequestValidationError{
			field:  "EndTime",
			reason: "value is required",
		}
	}

	return nil
}

// ListTransferVolumeSnapshotsRequestValidationError is the validation error
// returned by ListTransferVolumeSnapshotsRequest.Validate if the designated
// constraints aren't met.
type ListTransferVolumeSnapshotsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransferVolumeSnapshotsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransferVolumeSnapshotsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransferVolumeSnapshotsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransferVolumeSnapshotsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransferVolumeSnapshotsRequestValidationError) ErrorName() string {
	return "ListTransferVolumeSnapshotsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransferVolumeSnapshotsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransferVolumeSnapshotsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransferVolumeSnapshotsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransferVolumeSnapshotsRequestValidationError{}

// Validate checks the field values on ListTransferVolumeSnapshotsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListTransferVolumeSnapshotsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTransferVolumeSnapshots()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTransferVolumeSnapshotsResponseValidationError{
				field:  "TransferVolumeSnapshots",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListTransferVolumeSnapshotsResponseValidationError is the validation error
// returned by ListTransferVolumeSnapshotsResponse.Validate if the designated
// constraints aren't met.
type ListTransferVolumeSnapshotsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransferVolumeSnapshotsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransferVolumeSnapshotsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransferVolumeSnapshotsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransferVolumeSnapshotsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransferVolumeSnapshotsResponseValidationError) ErrorName() string {
	return "ListTransferVolumeSnapshotsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransferVolumeSnapshotsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransferVolumeSnapshotsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransferVolumeSnapshotsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransferVolumeSnapshotsResponseValidationError{}

// Validate checks the field values on ListWalletTransferVolumeSnapshotsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListWalletTransferVolumeSnapshotsRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetWalletIds() {
		_, _ = idx, item

		if !_ListWalletTransferVolumeSnapshotsRequest_WalletIds_Pattern.MatchString(item) {
			return ListWalletTransferVolumeSnapshotsRequestValidationError{
				field:  fmt.Sprintf("WalletIds[%v]", idx),
				reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
			}
		}

	}

	if m.GetStartTime() == nil {
		return ListWalletTransferVolumeSnapshotsRequestValidationError{
			field:  "StartTime",
			reason: "value is required",
		}
	}

	if m.GetEndTime() == nil {
		return ListWalletTransferVolumeSnapshotsRequestValidationError{
			field:  "EndTime",
			reason: "value is required",
		}
	}

	return nil
}

// ListWalletTransferVolumeSnapshotsRequestValidationError is the validation
// error returned by ListWalletTransferVolumeSnapshotsRequest.Validate if the
// designated constraints aren't met.
type ListWalletTransferVolumeSnapshotsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletTransferVolumeSnapshotsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletTransferVolumeSnapshotsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletTransferVolumeSnapshotsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletTransferVolumeSnapshotsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletTransferVolumeSnapshotsRequestValidationError) ErrorName() string {
	return "ListWalletTransferVolumeSnapshotsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletTransferVolumeSnapshotsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletTransferVolumeSnapshotsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletTransferVolumeSnapshotsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletTransferVolumeSnapshotsRequestValidationError{}

var _ListWalletTransferVolumeSnapshotsRequest_WalletIds_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on
// ListWalletTransferVolumeSnapshotsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ListWalletTransferVolumeSnapshotsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetWalletTransferVolumeSnapshots()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWalletTransferVolumeSnapshotsResponseValidationError{
				field:  "WalletTransferVolumeSnapshots",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListWalletTransferVolumeSnapshotsResponseValidationError is the validation
// error returned by ListWalletTransferVolumeSnapshotsResponse.Validate if the
// designated constraints aren't met.
type ListWalletTransferVolumeSnapshotsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletTransferVolumeSnapshotsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletTransferVolumeSnapshotsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletTransferVolumeSnapshotsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletTransferVolumeSnapshotsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletTransferVolumeSnapshotsResponseValidationError) ErrorName() string {
	return "ListWalletTransferVolumeSnapshotsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletTransferVolumeSnapshotsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletTransferVolumeSnapshotsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletTransferVolumeSnapshotsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletTransferVolumeSnapshotsResponseValidationError{}

// Validate checks the field values on CalculateFeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CalculateFeeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CalculateFeeRequest_WalletId_Pattern.MatchString(m.GetWalletId()) {
		return CalculateFeeRequestValidationError{
			field:  "WalletId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if m.GetFeeRate() < 1 {
		return CalculateFeeRequestValidationError{
			field:  "FeeRate",
			reason: "value must be greater than or equal to 1",
		}
	}

	for idx, item := range m.GetTxOutputs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CalculateFeeRequestValidationError{
					field:  fmt.Sprintf("TxOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Address

	// no validation rules for DestinationTag

	// no validation rules for StringValue

	return nil
}

// CalculateFeeRequestValidationError is the validation error returned by
// CalculateFeeRequest.Validate if the designated constraints aren't met.
type CalculateFeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateFeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateFeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateFeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateFeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateFeeRequestValidationError) ErrorName() string {
	return "CalculateFeeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateFeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateFeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateFeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateFeeRequestValidationError{}

var _CalculateFeeRequest_WalletId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CalculateFeeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CalculateFeeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Fee

	// no validation rules for StringFee

	return nil
}

// CalculateFeeResponseValidationError is the validation error returned by
// CalculateFeeResponse.Validate if the designated constraints aren't met.
type CalculateFeeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateFeeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateFeeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateFeeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateFeeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateFeeResponseValidationError) ErrorName() string {
	return "CalculateFeeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateFeeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateFeeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateFeeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateFeeResponseValidationError{}

// Validate checks the field values on GetMembersDeactivatabilitiesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetMembersDeactivatabilitiesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetMembersDeactivatabilitiesRequestValidationError is the validation error
// returned by GetMembersDeactivatabilitiesRequest.Validate if the designated
// constraints aren't met.
type GetMembersDeactivatabilitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMembersDeactivatabilitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMembersDeactivatabilitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMembersDeactivatabilitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMembersDeactivatabilitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMembersDeactivatabilitiesRequestValidationError) ErrorName() string {
	return "GetMembersDeactivatabilitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMembersDeactivatabilitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMembersDeactivatabilitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMembersDeactivatabilitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMembersDeactivatabilitiesRequestValidationError{}

// Validate checks the field values on GetMembersDeactivatabilitiesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetMembersDeactivatabilitiesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetDeactivatabilities() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMembersDeactivatabilitiesResponseValidationError{
					field:  fmt.Sprintf("Deactivatabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetMembersDeactivatabilitiesResponseValidationError is the validation error
// returned by GetMembersDeactivatabilitiesResponse.Validate if the designated
// constraints aren't met.
type GetMembersDeactivatabilitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMembersDeactivatabilitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMembersDeactivatabilitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMembersDeactivatabilitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMembersDeactivatabilitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMembersDeactivatabilitiesResponseValidationError) ErrorName() string {
	return "GetMembersDeactivatabilitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMembersDeactivatabilitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMembersDeactivatabilitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMembersDeactivatabilitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMembersDeactivatabilitiesResponseValidationError{}

// Validate checks the field values on GetRecommendedFeeRateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRecommendedFeeRateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _GetRecommendedFeeRateRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		return GetRecommendedFeeRateRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		return GetRecommendedFeeRateRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// GetRecommendedFeeRateRequestValidationError is the validation error returned
// by GetRecommendedFeeRateRequest.Validate if the designated constraints
// aren't met.
type GetRecommendedFeeRateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecommendedFeeRateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecommendedFeeRateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecommendedFeeRateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecommendedFeeRateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecommendedFeeRateRequestValidationError) ErrorName() string {
	return "GetRecommendedFeeRateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecommendedFeeRateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecommendedFeeRateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecommendedFeeRateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecommendedFeeRateRequestValidationError{}

var _GetRecommendedFeeRateRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

// Validate checks the field values on GetRecommendedFeeRateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRecommendedFeeRateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Fastest

	// no validation rules for Fast

	// no validation rules for Average

	// no validation rules for SafeLow

	return nil
}

// GetRecommendedFeeRateResponseValidationError is the validation error
// returned by GetRecommendedFeeRateResponse.Validate if the designated
// constraints aren't met.
type GetRecommendedFeeRateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecommendedFeeRateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecommendedFeeRateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecommendedFeeRateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecommendedFeeRateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecommendedFeeRateResponseValidationError) ErrorName() string {
	return "GetRecommendedFeeRateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecommendedFeeRateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecommendedFeeRateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecommendedFeeRateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecommendedFeeRateResponseValidationError{}

// Validate checks the field values on ValidateAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ValidateAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _ValidateAddressRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		return ValidateAddressRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		return ValidateAddressRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
	}

	if utf8.RuneCountInString(m.GetAddress()) < 25 {
		return ValidateAddressRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 25 runes",
		}
	}

	return nil
}

// ValidateAddressRequestValidationError is the validation error returned by
// ValidateAddressRequest.Validate if the designated constraints aren't met.
type ValidateAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateAddressRequestValidationError) ErrorName() string {
	return "ValidateAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateAddressRequestValidationError{}

var _ValidateAddressRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

// Validate checks the field values on ValidateAddressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ValidateAddressResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Valid

	return nil
}

// ValidateAddressResponseValidationError is the validation error returned by
// ValidateAddressResponse.Validate if the designated constraints aren't met.
type ValidateAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateAddressResponseValidationError) ErrorName() string {
	return "ValidateAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateAddressResponseValidationError{}

// Validate checks the field values on ListConfirmationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListConfirmationsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListConfirmationsRequestValidationError is the validation error returned by
// ListConfirmationsRequest.Validate if the designated constraints aren't met.
type ListConfirmationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfirmationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfirmationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfirmationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfirmationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfirmationsRequestValidationError) ErrorName() string {
	return "ListConfirmationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfirmationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfirmationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfirmationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfirmationsRequestValidationError{}

// Validate checks the field values on ListConfirmationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListConfirmationsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetConfirmations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListConfirmationsResponseValidationError{
					field:  fmt.Sprintf("Confirmations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListConfirmationsResponseValidationError is the validation error returned by
// ListConfirmationsResponse.Validate if the designated constraints aren't met.
type ListConfirmationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfirmationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfirmationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfirmationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfirmationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfirmationsResponseValidationError) ErrorName() string {
	return "ListConfirmationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfirmationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfirmationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfirmationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfirmationsResponseValidationError{}

// Validate checks the field values on CreateLabeledAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateLabeledAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		return CreateLabeledAddressRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	if _, ok := _CreateLabeledAddressRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		return CreateLabeledAddressRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		return CreateLabeledAddressRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
	}

	if utf8.RuneCountInString(m.GetAddress()) < 25 {
		return CreateLabeledAddressRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 25 runes",
		}
	}

	return nil
}

// CreateLabeledAddressRequestValidationError is the validation error returned
// by CreateLabeledAddressRequest.Validate if the designated constraints
// aren't met.
type CreateLabeledAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLabeledAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLabeledAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLabeledAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLabeledAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLabeledAddressRequestValidationError) ErrorName() string {
	return "CreateLabeledAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLabeledAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLabeledAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLabeledAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLabeledAddressRequestValidationError{}

var _CreateLabeledAddressRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

// Validate checks the field values on CreateLabeledAddressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateLabeledAddressResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for LabeledAddressId

	return nil
}

// CreateLabeledAddressResponseValidationError is the validation error returned
// by CreateLabeledAddressResponse.Validate if the designated constraints
// aren't met.
type CreateLabeledAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLabeledAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLabeledAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLabeledAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLabeledAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLabeledAddressResponseValidationError) ErrorName() string {
	return "CreateLabeledAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLabeledAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLabeledAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLabeledAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLabeledAddressResponseValidationError{}

// Validate checks the field values on UpdateLabeledAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateLabeledAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdateLabeledAddressRequest_LabeledAddressId_Pattern.MatchString(m.GetLabeledAddressId()) {
		return UpdateLabeledAddressRequestValidationError{
			field:  "LabeledAddressId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		return UpdateLabeledAddressRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	if _, ok := _UpdateLabeledAddressRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		return UpdateLabeledAddressRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		return UpdateLabeledAddressRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
	}

	if utf8.RuneCountInString(m.GetAddress()) < 25 {
		return UpdateLabeledAddressRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 25 runes",
		}
	}

	return nil
}

// UpdateLabeledAddressRequestValidationError is the validation error returned
// by UpdateLabeledAddressRequest.Validate if the designated constraints
// aren't met.
type UpdateLabeledAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLabeledAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLabeledAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLabeledAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLabeledAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLabeledAddressRequestValidationError) ErrorName() string {
	return "UpdateLabeledAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLabeledAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLabeledAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLabeledAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLabeledAddressRequestValidationError{}

var _UpdateLabeledAddressRequest_LabeledAddressId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _UpdateLabeledAddressRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

// Validate checks the field values on GetLabeledAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetLabeledAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetLabeledAddressRequest_LabeledAddressId_Pattern.MatchString(m.GetLabeledAddressId()) {
		return GetLabeledAddressRequestValidationError{
			field:  "LabeledAddressId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// GetLabeledAddressRequestValidationError is the validation error returned by
// GetLabeledAddressRequest.Validate if the designated constraints aren't met.
type GetLabeledAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLabeledAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLabeledAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLabeledAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLabeledAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLabeledAddressRequestValidationError) ErrorName() string {
	return "GetLabeledAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLabeledAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLabeledAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLabeledAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLabeledAddressRequestValidationError{}

var _GetLabeledAddressRequest_LabeledAddressId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListLabeledAddressesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLabeledAddressesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListLabeledAddressesRequestValidationError is the validation error returned
// by ListLabeledAddressesRequest.Validate if the designated constraints
// aren't met.
type ListLabeledAddressesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLabeledAddressesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLabeledAddressesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLabeledAddressesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLabeledAddressesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLabeledAddressesRequestValidationError) ErrorName() string {
	return "ListLabeledAddressesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLabeledAddressesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLabeledAddressesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLabeledAddressesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLabeledAddressesRequestValidationError{}

// Validate checks the field values on ListLabeledAddressesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLabeledAddressesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLabeledAddressesResponseValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListLabeledAddressesResponseValidationError is the validation error returned
// by ListLabeledAddressesResponse.Validate if the designated constraints
// aren't met.
type ListLabeledAddressesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLabeledAddressesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLabeledAddressesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLabeledAddressesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLabeledAddressesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLabeledAddressesResponseValidationError) ErrorName() string {
	return "ListLabeledAddressesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLabeledAddressesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLabeledAddressesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLabeledAddressesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLabeledAddressesResponseValidationError{}

// Validate checks the field values on DeleteLabeledAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteLabeledAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeleteLabeledAddressRequest_LabeledAddressId_Pattern.MatchString(m.GetLabeledAddressId()) {
		return DeleteLabeledAddressRequestValidationError{
			field:  "LabeledAddressId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// DeleteLabeledAddressRequestValidationError is the validation error returned
// by DeleteLabeledAddressRequest.Validate if the designated constraints
// aren't met.
type DeleteLabeledAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLabeledAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLabeledAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLabeledAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLabeledAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLabeledAddressRequestValidationError) ErrorName() string {
	return "DeleteLabeledAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLabeledAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLabeledAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLabeledAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLabeledAddressRequestValidationError{}

var _DeleteLabeledAddressRequest_LabeledAddressId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ReviewLabeledAddressProposalRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ReviewLabeledAddressProposalRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ReviewLabeledAddressProposalRequest_LabeledAddressId_Pattern.MatchString(m.GetLabeledAddressId()) {
		return ReviewLabeledAddressProposalRequestValidationError{
			field:  "LabeledAddressId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	// no validation rules for Approve

	return nil
}

// ReviewLabeledAddressProposalRequestValidationError is the validation error
// returned by ReviewLabeledAddressProposalRequest.Validate if the designated
// constraints aren't met.
type ReviewLabeledAddressProposalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewLabeledAddressProposalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewLabeledAddressProposalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewLabeledAddressProposalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewLabeledAddressProposalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewLabeledAddressProposalRequestValidationError) ErrorName() string {
	return "ReviewLabeledAddressProposalRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewLabeledAddressProposalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewLabeledAddressProposalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewLabeledAddressProposalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewLabeledAddressProposalRequestValidationError{}

var _ReviewLabeledAddressProposalRequest_LabeledAddressId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreateWhitelistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateWhitelistRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		return CreateWhitelistRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	if _, ok := _CreateWhitelistRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		return CreateWhitelistRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		return CreateWhitelistRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
	}

	_CreateWhitelistRequest_AddressIds_Unique := make(map[string]struct{}, len(m.GetAddressIds()))

	for idx, item := range m.GetAddressIds() {
		_, _ = idx, item

		if _, exists := _CreateWhitelistRequest_AddressIds_Unique[item]; exists {
			return CreateWhitelistRequestValidationError{
				field:  fmt.Sprintf("AddressIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_CreateWhitelistRequest_AddressIds_Unique[item] = struct{}{}
		}

		// no validation rules for AddressIds[idx]
	}

	return nil
}

// CreateWhitelistRequestValidationError is the validation error returned by
// CreateWhitelistRequest.Validate if the designated constraints aren't met.
type CreateWhitelistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWhitelistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWhitelistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWhitelistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWhitelistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWhitelistRequestValidationError) ErrorName() string {
	return "CreateWhitelistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWhitelistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWhitelistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWhitelistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWhitelistRequestValidationError{}

var _CreateWhitelistRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

// Validate checks the field values on CreateWhitelistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateWhitelistResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WhitelistId

	return nil
}

// CreateWhitelistResponseValidationError is the validation error returned by
// CreateWhitelistResponse.Validate if the designated constraints aren't met.
type CreateWhitelistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWhitelistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWhitelistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWhitelistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWhitelistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWhitelistResponseValidationError) ErrorName() string {
	return "CreateWhitelistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWhitelistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWhitelistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWhitelistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWhitelistResponseValidationError{}

// Validate checks the field values on GetWhitelistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetWhitelistRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetWhitelistRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		return GetWhitelistRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// GetWhitelistRequestValidationError is the validation error returned by
// GetWhitelistRequest.Validate if the designated constraints aren't met.
type GetWhitelistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWhitelistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWhitelistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWhitelistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWhitelistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWhitelistRequestValidationError) ErrorName() string {
	return "GetWhitelistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWhitelistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWhitelistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWhitelistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWhitelistRequestValidationError{}

var _GetWhitelistRequest_WhitelistId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListWhitelistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListWhitelistsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListWhitelistsRequestValidationError is the validation error returned by
// ListWhitelistsRequest.Validate if the designated constraints aren't met.
type ListWhitelistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWhitelistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWhitelistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWhitelistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWhitelistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWhitelistsRequestValidationError) ErrorName() string {
	return "ListWhitelistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWhitelistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWhitelistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWhitelistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWhitelistsRequestValidationError{}

// Validate checks the field values on ListWhitelistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListWhitelistsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetWhitelists() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWhitelistsResponseValidationError{
					field:  fmt.Sprintf("Whitelists[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListWhitelistsResponseValidationError is the validation error returned by
// ListWhitelistsResponse.Validate if the designated constraints aren't met.
type ListWhitelistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWhitelistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWhitelistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWhitelistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWhitelistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWhitelistsResponseValidationError) ErrorName() string {
	return "ListWhitelistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWhitelistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWhitelistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWhitelistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWhitelistsResponseValidationError{}

// Validate checks the field values on UpdateWhitelistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateWhitelistRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdateWhitelistRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		return UpdateWhitelistRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		return UpdateWhitelistRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	if _, ok := _UpdateWhitelistRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		return UpdateWhitelistRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		return UpdateWhitelistRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
	}

	_UpdateWhitelistRequest_AddressIds_Unique := make(map[string]struct{}, len(m.GetAddressIds()))

	for idx, item := range m.GetAddressIds() {
		_, _ = idx, item

		if _, exists := _UpdateWhitelistRequest_AddressIds_Unique[item]; exists {
			return UpdateWhitelistRequestValidationError{
				field:  fmt.Sprintf("AddressIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_UpdateWhitelistRequest_AddressIds_Unique[item] = struct{}{}
		}

		// no validation rules for AddressIds[idx]
	}

	return nil
}

// UpdateWhitelistRequestValidationError is the validation error returned by
// UpdateWhitelistRequest.Validate if the designated constraints aren't met.
type UpdateWhitelistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWhitelistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWhitelistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWhitelistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWhitelistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWhitelistRequestValidationError) ErrorName() string {
	return "UpdateWhitelistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWhitelistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWhitelistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWhitelistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWhitelistRequestValidationError{}

var _UpdateWhitelistRequest_WhitelistId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _UpdateWhitelistRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

// Validate checks the field values on UpdateWhitelistAddressesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateWhitelistAddressesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdateWhitelistAddressesRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		return UpdateWhitelistAddressesRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	_UpdateWhitelistAddressesRequest_AddressIds_Unique := make(map[string]struct{}, len(m.GetAddressIds()))

	for idx, item := range m.GetAddressIds() {
		_, _ = idx, item

		if _, exists := _UpdateWhitelistAddressesRequest_AddressIds_Unique[item]; exists {
			return UpdateWhitelistAddressesRequestValidationError{
				field:  fmt.Sprintf("AddressIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_UpdateWhitelistAddressesRequest_AddressIds_Unique[item] = struct{}{}
		}

		// no validation rules for AddressIds[idx]
	}

	return nil
}

// UpdateWhitelistAddressesRequestValidationError is the validation error
// returned by UpdateWhitelistAddressesRequest.Validate if the designated
// constraints aren't met.
type UpdateWhitelistAddressesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWhitelistAddressesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWhitelistAddressesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWhitelistAddressesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWhitelistAddressesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWhitelistAddressesRequestValidationError) ErrorName() string {
	return "UpdateWhitelistAddressesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWhitelistAddressesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWhitelistAddressesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWhitelistAddressesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWhitelistAddressesRequestValidationError{}

var _UpdateWhitelistAddressesRequest_WhitelistId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on DeleteWhitelistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteWhitelistRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeleteWhitelistRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		return DeleteWhitelistRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// DeleteWhitelistRequestValidationError is the validation error returned by
// DeleteWhitelistRequest.Validate if the designated constraints aren't met.
type DeleteWhitelistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWhitelistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWhitelistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWhitelistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWhitelistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWhitelistRequestValidationError) ErrorName() string {
	return "DeleteWhitelistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWhitelistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWhitelistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWhitelistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWhitelistRequestValidationError{}

var _DeleteWhitelistRequest_WhitelistId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreateTransferLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTransferLimitRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		return CreateTransferLimitRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	if _, ok := _CreateTransferLimitRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		return CreateTransferLimitRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		return CreateTransferLimitRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
	}

	if len(m.GetTransferLimits()) < 1 {
		return CreateTransferLimitRequestValidationError{
			field:  "TransferLimits",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetTransferLimits() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateTransferLimitRequestValidationError{
					field:  fmt.Sprintf("TransferLimits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CreateTransferLimitRequestValidationError is the validation error returned
// by CreateTransferLimitRequest.Validate if the designated constraints aren't met.
type CreateTransferLimitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransferLimitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransferLimitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransferLimitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransferLimitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransferLimitRequestValidationError) ErrorName() string {
	return "CreateTransferLimitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransferLimitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransferLimitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransferLimitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransferLimitRequestValidationError{}

var _CreateTransferLimitRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

// Validate checks the field values on CreateTransferLimitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTransferLimitResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TransferLimitId

	return nil
}

// CreateTransferLimitResponseValidationError is the validation error returned
// by CreateTransferLimitResponse.Validate if the designated constraints
// aren't met.
type CreateTransferLimitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransferLimitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransferLimitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransferLimitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransferLimitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransferLimitResponseValidationError) ErrorName() string {
	return "CreateTransferLimitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransferLimitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransferLimitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransferLimitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransferLimitResponseValidationError{}

// Validate checks the field values on GetTransferLimitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTransferLimitRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetTransferLimitRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		return GetTransferLimitRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// GetTransferLimitRequestValidationError is the validation error returned by
// GetTransferLimitRequest.Validate if the designated constraints aren't met.
type GetTransferLimitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransferLimitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransferLimitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransferLimitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransferLimitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransferLimitRequestValidationError) ErrorName() string {
	return "GetTransferLimitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransferLimitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransferLimitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransferLimitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransferLimitRequestValidationError{}

var _GetTransferLimitRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListTransferLimitsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTransferLimitsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListTransferLimitsRequestValidationError is the validation error returned by
// ListTransferLimitsRequest.Validate if the designated constraints aren't met.
type ListTransferLimitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransferLimitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransferLimitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransferLimitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransferLimitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransferLimitsRequestValidationError) ErrorName() string {
	return "ListTransferLimitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransferLimitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransferLimitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransferLimitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransferLimitsRequestValidationError{}

// Validate checks the field values on ListTransferLimitsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTransferLimitsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTransferLimits() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTransferLimitsResponseValidationError{
					field:  fmt.Sprintf("TransferLimits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListTransferLimitsResponseValidationError is the validation error returned
// by ListTransferLimitsResponse.Validate if the designated constraints aren't met.
type ListTransferLimitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransferLimitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransferLimitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransferLimitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransferLimitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransferLimitsResponseValidationError) ErrorName() string {
	return "ListTransferLimitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransferLimitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransferLimitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransferLimitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransferLimitsResponseValidationError{}

// Validate checks the field values on UpdateTransferLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTransferLimitRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdateTransferLimitRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		return UpdateTransferLimitRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if len(m.GetTransferLimits()) < 1 {
		return UpdateTransferLimitRequestValidationError{
			field:  "TransferLimits",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetTransferLimits() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateTransferLimitRequestValidationError{
					field:  fmt.Sprintf("TransferLimits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpdateTransferLimitRequestValidationError is the validation error returned
// by UpdateTransferLimitRequest.Validate if the designated constraints aren't met.
type UpdateTransferLimitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTransferLimitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTransferLimitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTransferLimitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTransferLimitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTransferLimitRequestValidationError) ErrorName() string {
	return "UpdateTransferLimitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTransferLimitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTransferLimitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTransferLimitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTransferLimitRequestValidationError{}

var _UpdateTransferLimitRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on UpdateTransferLimitNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTransferLimitNameRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdateTransferLimitNameRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		return UpdateTransferLimitNameRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		return UpdateTransferLimitNameRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	return nil
}

// UpdateTransferLimitNameRequestValidationError is the validation error
// returned by UpdateTransferLimitNameRequest.Validate if the designated
// constraints aren't met.
type UpdateTransferLimitNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTransferLimitNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTransferLimitNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTransferLimitNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTransferLimitNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTransferLimitNameRequestValidationError) ErrorName() string {
	return "UpdateTransferLimitNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTransferLimitNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTransferLimitNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTransferLimitNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTransferLimitNameRequestValidationError{}

var _UpdateTransferLimitNameRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on DeleteTransferLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteTransferLimitRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeleteTransferLimitRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		return DeleteTransferLimitRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// DeleteTransferLimitRequestValidationError is the validation error returned
// by DeleteTransferLimitRequest.Validate if the designated constraints aren't met.
type DeleteTransferLimitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTransferLimitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTransferLimitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTransferLimitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTransferLimitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTransferLimitRequestValidationError) ErrorName() string {
	return "DeleteTransferLimitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTransferLimitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTransferLimitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTransferLimitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTransferLimitRequestValidationError{}

var _DeleteTransferLimitRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ReviewTransferLimitProposalRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ReviewTransferLimitProposalRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ReviewTransferLimitProposalRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		return ReviewTransferLimitProposalRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	// no validation rules for Approve

	return nil
}

// ReviewTransferLimitProposalRequestValidationError is the validation error
// returned by ReviewTransferLimitProposalRequest.Validate if the designated
// constraints aren't met.
type ReviewTransferLimitProposalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewTransferLimitProposalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewTransferLimitProposalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewTransferLimitProposalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewTransferLimitProposalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewTransferLimitProposalRequestValidationError) ErrorName() string {
	return "ReviewTransferLimitProposalRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewTransferLimitProposalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewTransferLimitProposalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewTransferLimitProposalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewTransferLimitProposalRequestValidationError{}

var _ReviewTransferLimitProposalRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		return CreatePolicyRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	if _, ok := _CreatePolicyRequest_Coin_NotInLookup[m.GetCoin()]; ok {
		return CreatePolicyRequestValidationError{
			field:  "Coin",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := gincoincglobalv1.Coin_name[int32(m.GetCoin())]; !ok {
		return CreatePolicyRequestValidationError{
			field:  "Coin",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := _CreatePolicyRequest_Type_NotInLookup[m.GetType()]; ok {
		return CreatePolicyRequestValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := PolicyType_name[int32(m.GetType())]; !ok {
		return CreatePolicyRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	if !_CreatePolicyRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		return CreatePolicyRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_CreatePolicyRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		return CreatePolicyRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// CreatePolicyRequestValidationError is the validation error returned by
// CreatePolicyRequest.Validate if the designated constraints aren't met.
type CreatePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicyRequestValidationError) ErrorName() string {
	return "CreatePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicyRequestValidationError{}

var _CreatePolicyRequest_Coin_NotInLookup = map[gincoincglobalv1.Coin]struct{}{
	0: {},
}

var _CreatePolicyRequest_Type_NotInLookup = map[PolicyType]struct{}{
	0: {},
}

var _CreatePolicyRequest_WhitelistId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _CreatePolicyRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on CreatePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PolicyId

	return nil
}

// CreatePolicyResponseValidationError is the validation error returned by
// CreatePolicyResponse.Validate if the designated constraints aren't met.
type CreatePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePolicyResponseValidationError) ErrorName() string {
	return "CreatePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePolicyResponseValidationError{}

// Validate checks the field values on GetPolicyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetPolicyRequest_PolicyId_Pattern.MatchString(m.GetPolicyId()) {
		return GetPolicyRequestValidationError{
			field:  "PolicyId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// GetPolicyRequestValidationError is the validation error returned by
// GetPolicyRequest.Validate if the designated constraints aren't met.
type GetPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPolicyRequestValidationError) ErrorName() string { return "GetPolicyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPolicyRequestValidationError{}

var _GetPolicyRequest_PolicyId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ListPoliciesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPoliciesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListPoliciesRequestValidationError is the validation error returned by
// ListPoliciesRequest.Validate if the designated constraints aren't met.
type ListPoliciesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPoliciesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPoliciesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPoliciesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPoliciesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPoliciesRequestValidationError) ErrorName() string {
	return "ListPoliciesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPoliciesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPoliciesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPoliciesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPoliciesRequestValidationError{}

// Validate checks the field values on IsDeletablePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsDeletablePolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_IsDeletablePolicyRequest_PolicyId_Pattern.MatchString(m.GetPolicyId()) {
		return IsDeletablePolicyRequestValidationError{
			field:  "PolicyId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// IsDeletablePolicyRequestValidationError is the validation error returned by
// IsDeletablePolicyRequest.Validate if the designated constraints aren't met.
type IsDeletablePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsDeletablePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsDeletablePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsDeletablePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsDeletablePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsDeletablePolicyRequestValidationError) ErrorName() string {
	return "IsDeletablePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsDeletablePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsDeletablePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsDeletablePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsDeletablePolicyRequestValidationError{}

var _IsDeletablePolicyRequest_PolicyId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on IsDeletablePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsDeletablePolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsDeletable

	return nil
}

// IsDeletablePolicyResponseValidationError is the validation error returned by
// IsDeletablePolicyResponse.Validate if the designated constraints aren't met.
type IsDeletablePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsDeletablePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsDeletablePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsDeletablePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsDeletablePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsDeletablePolicyResponseValidationError) ErrorName() string {
	return "IsDeletablePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsDeletablePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsDeletablePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsDeletablePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsDeletablePolicyResponseValidationError{}

// Validate checks the field values on IsDeletableLabeledAddressRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *IsDeletableLabeledAddressRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_IsDeletableLabeledAddressRequest_LabeledAddressId_Pattern.MatchString(m.GetLabeledAddressId()) {
		return IsDeletableLabeledAddressRequestValidationError{
			field:  "LabeledAddressId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// IsDeletableLabeledAddressRequestValidationError is the validation error
// returned by IsDeletableLabeledAddressRequest.Validate if the designated
// constraints aren't met.
type IsDeletableLabeledAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsDeletableLabeledAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsDeletableLabeledAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsDeletableLabeledAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsDeletableLabeledAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsDeletableLabeledAddressRequestValidationError) ErrorName() string {
	return "IsDeletableLabeledAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsDeletableLabeledAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsDeletableLabeledAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsDeletableLabeledAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsDeletableLabeledAddressRequestValidationError{}

var _IsDeletableLabeledAddressRequest_LabeledAddressId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on IsDeletableLabeledAddressResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *IsDeletableLabeledAddressResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsDeletable

	return nil
}

// IsDeletableLabeledAddressResponseValidationError is the validation error
// returned by IsDeletableLabeledAddressResponse.Validate if the designated
// constraints aren't met.
type IsDeletableLabeledAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsDeletableLabeledAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsDeletableLabeledAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsDeletableLabeledAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsDeletableLabeledAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsDeletableLabeledAddressResponseValidationError) ErrorName() string {
	return "IsDeletableLabeledAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsDeletableLabeledAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsDeletableLabeledAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsDeletableLabeledAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsDeletableLabeledAddressResponseValidationError{}

// Validate checks the field values on IsDeletableWhitelistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsDeletableWhitelistRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_IsDeletableWhitelistRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		return IsDeletableWhitelistRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// IsDeletableWhitelistRequestValidationError is the validation error returned
// by IsDeletableWhitelistRequest.Validate if the designated constraints
// aren't met.
type IsDeletableWhitelistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsDeletableWhitelistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsDeletableWhitelistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsDeletableWhitelistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsDeletableWhitelistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsDeletableWhitelistRequestValidationError) ErrorName() string {
	return "IsDeletableWhitelistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsDeletableWhitelistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsDeletableWhitelistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsDeletableWhitelistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsDeletableWhitelistRequestValidationError{}

var _IsDeletableWhitelistRequest_WhitelistId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on IsDeletableWhitelistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsDeletableWhitelistResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsDeletable

	return nil
}

// IsDeletableWhitelistResponseValidationError is the validation error returned
// by IsDeletableWhitelistResponse.Validate if the designated constraints
// aren't met.
type IsDeletableWhitelistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsDeletableWhitelistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsDeletableWhitelistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsDeletableWhitelistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsDeletableWhitelistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsDeletableWhitelistResponseValidationError) ErrorName() string {
	return "IsDeletableWhitelistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsDeletableWhitelistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsDeletableWhitelistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsDeletableWhitelistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsDeletableWhitelistResponseValidationError{}

// Validate checks the field values on IsDeletableTransferLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsDeletableTransferLimitRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_IsDeletableTransferLimitRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		return IsDeletableTransferLimitRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// IsDeletableTransferLimitRequestValidationError is the validation error
// returned by IsDeletableTransferLimitRequest.Validate if the designated
// constraints aren't met.
type IsDeletableTransferLimitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsDeletableTransferLimitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsDeletableTransferLimitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsDeletableTransferLimitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsDeletableTransferLimitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsDeletableTransferLimitRequestValidationError) ErrorName() string {
	return "IsDeletableTransferLimitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsDeletableTransferLimitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsDeletableTransferLimitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsDeletableTransferLimitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsDeletableTransferLimitRequestValidationError{}

var _IsDeletableTransferLimitRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on IsDeletableTransferLimitResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *IsDeletableTransferLimitResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsDeletable

	return nil
}

// IsDeletableTransferLimitResponseValidationError is the validation error
// returned by IsDeletableTransferLimitResponse.Validate if the designated
// constraints aren't met.
type IsDeletableTransferLimitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsDeletableTransferLimitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsDeletableTransferLimitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsDeletableTransferLimitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsDeletableTransferLimitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsDeletableTransferLimitResponseValidationError) ErrorName() string {
	return "IsDeletableTransferLimitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsDeletableTransferLimitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsDeletableTransferLimitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsDeletableTransferLimitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsDeletableTransferLimitResponseValidationError{}

// Validate checks the field values on ListPoliciesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPoliciesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPoliciesResponseValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListPoliciesResponseValidationError is the validation error returned by
// ListPoliciesResponse.Validate if the designated constraints aren't met.
type ListPoliciesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPoliciesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPoliciesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPoliciesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPoliciesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPoliciesResponseValidationError) ErrorName() string {
	return "ListPoliciesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPoliciesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPoliciesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPoliciesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPoliciesResponseValidationError{}

// Validate checks the field values on UpdatePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdatePolicyRequest_PolicyId_Pattern.MatchString(m.GetPolicyId()) {
		return UpdatePolicyRequestValidationError{
			field:  "PolicyId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		return UpdatePolicyRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	if !_UpdatePolicyRequest_WhitelistId_Pattern.MatchString(m.GetWhitelistId()) {
		return UpdatePolicyRequestValidationError{
			field:  "WhitelistId",
			reason: "value does not match regex pattern \"^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	if !_UpdatePolicyRequest_TransferLimitId_Pattern.MatchString(m.GetTransferLimitId()) {
		return UpdatePolicyRequestValidationError{
			field:  "TransferLimitId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// UpdatePolicyRequestValidationError is the validation error returned by
// UpdatePolicyRequest.Validate if the designated constraints aren't met.
type UpdatePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePolicyRequestValidationError) ErrorName() string {
	return "UpdatePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePolicyRequestValidationError{}

var _UpdatePolicyRequest_PolicyId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _UpdatePolicyRequest_WhitelistId_Pattern = regexp.MustCompile("^$|^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

var _UpdatePolicyRequest_TransferLimitId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on DeletePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeletePolicyRequest_PolicyId_Pattern.MatchString(m.GetPolicyId()) {
		return DeletePolicyRequestValidationError{
			field:  "PolicyId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	return nil
}

// DeletePolicyRequestValidationError is the validation error returned by
// DeletePolicyRequest.Validate if the designated constraints aren't met.
type DeletePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePolicyRequestValidationError) ErrorName() string {
	return "DeletePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePolicyRequestValidationError{}

var _DeletePolicyRequest_PolicyId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")

// Validate checks the field values on ReviewPolicyProposalRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReviewPolicyProposalRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ReviewPolicyProposalRequest_PolicyId_Pattern.MatchString(m.GetPolicyId()) {
		return ReviewPolicyProposalRequestValidationError{
			field:  "PolicyId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"",
		}
	}

	// no validation rules for Approve

	return nil
}

// ReviewPolicyProposalRequestValidationError is the validation error returned
// by ReviewPolicyProposalRequest.Validate if the designated constraints
// aren't met.
type ReviewPolicyProposalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewPolicyProposalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewPolicyProposalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewPolicyProposalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewPolicyProposalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewPolicyProposalRequestValidationError) ErrorName() string {
	return "ReviewPolicyProposalRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewPolicyProposalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewPolicyProposalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewPolicyProposalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewPolicyProposalRequestValidationError{}

var _ReviewPolicyProposalRequest_PolicyId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")
