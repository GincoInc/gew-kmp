// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gincoinc/adamant/global/v1/adamantglobalv1/audit_logger.proto

package adamantglobalv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	gincoincglobalv1 "github.com/GincoInc/gew-kmp/gen/gincoinc/global/v1/gincoincglobalv1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}

	_ = gincoincglobalv1.Coin(0)
)

// Validate checks the field values on AuditLog with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// AuditLogMultiError, or nil if none found. Otherwise, only the first error
// is returned, if any.
func (m *AuditLog) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuditLogId

	// no validation rules for AuditLogGroup

	// no validation rules for AuditLogType

	// no validation rules for AccountId

	// no validation rules for AccountName

	// no validation rules for TargetAccountId

	// no validation rules for TargetAccountName

	// no validation rules for Email

	// no validation rules for RoleType

	// no validation rules for ServiceAccountId

	// no validation rules for ServiceAccountName

	// no validation rules for ServiceAccountKeyId

	// no validation rules for WalletId

	// no validation rules for WalletName

	// no validation rules for WalletGroupId

	// no validation rules for WalletGroupName

	// no validation rules for TransactionId

	// no validation rules for CoinType

	// no validation rules for StringValue

	// no validation rules for TxId

	// no validation rules for PolicyId

	// no validation rules for PolicyName

	// no validation rules for LabeledAddressId

	// no validation rules for Address

	// no validation rules for AddressName

	// no validation rules for TransferLimitId

	// no validation rules for TransferLimitName

	// no validation rules for TransferOneTimeLimit

	// no validation rules for TransferHourlyLimit

	// no validation rules for TransferDailyLimit

	// no validation rules for WhitelistId

	// no validation rules for WhitelistName

	if v, ok := interface{}(m.GetEventTime()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = AuditLogValidationError{
				field:  "EventTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = AuditLogValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return AuditLogMultiError(errors)
	}
	return nil
}

// AuditLogMultiError is an error wrapping multiple validation errors returned
// by AuditLog.Validate(true) if the designated constraints aren't met.
type AuditLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditLogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditLogMultiError) AllErrors() []error { return m }

// AuditLogValidationError is the validation error returned by
// AuditLog.Validate if the designated constraints aren't met.
type AuditLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditLogValidationError) ErrorName() string { return "AuditLogValidationError" }

// Error satisfies the builtin error interface
func (e AuditLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditLogValidationError{}
