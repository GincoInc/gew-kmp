// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: gincoinc/adamant/global/v1/adamantglobalv1/global_api.proto

package adamantglobalv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GlobalAPIClient is the client API for GlobalAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobalAPIClient interface {
	// Wallet
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error)
	// Get wallet information. the wallet model includes balance, address etc.
	GetWallet(ctx context.Context, in *GetWalletRequest, opts ...grpc.CallOption) (*Wallet, error)
	CancelWallet(ctx context.Context, in *CancelWalletRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ArchiveWallet(ctx context.Context, in *ArchiveWalletRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnArchiveWallet(ctx context.Context, in *UnArchiveWalletRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListWallets(ctx context.Context, in *ListWalletsRequest, opts ...grpc.CallOption) (*ListWalletsResponse, error)
	ListWalletsByFilter(ctx context.Context, in *ListWalletsByFilterRequest, opts ...grpc.CallOption) (*ListWalletsResponse, error)
	ListBaseWallets(ctx context.Context, in *ListBaseWalletsRequest, opts ...grpc.CallOption) (*ListBaseWalletsResponse, error)
	UpdateWalletName(ctx context.Context, in *UpdateWalletNameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateWalletValidation(ctx context.Context, in *UpdateWalletValidationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateWalletPolicy(ctx context.Context, in *UpdateWalletPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReviewWalletProposal(ctx context.Context, in *ReviewWalletProposalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FlushBalance(ctx context.Context, in *FlushBalanceRequest, opts ...grpc.CallOption) (*FlushBalanceResponse, error)
	CreateWalletGroup(ctx context.Context, in *CreateWalletGroupRequest, opts ...grpc.CallOption) (*CreateWalletGroupResponse, error)
	UpdateWalletGroupName(ctx context.Context, in *UpdateWalletGroupNameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateWalletGroup(ctx context.Context, in *UpdateWalletGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetWalletGroup(ctx context.Context, in *GetWalletGroupRequest, opts ...grpc.CallOption) (*WalletGroup, error)
	ListWalletGroups(ctx context.Context, in *ListWalletGroupsRequest, opts ...grpc.CallOption) (*ListWalletGroupsResponse, error)
	UpdateDestinationWalletID(ctx context.Context, in *UpdateDestinationWalletIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCosmosBalance(ctx context.Context, in *GetCosmosBalanceRequest, opts ...grpc.CallOption) (*GetCosmosBalanceResponse, error)
	// Review
	ApproveWallet(ctx context.Context, in *ApproveWalletRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ApproveTransaction(ctx context.Context, in *ApproveTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Address
	// Create a new address for an existing wallet
	CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*CreateAddressResponse, error)
	GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*Address, error)
	GetAddressByAddress(ctx context.Context, in *GetAddressByAddressRequest, opts ...grpc.CallOption) (*Address, error)
	GetAddressByAddressCoin(ctx context.Context, in *GetAddressByAddressCoinRequest, opts ...grpc.CallOption) (*Address, error)
	GetAddressByIndex(ctx context.Context, in *GetAddressByIndexRequest, opts ...grpc.CallOption) (*Address, error)
	ListAddresses(ctx context.Context, in *ListAddressesRequest, opts ...grpc.CallOption) (*ListAddressesResponse, error)
	ListAddressesWithBalance(ctx context.Context, in *ListAddressesWithBalanceRequest, opts ...grpc.CallOption) (*ListAddressesWithBalanceResponse, error)
	UpdateAddressBalance(ctx context.Context, in *UpdateAddressBalanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get an address which hold ETH for ethereum wallet/address creation etc
	GetEthereumFeeAddress(ctx context.Context, in *GetEthereumFeeAddressRequest, opts ...grpc.CallOption) (*EthereumFeeAddress, error)
	// Get addresses associated with the Polkadot signer
	ListSubstrateChildAddresses(ctx context.Context, in *ListSubstrateChildAddressesRequest, opts ...grpc.CallOption) (*ListSubstrateChildAddressesResponse, error)
	ListSymbolChildAddresses(ctx context.Context, in *ListSymbolChildAddressesRequest, opts ...grpc.CallOption) (*ListSymbolChildAddressesResponse, error)
	ListIOSTChildAccounts(ctx context.Context, in *ListIOSTChildAccountsRequest, opts ...grpc.CallOption) (*ListIOSTChildAccountsResponse, error)
	ImportAddress(ctx context.Context, in *ImportAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListCallers(ctx context.Context, in *ListCallersRequest, opts ...grpc.CallOption) (*ListCallersResponse, error)
	// RegisterKey
	RegisterKey(ctx context.Context, in *RegisterKeyRequest, opts ...grpc.CallOption) (*RegisterKeyResponse, error)
	// Transaction
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	CreateXRPInitTransactions(ctx context.Context, in *CreateXRPInitTransactionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SignXRPInitTransactions(ctx context.Context, in *SignXRPInitTransactionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	SendXRPInitTransactions(ctx context.Context, in *SendXRPInitTransactionsRequest, opts ...grpc.CallOption) (*SendXRPInitTransactionsResponse, error)
	CancelTransaction(ctx context.Context, in *CancelTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReplaceTransaction(ctx context.Context, in *ReplaceTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
	GetTransactionByTxID(ctx context.Context, in *GetTransactionByTxIDRequest, opts ...grpc.CallOption) (*Transaction, error)
	ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error)
	ListTransactionsByFilter(ctx context.Context, in *ListTransactionsByFilterRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error)
	// SignInfo
	GetSignInfo(ctx context.Context, in *GetSignInfoRequest, opts ...grpc.CallOption) (*SignInfo, error)
	ListSignInfo(ctx context.Context, in *ListSignInfoRequest, opts ...grpc.CallOption) (*ListSignInfoResponse, error)
	ListXRPInitSignInfo(ctx context.Context, in *ListXRPInitSignInfoRequest, opts ...grpc.CallOption) (*ListXRPInitSignInfoResponse, error)
	// Transfer
	// List transfers for a given wallet. Ordered by update time desc
	ListTransfers(ctx context.Context, in *ListTransfersRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error)
	ListTransfersByFilter(ctx context.Context, in *ListTransfersByFilterRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error)
	// Rate
	// Get rates by snapshot id
	GetRateSnapshot(ctx context.Context, in *GetRateSnapshotRequest, opts ...grpc.CallOption) (*RateSnapshot, error)
	// Get latest rates set to your organization
	GetLatestRateSnapshot(ctx context.Context, in *GetLatestRateSnapshotRequest, opts ...grpc.CallOption) (*RateSnapshot, error)
	// Set rates to your organization
	SetRates(ctx context.Context, in *SetRatesRequest, opts ...grpc.CallOption) (*SetRatesResponse, error)
	SetDefaultRates(ctx context.Context, in *SetDefaultRatesRequest, opts ...grpc.CallOption) (*SetDefaultRatesResponse, error)
	// policy
	CreateLabeledAddress(ctx context.Context, in *CreateLabeledAddressRequest, opts ...grpc.CallOption) (*CreateLabeledAddressResponse, error)
	GetLabeledAddress(ctx context.Context, in *GetLabeledAddressRequest, opts ...grpc.CallOption) (*LabeledAddress, error)
	ListLabeledAddresses(ctx context.Context, in *ListLabeledAddressesRequest, opts ...grpc.CallOption) (*ListLabeledAddressesResponse, error)
	IsDeletableLabeledAddress(ctx context.Context, in *IsDeletableLabeledAddressRequest, opts ...grpc.CallOption) (*IsDeletableLabeledAddressResponse, error)
	UpdateLabeledAddress(ctx context.Context, in *UpdateLabeledAddressRequest, opts ...grpc.CallOption) (*LabeledAddress, error)
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	DeleteAddress(ctx context.Context, in *DeleteLabeledAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReviewLabeledAddressProposal(ctx context.Context, in *ReviewLabeledAddressProposalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateWhitelist(ctx context.Context, in *CreateWhitelistRequest, opts ...grpc.CallOption) (*CreateWhitelistResponse, error)
	GetWhitelist(ctx context.Context, in *GetWhitelistRequest, opts ...grpc.CallOption) (*Whitelist, error)
	ListWhitelists(ctx context.Context, in *ListWhitelistsRequest, opts ...grpc.CallOption) (*ListWhitelistsResponse, error)
	IsDeletableWhitelist(ctx context.Context, in *IsDeletableWhitelistRequest, opts ...grpc.CallOption) (*IsDeletableWhitelistResponse, error)
	UpdateWhitelist(ctx context.Context, in *UpdateWhitelistRequest, opts ...grpc.CallOption) (*Whitelist, error)
	UpdateWhitelistAddresses(ctx context.Context, in *UpdateWhitelistAddressesRequest, opts ...grpc.CallOption) (*Whitelist, error)
	DeleteWhitelist(ctx context.Context, in *DeleteWhitelistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateTransferLimit(ctx context.Context, in *CreateTransferLimitRequest, opts ...grpc.CallOption) (*CreateTransferLimitResponse, error)
	GetTransferLimit(ctx context.Context, in *GetTransferLimitRequest, opts ...grpc.CallOption) (*TransferLimit, error)
	ListTransferLimits(ctx context.Context, in *ListTransferLimitsRequest, opts ...grpc.CallOption) (*ListTransferLimitsResponse, error)
	IsDeletableTransferLimit(ctx context.Context, in *IsDeletableTransferLimitRequest, opts ...grpc.CallOption) (*IsDeletableTransferLimitResponse, error)
	UpdateTransferLimit(ctx context.Context, in *UpdateTransferLimitRequest, opts ...grpc.CallOption) (*TransferLimit, error)
	UpdateTransferLimitName(ctx context.Context, in *UpdateTransferLimitNameRequest, opts ...grpc.CallOption) (*TransferLimit, error)
	DeleteTransferLimit(ctx context.Context, in *DeleteTransferLimitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReviewTransferLimitProposal(ctx context.Context, in *ReviewTransferLimitProposalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error)
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*Policy, error)
	ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error)
	IsDeletablePolicy(ctx context.Context, in *IsDeletablePolicyRequest, opts ...grpc.CallOption) (*IsDeletablePolicyResponse, error)
	UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*Policy, error)
	DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReviewPolicyProposal(ctx context.Context, in *ReviewPolicyProposalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Utility
	GetSpendableBalance(ctx context.Context, in *GetSpendableBalanceRequest, opts ...grpc.CallOption) (*GetSpendableBalanceResponse, error)
	GetTotalBalance(ctx context.Context, in *GetTotalBalanceRequest, opts ...grpc.CallOption) (*TotalBalance, error)
	ListBalanceSnapshots(ctx context.Context, in *ListBalanceSnapshotsRequest, opts ...grpc.CallOption) (*ListBalanceSnapshotsResponse, error)
	CalculateFee(ctx context.Context, in *CalculateFeeRequest, opts ...grpc.CallOption) (*CalculateFeeResponse, error)
	GetMembersDeactivatabilities(ctx context.Context, in *GetMembersDeactivatabilitiesRequest, opts ...grpc.CallOption) (*GetMembersDeactivatabilitiesResponse, error)
	GetRecommendedFeeRate(ctx context.Context, in *GetRecommendedFeeRateRequest, opts ...grpc.CallOption) (*GetRecommendedFeeRateResponse, error)
	// Validate format of given address
	ValidateAddress(ctx context.Context, in *ValidateAddressRequest, opts ...grpc.CallOption) (*ValidateAddressResponse, error)
	ListAuditLogs(ctx context.Context, in *ListAuditLogsRequest, opts ...grpc.CallOption) (*ListAuditLogsResponse, error)
}

type globalAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalAPIClient(cc grpc.ClientConnInterface) GlobalAPIClient {
	return &globalAPIClient{cc}
}

func (c *globalAPIClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error) {
	out := new(CreateWalletResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetWallet(ctx context.Context, in *GetWalletRequest, opts ...grpc.CallOption) (*Wallet, error) {
	out := new(Wallet)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CancelWallet(ctx context.Context, in *CancelWalletRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CancelWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ArchiveWallet(ctx context.Context, in *ArchiveWalletRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ArchiveWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UnArchiveWallet(ctx context.Context, in *UnArchiveWalletRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UnArchiveWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListWallets(ctx context.Context, in *ListWalletsRequest, opts ...grpc.CallOption) (*ListWalletsResponse, error) {
	out := new(ListWalletsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListWalletsByFilter(ctx context.Context, in *ListWalletsByFilterRequest, opts ...grpc.CallOption) (*ListWalletsResponse, error) {
	out := new(ListWalletsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListWalletsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListBaseWallets(ctx context.Context, in *ListBaseWalletsRequest, opts ...grpc.CallOption) (*ListBaseWalletsResponse, error) {
	out := new(ListBaseWalletsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListBaseWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateWalletName(ctx context.Context, in *UpdateWalletNameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateWalletName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateWalletValidation(ctx context.Context, in *UpdateWalletValidationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateWalletValidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateWalletPolicy(ctx context.Context, in *UpdateWalletPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateWalletPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ReviewWalletProposal(ctx context.Context, in *ReviewWalletProposalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ReviewWalletProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) FlushBalance(ctx context.Context, in *FlushBalanceRequest, opts ...grpc.CallOption) (*FlushBalanceResponse, error) {
	out := new(FlushBalanceResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/FlushBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CreateWalletGroup(ctx context.Context, in *CreateWalletGroupRequest, opts ...grpc.CallOption) (*CreateWalletGroupResponse, error) {
	out := new(CreateWalletGroupResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CreateWalletGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateWalletGroupName(ctx context.Context, in *UpdateWalletGroupNameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateWalletGroupName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateWalletGroup(ctx context.Context, in *UpdateWalletGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateWalletGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetWalletGroup(ctx context.Context, in *GetWalletGroupRequest, opts ...grpc.CallOption) (*WalletGroup, error) {
	out := new(WalletGroup)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetWalletGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListWalletGroups(ctx context.Context, in *ListWalletGroupsRequest, opts ...grpc.CallOption) (*ListWalletGroupsResponse, error) {
	out := new(ListWalletGroupsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListWalletGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateDestinationWalletID(ctx context.Context, in *UpdateDestinationWalletIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateDestinationWalletID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetCosmosBalance(ctx context.Context, in *GetCosmosBalanceRequest, opts ...grpc.CallOption) (*GetCosmosBalanceResponse, error) {
	out := new(GetCosmosBalanceResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetCosmosBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ApproveWallet(ctx context.Context, in *ApproveWalletRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ApproveWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ApproveTransaction(ctx context.Context, in *ApproveTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ApproveTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*CreateAddressResponse, error) {
	out := new(CreateAddressResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CreateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetAddressByAddress(ctx context.Context, in *GetAddressByAddressRequest, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetAddressByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetAddressByAddressCoin(ctx context.Context, in *GetAddressByAddressCoinRequest, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetAddressByAddressCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetAddressByIndex(ctx context.Context, in *GetAddressByIndexRequest, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetAddressByIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListAddresses(ctx context.Context, in *ListAddressesRequest, opts ...grpc.CallOption) (*ListAddressesResponse, error) {
	out := new(ListAddressesResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListAddressesWithBalance(ctx context.Context, in *ListAddressesWithBalanceRequest, opts ...grpc.CallOption) (*ListAddressesWithBalanceResponse, error) {
	out := new(ListAddressesWithBalanceResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListAddressesWithBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateAddressBalance(ctx context.Context, in *UpdateAddressBalanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateAddressBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetEthereumFeeAddress(ctx context.Context, in *GetEthereumFeeAddressRequest, opts ...grpc.CallOption) (*EthereumFeeAddress, error) {
	out := new(EthereumFeeAddress)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetEthereumFeeAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListSubstrateChildAddresses(ctx context.Context, in *ListSubstrateChildAddressesRequest, opts ...grpc.CallOption) (*ListSubstrateChildAddressesResponse, error) {
	out := new(ListSubstrateChildAddressesResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListSubstrateChildAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListSymbolChildAddresses(ctx context.Context, in *ListSymbolChildAddressesRequest, opts ...grpc.CallOption) (*ListSymbolChildAddressesResponse, error) {
	out := new(ListSymbolChildAddressesResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListSymbolChildAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListIOSTChildAccounts(ctx context.Context, in *ListIOSTChildAccountsRequest, opts ...grpc.CallOption) (*ListIOSTChildAccountsResponse, error) {
	out := new(ListIOSTChildAccountsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListIOSTChildAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ImportAddress(ctx context.Context, in *ImportAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ImportAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListCallers(ctx context.Context, in *ListCallersRequest, opts ...grpc.CallOption) (*ListCallersResponse, error) {
	out := new(ListCallersResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListCallers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) RegisterKey(ctx context.Context, in *RegisterKeyRequest, opts ...grpc.CallOption) (*RegisterKeyResponse, error) {
	out := new(RegisterKeyResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/RegisterKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CreateXRPInitTransactions(ctx context.Context, in *CreateXRPInitTransactionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CreateXRPInitTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/SignTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) SignXRPInitTransactions(ctx context.Context, in *SignXRPInitTransactionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/SignXRPInitTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) SendXRPInitTransactions(ctx context.Context, in *SendXRPInitTransactionsRequest, opts ...grpc.CallOption) (*SendXRPInitTransactionsResponse, error) {
	out := new(SendXRPInitTransactionsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/SendXRPInitTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CancelTransaction(ctx context.Context, in *CancelTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CancelTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ReplaceTransaction(ctx context.Context, in *ReplaceTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ReplaceTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetTransactionByTxID(ctx context.Context, in *GetTransactionByTxIDRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetTransactionByTxID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error) {
	out := new(ListTransactionsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListTransactionsByFilter(ctx context.Context, in *ListTransactionsByFilterRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error) {
	out := new(ListTransactionsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListTransactionsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetSignInfo(ctx context.Context, in *GetSignInfoRequest, opts ...grpc.CallOption) (*SignInfo, error) {
	out := new(SignInfo)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetSignInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListSignInfo(ctx context.Context, in *ListSignInfoRequest, opts ...grpc.CallOption) (*ListSignInfoResponse, error) {
	out := new(ListSignInfoResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListSignInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListXRPInitSignInfo(ctx context.Context, in *ListXRPInitSignInfoRequest, opts ...grpc.CallOption) (*ListXRPInitSignInfoResponse, error) {
	out := new(ListXRPInitSignInfoResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListXRPInitSignInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListTransfers(ctx context.Context, in *ListTransfersRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error) {
	out := new(ListTransfersResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListTransfersByFilter(ctx context.Context, in *ListTransfersByFilterRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error) {
	out := new(ListTransfersResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListTransfersByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetRateSnapshot(ctx context.Context, in *GetRateSnapshotRequest, opts ...grpc.CallOption) (*RateSnapshot, error) {
	out := new(RateSnapshot)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetRateSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetLatestRateSnapshot(ctx context.Context, in *GetLatestRateSnapshotRequest, opts ...grpc.CallOption) (*RateSnapshot, error) {
	out := new(RateSnapshot)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetLatestRateSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) SetRates(ctx context.Context, in *SetRatesRequest, opts ...grpc.CallOption) (*SetRatesResponse, error) {
	out := new(SetRatesResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/SetRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) SetDefaultRates(ctx context.Context, in *SetDefaultRatesRequest, opts ...grpc.CallOption) (*SetDefaultRatesResponse, error) {
	out := new(SetDefaultRatesResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/SetDefaultRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CreateLabeledAddress(ctx context.Context, in *CreateLabeledAddressRequest, opts ...grpc.CallOption) (*CreateLabeledAddressResponse, error) {
	out := new(CreateLabeledAddressResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CreateLabeledAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetLabeledAddress(ctx context.Context, in *GetLabeledAddressRequest, opts ...grpc.CallOption) (*LabeledAddress, error) {
	out := new(LabeledAddress)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetLabeledAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListLabeledAddresses(ctx context.Context, in *ListLabeledAddressesRequest, opts ...grpc.CallOption) (*ListLabeledAddressesResponse, error) {
	out := new(ListLabeledAddressesResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListLabeledAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) IsDeletableLabeledAddress(ctx context.Context, in *IsDeletableLabeledAddressRequest, opts ...grpc.CallOption) (*IsDeletableLabeledAddressResponse, error) {
	out := new(IsDeletableLabeledAddressResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/IsDeletableLabeledAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateLabeledAddress(ctx context.Context, in *UpdateLabeledAddressRequest, opts ...grpc.CallOption) (*LabeledAddress, error) {
	out := new(LabeledAddress)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateLabeledAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) DeleteAddress(ctx context.Context, in *DeleteLabeledAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/DeleteAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ReviewLabeledAddressProposal(ctx context.Context, in *ReviewLabeledAddressProposalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ReviewLabeledAddressProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CreateWhitelist(ctx context.Context, in *CreateWhitelistRequest, opts ...grpc.CallOption) (*CreateWhitelistResponse, error) {
	out := new(CreateWhitelistResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CreateWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetWhitelist(ctx context.Context, in *GetWhitelistRequest, opts ...grpc.CallOption) (*Whitelist, error) {
	out := new(Whitelist)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListWhitelists(ctx context.Context, in *ListWhitelistsRequest, opts ...grpc.CallOption) (*ListWhitelistsResponse, error) {
	out := new(ListWhitelistsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListWhitelists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) IsDeletableWhitelist(ctx context.Context, in *IsDeletableWhitelistRequest, opts ...grpc.CallOption) (*IsDeletableWhitelistResponse, error) {
	out := new(IsDeletableWhitelistResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/IsDeletableWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateWhitelist(ctx context.Context, in *UpdateWhitelistRequest, opts ...grpc.CallOption) (*Whitelist, error) {
	out := new(Whitelist)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateWhitelistAddresses(ctx context.Context, in *UpdateWhitelistAddressesRequest, opts ...grpc.CallOption) (*Whitelist, error) {
	out := new(Whitelist)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateWhitelistAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) DeleteWhitelist(ctx context.Context, in *DeleteWhitelistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/DeleteWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CreateTransferLimit(ctx context.Context, in *CreateTransferLimitRequest, opts ...grpc.CallOption) (*CreateTransferLimitResponse, error) {
	out := new(CreateTransferLimitResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CreateTransferLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetTransferLimit(ctx context.Context, in *GetTransferLimitRequest, opts ...grpc.CallOption) (*TransferLimit, error) {
	out := new(TransferLimit)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetTransferLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListTransferLimits(ctx context.Context, in *ListTransferLimitsRequest, opts ...grpc.CallOption) (*ListTransferLimitsResponse, error) {
	out := new(ListTransferLimitsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListTransferLimits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) IsDeletableTransferLimit(ctx context.Context, in *IsDeletableTransferLimitRequest, opts ...grpc.CallOption) (*IsDeletableTransferLimitResponse, error) {
	out := new(IsDeletableTransferLimitResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/IsDeletableTransferLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateTransferLimit(ctx context.Context, in *UpdateTransferLimitRequest, opts ...grpc.CallOption) (*TransferLimit, error) {
	out := new(TransferLimit)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateTransferLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdateTransferLimitName(ctx context.Context, in *UpdateTransferLimitNameRequest, opts ...grpc.CallOption) (*TransferLimit, error) {
	out := new(TransferLimit)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdateTransferLimitName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) DeleteTransferLimit(ctx context.Context, in *DeleteTransferLimitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/DeleteTransferLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ReviewTransferLimitProposal(ctx context.Context, in *ReviewTransferLimitProposalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ReviewTransferLimitProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error) {
	out := new(CreatePolicyResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CreatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error) {
	out := new(ListPoliciesResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) IsDeletablePolicy(ctx context.Context, in *IsDeletablePolicyRequest, opts ...grpc.CallOption) (*IsDeletablePolicyResponse, error) {
	out := new(IsDeletablePolicyResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/IsDeletablePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/UpdatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ReviewPolicyProposal(ctx context.Context, in *ReviewPolicyProposalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ReviewPolicyProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetSpendableBalance(ctx context.Context, in *GetSpendableBalanceRequest, opts ...grpc.CallOption) (*GetSpendableBalanceResponse, error) {
	out := new(GetSpendableBalanceResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetSpendableBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetTotalBalance(ctx context.Context, in *GetTotalBalanceRequest, opts ...grpc.CallOption) (*TotalBalance, error) {
	out := new(TotalBalance)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetTotalBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListBalanceSnapshots(ctx context.Context, in *ListBalanceSnapshotsRequest, opts ...grpc.CallOption) (*ListBalanceSnapshotsResponse, error) {
	out := new(ListBalanceSnapshotsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListBalanceSnapshots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) CalculateFee(ctx context.Context, in *CalculateFeeRequest, opts ...grpc.CallOption) (*CalculateFeeResponse, error) {
	out := new(CalculateFeeResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/CalculateFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetMembersDeactivatabilities(ctx context.Context, in *GetMembersDeactivatabilitiesRequest, opts ...grpc.CallOption) (*GetMembersDeactivatabilitiesResponse, error) {
	out := new(GetMembersDeactivatabilitiesResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetMembersDeactivatabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) GetRecommendedFeeRate(ctx context.Context, in *GetRecommendedFeeRateRequest, opts ...grpc.CallOption) (*GetRecommendedFeeRateResponse, error) {
	out := new(GetRecommendedFeeRateResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/GetRecommendedFeeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ValidateAddress(ctx context.Context, in *ValidateAddressRequest, opts ...grpc.CallOption) (*ValidateAddressResponse, error) {
	out := new(ValidateAddressResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ValidateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAPIClient) ListAuditLogs(ctx context.Context, in *ListAuditLogsRequest, opts ...grpc.CallOption) (*ListAuditLogsResponse, error) {
	out := new(ListAuditLogsResponse)
	err := c.cc.Invoke(ctx, "/adamant.global.v1.GlobalAPI/ListAuditLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GlobalAPIServer is the server API for GlobalAPI service.
// All implementations should embed UnimplementedGlobalAPIServer
// for forward compatibility
type GlobalAPIServer interface {
	// Wallet
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error)
	// Get wallet information. the wallet model includes balance, address etc.
	GetWallet(context.Context, *GetWalletRequest) (*Wallet, error)
	CancelWallet(context.Context, *CancelWalletRequest) (*emptypb.Empty, error)
	ArchiveWallet(context.Context, *ArchiveWalletRequest) (*emptypb.Empty, error)
	UnArchiveWallet(context.Context, *UnArchiveWalletRequest) (*emptypb.Empty, error)
	ListWallets(context.Context, *ListWalletsRequest) (*ListWalletsResponse, error)
	ListWalletsByFilter(context.Context, *ListWalletsByFilterRequest) (*ListWalletsResponse, error)
	ListBaseWallets(context.Context, *ListBaseWalletsRequest) (*ListBaseWalletsResponse, error)
	UpdateWalletName(context.Context, *UpdateWalletNameRequest) (*emptypb.Empty, error)
	UpdateWalletValidation(context.Context, *UpdateWalletValidationRequest) (*emptypb.Empty, error)
	UpdateWalletPolicy(context.Context, *UpdateWalletPolicyRequest) (*emptypb.Empty, error)
	ReviewWalletProposal(context.Context, *ReviewWalletProposalRequest) (*emptypb.Empty, error)
	FlushBalance(context.Context, *FlushBalanceRequest) (*FlushBalanceResponse, error)
	CreateWalletGroup(context.Context, *CreateWalletGroupRequest) (*CreateWalletGroupResponse, error)
	UpdateWalletGroupName(context.Context, *UpdateWalletGroupNameRequest) (*emptypb.Empty, error)
	UpdateWalletGroup(context.Context, *UpdateWalletGroupRequest) (*emptypb.Empty, error)
	GetWalletGroup(context.Context, *GetWalletGroupRequest) (*WalletGroup, error)
	ListWalletGroups(context.Context, *ListWalletGroupsRequest) (*ListWalletGroupsResponse, error)
	UpdateDestinationWalletID(context.Context, *UpdateDestinationWalletIDRequest) (*emptypb.Empty, error)
	GetCosmosBalance(context.Context, *GetCosmosBalanceRequest) (*GetCosmosBalanceResponse, error)
	// Review
	ApproveWallet(context.Context, *ApproveWalletRequest) (*emptypb.Empty, error)
	ApproveTransaction(context.Context, *ApproveTransactionRequest) (*emptypb.Empty, error)
	// Address
	// Create a new address for an existing wallet
	CreateAddress(context.Context, *CreateAddressRequest) (*CreateAddressResponse, error)
	GetAddress(context.Context, *GetAddressRequest) (*Address, error)
	GetAddressByAddress(context.Context, *GetAddressByAddressRequest) (*Address, error)
	GetAddressByAddressCoin(context.Context, *GetAddressByAddressCoinRequest) (*Address, error)
	GetAddressByIndex(context.Context, *GetAddressByIndexRequest) (*Address, error)
	ListAddresses(context.Context, *ListAddressesRequest) (*ListAddressesResponse, error)
	ListAddressesWithBalance(context.Context, *ListAddressesWithBalanceRequest) (*ListAddressesWithBalanceResponse, error)
	UpdateAddressBalance(context.Context, *UpdateAddressBalanceRequest) (*emptypb.Empty, error)
	// Get an address which hold ETH for ethereum wallet/address creation etc
	GetEthereumFeeAddress(context.Context, *GetEthereumFeeAddressRequest) (*EthereumFeeAddress, error)
	// Get addresses associated with the Polkadot signer
	ListSubstrateChildAddresses(context.Context, *ListSubstrateChildAddressesRequest) (*ListSubstrateChildAddressesResponse, error)
	ListSymbolChildAddresses(context.Context, *ListSymbolChildAddressesRequest) (*ListSymbolChildAddressesResponse, error)
	ListIOSTChildAccounts(context.Context, *ListIOSTChildAccountsRequest) (*ListIOSTChildAccountsResponse, error)
	ImportAddress(context.Context, *ImportAddressRequest) (*emptypb.Empty, error)
	ListCallers(context.Context, *ListCallersRequest) (*ListCallersResponse, error)
	// RegisterKey
	RegisterKey(context.Context, *RegisterKeyRequest) (*RegisterKeyResponse, error)
	// Transaction
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	CreateXRPInitTransactions(context.Context, *CreateXRPInitTransactionsRequest) (*emptypb.Empty, error)
	SignTransaction(context.Context, *SignTransactionRequest) (*emptypb.Empty, error)
	SignXRPInitTransactions(context.Context, *SignXRPInitTransactionsRequest) (*emptypb.Empty, error)
	SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error)
	SendXRPInitTransactions(context.Context, *SendXRPInitTransactionsRequest) (*SendXRPInitTransactionsResponse, error)
	CancelTransaction(context.Context, *CancelTransactionRequest) (*emptypb.Empty, error)
	ReplaceTransaction(context.Context, *ReplaceTransactionRequest) (*emptypb.Empty, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*Transaction, error)
	GetTransactionByTxID(context.Context, *GetTransactionByTxIDRequest) (*Transaction, error)
	ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error)
	ListTransactionsByFilter(context.Context, *ListTransactionsByFilterRequest) (*ListTransactionsResponse, error)
	// SignInfo
	GetSignInfo(context.Context, *GetSignInfoRequest) (*SignInfo, error)
	ListSignInfo(context.Context, *ListSignInfoRequest) (*ListSignInfoResponse, error)
	ListXRPInitSignInfo(context.Context, *ListXRPInitSignInfoRequest) (*ListXRPInitSignInfoResponse, error)
	// Transfer
	// List transfers for a given wallet. Ordered by update time desc
	ListTransfers(context.Context, *ListTransfersRequest) (*ListTransfersResponse, error)
	ListTransfersByFilter(context.Context, *ListTransfersByFilterRequest) (*ListTransfersResponse, error)
	// Rate
	// Get rates by snapshot id
	GetRateSnapshot(context.Context, *GetRateSnapshotRequest) (*RateSnapshot, error)
	// Get latest rates set to your organization
	GetLatestRateSnapshot(context.Context, *GetLatestRateSnapshotRequest) (*RateSnapshot, error)
	// Set rates to your organization
	SetRates(context.Context, *SetRatesRequest) (*SetRatesResponse, error)
	SetDefaultRates(context.Context, *SetDefaultRatesRequest) (*SetDefaultRatesResponse, error)
	// policy
	CreateLabeledAddress(context.Context, *CreateLabeledAddressRequest) (*CreateLabeledAddressResponse, error)
	GetLabeledAddress(context.Context, *GetLabeledAddressRequest) (*LabeledAddress, error)
	ListLabeledAddresses(context.Context, *ListLabeledAddressesRequest) (*ListLabeledAddressesResponse, error)
	IsDeletableLabeledAddress(context.Context, *IsDeletableLabeledAddressRequest) (*IsDeletableLabeledAddressResponse, error)
	UpdateLabeledAddress(context.Context, *UpdateLabeledAddressRequest) (*LabeledAddress, error)
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	DeleteAddress(context.Context, *DeleteLabeledAddressRequest) (*emptypb.Empty, error)
	ReviewLabeledAddressProposal(context.Context, *ReviewLabeledAddressProposalRequest) (*emptypb.Empty, error)
	CreateWhitelist(context.Context, *CreateWhitelistRequest) (*CreateWhitelistResponse, error)
	GetWhitelist(context.Context, *GetWhitelistRequest) (*Whitelist, error)
	ListWhitelists(context.Context, *ListWhitelistsRequest) (*ListWhitelistsResponse, error)
	IsDeletableWhitelist(context.Context, *IsDeletableWhitelistRequest) (*IsDeletableWhitelistResponse, error)
	UpdateWhitelist(context.Context, *UpdateWhitelistRequest) (*Whitelist, error)
	UpdateWhitelistAddresses(context.Context, *UpdateWhitelistAddressesRequest) (*Whitelist, error)
	DeleteWhitelist(context.Context, *DeleteWhitelistRequest) (*emptypb.Empty, error)
	CreateTransferLimit(context.Context, *CreateTransferLimitRequest) (*CreateTransferLimitResponse, error)
	GetTransferLimit(context.Context, *GetTransferLimitRequest) (*TransferLimit, error)
	ListTransferLimits(context.Context, *ListTransferLimitsRequest) (*ListTransferLimitsResponse, error)
	IsDeletableTransferLimit(context.Context, *IsDeletableTransferLimitRequest) (*IsDeletableTransferLimitResponse, error)
	UpdateTransferLimit(context.Context, *UpdateTransferLimitRequest) (*TransferLimit, error)
	UpdateTransferLimitName(context.Context, *UpdateTransferLimitNameRequest) (*TransferLimit, error)
	DeleteTransferLimit(context.Context, *DeleteTransferLimitRequest) (*emptypb.Empty, error)
	ReviewTransferLimitProposal(context.Context, *ReviewTransferLimitProposalRequest) (*emptypb.Empty, error)
	CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error)
	GetPolicy(context.Context, *GetPolicyRequest) (*Policy, error)
	ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error)
	IsDeletablePolicy(context.Context, *IsDeletablePolicyRequest) (*IsDeletablePolicyResponse, error)
	UpdatePolicy(context.Context, *UpdatePolicyRequest) (*Policy, error)
	DeletePolicy(context.Context, *DeletePolicyRequest) (*emptypb.Empty, error)
	ReviewPolicyProposal(context.Context, *ReviewPolicyProposalRequest) (*emptypb.Empty, error)
	// Utility
	GetSpendableBalance(context.Context, *GetSpendableBalanceRequest) (*GetSpendableBalanceResponse, error)
	GetTotalBalance(context.Context, *GetTotalBalanceRequest) (*TotalBalance, error)
	ListBalanceSnapshots(context.Context, *ListBalanceSnapshotsRequest) (*ListBalanceSnapshotsResponse, error)
	CalculateFee(context.Context, *CalculateFeeRequest) (*CalculateFeeResponse, error)
	GetMembersDeactivatabilities(context.Context, *GetMembersDeactivatabilitiesRequest) (*GetMembersDeactivatabilitiesResponse, error)
	GetRecommendedFeeRate(context.Context, *GetRecommendedFeeRateRequest) (*GetRecommendedFeeRateResponse, error)
	// Validate format of given address
	ValidateAddress(context.Context, *ValidateAddressRequest) (*ValidateAddressResponse, error)
	ListAuditLogs(context.Context, *ListAuditLogsRequest) (*ListAuditLogsResponse, error)
}

// UnimplementedGlobalAPIServer should be embedded to have forward compatible implementations.
type UnimplementedGlobalAPIServer struct {
}

func (UnimplementedGlobalAPIServer) CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedGlobalAPIServer) GetWallet(context.Context, *GetWalletRequest) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallet not implemented")
}
func (UnimplementedGlobalAPIServer) CancelWallet(context.Context, *CancelWalletRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWallet not implemented")
}
func (UnimplementedGlobalAPIServer) ArchiveWallet(context.Context, *ArchiveWalletRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveWallet not implemented")
}
func (UnimplementedGlobalAPIServer) UnArchiveWallet(context.Context, *UnArchiveWalletRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnArchiveWallet not implemented")
}
func (UnimplementedGlobalAPIServer) ListWallets(context.Context, *ListWalletsRequest) (*ListWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWallets not implemented")
}
func (UnimplementedGlobalAPIServer) ListWalletsByFilter(context.Context, *ListWalletsByFilterRequest) (*ListWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletsByFilter not implemented")
}
func (UnimplementedGlobalAPIServer) ListBaseWallets(context.Context, *ListBaseWalletsRequest) (*ListBaseWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBaseWallets not implemented")
}
func (UnimplementedGlobalAPIServer) UpdateWalletName(context.Context, *UpdateWalletNameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWalletName not implemented")
}
func (UnimplementedGlobalAPIServer) UpdateWalletValidation(context.Context, *UpdateWalletValidationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWalletValidation not implemented")
}
func (UnimplementedGlobalAPIServer) UpdateWalletPolicy(context.Context, *UpdateWalletPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWalletPolicy not implemented")
}
func (UnimplementedGlobalAPIServer) ReviewWalletProposal(context.Context, *ReviewWalletProposalRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewWalletProposal not implemented")
}
func (UnimplementedGlobalAPIServer) FlushBalance(context.Context, *FlushBalanceRequest) (*FlushBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushBalance not implemented")
}
func (UnimplementedGlobalAPIServer) CreateWalletGroup(context.Context, *CreateWalletGroupRequest) (*CreateWalletGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWalletGroup not implemented")
}
func (UnimplementedGlobalAPIServer) UpdateWalletGroupName(context.Context, *UpdateWalletGroupNameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWalletGroupName not implemented")
}
func (UnimplementedGlobalAPIServer) UpdateWalletGroup(context.Context, *UpdateWalletGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWalletGroup not implemented")
}
func (UnimplementedGlobalAPIServer) GetWalletGroup(context.Context, *GetWalletGroupRequest) (*WalletGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletGroup not implemented")
}
func (UnimplementedGlobalAPIServer) ListWalletGroups(context.Context, *ListWalletGroupsRequest) (*ListWalletGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletGroups not implemented")
}
func (UnimplementedGlobalAPIServer) UpdateDestinationWalletID(context.Context, *UpdateDestinationWalletIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDestinationWalletID not implemented")
}
func (UnimplementedGlobalAPIServer) GetCosmosBalance(context.Context, *GetCosmosBalanceRequest) (*GetCosmosBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCosmosBalance not implemented")
}
func (UnimplementedGlobalAPIServer) ApproveWallet(context.Context, *ApproveWalletRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveWallet not implemented")
}
func (UnimplementedGlobalAPIServer) ApproveTransaction(context.Context, *ApproveTransactionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveTransaction not implemented")
}
func (UnimplementedGlobalAPIServer) CreateAddress(context.Context, *CreateAddressRequest) (*CreateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddress not implemented")
}
func (UnimplementedGlobalAPIServer) GetAddress(context.Context, *GetAddressRequest) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedGlobalAPIServer) GetAddressByAddress(context.Context, *GetAddressByAddressRequest) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressByAddress not implemented")
}
func (UnimplementedGlobalAPIServer) GetAddressByAddressCoin(context.Context, *GetAddressByAddressCoinRequest) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressByAddressCoin not implemented")
}
func (UnimplementedGlobalAPIServer) GetAddressByIndex(context.Context, *GetAddressByIndexRequest) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressByIndex not implemented")
}
func (UnimplementedGlobalAPIServer) ListAddresses(context.Context, *ListAddressesRequest) (*ListAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddresses not implemented")
}
func (UnimplementedGlobalAPIServer) ListAddressesWithBalance(context.Context, *ListAddressesWithBalanceRequest) (*ListAddressesWithBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddressesWithBalance not implemented")
}
func (UnimplementedGlobalAPIServer) UpdateAddressBalance(context.Context, *UpdateAddressBalanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddressBalance not implemented")
}
func (UnimplementedGlobalAPIServer) GetEthereumFeeAddress(context.Context, *GetEthereumFeeAddressRequest) (*EthereumFeeAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEthereumFeeAddress not implemented")
}
func (UnimplementedGlobalAPIServer) ListSubstrateChildAddresses(context.Context, *ListSubstrateChildAddressesRequest) (*ListSubstrateChildAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubstrateChildAddresses not implemented")
}
func (UnimplementedGlobalAPIServer) ListSymbolChildAddresses(context.Context, *ListSymbolChildAddressesRequest) (*ListSymbolChildAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSymbolChildAddresses not implemented")
}
func (UnimplementedGlobalAPIServer) ListIOSTChildAccounts(context.Context, *ListIOSTChildAccountsRequest) (*ListIOSTChildAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIOSTChildAccounts not implemented")
}
func (UnimplementedGlobalAPIServer) ImportAddress(context.Context, *ImportAddressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAddress not implemented")
}
func (UnimplementedGlobalAPIServer) ListCallers(context.Context, *ListCallersRequest) (*ListCallersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCallers not implemented")
}
func (UnimplementedGlobalAPIServer) RegisterKey(context.Context, *RegisterKeyRequest) (*RegisterKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterKey not implemented")
}
func (UnimplementedGlobalAPIServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedGlobalAPIServer) CreateXRPInitTransactions(context.Context, *CreateXRPInitTransactionsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateXRPInitTransactions not implemented")
}
func (UnimplementedGlobalAPIServer) SignTransaction(context.Context, *SignTransactionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransaction not implemented")
}
func (UnimplementedGlobalAPIServer) SignXRPInitTransactions(context.Context, *SignXRPInitTransactionsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignXRPInitTransactions not implemented")
}
func (UnimplementedGlobalAPIServer) SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (UnimplementedGlobalAPIServer) SendXRPInitTransactions(context.Context, *SendXRPInitTransactionsRequest) (*SendXRPInitTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendXRPInitTransactions not implemented")
}
func (UnimplementedGlobalAPIServer) CancelTransaction(context.Context, *CancelTransactionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTransaction not implemented")
}
func (UnimplementedGlobalAPIServer) ReplaceTransaction(context.Context, *ReplaceTransactionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceTransaction not implemented")
}
func (UnimplementedGlobalAPIServer) GetTransaction(context.Context, *GetTransactionRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedGlobalAPIServer) GetTransactionByTxID(context.Context, *GetTransactionByTxIDRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByTxID not implemented")
}
func (UnimplementedGlobalAPIServer) ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedGlobalAPIServer) ListTransactionsByFilter(context.Context, *ListTransactionsByFilterRequest) (*ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactionsByFilter not implemented")
}
func (UnimplementedGlobalAPIServer) GetSignInfo(context.Context, *GetSignInfoRequest) (*SignInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignInfo not implemented")
}
func (UnimplementedGlobalAPIServer) ListSignInfo(context.Context, *ListSignInfoRequest) (*ListSignInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSignInfo not implemented")
}
func (UnimplementedGlobalAPIServer) ListXRPInitSignInfo(context.Context, *ListXRPInitSignInfoRequest) (*ListXRPInitSignInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListXRPInitSignInfo not implemented")
}
func (UnimplementedGlobalAPIServer) ListTransfers(context.Context, *ListTransfersRequest) (*ListTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransfers not implemented")
}
func (UnimplementedGlobalAPIServer) ListTransfersByFilter(context.Context, *ListTransfersByFilterRequest) (*ListTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransfersByFilter not implemented")
}
func (UnimplementedGlobalAPIServer) GetRateSnapshot(context.Context, *GetRateSnapshotRequest) (*RateSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRateSnapshot not implemented")
}
func (UnimplementedGlobalAPIServer) GetLatestRateSnapshot(context.Context, *GetLatestRateSnapshotRequest) (*RateSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestRateSnapshot not implemented")
}
func (UnimplementedGlobalAPIServer) SetRates(context.Context, *SetRatesRequest) (*SetRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRates not implemented")
}
func (UnimplementedGlobalAPIServer) SetDefaultRates(context.Context, *SetDefaultRatesRequest) (*SetDefaultRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultRates not implemented")
}
func (UnimplementedGlobalAPIServer) CreateLabeledAddress(context.Context, *CreateLabeledAddressRequest) (*CreateLabeledAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLabeledAddress not implemented")
}
func (UnimplementedGlobalAPIServer) GetLabeledAddress(context.Context, *GetLabeledAddressRequest) (*LabeledAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabeledAddress not implemented")
}
func (UnimplementedGlobalAPIServer) ListLabeledAddresses(context.Context, *ListLabeledAddressesRequest) (*ListLabeledAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabeledAddresses not implemented")
}
func (UnimplementedGlobalAPIServer) IsDeletableLabeledAddress(context.Context, *IsDeletableLabeledAddressRequest) (*IsDeletableLabeledAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDeletableLabeledAddress not implemented")
}
func (UnimplementedGlobalAPIServer) UpdateLabeledAddress(context.Context, *UpdateLabeledAddressRequest) (*LabeledAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabeledAddress not implemented")
}
func (UnimplementedGlobalAPIServer) DeleteAddress(context.Context, *DeleteLabeledAddressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAddress not implemented")
}
func (UnimplementedGlobalAPIServer) ReviewLabeledAddressProposal(context.Context, *ReviewLabeledAddressProposalRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewLabeledAddressProposal not implemented")
}
func (UnimplementedGlobalAPIServer) CreateWhitelist(context.Context, *CreateWhitelistRequest) (*CreateWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWhitelist not implemented")
}
func (UnimplementedGlobalAPIServer) GetWhitelist(context.Context, *GetWhitelistRequest) (*Whitelist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWhitelist not implemented")
}
func (UnimplementedGlobalAPIServer) ListWhitelists(context.Context, *ListWhitelistsRequest) (*ListWhitelistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWhitelists not implemented")
}
func (UnimplementedGlobalAPIServer) IsDeletableWhitelist(context.Context, *IsDeletableWhitelistRequest) (*IsDeletableWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDeletableWhitelist not implemented")
}
func (UnimplementedGlobalAPIServer) UpdateWhitelist(context.Context, *UpdateWhitelistRequest) (*Whitelist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWhitelist not implemented")
}
func (UnimplementedGlobalAPIServer) UpdateWhitelistAddresses(context.Context, *UpdateWhitelistAddressesRequest) (*Whitelist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWhitelistAddresses not implemented")
}
func (UnimplementedGlobalAPIServer) DeleteWhitelist(context.Context, *DeleteWhitelistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWhitelist not implemented")
}
func (UnimplementedGlobalAPIServer) CreateTransferLimit(context.Context, *CreateTransferLimitRequest) (*CreateTransferLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransferLimit not implemented")
}
func (UnimplementedGlobalAPIServer) GetTransferLimit(context.Context, *GetTransferLimitRequest) (*TransferLimit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferLimit not implemented")
}
func (UnimplementedGlobalAPIServer) ListTransferLimits(context.Context, *ListTransferLimitsRequest) (*ListTransferLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransferLimits not implemented")
}
func (UnimplementedGlobalAPIServer) IsDeletableTransferLimit(context.Context, *IsDeletableTransferLimitRequest) (*IsDeletableTransferLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDeletableTransferLimit not implemented")
}
func (UnimplementedGlobalAPIServer) UpdateTransferLimit(context.Context, *UpdateTransferLimitRequest) (*TransferLimit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransferLimit not implemented")
}
func (UnimplementedGlobalAPIServer) UpdateTransferLimitName(context.Context, *UpdateTransferLimitNameRequest) (*TransferLimit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransferLimitName not implemented")
}
func (UnimplementedGlobalAPIServer) DeleteTransferLimit(context.Context, *DeleteTransferLimitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransferLimit not implemented")
}
func (UnimplementedGlobalAPIServer) ReviewTransferLimitProposal(context.Context, *ReviewTransferLimitProposalRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewTransferLimitProposal not implemented")
}
func (UnimplementedGlobalAPIServer) CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedGlobalAPIServer) GetPolicy(context.Context, *GetPolicyRequest) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedGlobalAPIServer) ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (UnimplementedGlobalAPIServer) IsDeletablePolicy(context.Context, *IsDeletablePolicyRequest) (*IsDeletablePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDeletablePolicy not implemented")
}
func (UnimplementedGlobalAPIServer) UpdatePolicy(context.Context, *UpdatePolicyRequest) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (UnimplementedGlobalAPIServer) DeletePolicy(context.Context, *DeletePolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedGlobalAPIServer) ReviewPolicyProposal(context.Context, *ReviewPolicyProposalRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewPolicyProposal not implemented")
}
func (UnimplementedGlobalAPIServer) GetSpendableBalance(context.Context, *GetSpendableBalanceRequest) (*GetSpendableBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpendableBalance not implemented")
}
func (UnimplementedGlobalAPIServer) GetTotalBalance(context.Context, *GetTotalBalanceRequest) (*TotalBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalBalance not implemented")
}
func (UnimplementedGlobalAPIServer) ListBalanceSnapshots(context.Context, *ListBalanceSnapshotsRequest) (*ListBalanceSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBalanceSnapshots not implemented")
}
func (UnimplementedGlobalAPIServer) CalculateFee(context.Context, *CalculateFeeRequest) (*CalculateFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFee not implemented")
}
func (UnimplementedGlobalAPIServer) GetMembersDeactivatabilities(context.Context, *GetMembersDeactivatabilitiesRequest) (*GetMembersDeactivatabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembersDeactivatabilities not implemented")
}
func (UnimplementedGlobalAPIServer) GetRecommendedFeeRate(context.Context, *GetRecommendedFeeRateRequest) (*GetRecommendedFeeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendedFeeRate not implemented")
}
func (UnimplementedGlobalAPIServer) ValidateAddress(context.Context, *ValidateAddressRequest) (*ValidateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAddress not implemented")
}
func (UnimplementedGlobalAPIServer) ListAuditLogs(context.Context, *ListAuditLogsRequest) (*ListAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuditLogs not implemented")
}

// UnsafeGlobalAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobalAPIServer will
// result in compilation errors.
type UnsafeGlobalAPIServer interface {
	mustEmbedUnimplementedGlobalAPIServer()
}

func RegisterGlobalAPIServer(s grpc.ServiceRegistrar, srv GlobalAPIServer) {
	s.RegisterService(&GlobalAPI_ServiceDesc, srv)
}

func _GlobalAPI_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetWallet(ctx, req.(*GetWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CancelWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CancelWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CancelWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CancelWallet(ctx, req.(*CancelWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ArchiveWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ArchiveWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ArchiveWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ArchiveWallet(ctx, req.(*ArchiveWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UnArchiveWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnArchiveWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UnArchiveWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UnArchiveWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UnArchiveWallet(ctx, req.(*UnArchiveWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListWallets(ctx, req.(*ListWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListWalletsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListWalletsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListWalletsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListWalletsByFilter(ctx, req.(*ListWalletsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListBaseWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBaseWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListBaseWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListBaseWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListBaseWallets(ctx, req.(*ListBaseWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateWalletName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateWalletName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateWalletName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateWalletName(ctx, req.(*UpdateWalletNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateWalletValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateWalletValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateWalletValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateWalletValidation(ctx, req.(*UpdateWalletValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateWalletPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateWalletPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateWalletPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateWalletPolicy(ctx, req.(*UpdateWalletPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ReviewWalletProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewWalletProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ReviewWalletProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ReviewWalletProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ReviewWalletProposal(ctx, req.(*ReviewWalletProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_FlushBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).FlushBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/FlushBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).FlushBalance(ctx, req.(*FlushBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CreateWalletGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CreateWalletGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CreateWalletGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CreateWalletGroup(ctx, req.(*CreateWalletGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateWalletGroupName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletGroupNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateWalletGroupName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateWalletGroupName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateWalletGroupName(ctx, req.(*UpdateWalletGroupNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateWalletGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateWalletGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateWalletGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateWalletGroup(ctx, req.(*UpdateWalletGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetWalletGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetWalletGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetWalletGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetWalletGroup(ctx, req.(*GetWalletGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListWalletGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListWalletGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListWalletGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListWalletGroups(ctx, req.(*ListWalletGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateDestinationWalletID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDestinationWalletIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateDestinationWalletID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateDestinationWalletID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateDestinationWalletID(ctx, req.(*UpdateDestinationWalletIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetCosmosBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCosmosBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetCosmosBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetCosmosBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetCosmosBalance(ctx, req.(*GetCosmosBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ApproveWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ApproveWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ApproveWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ApproveWallet(ctx, req.(*ApproveWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ApproveTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ApproveTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ApproveTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ApproveTransaction(ctx, req.(*ApproveTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CreateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CreateAddress(ctx, req.(*CreateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetAddress(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetAddressByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetAddressByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetAddressByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetAddressByAddress(ctx, req.(*GetAddressByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetAddressByAddressCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressByAddressCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetAddressByAddressCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetAddressByAddressCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetAddressByAddressCoin(ctx, req.(*GetAddressByAddressCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetAddressByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetAddressByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetAddressByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetAddressByIndex(ctx, req.(*GetAddressByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListAddresses(ctx, req.(*ListAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListAddressesWithBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressesWithBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListAddressesWithBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListAddressesWithBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListAddressesWithBalance(ctx, req.(*ListAddressesWithBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateAddressBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateAddressBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateAddressBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateAddressBalance(ctx, req.(*UpdateAddressBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetEthereumFeeAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEthereumFeeAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetEthereumFeeAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetEthereumFeeAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetEthereumFeeAddress(ctx, req.(*GetEthereumFeeAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListSubstrateChildAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubstrateChildAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListSubstrateChildAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListSubstrateChildAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListSubstrateChildAddresses(ctx, req.(*ListSubstrateChildAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListSymbolChildAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSymbolChildAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListSymbolChildAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListSymbolChildAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListSymbolChildAddresses(ctx, req.(*ListSymbolChildAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListIOSTChildAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIOSTChildAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListIOSTChildAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListIOSTChildAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListIOSTChildAccounts(ctx, req.(*ListIOSTChildAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ImportAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ImportAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ImportAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ImportAddress(ctx, req.(*ImportAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListCallers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCallersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListCallers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListCallers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListCallers(ctx, req.(*ListCallersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_RegisterKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).RegisterKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/RegisterKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).RegisterKey(ctx, req.(*RegisterKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CreateXRPInitTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateXRPInitTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CreateXRPInitTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CreateXRPInitTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CreateXRPInitTransactions(ctx, req.(*CreateXRPInitTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).SignTransaction(ctx, req.(*SignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_SignXRPInitTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignXRPInitTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).SignXRPInitTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/SignXRPInitTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).SignXRPInitTransactions(ctx, req.(*SignXRPInitTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_SendXRPInitTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendXRPInitTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).SendXRPInitTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/SendXRPInitTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).SendXRPInitTransactions(ctx, req.(*SendXRPInitTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CancelTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CancelTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CancelTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CancelTransaction(ctx, req.(*CancelTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ReplaceTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ReplaceTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ReplaceTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ReplaceTransaction(ctx, req.(*ReplaceTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetTransactionByTxID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByTxIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetTransactionByTxID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetTransactionByTxID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetTransactionByTxID(ctx, req.(*GetTransactionByTxIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListTransactions(ctx, req.(*ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListTransactionsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListTransactionsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListTransactionsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListTransactionsByFilter(ctx, req.(*ListTransactionsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetSignInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetSignInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetSignInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetSignInfo(ctx, req.(*GetSignInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListSignInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSignInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListSignInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListSignInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListSignInfo(ctx, req.(*ListSignInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListXRPInitSignInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListXRPInitSignInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListXRPInitSignInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListXRPInitSignInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListXRPInitSignInfo(ctx, req.(*ListXRPInitSignInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListTransfers(ctx, req.(*ListTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListTransfersByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransfersByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListTransfersByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListTransfersByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListTransfersByFilter(ctx, req.(*ListTransfersByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetRateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetRateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetRateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetRateSnapshot(ctx, req.(*GetRateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetLatestRateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestRateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetLatestRateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetLatestRateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetLatestRateSnapshot(ctx, req.(*GetLatestRateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_SetRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).SetRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/SetRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).SetRates(ctx, req.(*SetRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_SetDefaultRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).SetDefaultRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/SetDefaultRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).SetDefaultRates(ctx, req.(*SetDefaultRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CreateLabeledAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLabeledAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CreateLabeledAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CreateLabeledAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CreateLabeledAddress(ctx, req.(*CreateLabeledAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetLabeledAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabeledAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetLabeledAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetLabeledAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetLabeledAddress(ctx, req.(*GetLabeledAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListLabeledAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabeledAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListLabeledAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListLabeledAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListLabeledAddresses(ctx, req.(*ListLabeledAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_IsDeletableLabeledAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsDeletableLabeledAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).IsDeletableLabeledAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/IsDeletableLabeledAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).IsDeletableLabeledAddress(ctx, req.(*IsDeletableLabeledAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateLabeledAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabeledAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateLabeledAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateLabeledAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateLabeledAddress(ctx, req.(*UpdateLabeledAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_DeleteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabeledAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).DeleteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/DeleteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).DeleteAddress(ctx, req.(*DeleteLabeledAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ReviewLabeledAddressProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewLabeledAddressProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ReviewLabeledAddressProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ReviewLabeledAddressProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ReviewLabeledAddressProposal(ctx, req.(*ReviewLabeledAddressProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CreateWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CreateWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CreateWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CreateWhitelist(ctx, req.(*CreateWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetWhitelist(ctx, req.(*GetWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListWhitelists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWhitelistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListWhitelists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListWhitelists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListWhitelists(ctx, req.(*ListWhitelistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_IsDeletableWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsDeletableWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).IsDeletableWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/IsDeletableWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).IsDeletableWhitelist(ctx, req.(*IsDeletableWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateWhitelist(ctx, req.(*UpdateWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateWhitelistAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWhitelistAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateWhitelistAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateWhitelistAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateWhitelistAddresses(ctx, req.(*UpdateWhitelistAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_DeleteWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).DeleteWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/DeleteWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).DeleteWhitelist(ctx, req.(*DeleteWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CreateTransferLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransferLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CreateTransferLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CreateTransferLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CreateTransferLimit(ctx, req.(*CreateTransferLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetTransferLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetTransferLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetTransferLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetTransferLimit(ctx, req.(*GetTransferLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListTransferLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransferLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListTransferLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListTransferLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListTransferLimits(ctx, req.(*ListTransferLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_IsDeletableTransferLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsDeletableTransferLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).IsDeletableTransferLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/IsDeletableTransferLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).IsDeletableTransferLimit(ctx, req.(*IsDeletableTransferLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateTransferLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransferLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateTransferLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateTransferLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateTransferLimit(ctx, req.(*UpdateTransferLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdateTransferLimitName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransferLimitNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdateTransferLimitName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdateTransferLimitName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdateTransferLimitName(ctx, req.(*UpdateTransferLimitNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_DeleteTransferLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransferLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).DeleteTransferLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/DeleteTransferLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).DeleteTransferLimit(ctx, req.(*DeleteTransferLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ReviewTransferLimitProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewTransferLimitProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ReviewTransferLimitProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ReviewTransferLimitProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ReviewTransferLimitProposal(ctx, req.(*ReviewTransferLimitProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CreatePolicy(ctx, req.(*CreatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetPolicy(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListPolicies(ctx, req.(*ListPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_IsDeletablePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsDeletablePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).IsDeletablePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/IsDeletablePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).IsDeletablePolicy(ctx, req.(*IsDeletablePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/UpdatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).UpdatePolicy(ctx, req.(*UpdatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).DeletePolicy(ctx, req.(*DeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ReviewPolicyProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewPolicyProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ReviewPolicyProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ReviewPolicyProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ReviewPolicyProposal(ctx, req.(*ReviewPolicyProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetSpendableBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpendableBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetSpendableBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetSpendableBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetSpendableBalance(ctx, req.(*GetSpendableBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetTotalBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetTotalBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetTotalBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetTotalBalance(ctx, req.(*GetTotalBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListBalanceSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBalanceSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListBalanceSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListBalanceSnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListBalanceSnapshots(ctx, req.(*ListBalanceSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_CalculateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).CalculateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/CalculateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).CalculateFee(ctx, req.(*CalculateFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetMembersDeactivatabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersDeactivatabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetMembersDeactivatabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetMembersDeactivatabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetMembersDeactivatabilities(ctx, req.(*GetMembersDeactivatabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_GetRecommendedFeeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendedFeeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).GetRecommendedFeeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/GetRecommendedFeeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).GetRecommendedFeeRate(ctx, req.(*GetRecommendedFeeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ValidateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ValidateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ValidateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ValidateAddress(ctx, req.(*ValidateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAPI_ListAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAPIServer).ListAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adamant.global.v1.GlobalAPI/ListAuditLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAPIServer).ListAuditLogs(ctx, req.(*ListAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GlobalAPI_ServiceDesc is the grpc.ServiceDesc for GlobalAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlobalAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adamant.global.v1.GlobalAPI",
	HandlerType: (*GlobalAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _GlobalAPI_CreateWallet_Handler,
		},
		{
			MethodName: "GetWallet",
			Handler:    _GlobalAPI_GetWallet_Handler,
		},
		{
			MethodName: "CancelWallet",
			Handler:    _GlobalAPI_CancelWallet_Handler,
		},
		{
			MethodName: "ArchiveWallet",
			Handler:    _GlobalAPI_ArchiveWallet_Handler,
		},
		{
			MethodName: "UnArchiveWallet",
			Handler:    _GlobalAPI_UnArchiveWallet_Handler,
		},
		{
			MethodName: "ListWallets",
			Handler:    _GlobalAPI_ListWallets_Handler,
		},
		{
			MethodName: "ListWalletsByFilter",
			Handler:    _GlobalAPI_ListWalletsByFilter_Handler,
		},
		{
			MethodName: "ListBaseWallets",
			Handler:    _GlobalAPI_ListBaseWallets_Handler,
		},
		{
			MethodName: "UpdateWalletName",
			Handler:    _GlobalAPI_UpdateWalletName_Handler,
		},
		{
			MethodName: "UpdateWalletValidation",
			Handler:    _GlobalAPI_UpdateWalletValidation_Handler,
		},
		{
			MethodName: "UpdateWalletPolicy",
			Handler:    _GlobalAPI_UpdateWalletPolicy_Handler,
		},
		{
			MethodName: "ReviewWalletProposal",
			Handler:    _GlobalAPI_ReviewWalletProposal_Handler,
		},
		{
			MethodName: "FlushBalance",
			Handler:    _GlobalAPI_FlushBalance_Handler,
		},
		{
			MethodName: "CreateWalletGroup",
			Handler:    _GlobalAPI_CreateWalletGroup_Handler,
		},
		{
			MethodName: "UpdateWalletGroupName",
			Handler:    _GlobalAPI_UpdateWalletGroupName_Handler,
		},
		{
			MethodName: "UpdateWalletGroup",
			Handler:    _GlobalAPI_UpdateWalletGroup_Handler,
		},
		{
			MethodName: "GetWalletGroup",
			Handler:    _GlobalAPI_GetWalletGroup_Handler,
		},
		{
			MethodName: "ListWalletGroups",
			Handler:    _GlobalAPI_ListWalletGroups_Handler,
		},
		{
			MethodName: "UpdateDestinationWalletID",
			Handler:    _GlobalAPI_UpdateDestinationWalletID_Handler,
		},
		{
			MethodName: "GetCosmosBalance",
			Handler:    _GlobalAPI_GetCosmosBalance_Handler,
		},
		{
			MethodName: "ApproveWallet",
			Handler:    _GlobalAPI_ApproveWallet_Handler,
		},
		{
			MethodName: "ApproveTransaction",
			Handler:    _GlobalAPI_ApproveTransaction_Handler,
		},
		{
			MethodName: "CreateAddress",
			Handler:    _GlobalAPI_CreateAddress_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _GlobalAPI_GetAddress_Handler,
		},
		{
			MethodName: "GetAddressByAddress",
			Handler:    _GlobalAPI_GetAddressByAddress_Handler,
		},
		{
			MethodName: "GetAddressByAddressCoin",
			Handler:    _GlobalAPI_GetAddressByAddressCoin_Handler,
		},
		{
			MethodName: "GetAddressByIndex",
			Handler:    _GlobalAPI_GetAddressByIndex_Handler,
		},
		{
			MethodName: "ListAddresses",
			Handler:    _GlobalAPI_ListAddresses_Handler,
		},
		{
			MethodName: "ListAddressesWithBalance",
			Handler:    _GlobalAPI_ListAddressesWithBalance_Handler,
		},
		{
			MethodName: "UpdateAddressBalance",
			Handler:    _GlobalAPI_UpdateAddressBalance_Handler,
		},
		{
			MethodName: "GetEthereumFeeAddress",
			Handler:    _GlobalAPI_GetEthereumFeeAddress_Handler,
		},
		{
			MethodName: "ListSubstrateChildAddresses",
			Handler:    _GlobalAPI_ListSubstrateChildAddresses_Handler,
		},
		{
			MethodName: "ListSymbolChildAddresses",
			Handler:    _GlobalAPI_ListSymbolChildAddresses_Handler,
		},
		{
			MethodName: "ListIOSTChildAccounts",
			Handler:    _GlobalAPI_ListIOSTChildAccounts_Handler,
		},
		{
			MethodName: "ImportAddress",
			Handler:    _GlobalAPI_ImportAddress_Handler,
		},
		{
			MethodName: "ListCallers",
			Handler:    _GlobalAPI_ListCallers_Handler,
		},
		{
			MethodName: "RegisterKey",
			Handler:    _GlobalAPI_RegisterKey_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _GlobalAPI_CreateTransaction_Handler,
		},
		{
			MethodName: "CreateXRPInitTransactions",
			Handler:    _GlobalAPI_CreateXRPInitTransactions_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _GlobalAPI_SignTransaction_Handler,
		},
		{
			MethodName: "SignXRPInitTransactions",
			Handler:    _GlobalAPI_SignXRPInitTransactions_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _GlobalAPI_SendTransaction_Handler,
		},
		{
			MethodName: "SendXRPInitTransactions",
			Handler:    _GlobalAPI_SendXRPInitTransactions_Handler,
		},
		{
			MethodName: "CancelTransaction",
			Handler:    _GlobalAPI_CancelTransaction_Handler,
		},
		{
			MethodName: "ReplaceTransaction",
			Handler:    _GlobalAPI_ReplaceTransaction_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _GlobalAPI_GetTransaction_Handler,
		},
		{
			MethodName: "GetTransactionByTxID",
			Handler:    _GlobalAPI_GetTransactionByTxID_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _GlobalAPI_ListTransactions_Handler,
		},
		{
			MethodName: "ListTransactionsByFilter",
			Handler:    _GlobalAPI_ListTransactionsByFilter_Handler,
		},
		{
			MethodName: "GetSignInfo",
			Handler:    _GlobalAPI_GetSignInfo_Handler,
		},
		{
			MethodName: "ListSignInfo",
			Handler:    _GlobalAPI_ListSignInfo_Handler,
		},
		{
			MethodName: "ListXRPInitSignInfo",
			Handler:    _GlobalAPI_ListXRPInitSignInfo_Handler,
		},
		{
			MethodName: "ListTransfers",
			Handler:    _GlobalAPI_ListTransfers_Handler,
		},
		{
			MethodName: "ListTransfersByFilter",
			Handler:    _GlobalAPI_ListTransfersByFilter_Handler,
		},
		{
			MethodName: "GetRateSnapshot",
			Handler:    _GlobalAPI_GetRateSnapshot_Handler,
		},
		{
			MethodName: "GetLatestRateSnapshot",
			Handler:    _GlobalAPI_GetLatestRateSnapshot_Handler,
		},
		{
			MethodName: "SetRates",
			Handler:    _GlobalAPI_SetRates_Handler,
		},
		{
			MethodName: "SetDefaultRates",
			Handler:    _GlobalAPI_SetDefaultRates_Handler,
		},
		{
			MethodName: "CreateLabeledAddress",
			Handler:    _GlobalAPI_CreateLabeledAddress_Handler,
		},
		{
			MethodName: "GetLabeledAddress",
			Handler:    _GlobalAPI_GetLabeledAddress_Handler,
		},
		{
			MethodName: "ListLabeledAddresses",
			Handler:    _GlobalAPI_ListLabeledAddresses_Handler,
		},
		{
			MethodName: "IsDeletableLabeledAddress",
			Handler:    _GlobalAPI_IsDeletableLabeledAddress_Handler,
		},
		{
			MethodName: "UpdateLabeledAddress",
			Handler:    _GlobalAPI_UpdateLabeledAddress_Handler,
		},
		{
			MethodName: "DeleteAddress",
			Handler:    _GlobalAPI_DeleteAddress_Handler,
		},
		{
			MethodName: "ReviewLabeledAddressProposal",
			Handler:    _GlobalAPI_ReviewLabeledAddressProposal_Handler,
		},
		{
			MethodName: "CreateWhitelist",
			Handler:    _GlobalAPI_CreateWhitelist_Handler,
		},
		{
			MethodName: "GetWhitelist",
			Handler:    _GlobalAPI_GetWhitelist_Handler,
		},
		{
			MethodName: "ListWhitelists",
			Handler:    _GlobalAPI_ListWhitelists_Handler,
		},
		{
			MethodName: "IsDeletableWhitelist",
			Handler:    _GlobalAPI_IsDeletableWhitelist_Handler,
		},
		{
			MethodName: "UpdateWhitelist",
			Handler:    _GlobalAPI_UpdateWhitelist_Handler,
		},
		{
			MethodName: "UpdateWhitelistAddresses",
			Handler:    _GlobalAPI_UpdateWhitelistAddresses_Handler,
		},
		{
			MethodName: "DeleteWhitelist",
			Handler:    _GlobalAPI_DeleteWhitelist_Handler,
		},
		{
			MethodName: "CreateTransferLimit",
			Handler:    _GlobalAPI_CreateTransferLimit_Handler,
		},
		{
			MethodName: "GetTransferLimit",
			Handler:    _GlobalAPI_GetTransferLimit_Handler,
		},
		{
			MethodName: "ListTransferLimits",
			Handler:    _GlobalAPI_ListTransferLimits_Handler,
		},
		{
			MethodName: "IsDeletableTransferLimit",
			Handler:    _GlobalAPI_IsDeletableTransferLimit_Handler,
		},
		{
			MethodName: "UpdateTransferLimit",
			Handler:    _GlobalAPI_UpdateTransferLimit_Handler,
		},
		{
			MethodName: "UpdateTransferLimitName",
			Handler:    _GlobalAPI_UpdateTransferLimitName_Handler,
		},
		{
			MethodName: "DeleteTransferLimit",
			Handler:    _GlobalAPI_DeleteTransferLimit_Handler,
		},
		{
			MethodName: "ReviewTransferLimitProposal",
			Handler:    _GlobalAPI_ReviewTransferLimitProposal_Handler,
		},
		{
			MethodName: "CreatePolicy",
			Handler:    _GlobalAPI_CreatePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _GlobalAPI_GetPolicy_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _GlobalAPI_ListPolicies_Handler,
		},
		{
			MethodName: "IsDeletablePolicy",
			Handler:    _GlobalAPI_IsDeletablePolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _GlobalAPI_UpdatePolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _GlobalAPI_DeletePolicy_Handler,
		},
		{
			MethodName: "ReviewPolicyProposal",
			Handler:    _GlobalAPI_ReviewPolicyProposal_Handler,
		},
		{
			MethodName: "GetSpendableBalance",
			Handler:    _GlobalAPI_GetSpendableBalance_Handler,
		},
		{
			MethodName: "GetTotalBalance",
			Handler:    _GlobalAPI_GetTotalBalance_Handler,
		},
		{
			MethodName: "ListBalanceSnapshots",
			Handler:    _GlobalAPI_ListBalanceSnapshots_Handler,
		},
		{
			MethodName: "CalculateFee",
			Handler:    _GlobalAPI_CalculateFee_Handler,
		},
		{
			MethodName: "GetMembersDeactivatabilities",
			Handler:    _GlobalAPI_GetMembersDeactivatabilities_Handler,
		},
		{
			MethodName: "GetRecommendedFeeRate",
			Handler:    _GlobalAPI_GetRecommendedFeeRate_Handler,
		},
		{
			MethodName: "ValidateAddress",
			Handler:    _GlobalAPI_ValidateAddress_Handler,
		},
		{
			MethodName: "ListAuditLogs",
			Handler:    _GlobalAPI_ListAuditLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gincoinc/adamant/global/v1/adamantglobalv1/global_api.proto",
}
