// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gincoinc/adamant/global/v1/adamantglobalv1/enum.proto

package adamantglobalv1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// WalletType is a type of wallet.
type WalletType int32

const (
	WalletType_WALLET_TYPE_INVALID                                    WalletType = 0
	WalletType_WALLET_TYPE_SELF_CUSTODY_HOT                           WalletType = 1
	WalletType_WALLET_TYPE_SELF_CUSTODY_COLD                          WalletType = 2
	WalletType_WALLET_TYPE_SELF_CUSTODY_HOT_ETHEREUM_EOA              WalletType = 3
	WalletType_WALLET_TYPE_SELF_CUSTODY_HOT_ETHEREUM_EOA_RECEIVE_ONLY WalletType = 4
)

var WalletType_name = map[int32]string{
	0: "WALLET_TYPE_INVALID",
	1: "WALLET_TYPE_SELF_CUSTODY_HOT",
	2: "WALLET_TYPE_SELF_CUSTODY_COLD",
	3: "WALLET_TYPE_SELF_CUSTODY_HOT_ETHEREUM_EOA",
	4: "WALLET_TYPE_SELF_CUSTODY_HOT_ETHEREUM_EOA_RECEIVE_ONLY",
}

var WalletType_value = map[string]int32{
	"WALLET_TYPE_INVALID":                                    0,
	"WALLET_TYPE_SELF_CUSTODY_HOT":                           1,
	"WALLET_TYPE_SELF_CUSTODY_COLD":                          2,
	"WALLET_TYPE_SELF_CUSTODY_HOT_ETHEREUM_EOA":              3,
	"WALLET_TYPE_SELF_CUSTODY_HOT_ETHEREUM_EOA_RECEIVE_ONLY": 4,
}

func (x WalletType) String() string {
	return proto.EnumName(WalletType_name, int32(x))
}

func (WalletType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{0}
}

// WalletState is a state of wallet.
type WalletState int32

const (
	WalletState_WALLET_STATE_INVALID                WalletState = 0
	WalletState_WALLET_STATE_PROPOSED               WalletState = 1
	WalletState_WALLET_STATE_KEY_REGISTERING        WalletState = 2
	WalletState_WALLET_STATE_KEY_REGISTERED         WalletState = 3
	WalletState_WALLET_STATE_VALIDATOR_REVIEWING    WalletState = 4
	WalletState_WALLET_STATE_VALIDATOR_REVIEWED     WalletState = 5
	WalletState_WALLET_STATE_ACTIVATING             WalletState = 6
	WalletState_WALLET_STATE_ACTIVATED              WalletState = 7
	WalletState_WALLET_STATE_SIGNING                WalletState = 8
	WalletState_WALLET_STATE_SIGNED                 WalletState = 9
	WalletState_WALLET_STATE_SUBMITTING             WalletState = 10
	WalletState_WALLET_STATE_SUBMITTED              WalletState = 11
	WalletState_WALLET_STATE_COMPLETED              WalletState = 12
	WalletState_WALLET_STATE_CANCELLED              WalletState = 13
	WalletState_WALLET_STATE_ARCHIVED               WalletState = 14
	WalletState_WALLET_STATE_ADDRESS_IMPORT_WAITING WalletState = 15
	WalletState_WALLET_STATE_ADDRESS_IMPORTING      WalletState = 16
	WalletState_WALLET_STATE_ADDRESS_IMPORT_FAILED  WalletState = 17
)

var WalletState_name = map[int32]string{
	0:  "WALLET_STATE_INVALID",
	1:  "WALLET_STATE_PROPOSED",
	2:  "WALLET_STATE_KEY_REGISTERING",
	3:  "WALLET_STATE_KEY_REGISTERED",
	4:  "WALLET_STATE_VALIDATOR_REVIEWING",
	5:  "WALLET_STATE_VALIDATOR_REVIEWED",
	6:  "WALLET_STATE_ACTIVATING",
	7:  "WALLET_STATE_ACTIVATED",
	8:  "WALLET_STATE_SIGNING",
	9:  "WALLET_STATE_SIGNED",
	10: "WALLET_STATE_SUBMITTING",
	11: "WALLET_STATE_SUBMITTED",
	12: "WALLET_STATE_COMPLETED",
	13: "WALLET_STATE_CANCELLED",
	14: "WALLET_STATE_ARCHIVED",
	15: "WALLET_STATE_ADDRESS_IMPORT_WAITING",
	16: "WALLET_STATE_ADDRESS_IMPORTING",
	17: "WALLET_STATE_ADDRESS_IMPORT_FAILED",
}

var WalletState_value = map[string]int32{
	"WALLET_STATE_INVALID":                0,
	"WALLET_STATE_PROPOSED":               1,
	"WALLET_STATE_KEY_REGISTERING":        2,
	"WALLET_STATE_KEY_REGISTERED":         3,
	"WALLET_STATE_VALIDATOR_REVIEWING":    4,
	"WALLET_STATE_VALIDATOR_REVIEWED":     5,
	"WALLET_STATE_ACTIVATING":             6,
	"WALLET_STATE_ACTIVATED":              7,
	"WALLET_STATE_SIGNING":                8,
	"WALLET_STATE_SIGNED":                 9,
	"WALLET_STATE_SUBMITTING":             10,
	"WALLET_STATE_SUBMITTED":              11,
	"WALLET_STATE_COMPLETED":              12,
	"WALLET_STATE_CANCELLED":              13,
	"WALLET_STATE_ARCHIVED":               14,
	"WALLET_STATE_ADDRESS_IMPORT_WAITING": 15,
	"WALLET_STATE_ADDRESS_IMPORTING":      16,
	"WALLET_STATE_ADDRESS_IMPORT_FAILED":  17,
}

func (x WalletState) String() string {
	return proto.EnumName(WalletState_name, int32(x))
}

func (WalletState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{1}
}

// WalletProposalType is a type of proposal
type WalletProposalType int32

const (
	WalletProposalType_WALLET_PROPOSAL_TYPE_INVALID WalletProposalType = 0
	// the wallet is requested to change policy
	WalletProposalType_WALLET_PROPOSAL_TYPE_POLICY WalletProposalType = 1
	// the wallet is requested to change validator/required_approval_count
	WalletProposalType_WALLET_PROPOSAL_TYPE_VALIDATOR WalletProposalType = 2
)

var WalletProposalType_name = map[int32]string{
	0: "WALLET_PROPOSAL_TYPE_INVALID",
	1: "WALLET_PROPOSAL_TYPE_POLICY",
	2: "WALLET_PROPOSAL_TYPE_VALIDATOR",
}

var WalletProposalType_value = map[string]int32{
	"WALLET_PROPOSAL_TYPE_INVALID":   0,
	"WALLET_PROPOSAL_TYPE_POLICY":    1,
	"WALLET_PROPOSAL_TYPE_VALIDATOR": 2,
}

func (x WalletProposalType) String() string {
	return proto.EnumName(WalletProposalType_name, int32(x))
}

func (WalletProposalType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{2}
}

// AddressState is a state of address.
type AddressState int32

const (
	AddressState_ADDRESS_STATE_INVALID    AddressState = 0
	AddressState_ADDRESS_STATE_SUBMITTING AddressState = 1
	AddressState_ADDRESS_STATE_SUBMITTED  AddressState = 2
	AddressState_ADDRESS_STATE_COMPLETED  AddressState = 3
)

var AddressState_name = map[int32]string{
	0: "ADDRESS_STATE_INVALID",
	1: "ADDRESS_STATE_SUBMITTING",
	2: "ADDRESS_STATE_SUBMITTED",
	3: "ADDRESS_STATE_COMPLETED",
}

var AddressState_value = map[string]int32{
	"ADDRESS_STATE_INVALID":    0,
	"ADDRESS_STATE_SUBMITTING": 1,
	"ADDRESS_STATE_SUBMITTED":  2,
	"ADDRESS_STATE_COMPLETED":  3,
}

func (x AddressState) String() string {
	return proto.EnumName(AddressState_name, int32(x))
}

func (AddressState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{3}
}

// TransactionState is a state of transaction.
type TransactionState int32

const (
	TransactionState_TRANSACTION_STATE_INVALID    TransactionState = 0
	TransactionState_TRANSACTION_STATE_SIGNING    TransactionState = 1
	TransactionState_TRANSACTION_STATE_SIGNED     TransactionState = 2
	TransactionState_TRANSACTION_STATE_REVIEWING  TransactionState = 3
	TransactionState_TRANSACTION_STATE_REVIEWED   TransactionState = 4
	TransactionState_TRANSACTION_STATE_SUBMITTING TransactionState = 5
	TransactionState_TRANSACTION_STATE_SUBMITTED  TransactionState = 6
	TransactionState_TRANSACTION_STATE_CANCELLED  TransactionState = 7
)

var TransactionState_name = map[int32]string{
	0: "TRANSACTION_STATE_INVALID",
	1: "TRANSACTION_STATE_SIGNING",
	2: "TRANSACTION_STATE_SIGNED",
	3: "TRANSACTION_STATE_REVIEWING",
	4: "TRANSACTION_STATE_REVIEWED",
	5: "TRANSACTION_STATE_SUBMITTING",
	6: "TRANSACTION_STATE_SUBMITTED",
	7: "TRANSACTION_STATE_CANCELLED",
}

var TransactionState_value = map[string]int32{
	"TRANSACTION_STATE_INVALID":    0,
	"TRANSACTION_STATE_SIGNING":    1,
	"TRANSACTION_STATE_SIGNED":     2,
	"TRANSACTION_STATE_REVIEWING":  3,
	"TRANSACTION_STATE_REVIEWED":   4,
	"TRANSACTION_STATE_SUBMITTING": 5,
	"TRANSACTION_STATE_SUBMITTED":  6,
	"TRANSACTION_STATE_CANCELLED":  7,
}

func (x TransactionState) String() string {
	return proto.EnumName(TransactionState_name, int32(x))
}

func (TransactionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{4}
}

// AccountType is a type of role
type AccountType int32

const (
	AccountType_ACCOUNT_TYPE_INVALID         AccountType = 0
	AccountType_ACCOUNT_TYPE_USER            AccountType = 1
	AccountType_ACCOUNT_TYPE_SERVICE_ACCOUNT AccountType = 2
)

var AccountType_name = map[int32]string{
	0: "ACCOUNT_TYPE_INVALID",
	1: "ACCOUNT_TYPE_USER",
	2: "ACCOUNT_TYPE_SERVICE_ACCOUNT",
}

var AccountType_value = map[string]int32{
	"ACCOUNT_TYPE_INVALID":         0,
	"ACCOUNT_TYPE_USER":            1,
	"ACCOUNT_TYPE_SERVICE_ACCOUNT": 2,
}

func (x AccountType) String() string {
	return proto.EnumName(AccountType_name, int32(x))
}

func (AccountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{5}
}

// UserState is a state of user.
type UserState int32

const (
	UserState_USER_STATE_INVALID     UserState = 0
	UserState_USER_STATE_UNCONFIRMED UserState = 1
	UserState_USER_STATE_CONFIRMED   UserState = 2
	UserState_USER_STATE_DEACTIVATED UserState = 3
)

var UserState_name = map[int32]string{
	0: "USER_STATE_INVALID",
	1: "USER_STATE_UNCONFIRMED",
	2: "USER_STATE_CONFIRMED",
	3: "USER_STATE_DEACTIVATED",
}

var UserState_value = map[string]int32{
	"USER_STATE_INVALID":     0,
	"USER_STATE_UNCONFIRMED": 1,
	"USER_STATE_CONFIRMED":   2,
	"USER_STATE_DEACTIVATED": 3,
}

func (x UserState) String() string {
	return proto.EnumName(UserState_name, int32(x))
}

func (UserState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{6}
}

// Role is a type of role
type RoleType int32

const (
	RoleType_ROLE_TYPE_INVALID           RoleType = 0
	RoleType_ROLE_TYPE_ORG_MANAGER       RoleType = 1
	RoleType_ROLE_TYPE_ORG_SIGNER        RoleType = 2
	RoleType_ROLE_TYPE_ORG_VALIDATOR     RoleType = 3
	RoleType_ROLE_TYPE_ORG_VIEWER        RoleType = 4
	RoleType_ROLE_TYPE_ORG_DEVELOPER     RoleType = 5
	RoleType_ROLE_TYPE_HOT_WALLET_ADMIN  RoleType = 6
	RoleType_ROLE_TYPE_HOT_WALLET_VIEWER RoleType = 7
)

var RoleType_name = map[int32]string{
	0: "ROLE_TYPE_INVALID",
	1: "ROLE_TYPE_ORG_MANAGER",
	2: "ROLE_TYPE_ORG_SIGNER",
	3: "ROLE_TYPE_ORG_VALIDATOR",
	4: "ROLE_TYPE_ORG_VIEWER",
	5: "ROLE_TYPE_ORG_DEVELOPER",
	6: "ROLE_TYPE_HOT_WALLET_ADMIN",
	7: "ROLE_TYPE_HOT_WALLET_VIEWER",
}

var RoleType_value = map[string]int32{
	"ROLE_TYPE_INVALID":           0,
	"ROLE_TYPE_ORG_MANAGER":       1,
	"ROLE_TYPE_ORG_SIGNER":        2,
	"ROLE_TYPE_ORG_VALIDATOR":     3,
	"ROLE_TYPE_ORG_VIEWER":        4,
	"ROLE_TYPE_ORG_DEVELOPER":     5,
	"ROLE_TYPE_HOT_WALLET_ADMIN":  6,
	"ROLE_TYPE_HOT_WALLET_VIEWER": 7,
}

func (x RoleType) String() string {
	return proto.EnumName(RoleType_name, int32(x))
}

func (RoleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{7}
}

// ResourceType is a target type of role
type ResourceType int32

const (
	ResourceType_RESOURCE_TYPE_INVALID      ResourceType = 0
	ResourceType_RESOURCE_TYPE_WALLET       ResourceType = 1
	ResourceType_RESOURCE_TYPE_ORGANIZATION ResourceType = 2
)

var ResourceType_name = map[int32]string{
	0: "RESOURCE_TYPE_INVALID",
	1: "RESOURCE_TYPE_WALLET",
	2: "RESOURCE_TYPE_ORGANIZATION",
}

var ResourceType_value = map[string]int32{
	"RESOURCE_TYPE_INVALID":      0,
	"RESOURCE_TYPE_WALLET":       1,
	"RESOURCE_TYPE_ORGANIZATION": 2,
}

func (x ResourceType) String() string {
	return proto.EnumName(ResourceType_name, int32(x))
}

func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{8}
}

// TokenType is a type of token.
type TokenType int32

const (
	TokenType_TOKEN_TYPE_INVALID               TokenType = 0
	TokenType_TOKEN_TYPE_LOGIN_TOKEN           TokenType = 1
	TokenType_TOKEN_TYPE_MAIL_TOKEN            TokenType = 2
	TokenType_TOKEN_TYPE_PASSWORD_RESET_TOKEN  TokenType = 3
	TokenType_TOKEN_TYPE_PASSWORD_UPDATE_TOKEN TokenType = 4
	TokenType_TOKEN_TYPE_SIGNUP_TOKEN          TokenType = 5
)

var TokenType_name = map[int32]string{
	0: "TOKEN_TYPE_INVALID",
	1: "TOKEN_TYPE_LOGIN_TOKEN",
	2: "TOKEN_TYPE_MAIL_TOKEN",
	3: "TOKEN_TYPE_PASSWORD_RESET_TOKEN",
	4: "TOKEN_TYPE_PASSWORD_UPDATE_TOKEN",
	5: "TOKEN_TYPE_SIGNUP_TOKEN",
}

var TokenType_value = map[string]int32{
	"TOKEN_TYPE_INVALID":               0,
	"TOKEN_TYPE_LOGIN_TOKEN":           1,
	"TOKEN_TYPE_MAIL_TOKEN":            2,
	"TOKEN_TYPE_PASSWORD_RESET_TOKEN":  3,
	"TOKEN_TYPE_PASSWORD_UPDATE_TOKEN": 4,
	"TOKEN_TYPE_SIGNUP_TOKEN":          5,
}

func (x TokenType) String() string {
	return proto.EnumName(TokenType_name, int32(x))
}

func (TokenType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{9}
}

// PolicyType is a type of policy.
type PolicyType int32

const (
	PolicyType_POLICY_TYPE_INVALID            PolicyType = 0
	PolicyType_POLICY_TYPE_HOT_WALLET_POLICY  PolicyType = 1
	PolicyType_POLICY_TYPE_COLD_WALLET_POLICY PolicyType = 2
)

var PolicyType_name = map[int32]string{
	0: "POLICY_TYPE_INVALID",
	1: "POLICY_TYPE_HOT_WALLET_POLICY",
	2: "POLICY_TYPE_COLD_WALLET_POLICY",
}

var PolicyType_value = map[string]int32{
	"POLICY_TYPE_INVALID":            0,
	"POLICY_TYPE_HOT_WALLET_POLICY":  1,
	"POLICY_TYPE_COLD_WALLET_POLICY": 2,
}

func (x PolicyType) String() string {
	return proto.EnumName(PolicyType_name, int32(x))
}

func (PolicyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{10}
}

// TransferLimitType is a type of role
type TransferLimitType int32

const (
	TransferLimitType_TRANSFER_LIMIT_TYPE_INVALID  TransferLimitType = 0
	TransferLimitType_TRANSFER_LIMIT_TYPE_HOURLY   TransferLimitType = 1
	TransferLimitType_TRANSFER_LIMIT_TYPE_DAILY    TransferLimitType = 2
	TransferLimitType_TRANSFER_LIMIT_TYPE_ONE_TIME TransferLimitType = 3
)

var TransferLimitType_name = map[int32]string{
	0: "TRANSFER_LIMIT_TYPE_INVALID",
	1: "TRANSFER_LIMIT_TYPE_HOURLY",
	2: "TRANSFER_LIMIT_TYPE_DAILY",
	3: "TRANSFER_LIMIT_TYPE_ONE_TIME",
}

var TransferLimitType_value = map[string]int32{
	"TRANSFER_LIMIT_TYPE_INVALID":  0,
	"TRANSFER_LIMIT_TYPE_HOURLY":   1,
	"TRANSFER_LIMIT_TYPE_DAILY":    2,
	"TRANSFER_LIMIT_TYPE_ONE_TIME": 3,
}

func (x TransferLimitType) String() string {
	return proto.EnumName(TransferLimitType_name, int32(x))
}

func (TransferLimitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{11}
}

// NotificationType is a type of notification
type NotificationType int32

const (
	NotificationType_NOTIFICATION_TYPE_INVALID                               NotificationType = 0
	NotificationType_NOTIFICATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST         NotificationType = 1
	NotificationType_NOTIFICATION_TYPE_WALLET_VALIDATOR_APPROVE_REQUEST      NotificationType = 2
	NotificationType_NOTIFICATION_TYPE_WALLET_ACTIVATE_FAILED                NotificationType = 3
	NotificationType_NOTIFICATION_TYPE_WALLET_CANCELLED                      NotificationType = 4
	NotificationType_NOTIFICATION_TYPE_WALLET_COMPLETED                      NotificationType = 5
	NotificationType_NOTIFICATION_TYPE_WALLET_FAILED                         NotificationType = 6
	NotificationType_NOTIFICATION_TYPE_WALLET_ADDRESS_APPROVE_REQUEST        NotificationType = 23
	NotificationType_NOTIFICATION_TYPE_WALLET_XRP_ACTIVATE_REQUEST           NotificationType = 24
	NotificationType_NOTIFICATION_TYPE_WALLET_MULTISIG_CONFIG_REQUEST        NotificationType = 25
	NotificationType_NOTIFICATION_TYPE_WALLET_MANAGER_TRANSACTION_REQUEST    NotificationType = 26
	NotificationType_NOTIFICATION_TYPE_TRANSACTION_SIGNER_APPROVE_REQUEST    NotificationType = 7
	NotificationType_NOTIFICATION_TYPE_TRANSACTION_VALIDATOR_APPROVE_REQUEST NotificationType = 8
	NotificationType_NOTIFICATION_TYPE_TRANSACTION_READY                     NotificationType = 22
	NotificationType_NOTIFICATION_TYPE_TRANSACTION_SUBMITTED                 NotificationType = 9
	NotificationType_NOTIFICATION_TYPE_TRANSACTION_CANCELLED                 NotificationType = 10
	NotificationType_NOTIFICATION_TYPE_TRANSFER_SEND_COMPLETED               NotificationType = 11
	NotificationType_NOTIFICATION_TYPE_TRANSFER_SEND_FAILED                  NotificationType = 12
	NotificationType_NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPLETED            NotificationType = 13
	NotificationType_NOTIFICATION_TYPE_TRANSFER_RECEIVE_FAILED               NotificationType = 14
	NotificationType_NOTIFICATION_TYPE_ADDRESS_APPROVE_REQUEST               NotificationType = 15
	NotificationType_NOTIFICATION_TYPE_ADDRESS_COMPLETED                     NotificationType = 16
	NotificationType_NOTIFICATION_TYPE_ADDRESS_CANCELLED                     NotificationType = 17
	NotificationType_NOTIFICATION_TYPE_TRANSFERLIMIT_APPROVE_REQUEST         NotificationType = 18
	NotificationType_NOTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED               NotificationType = 19
	NotificationType_NOTIFICATION_TYPE_TRANSFERLIMIT_CANCELLED               NotificationType = 20
	NotificationType_NOTIFICATION_TYPE_WHITELIST_DETACH_REQUEST              NotificationType = 21
)

var NotificationType_name = map[int32]string{
	0:  "NOTIFICATION_TYPE_INVALID",
	1:  "NOTIFICATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST",
	2:  "NOTIFICATION_TYPE_WALLET_VALIDATOR_APPROVE_REQUEST",
	3:  "NOTIFICATION_TYPE_WALLET_ACTIVATE_FAILED",
	4:  "NOTIFICATION_TYPE_WALLET_CANCELLED",
	5:  "NOTIFICATION_TYPE_WALLET_COMPLETED",
	6:  "NOTIFICATION_TYPE_WALLET_FAILED",
	23: "NOTIFICATION_TYPE_WALLET_ADDRESS_APPROVE_REQUEST",
	24: "NOTIFICATION_TYPE_WALLET_XRP_ACTIVATE_REQUEST",
	25: "NOTIFICATION_TYPE_WALLET_MULTISIG_CONFIG_REQUEST",
	26: "NOTIFICATION_TYPE_WALLET_MANAGER_TRANSACTION_REQUEST",
	7:  "NOTIFICATION_TYPE_TRANSACTION_SIGNER_APPROVE_REQUEST",
	8:  "NOTIFICATION_TYPE_TRANSACTION_VALIDATOR_APPROVE_REQUEST",
	22: "NOTIFICATION_TYPE_TRANSACTION_READY",
	9:  "NOTIFICATION_TYPE_TRANSACTION_SUBMITTED",
	10: "NOTIFICATION_TYPE_TRANSACTION_CANCELLED",
	11: "NOTIFICATION_TYPE_TRANSFER_SEND_COMPLETED",
	12: "NOTIFICATION_TYPE_TRANSFER_SEND_FAILED",
	13: "NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPLETED",
	14: "NOTIFICATION_TYPE_TRANSFER_RECEIVE_FAILED",
	15: "NOTIFICATION_TYPE_ADDRESS_APPROVE_REQUEST",
	16: "NOTIFICATION_TYPE_ADDRESS_COMPLETED",
	17: "NOTIFICATION_TYPE_ADDRESS_CANCELLED",
	18: "NOTIFICATION_TYPE_TRANSFERLIMIT_APPROVE_REQUEST",
	19: "NOTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED",
	20: "NOTIFICATION_TYPE_TRANSFERLIMIT_CANCELLED",
	21: "NOTIFICATION_TYPE_WHITELIST_DETACH_REQUEST",
}

var NotificationType_value = map[string]int32{
	"NOTIFICATION_TYPE_INVALID":                               0,
	"NOTIFICATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST":         1,
	"NOTIFICATION_TYPE_WALLET_VALIDATOR_APPROVE_REQUEST":      2,
	"NOTIFICATION_TYPE_WALLET_ACTIVATE_FAILED":                3,
	"NOTIFICATION_TYPE_WALLET_CANCELLED":                      4,
	"NOTIFICATION_TYPE_WALLET_COMPLETED":                      5,
	"NOTIFICATION_TYPE_WALLET_FAILED":                         6,
	"NOTIFICATION_TYPE_WALLET_ADDRESS_APPROVE_REQUEST":        23,
	"NOTIFICATION_TYPE_WALLET_XRP_ACTIVATE_REQUEST":           24,
	"NOTIFICATION_TYPE_WALLET_MULTISIG_CONFIG_REQUEST":        25,
	"NOTIFICATION_TYPE_WALLET_MANAGER_TRANSACTION_REQUEST":    26,
	"NOTIFICATION_TYPE_TRANSACTION_SIGNER_APPROVE_REQUEST":    7,
	"NOTIFICATION_TYPE_TRANSACTION_VALIDATOR_APPROVE_REQUEST": 8,
	"NOTIFICATION_TYPE_TRANSACTION_READY":                     22,
	"NOTIFICATION_TYPE_TRANSACTION_SUBMITTED":                 9,
	"NOTIFICATION_TYPE_TRANSACTION_CANCELLED":                 10,
	"NOTIFICATION_TYPE_TRANSFER_SEND_COMPLETED":               11,
	"NOTIFICATION_TYPE_TRANSFER_SEND_FAILED":                  12,
	"NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPLETED":            13,
	"NOTIFICATION_TYPE_TRANSFER_RECEIVE_FAILED":               14,
	"NOTIFICATION_TYPE_ADDRESS_APPROVE_REQUEST":               15,
	"NOTIFICATION_TYPE_ADDRESS_COMPLETED":                     16,
	"NOTIFICATION_TYPE_ADDRESS_CANCELLED":                     17,
	"NOTIFICATION_TYPE_TRANSFERLIMIT_APPROVE_REQUEST":         18,
	"NOTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED":               19,
	"NOTIFICATION_TYPE_TRANSFERLIMIT_CANCELLED":               20,
	"NOTIFICATION_TYPE_WHITELIST_DETACH_REQUEST":              21,
}

func (x NotificationType) String() string {
	return proto.EnumName(NotificationType_name, int32(x))
}

func (NotificationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{12}
}

// AuditLogGroup is a enum of AuditLogGroup
type AuditLogGroup int32

const (
	AuditLogGroup_AUDIT_LOG_GROUP_INVALID         AuditLogGroup = 0
	AuditLogGroup_AUDIT_LOG_GROUP_LOGIN           AuditLogGroup = 1
	AuditLogGroup_AUDIT_LOG_GROUP_ACCOUNT         AuditLogGroup = 2
	AuditLogGroup_AUDIT_LOG_GROUP_SERVICE_ACCOUNT AuditLogGroup = 3
	AuditLogGroup_AUDIT_LOG_GROUP_WALLET          AuditLogGroup = 4
	AuditLogGroup_AUDIT_LOG_GROUP_TRANSACTION     AuditLogGroup = 5
	AuditLogGroup_AUDIT_LOG_GROUP_POLICY          AuditLogGroup = 6
)

var AuditLogGroup_name = map[int32]string{
	0: "AUDIT_LOG_GROUP_INVALID",
	1: "AUDIT_LOG_GROUP_LOGIN",
	2: "AUDIT_LOG_GROUP_ACCOUNT",
	3: "AUDIT_LOG_GROUP_SERVICE_ACCOUNT",
	4: "AUDIT_LOG_GROUP_WALLET",
	5: "AUDIT_LOG_GROUP_TRANSACTION",
	6: "AUDIT_LOG_GROUP_POLICY",
}

var AuditLogGroup_value = map[string]int32{
	"AUDIT_LOG_GROUP_INVALID":         0,
	"AUDIT_LOG_GROUP_LOGIN":           1,
	"AUDIT_LOG_GROUP_ACCOUNT":         2,
	"AUDIT_LOG_GROUP_SERVICE_ACCOUNT": 3,
	"AUDIT_LOG_GROUP_WALLET":          4,
	"AUDIT_LOG_GROUP_TRANSACTION":     5,
	"AUDIT_LOG_GROUP_POLICY":          6,
}

func (x AuditLogGroup) String() string {
	return proto.EnumName(AuditLogGroup_name, int32(x))
}

func (AuditLogGroup) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{13}
}

// AuditLogType is a type of AuditLog
type AuditLogType int32

const (
	AuditLogType_AUDIT_LOG_TYPE_INVALID                           AuditLogType = 0
	AuditLogType_AUDIT_LOG_TYPE_LOGIN                             AuditLogType = 1
	AuditLogType_AUDIT_LOG_TYPE_LOGIN_FAIL                        AuditLogType = 2
	AuditLogType_AUDIT_LOG_TYPE_2FA_FAIL                          AuditLogType = 50
	AuditLogType_AUDIT_LOG_TYPE_LOGOUT                            AuditLogType = 3
	AuditLogType_AUDIT_LOG_TYPE_WALLET_CREATE                     AuditLogType = 4
	AuditLogType_AUDIT_LOG_TYPE_WALLET_APPROVE                    AuditLogType = 5
	AuditLogType_AUDIT_LOG_TYPE_WALLET_CANCEL                     AuditLogType = 6
	AuditLogType_AUDIT_LOG_TYPE_WALLET_REGISTER_PUBKEY            AuditLogType = 7
	AuditLogType_AUDIT_LOG_TYPE_WALLET_ARCHIVE                    AuditLogType = 8
	AuditLogType_AUDIT_LOG_TYPE_WALLET_UNARCHIVE                  AuditLogType = 9
	AuditLogType_AUDIT_LOG_TYPE_WALLET_NAME_CHANGE                AuditLogType = 10
	AuditLogType_AUDIT_LOG_TYPE_WALLET_POLICY_CHANGE              AuditLogType = 11
	AuditLogType_AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_REQUEST       AuditLogType = 12
	AuditLogType_AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_APPROVE       AuditLogType = 13
	AuditLogType_AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_CANCEL        AuditLogType = 14
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_CREATE                AuditLogType = 15
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_APPROVE               AuditLogType = 16
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_CANCEL                AuditLogType = 17
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_REGISTER_SIGNATURE    AuditLogType = 18
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_SUBMIT                AuditLogType = 19
	AuditLogType_AUDIT_LOG_TYPE_ACCOUNT_PASSWORD_CHANGE           AuditLogType = 20
	AuditLogType_AUDIT_LOG_TYPE_ACCOUNT_EMAIL_CHANGE              AuditLogType = 21
	AuditLogType_AUDIT_LOG_TYPE_ACCOUNT_INVITE                    AuditLogType = 22
	AuditLogType_AUDIT_LOG_TYPE_ACCOUNT_ARCHIVE                   AuditLogType = 23
	AuditLogType_AUDIT_LOG_TYPE_ACCOUNT_UNARCHIVE                 AuditLogType = 24
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CREATE            AuditLogType = 25
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CHANGE_PERMISSION AuditLogType = 26
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_ACTIVATE          AuditLogType = 27
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_INACTIVE          AuditLogType = 28
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_DELETE            AuditLogType = 29
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_CREATE        AuditLogType = 30
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_DELETE        AuditLogType = 31
	AuditLogType_AUDIT_LOG_TYPE_POLICY_ADDRESS_CREATE             AuditLogType = 32
	AuditLogType_AUDIT_LOG_TYPE_POLICY_ADDRESS_DELETE             AuditLogType = 33
	AuditLogType_AUDIT_LOG_TYPE_POLICY_ADDRESS_APPROVE            AuditLogType = 34
	AuditLogType_AUDIT_LOG_TYPE_POLICY_ADDRESS_CANCEL             AuditLogType = 35
	AuditLogType_AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CREATE      AuditLogType = 36
	AuditLogType_AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CHANGE      AuditLogType = 37
	AuditLogType_AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_DELETE      AuditLogType = 38
	AuditLogType_AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_APPROVE     AuditLogType = 39
	AuditLogType_AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CANCEL      AuditLogType = 40
	AuditLogType_AUDIT_LOG_TYPE_POLICY_WHITELIST_CREATE           AuditLogType = 41
	AuditLogType_AUDIT_LOG_TYPE_POLICY_WHITELIST_CHANGE           AuditLogType = 42
	AuditLogType_AUDIT_LOG_TYPE_POLICY_WHITELIST_DELETE           AuditLogType = 43
	AuditLogType_AUDIT_LOG_TYPE_POLICY_POLICY_CREATE              AuditLogType = 44
	AuditLogType_AUDIT_LOG_TYPE_POLICY_POLICY_CHANGE              AuditLogType = 45
	AuditLogType_AUDIT_LOG_TYPE_POLICY_POLICY_DELETE              AuditLogType = 46
	AuditLogType_AUDIT_LOG_TYPE_POLICY_REQUEST_NO_WHITELIST       AuditLogType = 47
	AuditLogType_AUDIT_LOG_TYPE_POLICY_APPROVE_NO_WHITELIST       AuditLogType = 48
	AuditLogType_AUDIT_LOG_TYPE_POLICY_CANCEL_NO_WHITELIST        AuditLogType = 49
)

var AuditLogType_name = map[int32]string{
	0:  "AUDIT_LOG_TYPE_INVALID",
	1:  "AUDIT_LOG_TYPE_LOGIN",
	2:  "AUDIT_LOG_TYPE_LOGIN_FAIL",
	50: "AUDIT_LOG_TYPE_2FA_FAIL",
	3:  "AUDIT_LOG_TYPE_LOGOUT",
	4:  "AUDIT_LOG_TYPE_WALLET_CREATE",
	5:  "AUDIT_LOG_TYPE_WALLET_APPROVE",
	6:  "AUDIT_LOG_TYPE_WALLET_CANCEL",
	7:  "AUDIT_LOG_TYPE_WALLET_REGISTER_PUBKEY",
	8:  "AUDIT_LOG_TYPE_WALLET_ARCHIVE",
	9:  "AUDIT_LOG_TYPE_WALLET_UNARCHIVE",
	10: "AUDIT_LOG_TYPE_WALLET_NAME_CHANGE",
	11: "AUDIT_LOG_TYPE_WALLET_POLICY_CHANGE",
	12: "AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_REQUEST",
	13: "AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_APPROVE",
	14: "AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_CANCEL",
	15: "AUDIT_LOG_TYPE_TRANSACTION_CREATE",
	16: "AUDIT_LOG_TYPE_TRANSACTION_APPROVE",
	17: "AUDIT_LOG_TYPE_TRANSACTION_CANCEL",
	18: "AUDIT_LOG_TYPE_TRANSACTION_REGISTER_SIGNATURE",
	19: "AUDIT_LOG_TYPE_TRANSACTION_SUBMIT",
	20: "AUDIT_LOG_TYPE_ACCOUNT_PASSWORD_CHANGE",
	21: "AUDIT_LOG_TYPE_ACCOUNT_EMAIL_CHANGE",
	22: "AUDIT_LOG_TYPE_ACCOUNT_INVITE",
	23: "AUDIT_LOG_TYPE_ACCOUNT_ARCHIVE",
	24: "AUDIT_LOG_TYPE_ACCOUNT_UNARCHIVE",
	25: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CREATE",
	26: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CHANGE_PERMISSION",
	27: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_ACTIVATE",
	28: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_INACTIVE",
	29: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_DELETE",
	30: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_CREATE",
	31: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_DELETE",
	32: "AUDIT_LOG_TYPE_POLICY_ADDRESS_CREATE",
	33: "AUDIT_LOG_TYPE_POLICY_ADDRESS_DELETE",
	34: "AUDIT_LOG_TYPE_POLICY_ADDRESS_APPROVE",
	35: "AUDIT_LOG_TYPE_POLICY_ADDRESS_CANCEL",
	36: "AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CREATE",
	37: "AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CHANGE",
	38: "AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_DELETE",
	39: "AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_APPROVE",
	40: "AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CANCEL",
	41: "AUDIT_LOG_TYPE_POLICY_WHITELIST_CREATE",
	42: "AUDIT_LOG_TYPE_POLICY_WHITELIST_CHANGE",
	43: "AUDIT_LOG_TYPE_POLICY_WHITELIST_DELETE",
	44: "AUDIT_LOG_TYPE_POLICY_POLICY_CREATE",
	45: "AUDIT_LOG_TYPE_POLICY_POLICY_CHANGE",
	46: "AUDIT_LOG_TYPE_POLICY_POLICY_DELETE",
	47: "AUDIT_LOG_TYPE_POLICY_REQUEST_NO_WHITELIST",
	48: "AUDIT_LOG_TYPE_POLICY_APPROVE_NO_WHITELIST",
	49: "AUDIT_LOG_TYPE_POLICY_CANCEL_NO_WHITELIST",
}

var AuditLogType_value = map[string]int32{
	"AUDIT_LOG_TYPE_INVALID":                           0,
	"AUDIT_LOG_TYPE_LOGIN":                             1,
	"AUDIT_LOG_TYPE_LOGIN_FAIL":                        2,
	"AUDIT_LOG_TYPE_2FA_FAIL":                          50,
	"AUDIT_LOG_TYPE_LOGOUT":                            3,
	"AUDIT_LOG_TYPE_WALLET_CREATE":                     4,
	"AUDIT_LOG_TYPE_WALLET_APPROVE":                    5,
	"AUDIT_LOG_TYPE_WALLET_CANCEL":                     6,
	"AUDIT_LOG_TYPE_WALLET_REGISTER_PUBKEY":            7,
	"AUDIT_LOG_TYPE_WALLET_ARCHIVE":                    8,
	"AUDIT_LOG_TYPE_WALLET_UNARCHIVE":                  9,
	"AUDIT_LOG_TYPE_WALLET_NAME_CHANGE":                10,
	"AUDIT_LOG_TYPE_WALLET_POLICY_CHANGE":              11,
	"AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_REQUEST":       12,
	"AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_APPROVE":       13,
	"AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_CANCEL":        14,
	"AUDIT_LOG_TYPE_TRANSACTION_CREATE":                15,
	"AUDIT_LOG_TYPE_TRANSACTION_APPROVE":               16,
	"AUDIT_LOG_TYPE_TRANSACTION_CANCEL":                17,
	"AUDIT_LOG_TYPE_TRANSACTION_REGISTER_SIGNATURE":    18,
	"AUDIT_LOG_TYPE_TRANSACTION_SUBMIT":                19,
	"AUDIT_LOG_TYPE_ACCOUNT_PASSWORD_CHANGE":           20,
	"AUDIT_LOG_TYPE_ACCOUNT_EMAIL_CHANGE":              21,
	"AUDIT_LOG_TYPE_ACCOUNT_INVITE":                    22,
	"AUDIT_LOG_TYPE_ACCOUNT_ARCHIVE":                   23,
	"AUDIT_LOG_TYPE_ACCOUNT_UNARCHIVE":                 24,
	"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CREATE":            25,
	"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CHANGE_PERMISSION": 26,
	"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_ACTIVATE":          27,
	"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_INACTIVE":          28,
	"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_DELETE":            29,
	"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_CREATE":        30,
	"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_DELETE":        31,
	"AUDIT_LOG_TYPE_POLICY_ADDRESS_CREATE":             32,
	"AUDIT_LOG_TYPE_POLICY_ADDRESS_DELETE":             33,
	"AUDIT_LOG_TYPE_POLICY_ADDRESS_APPROVE":            34,
	"AUDIT_LOG_TYPE_POLICY_ADDRESS_CANCEL":             35,
	"AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CREATE":      36,
	"AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CHANGE":      37,
	"AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_DELETE":      38,
	"AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_APPROVE":     39,
	"AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CANCEL":      40,
	"AUDIT_LOG_TYPE_POLICY_WHITELIST_CREATE":           41,
	"AUDIT_LOG_TYPE_POLICY_WHITELIST_CHANGE":           42,
	"AUDIT_LOG_TYPE_POLICY_WHITELIST_DELETE":           43,
	"AUDIT_LOG_TYPE_POLICY_POLICY_CREATE":              44,
	"AUDIT_LOG_TYPE_POLICY_POLICY_CHANGE":              45,
	"AUDIT_LOG_TYPE_POLICY_POLICY_DELETE":              46,
	"AUDIT_LOG_TYPE_POLICY_REQUEST_NO_WHITELIST":       47,
	"AUDIT_LOG_TYPE_POLICY_APPROVE_NO_WHITELIST":       48,
	"AUDIT_LOG_TYPE_POLICY_CANCEL_NO_WHITELIST":        49,
}

func (x AuditLogType) String() string {
	return proto.EnumName(AuditLogType_name, int32(x))
}

func (AuditLogType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{14}
}

// ErrDetailViolationType define violation type of errdetails.PreconditionFailure of grpc
type PreconditionFailureType int32

const (
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_INVALID PreconditionFailureType = 0
	// authenticator
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_MFA_REQUIRED          PreconditionFailureType = 1
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_MFA_NOT_REGISTERED    PreconditionFailureType = 2
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_USER_NOT_ACTIVE       PreconditionFailureType = 3
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_USER_IS_ARCHIVED      PreconditionFailureType = 4
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_EMAIL_IS_ALREADY_USED PreconditionFailureType = 5
	// treasurer/gatekeeper
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_INSUFFICIENT_SPENDABLE_BALANCE     PreconditionFailureType = 6
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_HOURLY_LIMIT_EXCEEDED              PreconditionFailureType = 7
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_DAILY_LIMIT_EXCEEDED               PreconditionFailureType = 8
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_ONETIME_LIMIT_EXCEEDED             PreconditionFailureType = 9
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_WALLET_NAME_IS_ALREADY_USED        PreconditionFailureType = 10
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_WALLET_IS_CANCELED                 PreconditionFailureType = 11
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_WALLET_IS_ARCHIVED                 PreconditionFailureType = 12
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_TRANSACTION_IS_CANCELED            PreconditionFailureType = 13
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_PROPOSAL_ALREADY_EXISTS            PreconditionFailureType = 14
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_NO_RATE                            PreconditionFailureType = 15
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_WHITELIST_OF_BASEPOLICY            PreconditionFailureType = 16
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_CANNOT_ARCHIVE_WALLET_WITH_BALANCE PreconditionFailureType = 17
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_TEMPORARY_INCREASE_IN_FEERATE      PreconditionFailureType = 18
	// subscription
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_PROHIBITED_BY_SUBSCRIPTION PreconditionFailureType = 19
)

var PreconditionFailureType_name = map[int32]string{
	0:  "PRECONDITION_FAILURE_TYPE_INVALID",
	1:  "PRECONDITION_FAILURE_TYPE_MFA_REQUIRED",
	2:  "PRECONDITION_FAILURE_TYPE_MFA_NOT_REGISTERED",
	3:  "PRECONDITION_FAILURE_TYPE_USER_NOT_ACTIVE",
	4:  "PRECONDITION_FAILURE_TYPE_USER_IS_ARCHIVED",
	5:  "PRECONDITION_FAILURE_TYPE_EMAIL_IS_ALREADY_USED",
	6:  "PRECONDITION_FAILURE_TYPE_INSUFFICIENT_SPENDABLE_BALANCE",
	7:  "PRECONDITION_FAILURE_TYPE_HOURLY_LIMIT_EXCEEDED",
	8:  "PRECONDITION_FAILURE_TYPE_DAILY_LIMIT_EXCEEDED",
	9:  "PRECONDITION_FAILURE_TYPE_ONETIME_LIMIT_EXCEEDED",
	10: "PRECONDITION_FAILURE_TYPE_WALLET_NAME_IS_ALREADY_USED",
	11: "PRECONDITION_FAILURE_TYPE_WALLET_IS_CANCELED",
	12: "PRECONDITION_FAILURE_TYPE_WALLET_IS_ARCHIVED",
	13: "PRECONDITION_FAILURE_TYPE_TRANSACTION_IS_CANCELED",
	14: "PRECONDITION_FAILURE_TYPE_PROPOSAL_ALREADY_EXISTS",
	15: "PRECONDITION_FAILURE_TYPE_NO_RATE",
	16: "PRECONDITION_FAILURE_TYPE_WHITELIST_OF_BASEPOLICY",
	17: "PRECONDITION_FAILURE_TYPE_CANNOT_ARCHIVE_WALLET_WITH_BALANCE",
	18: "PRECONDITION_FAILURE_TYPE_TEMPORARY_INCREASE_IN_FEERATE",
	19: "PRECONDITION_FAILURE_TYPE_PROHIBITED_BY_SUBSCRIPTION",
}

var PreconditionFailureType_value = map[string]int32{
	"PRECONDITION_FAILURE_TYPE_INVALID":                            0,
	"PRECONDITION_FAILURE_TYPE_MFA_REQUIRED":                       1,
	"PRECONDITION_FAILURE_TYPE_MFA_NOT_REGISTERED":                 2,
	"PRECONDITION_FAILURE_TYPE_USER_NOT_ACTIVE":                    3,
	"PRECONDITION_FAILURE_TYPE_USER_IS_ARCHIVED":                   4,
	"PRECONDITION_FAILURE_TYPE_EMAIL_IS_ALREADY_USED":              5,
	"PRECONDITION_FAILURE_TYPE_INSUFFICIENT_SPENDABLE_BALANCE":     6,
	"PRECONDITION_FAILURE_TYPE_HOURLY_LIMIT_EXCEEDED":              7,
	"PRECONDITION_FAILURE_TYPE_DAILY_LIMIT_EXCEEDED":               8,
	"PRECONDITION_FAILURE_TYPE_ONETIME_LIMIT_EXCEEDED":             9,
	"PRECONDITION_FAILURE_TYPE_WALLET_NAME_IS_ALREADY_USED":        10,
	"PRECONDITION_FAILURE_TYPE_WALLET_IS_CANCELED":                 11,
	"PRECONDITION_FAILURE_TYPE_WALLET_IS_ARCHIVED":                 12,
	"PRECONDITION_FAILURE_TYPE_TRANSACTION_IS_CANCELED":            13,
	"PRECONDITION_FAILURE_TYPE_PROPOSAL_ALREADY_EXISTS":            14,
	"PRECONDITION_FAILURE_TYPE_NO_RATE":                            15,
	"PRECONDITION_FAILURE_TYPE_WHITELIST_OF_BASEPOLICY":            16,
	"PRECONDITION_FAILURE_TYPE_CANNOT_ARCHIVE_WALLET_WITH_BALANCE": 17,
	"PRECONDITION_FAILURE_TYPE_TEMPORARY_INCREASE_IN_FEERATE":      18,
	"PRECONDITION_FAILURE_TYPE_PROHIBITED_BY_SUBSCRIPTION":         19,
}

func (x PreconditionFailureType) String() string {
	return proto.EnumName(PreconditionFailureType_name, int32(x))
}

func (PreconditionFailureType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{15}
}

type ListFilterType int32

const (
	ListFilterType_LIST_FILTER_TYPE_INVALID        ListFilterType = 0
	ListFilterType_LIST_FILTER_TYPE_WALLET_ID      ListFilterType = 1
	ListFilterType_LIST_FILTER_TYPE_WALLET_NAME    ListFilterType = 2
	ListFilterType_LIST_FILTER_TYPE_WALLET_ADDRESS ListFilterType = 3
	ListFilterType_LIST_FILTER_TYPE_TRANSACTION_ID ListFilterType = 4
	ListFilterType_LIST_FILTER_TYPE_TRANSFER_ID    ListFilterType = 5
	ListFilterType_LIST_FILTER_TYPE_ADDRESS_NAME   ListFilterType = 6
	ListFilterType_LIST_FILTER_TYPE_ADDRESS        ListFilterType = 7
	ListFilterType_LIST_FILTER_TYPE_TXID           ListFilterType = 8
	ListFilterType_LIST_FILTER_TYPE_OWNER_ID       ListFilterType = 9
)

var ListFilterType_name = map[int32]string{
	0: "LIST_FILTER_TYPE_INVALID",
	1: "LIST_FILTER_TYPE_WALLET_ID",
	2: "LIST_FILTER_TYPE_WALLET_NAME",
	3: "LIST_FILTER_TYPE_WALLET_ADDRESS",
	4: "LIST_FILTER_TYPE_TRANSACTION_ID",
	5: "LIST_FILTER_TYPE_TRANSFER_ID",
	6: "LIST_FILTER_TYPE_ADDRESS_NAME",
	7: "LIST_FILTER_TYPE_ADDRESS",
	8: "LIST_FILTER_TYPE_TXID",
	9: "LIST_FILTER_TYPE_OWNER_ID",
}

var ListFilterType_value = map[string]int32{
	"LIST_FILTER_TYPE_INVALID":        0,
	"LIST_FILTER_TYPE_WALLET_ID":      1,
	"LIST_FILTER_TYPE_WALLET_NAME":    2,
	"LIST_FILTER_TYPE_WALLET_ADDRESS": 3,
	"LIST_FILTER_TYPE_TRANSACTION_ID": 4,
	"LIST_FILTER_TYPE_TRANSFER_ID":    5,
	"LIST_FILTER_TYPE_ADDRESS_NAME":   6,
	"LIST_FILTER_TYPE_ADDRESS":        7,
	"LIST_FILTER_TYPE_TXID":           8,
	"LIST_FILTER_TYPE_OWNER_ID":       9,
}

func (x ListFilterType) String() string {
	return proto.EnumName(ListFilterType_name, int32(x))
}

func (ListFilterType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{16}
}

type MailType int32

const (
	MailType_MAIL_TYPE_INVALID                     MailType = 0
	MailType_MAIL_TYPE_USER_INVITED                MailType = 1
	MailType_MAIL_TYPE_PASSWORD_RESET_REQUEST      MailType = 2
	MailType_MAIL_TYPE_PASSWORD_UPDATED            MailType = 3
	MailType_MAIL_TYPE_EMAIL_UPDATE_REQUEST        MailType = 4
	MailType_MAIL_TYPE_EMAIL_UPDATED               MailType = 5
	MailType_MAIL_TYPE_FRAUD_TRANSACTION_SUBMITTED MailType = 6
	MailType_MAIL_TYPE_IMPORT_ADDRESS_COMPLETED    MailType = 7
)

var MailType_name = map[int32]string{
	0: "MAIL_TYPE_INVALID",
	1: "MAIL_TYPE_USER_INVITED",
	2: "MAIL_TYPE_PASSWORD_RESET_REQUEST",
	3: "MAIL_TYPE_PASSWORD_UPDATED",
	4: "MAIL_TYPE_EMAIL_UPDATE_REQUEST",
	5: "MAIL_TYPE_EMAIL_UPDATED",
	6: "MAIL_TYPE_FRAUD_TRANSACTION_SUBMITTED",
	7: "MAIL_TYPE_IMPORT_ADDRESS_COMPLETED",
}

var MailType_value = map[string]int32{
	"MAIL_TYPE_INVALID":                     0,
	"MAIL_TYPE_USER_INVITED":                1,
	"MAIL_TYPE_PASSWORD_RESET_REQUEST":      2,
	"MAIL_TYPE_PASSWORD_UPDATED":            3,
	"MAIL_TYPE_EMAIL_UPDATE_REQUEST":        4,
	"MAIL_TYPE_EMAIL_UPDATED":               5,
	"MAIL_TYPE_FRAUD_TRANSACTION_SUBMITTED": 6,
	"MAIL_TYPE_IMPORT_ADDRESS_COMPLETED":    7,
}

func (x MailType) String() string {
	return proto.EnumName(MailType_name, int32(x))
}

func (MailType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{17}
}

type ImportAddressState int32

const (
	ImportAddressState_IMPORT_ADDRESS_STATE_INVALID           ImportAddressState = 0
	ImportAddressState_IMPORT_ADDRESS_STATE_ADDRESS_IMPORTING ImportAddressState = 1
	ImportAddressState_IMPORT_ADDRESS_STATE_ADDRESS_IMPORTED  ImportAddressState = 2
	ImportAddressState_IMPORT_ADDRESS_STATE_IMPORT_FAILED     ImportAddressState = 3
)

var ImportAddressState_name = map[int32]string{
	0: "IMPORT_ADDRESS_STATE_INVALID",
	1: "IMPORT_ADDRESS_STATE_ADDRESS_IMPORTING",
	2: "IMPORT_ADDRESS_STATE_ADDRESS_IMPORTED",
	3: "IMPORT_ADDRESS_STATE_IMPORT_FAILED",
}

var ImportAddressState_value = map[string]int32{
	"IMPORT_ADDRESS_STATE_INVALID":           0,
	"IMPORT_ADDRESS_STATE_ADDRESS_IMPORTING": 1,
	"IMPORT_ADDRESS_STATE_ADDRESS_IMPORTED":  2,
	"IMPORT_ADDRESS_STATE_IMPORT_FAILED":     3,
}

func (x ImportAddressState) String() string {
	return proto.EnumName(ImportAddressState_name, int32(x))
}

func (ImportAddressState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{18}
}

func init() {
	proto.RegisterEnum("adamant.global.v1.WalletType", WalletType_name, WalletType_value)
	proto.RegisterEnum("adamant.global.v1.WalletState", WalletState_name, WalletState_value)
	proto.RegisterEnum("adamant.global.v1.WalletProposalType", WalletProposalType_name, WalletProposalType_value)
	proto.RegisterEnum("adamant.global.v1.AddressState", AddressState_name, AddressState_value)
	proto.RegisterEnum("adamant.global.v1.TransactionState", TransactionState_name, TransactionState_value)
	proto.RegisterEnum("adamant.global.v1.AccountType", AccountType_name, AccountType_value)
	proto.RegisterEnum("adamant.global.v1.UserState", UserState_name, UserState_value)
	proto.RegisterEnum("adamant.global.v1.RoleType", RoleType_name, RoleType_value)
	proto.RegisterEnum("adamant.global.v1.ResourceType", ResourceType_name, ResourceType_value)
	proto.RegisterEnum("adamant.global.v1.TokenType", TokenType_name, TokenType_value)
	proto.RegisterEnum("adamant.global.v1.PolicyType", PolicyType_name, PolicyType_value)
	proto.RegisterEnum("adamant.global.v1.TransferLimitType", TransferLimitType_name, TransferLimitType_value)
	proto.RegisterEnum("adamant.global.v1.NotificationType", NotificationType_name, NotificationType_value)
	proto.RegisterEnum("adamant.global.v1.AuditLogGroup", AuditLogGroup_name, AuditLogGroup_value)
	proto.RegisterEnum("adamant.global.v1.AuditLogType", AuditLogType_name, AuditLogType_value)
	proto.RegisterEnum("adamant.global.v1.PreconditionFailureType", PreconditionFailureType_name, PreconditionFailureType_value)
	proto.RegisterEnum("adamant.global.v1.ListFilterType", ListFilterType_name, ListFilterType_value)
	proto.RegisterEnum("adamant.global.v1.MailType", MailType_name, MailType_value)
	proto.RegisterEnum("adamant.global.v1.ImportAddressState", ImportAddressState_name, ImportAddressState_value)
}

func init() {
	proto.RegisterFile("gincoinc/adamant/global/v1/adamantglobalv1/enum.proto", fileDescriptor_16c66c285f92ee3d)
}

var fileDescriptor_16c66c285f92ee3d = []byte{
	// 2283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x59, 0xcb, 0x72, 0xdb, 0xc8,
	0x15, 0x0d, 0x49, 0x3d, 0xaf, 0x65, 0xbb, 0x05, 0x4b, 0xb2, 0x24, 0x5b, 0xb6, 0xe5, 0x87, 0x6c,
	0xc3, 0xb6, 0x64, 0x79, 0xec, 0x89, 0x93, 0xcc, 0x22, 0x10, 0xd0, 0xa4, 0xba, 0x0c, 0x02, 0x48,
	0x03, 0x90, 0xcc, 0xd9, 0x20, 0x1c, 0x99, 0xe3, 0x62, 0x85, 0x16, 0x55, 0x14, 0xe5, 0xaa, 0xa9,
	0xac, 0xf2, 0x0d, 0x49, 0x2a, 0x1f, 0x92, 0xca, 0x32, 0x9b, 0xfc, 0x43, 0x6a, 0xf6, 0xd9, 0xe6,
	0x27, 0xa6, 0xfa, 0x45, 0xbc, 0x41, 0x6e, 0x71, 0xce, 0xed, 0xbe, 0xb7, 0xef, 0xb3, 0x1b, 0xf0,
	0xee, 0x73, 0xff, 0xfc, 0x6c, 0xd8, 0x3f, 0x3f, 0x3b, 0xe8, 0x7e, 0xea, 0x7e, 0xe9, 0x9e, 0x8f,
	0x0f, 0x3e, 0x0f, 0x86, 0x3f, 0x74, 0x07, 0x07, 0x5f, 0x0f, 0xd5, 0x17, 0xf1, 0xe1, 0xeb, 0xe1,
	0x41, 0xef, 0xfc, 0xea, 0xcb, 0xfe, 0xc5, 0x68, 0x38, 0x1e, 0x6a, 0xab, 0x12, 0xdb, 0x17, 0xe0,
	0xfe, 0xd7, 0x43, 0xfd, 0xbf, 0x35, 0x80, 0xd3, 0xee, 0x60, 0xd0, 0x1b, 0x07, 0x3f, 0x5d, 0xf4,
	0xb4, 0xdb, 0x70, 0xeb, 0xd4, 0xb0, 0x6d, 0x1c, 0x44, 0x41, 0xc7, 0xc3, 0x11, 0x71, 0x4e, 0x0c,
	0x9b, 0x58, 0xe8, 0x57, 0xda, 0x03, 0xb8, 0x9b, 0x04, 0x7c, 0x6c, 0x37, 0x23, 0x33, 0xf4, 0x03,
	0xd7, 0xea, 0x44, 0xc7, 0x6e, 0x80, 0x6a, 0xda, 0x2e, 0xec, 0x94, 0x32, 0x4c, 0xd7, 0xb6, 0x50,
	0x5d, 0x7b, 0x05, 0xcf, 0xab, 0x16, 0x89, 0x70, 0x70, 0x8c, 0x29, 0x0e, 0xdb, 0x11, 0x76, 0x0d,
	0xd4, 0xd0, 0x7e, 0x0b, 0xdf, 0xce, 0x4c, 0x8f, 0x28, 0x36, 0x31, 0x39, 0xc1, 0x91, 0xeb, 0xd8,
	0x1d, 0x34, 0xa7, 0xff, 0x7b, 0x0e, 0xae, 0x09, 0xbb, 0xfc, 0x71, 0x77, 0xdc, 0xd3, 0x36, 0x61,
	0x4d, 0xae, 0xe5, 0x07, 0x46, 0x90, 0xb4, 0x6c, 0x0b, 0xd6, 0x53, 0x88, 0x47, 0x5d, 0xcf, 0xf5,
	0xb1, 0x85, 0x6a, 0x09, 0xa3, 0x05, 0xf4, 0x01, 0x77, 0x22, 0x8a, 0x5b, 0xc4, 0x0f, 0x30, 0x25,
	0x4e, 0x0b, 0xd5, 0xb5, 0xfb, 0x70, 0xa7, 0x94, 0x81, 0x2d, 0xd4, 0xd0, 0x1e, 0xc3, 0x83, 0x14,
	0x81, 0xef, 0x6a, 0x04, 0x2e, 0x8d, 0x28, 0x3e, 0x21, 0xf8, 0x94, 0x2d, 0x33, 0xa7, 0x3d, 0x82,
	0xfb, 0x95, 0x2c, 0x6c, 0xa1, 0x79, 0xed, 0x0e, 0xdc, 0x4e, 0x91, 0x0c, 0x33, 0x20, 0x27, 0x46,
	0xc0, 0x56, 0x58, 0xd0, 0xb6, 0x61, 0xa3, 0x08, 0xc4, 0x16, 0x5a, 0xcc, 0xd9, 0xee, 0x93, 0x96,
	0xc3, 0xa4, 0x96, 0x12, 0xee, 0x8e, 0x11, 0x6c, 0xa1, 0xe5, 0xdc, 0x5e, 0x7e, 0x78, 0xd4, 0x26,
	0x01, 0xdf, 0x0b, 0x72, 0x7b, 0x49, 0x10, 0x5b, 0xe8, 0x5a, 0x0e, 0x33, 0xdd, 0xb6, 0x67, 0x63,
	0x86, 0xad, 0xe4, 0x31, 0xc3, 0x31, 0xb1, 0x6d, 0x63, 0x0b, 0x5d, 0xcf, 0x79, 0xc1, 0xa0, 0xe6,
	0x31, 0x39, 0xc1, 0x16, 0xba, 0xa1, 0x3d, 0x85, 0x47, 0x69, 0xc8, 0xb2, 0x28, 0xf6, 0xfd, 0x88,
	0xb4, 0x3d, 0x97, 0x06, 0xd1, 0xa9, 0x41, 0xb8, 0x5e, 0x37, 0xb5, 0x87, 0x70, 0xaf, 0x82, 0xc8,
	0x38, 0x48, 0xdb, 0x83, 0x87, 0x55, 0x8b, 0x35, 0x0d, 0xc2, 0xf4, 0x59, 0xd5, 0xff, 0x0c, 0x9a,
	0x08, 0x1f, 0x6f, 0x34, 0xbc, 0x18, 0x5e, 0x76, 0x07, 0x3c, 0x3d, 0xe2, 0x80, 0x10, 0x51, 0x62,
	0xd8, 0xd9, 0x3c, 0x89, 0x03, 0x22, 0xcd, 0xf0, 0x5c, 0x9b, 0x98, 0x1d, 0x54, 0x4b, 0x28, 0x99,
	0x26, 0x4c, 0x5c, 0x8e, 0xea, 0xfa, 0x5f, 0x6a, 0xb0, 0x62, 0x7c, 0xfa, 0x34, 0xea, 0x5d, 0x5e,
	0x8a, 0xe8, 0xdd, 0x82, 0x75, 0xa5, 0x68, 0x36, 0x7c, 0xef, 0xc2, 0x66, 0x1a, 0x4a, 0xb8, 0xaa,
	0xc6, 0xfc, 0x58, 0x88, 0x62, 0x96, 0x8e, 0x39, 0x30, 0x76, 0x56, 0x43, 0xff, 0x6b, 0x1d, 0x50,
	0x30, 0xea, 0x9e, 0x5f, 0x76, 0xcf, 0xc6, 0xfd, 0xe1, 0xb9, 0xd0, 0x63, 0x07, 0xb6, 0x02, 0x6a,
	0x38, 0x3e, 0x8b, 0x2e, 0xd7, 0xc9, 0xe9, 0x52, 0x08, 0xab, 0x68, 0xab, 0x31, 0x55, 0x8b, 0x61,
	0xae, 0xcd, 0x7d, 0xb8, 0x93, 0x47, 0xe3, 0x24, 0x69, 0x68, 0xf7, 0x60, 0xbb, 0x8c, 0x80, 0x2d,
	0x34, 0xc7, 0x9c, 0x53, 0xb0, 0x7c, 0x7c, 0x1a, 0xf3, 0xc5, 0x5b, 0xc4, 0x27, 0xb2, 0x50, 0x4c,
	0x88, 0xc3, 0x74, 0x51, 0xff, 0x23, 0x5c, 0x33, 0xce, 0xce, 0x86, 0x57, 0xe7, 0xa2, 0x5c, 0x6e,
	0xc2, 0x9a, 0x61, 0x9a, 0x6e, 0xe8, 0xe4, 0xea, 0xe5, 0x3a, 0xac, 0xa6, 0x90, 0xd0, 0xc7, 0x54,
	0x54, 0x94, 0xd4, 0x67, 0x1f, 0xd3, 0x13, 0x62, 0xb2, 0x74, 0xe5, 0x1f, 0x51, 0x5d, 0xbf, 0x82,
	0xe5, 0xf0, 0xb2, 0x37, 0x12, 0xe7, 0xbd, 0x01, 0x1a, 0x13, 0xcc, 0x1d, 0xf4, 0x36, 0x6c, 0x24,
	0xbe, 0x87, 0x8e, 0xe9, 0x3a, 0x4d, 0x42, 0xdb, 0xbc, 0x68, 0x6d, 0xc2, 0x5a, 0x02, 0x8b, 0x91,
	0x7a, 0x46, 0xca, 0xc2, 0x71, 0x8d, 0x68, 0xe8, 0xff, 0xaf, 0xc1, 0x12, 0x1d, 0x0e, 0x7a, 0xdc,
	0xac, 0x75, 0x58, 0xa5, 0xae, 0x8d, 0xb3, 0x36, 0x6d, 0xc1, 0x7a, 0xfc, 0xd9, 0xa5, 0xad, 0xa8,
	0x6d, 0x38, 0x46, 0x8b, 0xdb, 0xb5, 0x09, 0x6b, 0x69, 0x88, 0xbb, 0x95, 0x8a, 0x20, 0x4b, 0x23,
	0x71, 0xa0, 0x37, 0xf2, 0x62, 0xdc, 0x99, 0x14, 0xcd, 0xe5, 0xc5, 0x2c, 0x7c, 0x82, 0x6d, 0xd7,
	0xc3, 0x14, 0xcd, 0xb3, 0x48, 0x88, 0x41, 0xd6, 0x09, 0x64, 0x46, 0x19, 0x56, 0x9b, 0x38, 0xc2,
	0x8d, 0x85, 0xb8, 0x5c, 0x7d, 0x51, 0x3f, 0x83, 0x15, 0xda, 0xbb, 0x1c, 0x5e, 0x8d, 0xce, 0x84,
	0xc1, 0xcc, 0x32, 0xec, 0xbb, 0x21, 0x35, 0x73, 0x46, 0x33, 0x15, 0x53, 0x90, 0x58, 0x0b, 0xd5,
	0xb8, 0x16, 0x29, 0xc4, 0xa5, 0x2d, 0xc3, 0x21, 0xdf, 0x1b, 0x2c, 0x76, 0x50, 0x5d, 0xff, 0x4f,
	0x0d, 0x96, 0x83, 0xe1, 0x9f, 0x7a, 0xe7, 0x7c, 0x8b, 0x0d, 0xd0, 0x02, 0xf7, 0x03, 0x76, 0xb2,
	0xeb, 0x6f, 0xc3, 0x46, 0xe2, 0xbb, 0xed, 0xb6, 0x88, 0x13, 0xf1, 0x0f, 0xa8, 0xc6, 0xd4, 0x4a,
	0x60, 0x6d, 0x83, 0xd8, 0x12, 0xaa, 0xb3, 0x8e, 0x91, 0x80, 0x3c, 0xc3, 0xf7, 0x4f, 0x5d, 0x6a,
	0x45, 0x14, 0xfb, 0xac, 0x5d, 0x72, 0x12, 0x6f, 0x3e, 0x45, 0xa4, 0xd0, 0xb3, 0x58, 0x00, 0x08,
	0x16, 0x3f, 0xea, 0x04, 0x8b, 0x39, 0x2e, 0xf4, 0x24, 0x38, 0xaf, 0x0f, 0x00, 0xbc, 0xe1, 0xa0,
	0x7f, 0xf6, 0x93, 0x1a, 0x0f, 0x44, 0x21, 0xcb, 0x5a, 0xb1, 0x0b, 0x3b, 0x49, 0x20, 0x71, 0xe6,
	0xc9, 0xc2, 0x97, 0xa4, 0xb0, 0x91, 0x20, 0xc3, 0xa9, 0xeb, 0x7f, 0xaf, 0xc1, 0x2a, 0x2f, 0x3a,
	0x3f, 0xf6, 0x46, 0x76, 0xff, 0x4b, 0x5f, 0x64, 0x99, 0xca, 0xca, 0x26, 0xa6, 0x91, 0x4d, 0xda,
	0x24, 0x97, 0x6c, 0xaa, 0x32, 0x64, 0x08, 0xc7, 0x6e, 0x48, 0x6d, 0xb6, 0xb5, 0xaa, 0x4b, 0x19,
	0xdc, 0x32, 0x88, 0xdd, 0x41, 0xf5, 0x49, 0xe1, 0xc8, 0xc0, 0xae, 0x83, 0xa3, 0x80, 0xb4, 0x31,
	0x6a, 0xe8, 0x7f, 0x03, 0x40, 0xce, 0x70, 0xdc, 0xff, 0xb1, 0x7f, 0xd6, 0x65, 0xd5, 0x90, 0xab,
	0xb5, 0x03, 0x5b, 0x8e, 0x1b, 0x90, 0x26, 0x31, 0xb9, 0xc7, 0xb3, 0x4a, 0x7d, 0x03, 0x07, 0x79,
	0x58, 0xf5, 0x1e, 0x9e, 0x1d, 0x91, 0xe1, 0x79, 0xd4, 0x3d, 0x61, 0x45, 0xec, 0x0f, 0x21, 0xf6,
	0x59, 0x4c, 0x7d, 0x0b, 0x6f, 0x4a, 0x85, 0xe2, 0xa1, 0x20, 0x2b, 0x57, 0xd7, 0x5e, 0xc2, 0xb3,
	0x52, 0x39, 0x95, 0xe6, 0xaa, 0xb9, 0x35, 0x58, 0x13, 0x2c, 0x65, 0xc7, 0xd5, 0x6e, 0xae, 0x9a,
	0x37, 0xe9, 0x15, 0xf3, 0x2c, 0x18, 0x4b, 0x79, 0x72, 0xd3, 0x05, 0xed, 0x2d, 0xbc, 0x2e, 0x57,
	0x51, 0xb6, 0xa1, 0xac, 0x61, 0xb7, 0xb5, 0x43, 0x78, 0x55, 0x2a, 0xf5, 0x91, 0x7a, 0xb1, 0x71,
	0x4a, 0x64, 0xb3, 0x72, 0xa3, 0x76, 0x68, 0x07, 0xc4, 0x27, 0x2d, 0x51, 0x17, 0x5b, 0x13, 0xa9,
	0x2d, 0xed, 0x3d, 0xbc, 0x2d, 0x97, 0x12, 0x75, 0x2e, 0x4a, 0xf6, 0x06, 0x25, 0xb9, 0x5d, 0x2c,
	0x99, 0x6a, 0x23, 0xc5, 0xde, 0x5e, 0xd4, 0x7e, 0x07, 0xbf, 0xae, 0x96, 0x2c, 0x77, 0xf9, 0x12,
	0x1b, 0x8b, 0xaa, 0x85, 0x29, 0x36, 0xac, 0x0e, 0xda, 0xd0, 0x5e, 0xc0, 0xd3, 0x29, 0xfa, 0x4d,
	0x3a, 0xe0, 0xf2, 0x74, 0x72, 0x1c, 0x1f, 0xc0, 0xe6, 0xf9, 0x12, 0x32, 0x4b, 0x25, 0x1f, 0x3b,
	0x56, 0x22, 0x4c, 0xae, 0x69, 0x3a, 0xec, 0x4d, 0xa3, 0xcb, 0x68, 0x59, 0xd1, 0x5e, 0xc3, 0xcb,
	0x0a, 0xae, 0x1a, 0xf6, 0xe3, 0xd5, 0xaf, 0x4f, 0x51, 0x46, 0x49, 0xc8, 0x0d, 0x6e, 0x14, 0xd3,
	0xcb, 0xe2, 0xf0, 0x66, 0xf1, 0x69, 0x2b, 0x7a, 0xac, 0x06, 0x9a, 0x42, 0x9c, 0x1c, 0xde, 0x6a,
	0x71, 0x7d, 0x50, 0xfa, 0x8a, 0x32, 0x94, 0x55, 0x43, 0xab, 0x36, 0x52, 0x08, 0xc5, 0xca, 0xdc,
	0x9a, 0x89, 0x3e, 0x51, 0x69, 0x4d, 0xdb, 0x07, 0xbd, 0x20, 0x07, 0x8e, 0x49, 0x80, 0x6d, 0xe2,
	0x07, 0x91, 0x85, 0x03, 0xc3, 0x3c, 0x9e, 0x68, 0xb3, 0xae, 0xff, 0xaf, 0x06, 0xd7, 0x8d, 0xab,
	0x4f, 0xfd, 0xb1, 0x3d, 0xfc, 0xdc, 0x1a, 0x0d, 0xaf, 0x2e, 0xf8, 0x48, 0x19, 0x5a, 0x24, 0x60,
	0x8d, 0x2c, 0x6a, 0x51, 0x37, 0xf4, 0xd2, 0xf3, 0x43, 0x16, 0xe4, 0xfd, 0x4e, 0xce, 0xa9, 0x19,
	0x68, 0x32, 0x12, 0xb1, 0xf2, 0x92, 0x05, 0xb3, 0x73, 0x53, 0x83, 0xf5, 0xd1, 0x2c, 0x49, 0x76,
	0xea, 0x39, 0xd6, 0x40, 0xb2, 0x58, 0x22, 0xa4, 0xd1, 0x7c, 0x91, 0xb0, 0xec, 0x49, 0x0b, 0xfa,
	0xcf, 0x08, 0x56, 0x94, 0x91, 0xbc, 0xee, 0xa7, 0xc8, 0xf9, 0x69, 0x21, 0x83, 0x29, 0x0b, 0x77,
	0x60, 0xab, 0x08, 0xe1, 0x01, 0x29, 0x67, 0xf1, 0x34, 0xfc, 0xa6, 0x69, 0x08, 0xf0, 0x4d, 0xfa,
	0xe0, 0x94, 0xac, 0x1b, 0x32, 0xb3, 0xd9, 0x40, 0x99, 0x86, 0x54, 0x7d, 0xa6, 0xd8, 0x08, 0x30,
	0x9a, 0x63, 0xad, 0xb9, 0x98, 0x21, 0xa3, 0x0b, 0xcd, 0x57, 0x2c, 0xc2, 0x83, 0x03, 0x2d, 0x68,
	0xcf, 0xe1, 0x49, 0x31, 0x43, 0x5d, 0x76, 0x23, 0x2f, 0x3c, 0xfa, 0x80, 0x3b, 0x68, 0xb1, 0x62,
	0x3f, 0x71, 0xa5, 0x43, 0x4b, 0x69, 0x87, 0x26, 0x29, 0xa1, 0xa3, 0x48, 0xcb, 0xda, 0x13, 0xd8,
	0x2d, 0x26, 0x39, 0x46, 0x1b, 0x47, 0xe6, 0xb1, 0xe1, 0xb4, 0x30, 0x02, 0x96, 0x6f, 0xc5, 0x34,
	0x39, 0x6c, 0x48, 0xe2, 0x35, 0x16, 0xdc, 0x25, 0xeb, 0xb9, 0x89, 0x18, 0x57, 0xc1, 0xbd, 0x32,
	0x23, 0x5f, 0x1d, 0x22, 0xaf, 0x3f, 0x33, 0xf0, 0xe5, 0x89, 0xde, 0x28, 0x30, 0x2f, 0x55, 0x65,
	0x85, 0xf7, 0x6e, 0xb2, 0x16, 0x5c, 0x41, 0x53, 0xbb, 0xa3, 0x69, 0xcb, 0x89, 0x5d, 0x57, 0x59,
	0x3b, 0xad, 0xa0, 0x4d, 0x9c, 0xc9, 0x3a, 0x96, 0x11, 0x84, 0x14, 0x23, 0x6d, 0xca, 0xca, 0xa2,
	0x77, 0xa0, 0x5b, 0xac, 0xb8, 0x67, 0x68, 0xea, 0xa2, 0x33, 0x99, 0x3b, 0xa5, 0x2b, 0xd6, 0x0a,
	0x7c, 0xa6, 0xb8, 0x98, 0x0f, 0xb9, 0x92, 0xb8, 0x5e, 0x10, 0x4b, 0x8a, 0x48, 0x9c, 0x13, 0x12,
	0x60, 0xb4, 0xc1, 0xc6, 0xca, 0x12, 0x8a, 0x0a, 0xa5, 0xdb, 0x6c, 0x0e, 0x2e, 0xe1, 0xc4, 0x01,
	0xb7, 0x59, 0x10, 0xe3, 0x99, 0x2a, 0xa3, 0xbc, 0xb2, 0xc5, 0x46, 0x8c, 0x69, 0x54, 0x6e, 0x42,
	0xe4, 0x61, 0xda, 0x26, 0xbe, 0xcf, 0xaa, 0xcc, 0x36, 0xeb, 0xad, 0x53, 0xa4, 0xd4, 0x34, 0x83,
	0xee, 0xcc, 0x40, 0x26, 0x0e, 0xa7, 0x63, 0x74, 0x77, 0x06, 0xd5, 0x2d, 0xcc, 0x7a, 0x02, 0xda,
	0x29, 0x08, 0xd3, 0x2c, 0xf5, 0x03, 0xee, 0x28, 0x4b, 0xef, 0xcd, 0x48, 0x97, 0xab, 0xdf, 0xd7,
	0x9e, 0xc1, 0xe3, 0x0c, 0x5d, 0xa6, 0xe1, 0xa4, 0x03, 0x8a, 0x85, 0x1f, 0x4c, 0x67, 0xca, 0x35,
	0x77, 0x0b, 0x8c, 0xcb, 0x30, 0x55, 0x16, 0x3c, 0x9c, 0x61, 0x7b, 0x91, 0x08, 0x8f, 0xb4, 0x03,
	0x78, 0x51, 0xcc, 0xf4, 0x3d, 0xec, 0x58, 0xc4, 0x69, 0xc9, 0x9b, 0x80, 0xd4, 0xf7, 0xf1, 0xec,
	0x02, 0x22, 0x76, 0x9f, 0xcc, 0x2c, 0x20, 0xed, 0xdc, 0x63, 0x23, 0xcf, 0x4c, 0x02, 0xca, 0xdc,
	0xa7, 0xb3, 0xeb, 0x24, 0xac, 0x7e, 0x56, 0x90, 0xa4, 0x52, 0x20, 0x51, 0xa0, 0x84, 0xc1, 0xcf,
	0x67, 0xe2, 0x0a, 0x5b, 0xf5, 0x59, 0xb8, 0xd2, 0xcc, 0x17, 0x05, 0xc9, 0x2f, 0xb9, 0xaa, 0x60,
	0x0b, 0x05, 0x5e, 0x4e, 0x27, 0x8a, 0xdd, 0x5f, 0x4d, 0x25, 0xca, 0xad, 0xf7, 0x0b, 0x4a, 0xba,
	0x64, 0xc8, 0xaa, 0x9f, 0x2a, 0xd5, 0xe8, 0xa0, 0x9c, 0xaf, 0x06, 0xb3, 0x14, 0xff, 0x75, 0x41,
	0xb2, 0x28, 0x55, 0xb9, 0x03, 0xd2, 0xf4, 0x43, 0xfd, 0x9f, 0x4b, 0x70, 0xdb, 0x1b, 0xf5, 0xce,
	0x86, 0xe7, 0x9f, 0xfa, 0xec, 0x56, 0xd9, 0xec, 0xf6, 0x07, 0x57, 0x23, 0xf1, 0x22, 0xf1, 0x04,
	0x76, 0x3d, 0x8a, 0x4d, 0xd7, 0xb1, 0x08, 0xaf, 0xb3, 0x6c, 0x12, 0x08, 0x69, 0xee, 0x75, 0x42,
	0x87, 0xbd, 0x72, 0x5a, 0xbb, 0x69, 0x70, 0xcb, 0x08, 0xe5, 0x0f, 0x43, 0xaf, 0xe1, 0x65, 0x35,
	0xd7, 0x71, 0x83, 0xe4, 0xe3, 0x35, 0x7f, 0xaf, 0x2f, 0x97, 0xe0, 0x4f, 0x49, 0x4c, 0x44, 0x56,
	0xa1, 0x06, 0x3b, 0xae, 0x29, 0x74, 0xe2, 0xc7, 0x0f, 0xbb, 0x73, 0x6c, 0x02, 0x2e, 0xe7, 0x8b,
	0x4e, 0xc0, 0x04, 0x6c, 0x7e, 0x91, 0x61, 0x0b, 0xb0, 0xbb, 0xe6, 0x77, 0xf0, 0xbe, 0xea, 0x60,
	0xfc, 0xb0, 0xd9, 0x24, 0x26, 0xc1, 0x4e, 0x20, 0x92, 0xc0, 0x38, 0xb2, 0x71, 0x74, 0x64, 0xd8,
	0xcc, 0x01, 0x68, 0xa1, 0x7a, 0x4b, 0xf1, 0x5e, 0x20, 0x73, 0x06, 0x7f, 0x34, 0x31, 0xb6, 0xf8,
	0xfb, 0xf9, 0x1b, 0xd8, 0x2f, 0x17, 0xe2, 0x8f, 0x08, 0x59, 0x99, 0x25, 0xd6, 0x21, 0xca, 0x65,
	0x5c, 0x07, 0x07, 0xa4, 0x8d, 0xb3, 0x52, 0xcb, 0xda, 0x6f, 0xe0, 0x5d, 0xb9, 0x54, 0x72, 0xfc,
	0xc9, 0x9e, 0x0b, 0x54, 0x7b, 0x57, 0x8a, 0x12, 0x55, 0x00, 0xf9, 0x75, 0x6c, 0x46, 0x89, 0x89,
	0xc3, 0x56, 0xb4, 0x77, 0x70, 0x58, 0x2e, 0x91, 0x9c, 0x0a, 0x92, 0x1b, 0x5d, 0xaf, 0x16, 0x9b,
	0xbc, 0x82, 0x2b, 0x7b, 0xf0, 0x47, 0xe2, 0x07, 0xbe, 0x98, 0x90, 0xca, 0xc5, 0x1c, 0x37, 0xa2,
	0x62, 0x42, 0xaa, 0x5c, 0x3d, 0xae, 0x3f, 0x6e, 0x33, 0x3a, 0x32, 0x7c, 0x2c, 0xc7, 0x7a, 0xa4,
	0xfd, 0x1e, 0xbe, 0x2b, 0x17, 0x33, 0x0d, 0x87, 0x47, 0xb6, 0x30, 0x5d, 0x1d, 0xc6, 0x29, 0x09,
	0x8e, 0x27, 0xb1, 0xb4, 0xca, 0x6e, 0xef, 0x15, 0xa7, 0x81, 0xdb, 0x9e, 0x4b, 0x0d, 0xda, 0x89,
	0x88, 0xc3, 0x2a, 0x9a, 0xcf, 0x82, 0x33, 0x6a, 0x62, 0xcc, 0xb5, 0xd6, 0xb4, 0xf7, 0xf0, 0xb6,
	0xf2, 0x4c, 0x8e, 0xc9, 0x11, 0x09, 0xb0, 0x15, 0x1d, 0x75, 0xd8, 0x88, 0xe5, 0x9b, 0x94, 0x78,
	0xfc, 0xae, 0x72, 0x4b, 0xff, 0xb9, 0x0e, 0x37, 0xec, 0xfe, 0xe5, 0xb8, 0xd9, 0x1f, 0x8c, 0x7b,
	0x23, 0x5e, 0x2c, 0xee, 0xc2, 0x26, 0xb7, 0xb1, 0x49, 0x6c, 0x36, 0xbd, 0xe5, 0x5f, 0xc7, 0x72,
	0xa8, 0x72, 0xaf, 0xfc, 0xcb, 0x55, 0x86, 0xb3, 0x58, 0x13, 0x17, 0xb0, 0x32, 0x86, 0x6c, 0xac,
	0xa8, 0x51, 0x48, 0x4a, 0xc5, 0x84, 0x7c, 0xa3, 0x2f, 0x26, 0xb1, 0x3b, 0x3a, 0x61, 0xf9, 0xbd,
	0x0b, 0x3b, 0x39, 0x86, 0xea, 0xde, 0x5c, 0x9d, 0x85, 0x42, 0x73, 0x95, 0x1e, 0x8b, 0xec, 0xb2,
	0x94, 0xdf, 0xe2, 0x23, 0x61, 0x49, 0xb9, 0x03, 0x5b, 0x39, 0xc8, 0x3d, 0x75, 0xc4, 0xd6, 0xcb,
	0xfa, 0x3f, 0xea, 0xb0, 0xd4, 0xee, 0xf6, 0x07, 0xea, 0x0d, 0x5c, 0x3c, 0xb8, 0xe6, 0x9e, 0x6b,
	0xe3, 0xcf, 0xa2, 0xa6, 0xf1, 0x49, 0x94, 0x1d, 0xe4, 0x63, 0x78, 0x10, 0x63, 0x99, 0x27, 0xd9,
	0xf8, 0xa9, 0xee, 0x1e, 0x6c, 0x17, 0xb0, 0xc4, 0x9b, 0xac, 0x85, 0x1a, 0x6c, 0xa0, 0x8d, 0x71,
	0x51, 0x05, 0xe5, 0x83, 0xad, 0x5a, 0x83, 0x3f, 0xd9, 0x16, 0x73, 0xd8, 0x09, 0x3e, 0x87, 0x27,
	0x31, 0xd8, 0xa4, 0x46, 0x68, 0x95, 0xbc, 0xf6, 0x2c, 0xb0, 0xdb, 0x45, 0xc2, 0x48, 0xf1, 0x0b,
	0x2c, 0xff, 0xa8, 0xb1, 0xa8, 0xff, 0xab, 0x06, 0x1a, 0xf9, 0x72, 0x31, 0x1c, 0x8d, 0x53, 0xbf,
	0xa5, 0x1e, 0xc0, 0xdd, 0x8c, 0x50, 0xf6, 0x47, 0x85, 0x0e, 0x7b, 0x85, 0x8c, 0xfc, 0xaf, 0xb9,
	0x1a, 0xd3, 0x7b, 0x06, 0x2e, 0x6f, 0x4c, 0x7b, 0xf0, 0xb0, 0x78, 0xe3, 0xd4, 0x5f, 0xbc, 0xc6,
	0xd1, 0xea, 0xf7, 0x37, 0x33, 0xbf, 0xc3, 0x7f, 0x58, 0xe0, 0xbf, 0xc2, 0xbf, 0xf9, 0x25, 0x00,
	0x00, 0xff, 0xff, 0xc8, 0x51, 0xf3, 0x74, 0x43, 0x1f, 0x00, 0x00,
}
