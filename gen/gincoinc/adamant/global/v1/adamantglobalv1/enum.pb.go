// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gincoinc/adamant/global/v1/adamantglobalv1/enum.proto

package adamantglobalv1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// WalletType is a type of wallet.
type WalletType int32

const (
	WalletType_WALLET_TYPE_INVALID                                    WalletType = 0
	WalletType_WALLET_TYPE_SELF_CUSTODY_HOT                           WalletType = 1
	WalletType_WALLET_TYPE_SELF_CUSTODY_COLD                          WalletType = 2
	WalletType_WALLET_TYPE_SELF_CUSTODY_HOT_ETHEREUM_EOA              WalletType = 3
	WalletType_WALLET_TYPE_SELF_CUSTODY_HOT_ETHEREUM_EOA_RECEIVE_ONLY WalletType = 4
)

var WalletType_name = map[int32]string{
	0: "WALLET_TYPE_INVALID",
	1: "WALLET_TYPE_SELF_CUSTODY_HOT",
	2: "WALLET_TYPE_SELF_CUSTODY_COLD",
	3: "WALLET_TYPE_SELF_CUSTODY_HOT_ETHEREUM_EOA",
	4: "WALLET_TYPE_SELF_CUSTODY_HOT_ETHEREUM_EOA_RECEIVE_ONLY",
}

var WalletType_value = map[string]int32{
	"WALLET_TYPE_INVALID":                                    0,
	"WALLET_TYPE_SELF_CUSTODY_HOT":                           1,
	"WALLET_TYPE_SELF_CUSTODY_COLD":                          2,
	"WALLET_TYPE_SELF_CUSTODY_HOT_ETHEREUM_EOA":              3,
	"WALLET_TYPE_SELF_CUSTODY_HOT_ETHEREUM_EOA_RECEIVE_ONLY": 4,
}

func (x WalletType) String() string {
	return proto.EnumName(WalletType_name, int32(x))
}

func (WalletType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{0}
}

// WalletState is a state of wallet.
type WalletState int32

const (
	WalletState_WALLET_STATE_INVALID             WalletState = 0
	WalletState_WALLET_STATE_PROPOSED            WalletState = 1
	WalletState_WALLET_STATE_KEY_REGISTERING     WalletState = 2
	WalletState_WALLET_STATE_KEY_REGISTERED      WalletState = 3
	WalletState_WALLET_STATE_VALIDATOR_REVIEWING WalletState = 4
	WalletState_WALLET_STATE_VALIDATOR_REVIEWED  WalletState = 5
	WalletState_WALLET_STATE_ACTIVATING          WalletState = 6
	WalletState_WALLET_STATE_ACTIVATED           WalletState = 7
	WalletState_WALLET_STATE_SIGNING             WalletState = 8
	WalletState_WALLET_STATE_SIGNED              WalletState = 9
	WalletState_WALLET_STATE_SUBMITTING          WalletState = 10
	WalletState_WALLET_STATE_SUBMITTED           WalletState = 11
	WalletState_WALLET_STATE_COMPLETED           WalletState = 12
	WalletState_WALLET_STATE_CANCELLED           WalletState = 13
	WalletState_WALLET_STATE_ARCHIVED            WalletState = 14
)

var WalletState_name = map[int32]string{
	0:  "WALLET_STATE_INVALID",
	1:  "WALLET_STATE_PROPOSED",
	2:  "WALLET_STATE_KEY_REGISTERING",
	3:  "WALLET_STATE_KEY_REGISTERED",
	4:  "WALLET_STATE_VALIDATOR_REVIEWING",
	5:  "WALLET_STATE_VALIDATOR_REVIEWED",
	6:  "WALLET_STATE_ACTIVATING",
	7:  "WALLET_STATE_ACTIVATED",
	8:  "WALLET_STATE_SIGNING",
	9:  "WALLET_STATE_SIGNED",
	10: "WALLET_STATE_SUBMITTING",
	11: "WALLET_STATE_SUBMITTED",
	12: "WALLET_STATE_COMPLETED",
	13: "WALLET_STATE_CANCELLED",
	14: "WALLET_STATE_ARCHIVED",
}

var WalletState_value = map[string]int32{
	"WALLET_STATE_INVALID":             0,
	"WALLET_STATE_PROPOSED":            1,
	"WALLET_STATE_KEY_REGISTERING":     2,
	"WALLET_STATE_KEY_REGISTERED":      3,
	"WALLET_STATE_VALIDATOR_REVIEWING": 4,
	"WALLET_STATE_VALIDATOR_REVIEWED":  5,
	"WALLET_STATE_ACTIVATING":          6,
	"WALLET_STATE_ACTIVATED":           7,
	"WALLET_STATE_SIGNING":             8,
	"WALLET_STATE_SIGNED":              9,
	"WALLET_STATE_SUBMITTING":          10,
	"WALLET_STATE_SUBMITTED":           11,
	"WALLET_STATE_COMPLETED":           12,
	"WALLET_STATE_CANCELLED":           13,
	"WALLET_STATE_ARCHIVED":            14,
}

func (x WalletState) String() string {
	return proto.EnumName(WalletState_name, int32(x))
}

func (WalletState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{1}
}

// AddressState is a state of address.
type AddressState int32

const (
	AddressState_ADDRESS_STATE_INVALID    AddressState = 0
	AddressState_ADDRESS_STATE_SUBMITTING AddressState = 1
	AddressState_ADDRESS_STATE_SUBMITTED  AddressState = 2
	AddressState_ADDRESS_STATE_COMPLETED  AddressState = 3
)

var AddressState_name = map[int32]string{
	0: "ADDRESS_STATE_INVALID",
	1: "ADDRESS_STATE_SUBMITTING",
	2: "ADDRESS_STATE_SUBMITTED",
	3: "ADDRESS_STATE_COMPLETED",
}

var AddressState_value = map[string]int32{
	"ADDRESS_STATE_INVALID":    0,
	"ADDRESS_STATE_SUBMITTING": 1,
	"ADDRESS_STATE_SUBMITTED":  2,
	"ADDRESS_STATE_COMPLETED":  3,
}

func (x AddressState) String() string {
	return proto.EnumName(AddressState_name, int32(x))
}

func (AddressState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{2}
}

// TransactionState is a state of transaction.
type TransactionState int32

const (
	TransactionState_TRANSACTION_STATE_INVALID    TransactionState = 0
	TransactionState_TRANSACTION_STATE_SIGNING    TransactionState = 1
	TransactionState_TRANSACTION_STATE_SIGNED     TransactionState = 2
	TransactionState_TRANSACTION_STATE_REVIEWING  TransactionState = 3
	TransactionState_TRANSACTION_STATE_REVIEWED   TransactionState = 4
	TransactionState_TRANSACTION_STATE_SUBMITTING TransactionState = 5
	TransactionState_TRANSACTION_STATE_SUBMITTED  TransactionState = 6
	TransactionState_TRANSACTION_STATE_CANCELLED  TransactionState = 7
)

var TransactionState_name = map[int32]string{
	0: "TRANSACTION_STATE_INVALID",
	1: "TRANSACTION_STATE_SIGNING",
	2: "TRANSACTION_STATE_SIGNED",
	3: "TRANSACTION_STATE_REVIEWING",
	4: "TRANSACTION_STATE_REVIEWED",
	5: "TRANSACTION_STATE_SUBMITTING",
	6: "TRANSACTION_STATE_SUBMITTED",
	7: "TRANSACTION_STATE_CANCELLED",
}

var TransactionState_value = map[string]int32{
	"TRANSACTION_STATE_INVALID":    0,
	"TRANSACTION_STATE_SIGNING":    1,
	"TRANSACTION_STATE_SIGNED":     2,
	"TRANSACTION_STATE_REVIEWING":  3,
	"TRANSACTION_STATE_REVIEWED":   4,
	"TRANSACTION_STATE_SUBMITTING": 5,
	"TRANSACTION_STATE_SUBMITTED":  6,
	"TRANSACTION_STATE_CANCELLED":  7,
}

func (x TransactionState) String() string {
	return proto.EnumName(TransactionState_name, int32(x))
}

func (TransactionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{3}
}

// -----------------------------------------------------------------------------
// Account
// -----------------------------------------------------------------------------
type AccountType int32

const (
	AccountType_ACCOUNT_TYPE_INVALID         AccountType = 0
	AccountType_ACCOUNT_TYPE_USER            AccountType = 1
	AccountType_ACCOUNT_TYPE_SERVICE_ACCOUNT AccountType = 2
)

var AccountType_name = map[int32]string{
	0: "ACCOUNT_TYPE_INVALID",
	1: "ACCOUNT_TYPE_USER",
	2: "ACCOUNT_TYPE_SERVICE_ACCOUNT",
}

var AccountType_value = map[string]int32{
	"ACCOUNT_TYPE_INVALID":         0,
	"ACCOUNT_TYPE_USER":            1,
	"ACCOUNT_TYPE_SERVICE_ACCOUNT": 2,
}

func (x AccountType) String() string {
	return proto.EnumName(AccountType_name, int32(x))
}

func (AccountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{4}
}

// UserState is a state of user.
type UserState int32

const (
	UserState_USER_STATE_INVALID     UserState = 0
	UserState_USER_STATE_UNCONFIRMED UserState = 1
	UserState_USER_STATE_CONFIRMED   UserState = 2
	UserState_USER_STATE_DEACTIVATED UserState = 3
)

var UserState_name = map[int32]string{
	0: "USER_STATE_INVALID",
	1: "USER_STATE_UNCONFIRMED",
	2: "USER_STATE_CONFIRMED",
	3: "USER_STATE_DEACTIVATED",
}

var UserState_value = map[string]int32{
	"USER_STATE_INVALID":     0,
	"USER_STATE_UNCONFIRMED": 1,
	"USER_STATE_CONFIRMED":   2,
	"USER_STATE_DEACTIVATED": 3,
}

func (x UserState) String() string {
	return proto.EnumName(UserState_name, int32(x))
}

func (UserState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{5}
}

// Role is a type of role
type RoleType int32

const (
	RoleType_ROLE_TYPE_INVALID           RoleType = 0
	RoleType_ROLE_TYPE_ORG_MANAGER       RoleType = 1
	RoleType_ROLE_TYPE_ORG_SIGNER        RoleType = 2
	RoleType_ROLE_TYPE_ORG_VALIDATOR     RoleType = 3
	RoleType_ROLE_TYPE_ORG_VIEWER        RoleType = 4
	RoleType_ROLE_TYPE_ORG_DEVELOPER     RoleType = 5
	RoleType_ROLE_TYPE_HOT_WALLET_ADMIN  RoleType = 6
	RoleType_ROLE_TYPE_HOT_WALLET_VIEWER RoleType = 7
)

var RoleType_name = map[int32]string{
	0: "ROLE_TYPE_INVALID",
	1: "ROLE_TYPE_ORG_MANAGER",
	2: "ROLE_TYPE_ORG_SIGNER",
	3: "ROLE_TYPE_ORG_VALIDATOR",
	4: "ROLE_TYPE_ORG_VIEWER",
	5: "ROLE_TYPE_ORG_DEVELOPER",
	6: "ROLE_TYPE_HOT_WALLET_ADMIN",
	7: "ROLE_TYPE_HOT_WALLET_VIEWER",
}

var RoleType_value = map[string]int32{
	"ROLE_TYPE_INVALID":           0,
	"ROLE_TYPE_ORG_MANAGER":       1,
	"ROLE_TYPE_ORG_SIGNER":        2,
	"ROLE_TYPE_ORG_VALIDATOR":     3,
	"ROLE_TYPE_ORG_VIEWER":        4,
	"ROLE_TYPE_ORG_DEVELOPER":     5,
	"ROLE_TYPE_HOT_WALLET_ADMIN":  6,
	"ROLE_TYPE_HOT_WALLET_VIEWER": 7,
}

func (x RoleType) String() string {
	return proto.EnumName(RoleType_name, int32(x))
}

func (RoleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{6}
}

// ResourceType is a target type of role
type ResourceType int32

const (
	ResourceType_RESOURCE_TYPE_INVALID      ResourceType = 0
	ResourceType_RESOURCE_TYPE_WALLET       ResourceType = 1
	ResourceType_RESOURCE_TYPE_ORGANIZATION ResourceType = 2
)

var ResourceType_name = map[int32]string{
	0: "RESOURCE_TYPE_INVALID",
	1: "RESOURCE_TYPE_WALLET",
	2: "RESOURCE_TYPE_ORGANIZATION",
}

var ResourceType_value = map[string]int32{
	"RESOURCE_TYPE_INVALID":      0,
	"RESOURCE_TYPE_WALLET":       1,
	"RESOURCE_TYPE_ORGANIZATION": 2,
}

func (x ResourceType) String() string {
	return proto.EnumName(ResourceType_name, int32(x))
}

func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{7}
}

// TokenType is a type of token.
type TokenType int32

const (
	TokenType_TOKEN_TYPE_INVALID               TokenType = 0
	TokenType_TOKEN_TYPE_LOGIN_TOKEN           TokenType = 1
	TokenType_TOKEN_TYPE_MAIL_TOKEN            TokenType = 2
	TokenType_TOKEN_TYPE_PASSWORD_RESET_TOKEN  TokenType = 3
	TokenType_TOKEN_TYPE_PASSWORD_UPDATE_TOKEN TokenType = 4
	TokenType_TOKEN_TYPE_SIGNUP_TOKEN          TokenType = 5
)

var TokenType_name = map[int32]string{
	0: "TOKEN_TYPE_INVALID",
	1: "TOKEN_TYPE_LOGIN_TOKEN",
	2: "TOKEN_TYPE_MAIL_TOKEN",
	3: "TOKEN_TYPE_PASSWORD_RESET_TOKEN",
	4: "TOKEN_TYPE_PASSWORD_UPDATE_TOKEN",
	5: "TOKEN_TYPE_SIGNUP_TOKEN",
}

var TokenType_value = map[string]int32{
	"TOKEN_TYPE_INVALID":               0,
	"TOKEN_TYPE_LOGIN_TOKEN":           1,
	"TOKEN_TYPE_MAIL_TOKEN":            2,
	"TOKEN_TYPE_PASSWORD_RESET_TOKEN":  3,
	"TOKEN_TYPE_PASSWORD_UPDATE_TOKEN": 4,
	"TOKEN_TYPE_SIGNUP_TOKEN":          5,
}

func (x TokenType) String() string {
	return proto.EnumName(TokenType_name, int32(x))
}

func (TokenType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{8}
}

// PolicyType is a type of policy.
type PolicyType int32

const (
	PolicyType_POLICY_TYPE_INVALID            PolicyType = 0
	PolicyType_POLICY_TYPE_HOT_WALLET_POLICY  PolicyType = 1
	PolicyType_POLICY_TYPE_COLD_WALLET_POLICY PolicyType = 2
)

var PolicyType_name = map[int32]string{
	0: "POLICY_TYPE_INVALID",
	1: "POLICY_TYPE_HOT_WALLET_POLICY",
	2: "POLICY_TYPE_COLD_WALLET_POLICY",
}

var PolicyType_value = map[string]int32{
	"POLICY_TYPE_INVALID":            0,
	"POLICY_TYPE_HOT_WALLET_POLICY":  1,
	"POLICY_TYPE_COLD_WALLET_POLICY": 2,
}

func (x PolicyType) String() string {
	return proto.EnumName(PolicyType_name, int32(x))
}

func (PolicyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{9}
}

type TransferLimitType int32

const (
	TransferLimitType_TRANSFER_LIMIT_TYPE_INVALID  TransferLimitType = 0
	TransferLimitType_TRANSFER_LIMIT_TYPE_HOURLY   TransferLimitType = 1
	TransferLimitType_TRANSFER_LIMIT_TYPE_DAILY    TransferLimitType = 2
	TransferLimitType_TRANSFER_LIMIT_TYPE_ONE_TIME TransferLimitType = 3
)

var TransferLimitType_name = map[int32]string{
	0: "TRANSFER_LIMIT_TYPE_INVALID",
	1: "TRANSFER_LIMIT_TYPE_HOURLY",
	2: "TRANSFER_LIMIT_TYPE_DAILY",
	3: "TRANSFER_LIMIT_TYPE_ONE_TIME",
}

var TransferLimitType_value = map[string]int32{
	"TRANSFER_LIMIT_TYPE_INVALID":  0,
	"TRANSFER_LIMIT_TYPE_HOURLY":   1,
	"TRANSFER_LIMIT_TYPE_DAILY":    2,
	"TRANSFER_LIMIT_TYPE_ONE_TIME": 3,
}

func (x TransferLimitType) String() string {
	return proto.EnumName(TransferLimitType_name, int32(x))
}

func (TransferLimitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{10}
}

type NotificationType int32

const (
	NotificationType_NOTIFICATION_TYPE_INVALID                               NotificationType = 0
	NotificationType_NOTIFICATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST         NotificationType = 1
	NotificationType_NOTIFICATION_TYPE_WALLET_VALIDATOR_APPROVE_REQUEST      NotificationType = 2
	NotificationType_NOTIFICATION_TYPE_WALLET_ACTIVATE_FAILED                NotificationType = 3
	NotificationType_NOTIFICATION_TYPE_WALLET_CANCELLED                      NotificationType = 4
	NotificationType_NOTIFICATION_TYPE_WALLET_COMPLETED                      NotificationType = 5
	NotificationType_NOTIFICATION_TYPE_WALLET_FAILED                         NotificationType = 6
	NotificationType_NOTIFICATION_TYPE_TRANSACTION_SIGNER_APPROVE_REQUEST    NotificationType = 7
	NotificationType_NOTIFICATION_TYPE_TRANSACTION_VALIDATOR_APPROVE_REQUEST NotificationType = 8
	NotificationType_NOTIFICATION_TYPE_TRANSACTION_READY                     NotificationType = 22
	NotificationType_NOTIFICATION_TYPE_TRANSACTION_SUBMITTED                 NotificationType = 9
	NotificationType_NOTIFICATION_TYPE_TRANSACTION_CANCELLED                 NotificationType = 10
	NotificationType_NOTIFICATION_TYPE_TRANSFER_SEND_COMPLETED               NotificationType = 11
	NotificationType_NOTIFICATION_TYPE_TRANSFER_SEND_FAILED                  NotificationType = 12
	NotificationType_NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPLETED            NotificationType = 13
	NotificationType_NOTIFICATION_TYPE_TRANSFER_RECEIVE_FAILED               NotificationType = 14
	NotificationType_NOTIFICATION_TYPE_ADDRESS_APPROVE_REQUEST               NotificationType = 15
	NotificationType_NOTIFICATION_TYPE_ADDRESS_COMPLETED                     NotificationType = 16
	NotificationType_NOTIFICATION_TYPE_ADDRESS_CANCELLED                     NotificationType = 17
	NotificationType_NOTIFICATION_TYPE_TRANSFERLIMIT_APPROVE_REQUEST         NotificationType = 18
	NotificationType_NOTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED               NotificationType = 19
	NotificationType_NOTIFICATION_TYPE_TRANSFERLIMIT_CANCELLED               NotificationType = 20
	NotificationType_NOTIFICATION_TYPE_WHITELIST_DETACH_REQUEST              NotificationType = 21
)

var NotificationType_name = map[int32]string{
	0:  "NOTIFICATION_TYPE_INVALID",
	1:  "NOTIFICATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST",
	2:  "NOTIFICATION_TYPE_WALLET_VALIDATOR_APPROVE_REQUEST",
	3:  "NOTIFICATION_TYPE_WALLET_ACTIVATE_FAILED",
	4:  "NOTIFICATION_TYPE_WALLET_CANCELLED",
	5:  "NOTIFICATION_TYPE_WALLET_COMPLETED",
	6:  "NOTIFICATION_TYPE_WALLET_FAILED",
	7:  "NOTIFICATION_TYPE_TRANSACTION_SIGNER_APPROVE_REQUEST",
	8:  "NOTIFICATION_TYPE_TRANSACTION_VALIDATOR_APPROVE_REQUEST",
	22: "NOTIFICATION_TYPE_TRANSACTION_READY",
	9:  "NOTIFICATION_TYPE_TRANSACTION_SUBMITTED",
	10: "NOTIFICATION_TYPE_TRANSACTION_CANCELLED",
	11: "NOTIFICATION_TYPE_TRANSFER_SEND_COMPLETED",
	12: "NOTIFICATION_TYPE_TRANSFER_SEND_FAILED",
	13: "NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPLETED",
	14: "NOTIFICATION_TYPE_TRANSFER_RECEIVE_FAILED",
	15: "NOTIFICATION_TYPE_ADDRESS_APPROVE_REQUEST",
	16: "NOTIFICATION_TYPE_ADDRESS_COMPLETED",
	17: "NOTIFICATION_TYPE_ADDRESS_CANCELLED",
	18: "NOTIFICATION_TYPE_TRANSFERLIMIT_APPROVE_REQUEST",
	19: "NOTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED",
	20: "NOTIFICATION_TYPE_TRANSFERLIMIT_CANCELLED",
	21: "NOTIFICATION_TYPE_WHITELIST_DETACH_REQUEST",
}

var NotificationType_value = map[string]int32{
	"NOTIFICATION_TYPE_INVALID":                               0,
	"NOTIFICATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST":         1,
	"NOTIFICATION_TYPE_WALLET_VALIDATOR_APPROVE_REQUEST":      2,
	"NOTIFICATION_TYPE_WALLET_ACTIVATE_FAILED":                3,
	"NOTIFICATION_TYPE_WALLET_CANCELLED":                      4,
	"NOTIFICATION_TYPE_WALLET_COMPLETED":                      5,
	"NOTIFICATION_TYPE_WALLET_FAILED":                         6,
	"NOTIFICATION_TYPE_TRANSACTION_SIGNER_APPROVE_REQUEST":    7,
	"NOTIFICATION_TYPE_TRANSACTION_VALIDATOR_APPROVE_REQUEST": 8,
	"NOTIFICATION_TYPE_TRANSACTION_READY":                     22,
	"NOTIFICATION_TYPE_TRANSACTION_SUBMITTED":                 9,
	"NOTIFICATION_TYPE_TRANSACTION_CANCELLED":                 10,
	"NOTIFICATION_TYPE_TRANSFER_SEND_COMPLETED":               11,
	"NOTIFICATION_TYPE_TRANSFER_SEND_FAILED":                  12,
	"NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPLETED":            13,
	"NOTIFICATION_TYPE_TRANSFER_RECEIVE_FAILED":               14,
	"NOTIFICATION_TYPE_ADDRESS_APPROVE_REQUEST":               15,
	"NOTIFICATION_TYPE_ADDRESS_COMPLETED":                     16,
	"NOTIFICATION_TYPE_ADDRESS_CANCELLED":                     17,
	"NOTIFICATION_TYPE_TRANSFERLIMIT_APPROVE_REQUEST":         18,
	"NOTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED":               19,
	"NOTIFICATION_TYPE_TRANSFERLIMIT_CANCELLED":               20,
	"NOTIFICATION_TYPE_WHITELIST_DETACH_REQUEST":              21,
}

func (x NotificationType) String() string {
	return proto.EnumName(NotificationType_name, int32(x))
}

func (NotificationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{11}
}

type AuditLogGroup int32

const (
	AuditLogGroup_AUDIT_LOG_GROUP_INVALID         AuditLogGroup = 0
	AuditLogGroup_AUDIT_LOG_GROUP_LOGIN           AuditLogGroup = 1
	AuditLogGroup_AUDIT_LOG_GROUP_ACCOUNT         AuditLogGroup = 2
	AuditLogGroup_AUDIT_LOG_GROUP_SERVICE_ACCOUNT AuditLogGroup = 3
	AuditLogGroup_AUDIT_LOG_GROUP_WALLET          AuditLogGroup = 4
	AuditLogGroup_AUDIT_LOG_GROUP_TRANSACTION     AuditLogGroup = 5
	AuditLogGroup_AUDIT_LOG_GROUP_POLICY          AuditLogGroup = 6
)

var AuditLogGroup_name = map[int32]string{
	0: "AUDIT_LOG_GROUP_INVALID",
	1: "AUDIT_LOG_GROUP_LOGIN",
	2: "AUDIT_LOG_GROUP_ACCOUNT",
	3: "AUDIT_LOG_GROUP_SERVICE_ACCOUNT",
	4: "AUDIT_LOG_GROUP_WALLET",
	5: "AUDIT_LOG_GROUP_TRANSACTION",
	6: "AUDIT_LOG_GROUP_POLICY",
}

var AuditLogGroup_value = map[string]int32{
	"AUDIT_LOG_GROUP_INVALID":         0,
	"AUDIT_LOG_GROUP_LOGIN":           1,
	"AUDIT_LOG_GROUP_ACCOUNT":         2,
	"AUDIT_LOG_GROUP_SERVICE_ACCOUNT": 3,
	"AUDIT_LOG_GROUP_WALLET":          4,
	"AUDIT_LOG_GROUP_TRANSACTION":     5,
	"AUDIT_LOG_GROUP_POLICY":          6,
}

func (x AuditLogGroup) String() string {
	return proto.EnumName(AuditLogGroup_name, int32(x))
}

func (AuditLogGroup) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{12}
}

type AuditLogType int32

const (
	AuditLogType_AUDIT_LOG_TYPE_INVALID                           AuditLogType = 0
	AuditLogType_AUDIT_LOG_TYPE_LOGIN                             AuditLogType = 1
	AuditLogType_AUDIT_LOG_TYPE_LOGIN_FAIL                        AuditLogType = 2
	AuditLogType_AUDIT_LOG_TYPE_LOGOUT                            AuditLogType = 3
	AuditLogType_AUDIT_LOG_TYPE_WALLET_CREATE                     AuditLogType = 4
	AuditLogType_AUDIT_LOG_TYPE_WALLET_APPROVE                    AuditLogType = 5
	AuditLogType_AUDIT_LOG_TYPE_WALLET_CANCEL                     AuditLogType = 6
	AuditLogType_AUDIT_LOG_TYPE_WALLET_REGISTER_PUBKEY            AuditLogType = 7
	AuditLogType_AUDIT_LOG_TYPE_WALLET_ARCHIVE                    AuditLogType = 8
	AuditLogType_AUDIT_LOG_TYPE_WALLET_UNARCHIVE                  AuditLogType = 9
	AuditLogType_AUDIT_LOG_TYPE_WALLET_NAME_CHANGE                AuditLogType = 10
	AuditLogType_AUDIT_LOG_TYPE_WALLET_POLICY_CHANGE              AuditLogType = 11
	AuditLogType_AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_REQUEST       AuditLogType = 12
	AuditLogType_AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_APPROVE       AuditLogType = 13
	AuditLogType_AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_CANCEL        AuditLogType = 14
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_CREATE                AuditLogType = 15
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_APPROVE               AuditLogType = 16
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_CANCEL                AuditLogType = 17
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_REGISTER_SIGNATURE    AuditLogType = 18
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_SUBMIT                AuditLogType = 19
	AuditLogType_AUDIT_LOG_TYPE_ACCOUNT_PASSWORD_CHANGE           AuditLogType = 20
	AuditLogType_AUDIT_LOG_TYPE_ACCOUNT_EMAIL_CHANGE              AuditLogType = 21
	AuditLogType_AUDIT_LOG_TYPE_ACCOUNT_INVITE                    AuditLogType = 22
	AuditLogType_AUDIT_LOG_TYPE_ACCOUNT_ARCHIVE                   AuditLogType = 23
	AuditLogType_AUDIT_LOG_TYPE_ACCOUNT_UNARCHIVE                 AuditLogType = 24
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CREATE            AuditLogType = 25
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CHANGE_PERMISSION AuditLogType = 26
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_ACTIVATE          AuditLogType = 27
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_INACTIVE          AuditLogType = 28
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_DELETE            AuditLogType = 29
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_CREATE        AuditLogType = 30
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_DELETE        AuditLogType = 31
	AuditLogType_AUDIT_LOG_TYPE_POLICY_ADDRESS_CREATE             AuditLogType = 32
	AuditLogType_AUDIT_LOG_TYPE_POLICY_ADDRESS_DELETE             AuditLogType = 33
	AuditLogType_AUDIT_LOG_TYPE_POLICY_ADDRESS_APPROVE            AuditLogType = 34
	AuditLogType_AUDIT_LOG_TYPE_POLICY_ADDRESS_CANCEL             AuditLogType = 35
	AuditLogType_AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CREATE      AuditLogType = 36
	AuditLogType_AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CHANGE      AuditLogType = 37
	AuditLogType_AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_DELETE      AuditLogType = 38
	AuditLogType_AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_APPROVE     AuditLogType = 39
	AuditLogType_AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CANCEL      AuditLogType = 40
	AuditLogType_AUDIT_LOG_TYPE_POLICY_WHITELIST_CREATE           AuditLogType = 41
	AuditLogType_AUDIT_LOG_TYPE_POLICY_WHITELIST_CHANGE           AuditLogType = 42
	AuditLogType_AUDIT_LOG_TYPE_POLICY_WHITELIST_DELETE           AuditLogType = 43
	AuditLogType_AUDIT_LOG_TYPE_POLICY_POLICY_CREATE              AuditLogType = 44
	AuditLogType_AUDIT_LOG_TYPE_POLICY_POLICY_CHANGE              AuditLogType = 45
	AuditLogType_AUDIT_LOG_TYPE_POLICY_POLICY_DELETE              AuditLogType = 46
	AuditLogType_AUDIT_LOG_TYPE_POLICY_REQUEST_NO_WHITELIST       AuditLogType = 47
	AuditLogType_AUDIT_LOG_TYPE_POLICY_APPROVE_NO_WHITELIST       AuditLogType = 48
	AuditLogType_AUDIT_LOG_TYPE_POLICY_CANCEL_NO_WHITELIST        AuditLogType = 49
)

var AuditLogType_name = map[int32]string{
	0:  "AUDIT_LOG_TYPE_INVALID",
	1:  "AUDIT_LOG_TYPE_LOGIN",
	2:  "AUDIT_LOG_TYPE_LOGIN_FAIL",
	3:  "AUDIT_LOG_TYPE_LOGOUT",
	4:  "AUDIT_LOG_TYPE_WALLET_CREATE",
	5:  "AUDIT_LOG_TYPE_WALLET_APPROVE",
	6:  "AUDIT_LOG_TYPE_WALLET_CANCEL",
	7:  "AUDIT_LOG_TYPE_WALLET_REGISTER_PUBKEY",
	8:  "AUDIT_LOG_TYPE_WALLET_ARCHIVE",
	9:  "AUDIT_LOG_TYPE_WALLET_UNARCHIVE",
	10: "AUDIT_LOG_TYPE_WALLET_NAME_CHANGE",
	11: "AUDIT_LOG_TYPE_WALLET_POLICY_CHANGE",
	12: "AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_REQUEST",
	13: "AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_APPROVE",
	14: "AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_CANCEL",
	15: "AUDIT_LOG_TYPE_TRANSACTION_CREATE",
	16: "AUDIT_LOG_TYPE_TRANSACTION_APPROVE",
	17: "AUDIT_LOG_TYPE_TRANSACTION_CANCEL",
	18: "AUDIT_LOG_TYPE_TRANSACTION_REGISTER_SIGNATURE",
	19: "AUDIT_LOG_TYPE_TRANSACTION_SUBMIT",
	20: "AUDIT_LOG_TYPE_ACCOUNT_PASSWORD_CHANGE",
	21: "AUDIT_LOG_TYPE_ACCOUNT_EMAIL_CHANGE",
	22: "AUDIT_LOG_TYPE_ACCOUNT_INVITE",
	23: "AUDIT_LOG_TYPE_ACCOUNT_ARCHIVE",
	24: "AUDIT_LOG_TYPE_ACCOUNT_UNARCHIVE",
	25: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CREATE",
	26: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CHANGE_PERMISSION",
	27: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_ACTIVATE",
	28: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_INACTIVE",
	29: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_DELETE",
	30: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_CREATE",
	31: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_DELETE",
	32: "AUDIT_LOG_TYPE_POLICY_ADDRESS_CREATE",
	33: "AUDIT_LOG_TYPE_POLICY_ADDRESS_DELETE",
	34: "AUDIT_LOG_TYPE_POLICY_ADDRESS_APPROVE",
	35: "AUDIT_LOG_TYPE_POLICY_ADDRESS_CANCEL",
	36: "AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CREATE",
	37: "AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CHANGE",
	38: "AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_DELETE",
	39: "AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_APPROVE",
	40: "AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CANCEL",
	41: "AUDIT_LOG_TYPE_POLICY_WHITELIST_CREATE",
	42: "AUDIT_LOG_TYPE_POLICY_WHITELIST_CHANGE",
	43: "AUDIT_LOG_TYPE_POLICY_WHITELIST_DELETE",
	44: "AUDIT_LOG_TYPE_POLICY_POLICY_CREATE",
	45: "AUDIT_LOG_TYPE_POLICY_POLICY_CHANGE",
	46: "AUDIT_LOG_TYPE_POLICY_POLICY_DELETE",
	47: "AUDIT_LOG_TYPE_POLICY_REQUEST_NO_WHITELIST",
	48: "AUDIT_LOG_TYPE_POLICY_APPROVE_NO_WHITELIST",
	49: "AUDIT_LOG_TYPE_POLICY_CANCEL_NO_WHITELIST",
}

var AuditLogType_value = map[string]int32{
	"AUDIT_LOG_TYPE_INVALID":                           0,
	"AUDIT_LOG_TYPE_LOGIN":                             1,
	"AUDIT_LOG_TYPE_LOGIN_FAIL":                        2,
	"AUDIT_LOG_TYPE_LOGOUT":                            3,
	"AUDIT_LOG_TYPE_WALLET_CREATE":                     4,
	"AUDIT_LOG_TYPE_WALLET_APPROVE":                    5,
	"AUDIT_LOG_TYPE_WALLET_CANCEL":                     6,
	"AUDIT_LOG_TYPE_WALLET_REGISTER_PUBKEY":            7,
	"AUDIT_LOG_TYPE_WALLET_ARCHIVE":                    8,
	"AUDIT_LOG_TYPE_WALLET_UNARCHIVE":                  9,
	"AUDIT_LOG_TYPE_WALLET_NAME_CHANGE":                10,
	"AUDIT_LOG_TYPE_WALLET_POLICY_CHANGE":              11,
	"AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_REQUEST":       12,
	"AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_APPROVE":       13,
	"AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_CANCEL":        14,
	"AUDIT_LOG_TYPE_TRANSACTION_CREATE":                15,
	"AUDIT_LOG_TYPE_TRANSACTION_APPROVE":               16,
	"AUDIT_LOG_TYPE_TRANSACTION_CANCEL":                17,
	"AUDIT_LOG_TYPE_TRANSACTION_REGISTER_SIGNATURE":    18,
	"AUDIT_LOG_TYPE_TRANSACTION_SUBMIT":                19,
	"AUDIT_LOG_TYPE_ACCOUNT_PASSWORD_CHANGE":           20,
	"AUDIT_LOG_TYPE_ACCOUNT_EMAIL_CHANGE":              21,
	"AUDIT_LOG_TYPE_ACCOUNT_INVITE":                    22,
	"AUDIT_LOG_TYPE_ACCOUNT_ARCHIVE":                   23,
	"AUDIT_LOG_TYPE_ACCOUNT_UNARCHIVE":                 24,
	"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CREATE":            25,
	"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CHANGE_PERMISSION": 26,
	"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_ACTIVATE":          27,
	"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_INACTIVE":          28,
	"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_DELETE":            29,
	"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_CREATE":        30,
	"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_DELETE":        31,
	"AUDIT_LOG_TYPE_POLICY_ADDRESS_CREATE":             32,
	"AUDIT_LOG_TYPE_POLICY_ADDRESS_DELETE":             33,
	"AUDIT_LOG_TYPE_POLICY_ADDRESS_APPROVE":            34,
	"AUDIT_LOG_TYPE_POLICY_ADDRESS_CANCEL":             35,
	"AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CREATE":      36,
	"AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CHANGE":      37,
	"AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_DELETE":      38,
	"AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_APPROVE":     39,
	"AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CANCEL":      40,
	"AUDIT_LOG_TYPE_POLICY_WHITELIST_CREATE":           41,
	"AUDIT_LOG_TYPE_POLICY_WHITELIST_CHANGE":           42,
	"AUDIT_LOG_TYPE_POLICY_WHITELIST_DELETE":           43,
	"AUDIT_LOG_TYPE_POLICY_POLICY_CREATE":              44,
	"AUDIT_LOG_TYPE_POLICY_POLICY_CHANGE":              45,
	"AUDIT_LOG_TYPE_POLICY_POLICY_DELETE":              46,
	"AUDIT_LOG_TYPE_POLICY_REQUEST_NO_WHITELIST":       47,
	"AUDIT_LOG_TYPE_POLICY_APPROVE_NO_WHITELIST":       48,
	"AUDIT_LOG_TYPE_POLICY_CANCEL_NO_WHITELIST":        49,
}

func (x AuditLogType) String() string {
	return proto.EnumName(AuditLogType_name, int32(x))
}

func (AuditLogType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16c66c285f92ee3d, []int{13}
}

func init() {
	proto.RegisterEnum("adamant.global.v1.WalletType", WalletType_name, WalletType_value)
	proto.RegisterEnum("adamant.global.v1.WalletState", WalletState_name, WalletState_value)
	proto.RegisterEnum("adamant.global.v1.AddressState", AddressState_name, AddressState_value)
	proto.RegisterEnum("adamant.global.v1.TransactionState", TransactionState_name, TransactionState_value)
	proto.RegisterEnum("adamant.global.v1.AccountType", AccountType_name, AccountType_value)
	proto.RegisterEnum("adamant.global.v1.UserState", UserState_name, UserState_value)
	proto.RegisterEnum("adamant.global.v1.RoleType", RoleType_name, RoleType_value)
	proto.RegisterEnum("adamant.global.v1.ResourceType", ResourceType_name, ResourceType_value)
	proto.RegisterEnum("adamant.global.v1.TokenType", TokenType_name, TokenType_value)
	proto.RegisterEnum("adamant.global.v1.PolicyType", PolicyType_name, PolicyType_value)
	proto.RegisterEnum("adamant.global.v1.TransferLimitType", TransferLimitType_name, TransferLimitType_value)
	proto.RegisterEnum("adamant.global.v1.NotificationType", NotificationType_name, NotificationType_value)
	proto.RegisterEnum("adamant.global.v1.AuditLogGroup", AuditLogGroup_name, AuditLogGroup_value)
	proto.RegisterEnum("adamant.global.v1.AuditLogType", AuditLogType_name, AuditLogType_value)
}

func init() {
	proto.RegisterFile("gincoinc/adamant/global/v1/adamantglobalv1/enum.proto", fileDescriptor_16c66c285f92ee3d)
}

var fileDescriptor_16c66c285f92ee3d = []byte{
	// 1632 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x58, 0xc9, 0x72, 0xdb, 0xcc,
	0x11, 0x0e, 0x49, 0xad, 0x2d, 0xd9, 0x1e, 0x8d, 0x25, 0x59, 0x8b, 0x65, 0x59, 0xde, 0x0d, 0xdb,
	0x92, 0x15, 0x3b, 0x4e, 0x2a, 0x39, 0xc1, 0xc0, 0x88, 0x9a, 0x12, 0x08, 0x20, 0x03, 0x80, 0x2a,
	0xfa, 0x82, 0xd0, 0x14, 0xed, 0x62, 0x45, 0x26, 0x5d, 0x12, 0xe5, 0x2a, 0x1f, 0xf3, 0x0c, 0xa9,
	0xbc, 0x4c, 0x72, 0xcb, 0x29, 0x2f, 0x90, 0x17, 0xf8, 0xaf, 0xff, 0x4b, 0xfc, 0x35, 0x83, 0x19,
	0x62, 0x1b, 0x2e, 0x57, 0x7c, 0x5f, 0xf7, 0xf4, 0xde, 0x4d, 0xc2, 0x1f, 0xbe, 0xf6, 0xfa, 0x9d,
	0x41, 0xaf, 0xdf, 0x39, 0x6a, 0x5f, 0xb4, 0xbf, 0xb5, 0xfb, 0xc3, 0xa3, 0xaf, 0x97, 0x83, 0xcf,
	0xed, 0xcb, 0xa3, 0x1f, 0xc7, 0xea, 0x4b, 0xf2, 0xe1, 0xc7, 0xf1, 0x51, 0xb7, 0x7f, 0xf3, 0xed,
	0xf0, 0xfb, 0xd5, 0x60, 0x38, 0xc0, 0x6b, 0x12, 0x3b, 0x4c, 0xc0, 0xc3, 0x1f, 0xc7, 0xc6, 0xff,
	0x2b, 0x00, 0xe7, 0xed, 0xcb, 0xcb, 0xee, 0x30, 0xfc, 0xf9, 0xbd, 0x8b, 0xef, 0xc1, 0xdd, 0x73,
	0xd3, 0x71, 0x48, 0x18, 0x87, 0x2d, 0x9f, 0xc4, 0xd4, 0x6d, 0x9a, 0x0e, 0xb5, 0xd1, 0xef, 0xf0,
	0x43, 0xb8, 0x9f, 0x05, 0x02, 0xe2, 0x9c, 0xc4, 0x56, 0x14, 0x84, 0x9e, 0xdd, 0x8a, 0x4f, 0xbd,
	0x10, 0x55, 0xf0, 0x01, 0xec, 0x8d, 0x65, 0x58, 0x9e, 0x63, 0xa3, 0x2a, 0x7e, 0x03, 0x2f, 0x27,
	0x29, 0x89, 0x49, 0x78, 0x4a, 0x18, 0x89, 0x1a, 0x31, 0xf1, 0x4c, 0x54, 0xc3, 0x7f, 0x86, 0x0f,
	0x33, 0xd3, 0x63, 0x46, 0x2c, 0x42, 0x9b, 0x24, 0xf6, 0x5c, 0xa7, 0x85, 0xe6, 0x8c, 0xff, 0xd5,
	0x60, 0x25, 0xf1, 0x2b, 0x18, 0xb6, 0x87, 0x5d, 0xbc, 0x05, 0xeb, 0x52, 0x57, 0x10, 0x9a, 0x61,
	0xd6, 0xb3, 0x6d, 0xd8, 0xc8, 0x21, 0x3e, 0xf3, 0x7c, 0x2f, 0x20, 0x36, 0xaa, 0x64, 0x9c, 0x4e,
	0xa0, 0x33, 0xd2, 0x8a, 0x19, 0xa9, 0xd3, 0x20, 0x24, 0x8c, 0xba, 0x75, 0x54, 0xc5, 0xfb, 0xb0,
	0x3b, 0x96, 0x41, 0x6c, 0x54, 0xc3, 0x4f, 0xe0, 0x61, 0x8e, 0x20, 0x5e, 0x35, 0x43, 0x8f, 0xc5,
	0x8c, 0x34, 0x29, 0x39, 0xe7, 0x6a, 0xe6, 0xf0, 0x63, 0xd8, 0x9f, 0xc8, 0x22, 0x36, 0x9a, 0xc7,
	0xbb, 0x70, 0x2f, 0x47, 0x32, 0xad, 0x90, 0x36, 0xcd, 0x90, 0x6b, 0x58, 0xc0, 0x3b, 0xb0, 0xa9,
	0x03, 0x89, 0x8d, 0x16, 0x4b, 0xbe, 0x07, 0xb4, 0xee, 0x72, 0xa9, 0xa5, 0x4c, 0xba, 0x53, 0x84,
	0xd8, 0x68, 0xb9, 0xf4, 0x56, 0x10, 0x7d, 0x6c, 0xd0, 0x50, 0xbc, 0x05, 0xa5, 0xb7, 0x24, 0x48,
	0x6c, 0xb4, 0x52, 0xc2, 0x2c, 0xaf, 0xe1, 0x3b, 0x84, 0x63, 0xab, 0x65, 0xcc, 0x74, 0x2d, 0xe2,
	0x38, 0xc4, 0x46, 0xb7, 0x4a, 0x59, 0x30, 0x99, 0x75, 0x4a, 0x9b, 0xc4, 0x46, 0xb7, 0x8d, 0x7f,
	0x54, 0x60, 0xd5, 0xbc, 0xb8, 0xb8, 0xea, 0x5e, 0x5f, 0x27, 0xb9, 0xdc, 0x86, 0x0d, 0xd3, 0xb6,
	0x19, 0x09, 0x82, 0x52, 0x32, 0xef, 0xc3, 0x56, 0x1e, 0xca, 0x18, 0x5e, 0xe1, 0x5e, 0x69, 0x51,
	0xc2, 0x8b, 0xb3, 0x04, 0xa6, 0xa6, 0xd7, 0x8c, 0x7f, 0x56, 0x01, 0x85, 0x57, 0xed, 0xfe, 0x75,
	0xbb, 0x33, 0xec, 0x0d, 0xfa, 0x89, 0x1d, 0x7b, 0xb0, 0x1d, 0x32, 0xd3, 0x0d, 0x78, 0xac, 0x3d,
	0xb7, 0x64, 0x8b, 0x16, 0x56, 0xb1, 0xaf, 0x70, 0x53, 0xf5, 0xb0, 0xb0, 0x66, 0x1f, 0x76, 0xcb,
	0x68, 0x5a, 0x32, 0x35, 0xfc, 0x00, 0x76, 0xc6, 0x11, 0x88, 0x8d, 0xe6, 0x78, 0xed, 0x6a, 0xd4,
	0xa7, 0xd1, 0x98, 0xd7, 0x3f, 0x91, 0x46, 0x64, 0x41, 0x4f, 0x48, 0x93, 0xb6, 0x68, 0xfc, 0x0d,
	0x56, 0xcc, 0x4e, 0x67, 0x70, 0xd3, 0x4f, 0x86, 0xc7, 0x16, 0xac, 0x9b, 0x96, 0xe5, 0x45, 0x6e,
	0x69, 0x7a, 0x6c, 0xc0, 0x5a, 0x0e, 0x89, 0x02, 0xc2, 0x92, 0xfe, 0xca, 0x7d, 0x0e, 0x08, 0x6b,
	0x52, 0x8b, 0x17, 0xaf, 0xf8, 0x88, 0xaa, 0xc6, 0x0d, 0x2c, 0x47, 0xd7, 0xdd, 0xab, 0x24, 0xde,
	0x9b, 0x80, 0xb9, 0x60, 0x29, 0xd0, 0x3b, 0xb0, 0x99, 0xf9, 0x1e, 0xb9, 0x96, 0xe7, 0x9e, 0x50,
	0xd6, 0x10, 0x2d, 0xbc, 0x05, 0xeb, 0x19, 0x2c, 0x45, 0xaa, 0x05, 0x29, 0x9b, 0xa4, 0x1d, 0x53,
	0x33, 0x7e, 0xad, 0xc0, 0x12, 0x1b, 0x5c, 0x76, 0x85, 0x5b, 0x1b, 0xb0, 0xc6, 0x3c, 0x87, 0x14,
	0x7d, 0xda, 0x86, 0x8d, 0xf4, 0xb3, 0xc7, 0xea, 0x71, 0xc3, 0x74, 0xcd, 0xba, 0xf0, 0x6b, 0x0b,
	0xd6, 0xf3, 0x90, 0x48, 0x2b, 0x4b, 0x8a, 0x2c, 0x8f, 0x8c, 0x3a, 0x1d, 0xd5, 0xca, 0x62, 0x22,
	0x99, 0x0c, 0xcd, 0x95, 0xc5, 0x6c, 0xd2, 0x24, 0x8e, 0xe7, 0x13, 0x86, 0xe6, 0x79, 0x25, 0xa4,
	0x20, 0x9f, 0x8b, 0xb2, 0x91, 0x4c, 0xbb, 0x41, 0xdd, 0x24, 0x8d, 0x5a, 0x5c, 0x6a, 0x5f, 0x34,
	0x3a, 0xb0, 0xca, 0xba, 0xd7, 0x83, 0x9b, 0xab, 0x4e, 0xe2, 0x30, 0xf7, 0x8c, 0x04, 0x5e, 0xc4,
	0xac, 0x92, 0xd3, 0xdc, 0xc4, 0x1c, 0x94, 0xe8, 0x42, 0x15, 0x61, 0x45, 0x0e, 0xf1, 0x58, 0xdd,
	0x74, 0xe9, 0x27, 0x93, 0xd7, 0x0e, 0xaa, 0x1a, 0xff, 0xad, 0xc0, 0x72, 0x38, 0xf8, 0x7b, 0xb7,
	0x2f, 0x9e, 0xd8, 0x04, 0x1c, 0x7a, 0x67, 0xc4, 0x2d, 0xea, 0xdf, 0x81, 0xcd, 0xcc, 0x77, 0xc7,
	0xab, 0x53, 0x37, 0x16, 0x1f, 0x50, 0x85, 0x9b, 0x95, 0xc1, 0x1a, 0x26, 0x75, 0x24, 0x54, 0xe5,
	0xf3, 0x33, 0x03, 0xf9, 0x66, 0x10, 0x9c, 0x7b, 0xcc, 0x8e, 0x19, 0x09, 0xf8, 0xf2, 0x10, 0x24,
	0x31, 0x8a, 0x75, 0xa4, 0xc8, 0xb7, 0x79, 0x01, 0x24, 0x2c, 0x11, 0xea, 0x0c, 0x8b, 0x27, 0x2e,
	0xf2, 0x25, 0x38, 0x6f, 0x5c, 0x02, 0xf8, 0x83, 0xcb, 0x5e, 0xe7, 0xa7, 0x5a, 0x96, 0xbe, 0xe7,
	0x50, 0xab, 0x55, 0xf4, 0xe2, 0x00, 0xf6, 0xb2, 0x40, 0x26, 0xe6, 0xc9, 0x67, 0x54, 0xc1, 0x8f,
	0xe0, 0x41, 0x96, 0xc2, 0x17, 0x64, 0x81, 0x53, 0x35, 0xfe, 0x55, 0x81, 0x35, 0x31, 0x74, 0xbe,
	0x74, 0xaf, 0x9c, 0xde, 0xb7, 0x5e, 0xd2, 0x65, 0xaa, 0x2b, 0x4f, 0x08, 0x8b, 0x1d, 0xda, 0xa0,
	0xa5, 0x66, 0x53, 0x93, 0xa1, 0x40, 0x38, 0xf5, 0x22, 0xe6, 0xf0, 0xa7, 0xd5, 0x5c, 0x2a, 0xe0,
	0xb6, 0x49, 0x9d, 0x16, 0xaa, 0x8e, 0x06, 0x47, 0x01, 0xf6, 0x5c, 0x12, 0x87, 0xb4, 0x41, 0x50,
	0xcd, 0xf8, 0xcf, 0x12, 0x20, 0x77, 0x30, 0xec, 0x7d, 0xe9, 0x75, 0xda, 0x7c, 0x1a, 0x0a, 0xb3,
	0xf6, 0x60, 0xdb, 0xf5, 0x42, 0x7a, 0x42, 0x2d, 0x91, 0xf1, 0xa2, 0x51, 0xef, 0xe0, 0xa8, 0x0c,
	0xab, 0x89, 0x2f, 0xba, 0x23, 0x36, 0x7d, 0x9f, 0x79, 0x4d, 0x3e, 0xc4, 0xfe, 0x1a, 0x91, 0x80,
	0xd7, 0xd4, 0x07, 0xf8, 0xfd, 0x58, 0xa1, 0x74, 0x45, 0x16, 0xe5, 0xaa, 0xf8, 0x35, 0xbc, 0x18,
	0x2b, 0xa7, 0xda, 0x3c, 0x3e, 0x31, 0xa9, 0x23, 0x56, 0xf4, 0x33, 0x78, 0x34, 0x96, 0x9d, 0x4e,
	0xbb, 0xb9, 0xc9, 0xbc, 0xd1, 0xae, 0x98, 0xe7, 0xc5, 0x38, 0x96, 0x27, 0x1f, 0x5d, 0xc0, 0x7f,
	0x82, 0xf7, 0x65, 0x52, 0x6e, 0xda, 0xea, 0x83, 0xb2, 0x88, 0xff, 0x02, 0x7f, 0x9c, 0x2c, 0x39,
	0x3e, 0x32, 0x4b, 0xf8, 0x39, 0x3c, 0x9e, 0x2c, 0xcc, 0x88, 0x69, 0xb7, 0xd0, 0x26, 0x7e, 0x05,
	0xcf, 0xa7, 0xd8, 0x37, 0x5a, 0x14, 0xcb, 0xd3, 0xc9, 0x69, 0x18, 0x81, 0x1f, 0x81, 0x63, 0xc8,
	0xbc, 0xe2, 0x02, 0xe2, 0xda, 0x99, 0x68, 0xae, 0x60, 0x03, 0x9e, 0x4d, 0xa3, 0xcb, 0xa0, 0xae,
	0xe2, 0xb7, 0xf0, 0x7a, 0x02, 0x57, 0x5d, 0x88, 0xa9, 0xf6, 0x5b, 0x53, 0x8c, 0x51, 0x12, 0xf2,
	0x81, 0xdb, 0x7a, 0xba, 0xba, 0x1a, 0x8a, 0xd1, 0xbe, 0xa3, 0x8f, 0xb6, 0xa2, 0xa7, 0x66, 0xa0,
	0x29, 0xc4, 0x51, 0xf0, 0xd6, 0xf4, 0x6d, 0xa4, 0xec, 0x4d, 0xba, 0xb5, 0x68, 0x06, 0x9e, 0xec,
	0x64, 0x22, 0x94, 0x1a, 0x73, 0x77, 0x26, 0xfa, 0xc8, 0xa4, 0x75, 0x7c, 0x08, 0x86, 0xa6, 0xdc,
	0x4f, 0x69, 0x48, 0x1c, 0x1a, 0x84, 0xb1, 0x4d, 0x42, 0xd3, 0x3a, 0x1d, 0x59, 0xb3, 0x61, 0xfc,
	0x52, 0x81, 0x5b, 0xe6, 0xcd, 0x45, 0x6f, 0xe8, 0x0c, 0xbe, 0xd6, 0xaf, 0x06, 0x37, 0xdf, 0xc5,
	0xe5, 0x15, 0xd9, 0x34, 0xe4, 0xf3, 0x3e, 0xae, 0x33, 0x2f, 0xf2, 0xf3, 0x6b, 0xb6, 0x08, 0x8a,
	0xb5, 0x20, 0xcf, 0xb9, 0x02, 0x34, 0xba, 0x1c, 0x78, 0x17, 0x16, 0xc1, 0xe2, 0x79, 0x51, 0xe3,
	0xeb, 0xa6, 0x48, 0x92, 0x0b, 0x6d, 0x8e, 0xcf, 0xd9, 0x22, 0x96, 0x29, 0x69, 0x34, 0xaf, 0x13,
	0x96, 0xa3, 0x7b, 0xc1, 0xf8, 0x37, 0x82, 0x55, 0xe5, 0xa4, 0x18, 0x8f, 0x39, 0x72, 0x79, 0xa9,
	0x16, 0x30, 0xe5, 0xe1, 0x1e, 0x6c, 0xeb, 0x10, 0x51, 0x90, 0xa8, 0x9a, 0x8f, 0x8d, 0x82, 0xbd,
	0x88, 0x7b, 0xc6, 0x4f, 0xab, 0x3c, 0xa4, 0x26, 0x15, 0x23, 0x66, 0x48, 0xd0, 0x1c, 0x5f, 0x52,
	0x7a, 0x86, 0x2c, 0x20, 0x34, 0x3f, 0x41, 0x89, 0xc8, 0x3f, 0x5a, 0xc0, 0x2f, 0xe1, 0xa9, 0x9e,
	0xa1, 0x7e, 0x04, 0xc5, 0x7e, 0xf4, 0xf1, 0x8c, 0xb4, 0xd0, 0xe2, 0x84, 0xf7, 0x92, 0x53, 0x1f,
	0x2d, 0xe5, 0x73, 0x96, 0xa5, 0x44, 0xae, 0x22, 0x2d, 0xe3, 0xa7, 0x70, 0xa0, 0x27, 0xb9, 0x66,
	0x83, 0xc4, 0xd6, 0xa9, 0xe9, 0xd6, 0x09, 0x02, 0xde, 0x52, 0x7a, 0x9a, 0x5c, 0xbb, 0x92, 0xb8,
	0xc2, 0xeb, 0x77, 0x8c, 0x3e, 0x2f, 0x53, 0xc6, 0xaa, 0x7e, 0x57, 0x67, 0xe4, 0xab, 0x20, 0x8a,
	0x11, 0x33, 0x03, 0x5f, 0x46, 0xf4, 0xb6, 0xc6, 0xbd, 0xdc, 0x20, 0x4d, 0xb2, 0x77, 0x87, 0x2f,
	0xa3, 0x09, 0x34, 0xf5, 0x3a, 0x9a, 0xa6, 0x2e, 0x79, 0x75, 0x0d, 0x1f, 0xc3, 0x9b, 0x09, 0xb4,
	0x51, 0x32, 0xf9, 0x52, 0x32, 0xc3, 0x88, 0x11, 0x84, 0xa7, 0x68, 0x4e, 0xd6, 0x03, 0xba, 0xcb,
	0xe7, 0x77, 0x81, 0xa6, 0x4e, 0xfe, 0xd1, 0x05, 0x26, 0x53, 0xb1, 0xae, 0xc9, 0x99, 0xe2, 0x12,
	0x71, 0xee, 0x49, 0xe2, 0x86, 0xa6, 0x96, 0x14, 0x91, 0xba, 0x4d, 0x1a, 0x12, 0xb4, 0xc9, 0x0f,
	0xac, 0x31, 0x14, 0x55, 0x4a, 0xf7, 0xf8, 0x45, 0x38, 0x86, 0x93, 0x16, 0xdc, 0x96, 0xa6, 0xc6,
	0x0b, 0x83, 0x44, 0x65, 0x65, 0x1b, 0xbf, 0x87, 0xb7, 0xd3, 0xa8, 0xc2, 0x85, 0xd8, 0x27, 0xac,
	0x41, 0x83, 0x80, 0x0f, 0x92, 0x1d, 0xbe, 0x3e, 0xa7, 0x48, 0xa9, 0xa3, 0x05, 0xed, 0xce, 0x40,
	0xa6, 0xae, 0xa0, 0x13, 0x74, 0x7f, 0x06, 0xd3, 0x6d, 0xc2, 0xc7, 0x3e, 0xda, 0xd3, 0x94, 0x69,
	0x91, 0x7a, 0x46, 0x5a, 0xca, 0xd3, 0x07, 0x33, 0xd2, 0xa5, 0xf6, 0x7d, 0xfc, 0x02, 0x9e, 0x14,
	0xe8, 0xb2, 0x0d, 0x47, 0x4b, 0x2e, 0x51, 0xfc, 0x70, 0x3a, 0x53, 0xea, 0x3c, 0xd0, 0x38, 0x57,
	0x60, 0xaa, 0x2e, 0x78, 0x34, 0xc3, 0xf3, 0x49, 0x23, 0x3c, 0xc6, 0x47, 0xf0, 0x4a, 0xcf, 0x0c,
	0x7c, 0xe2, 0xda, 0xd4, 0xad, 0xcb, 0x9b, 0x58, 0xda, 0xfb, 0x64, 0x76, 0x81, 0xa4, 0x76, 0x9f,
	0xce, 0x2c, 0x20, 0xfd, 0x7c, 0xc6, 0xaf, 0x9a, 0x99, 0x04, 0x94, 0xbb, 0xcf, 0x67, 0xb7, 0x29,
	0xf1, 0xfa, 0x85, 0xa6, 0x49, 0xa5, 0x40, 0x66, 0x40, 0x25, 0x0e, 0xbf, 0x9c, 0x89, 0x9b, 0xf8,
	0x6a, 0xcc, 0xc2, 0x95, 0x6e, 0xbe, 0xd2, 0x34, 0xbf, 0xe4, 0xaa, 0x81, 0x9d, 0x18, 0xf0, 0x7a,
	0x3a, 0x31, 0x79, 0xfd, 0xcd, 0x54, 0xa2, 0x7c, 0xfa, 0x50, 0x33, 0xd2, 0x25, 0x43, 0x4e, 0xfd,
	0xdc, 0xa8, 0x46, 0x47, 0xe3, 0xf9, 0xea, 0xf6, 0xca, 0xf1, 0xdf, 0x6a, 0x9a, 0x45, 0x99, 0x2a,
	0x12, 0x90, 0xa7, 0x1f, 0x7f, 0x5c, 0xfb, 0x74, 0xa7, 0xf0, 0x27, 0xee, 0xe7, 0x05, 0xf1, 0x07,
	0xee, 0xbb, 0xdf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x60, 0xea, 0x3a, 0x82, 0xf9, 0x15, 0x00, 0x00,
}
