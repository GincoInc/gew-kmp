// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: gincoinc/adamant/global/v1/adamantglobalv1/enum.proto

package adamantglobalv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WalletType is a type of wallet.
type WalletType int32

const (
	WalletType_WALLET_TYPE_INVALID                       WalletType = 0
	WalletType_WALLET_TYPE_SELF_CUSTODY_HOT              WalletType = 1
	WalletType_WALLET_TYPE_SELF_CUSTODY_COLD             WalletType = 2
	WalletType_WALLET_TYPE_SELF_CUSTODY_HOT_SINGLE_SIG   WalletType = 3
	WalletType_WALLET_TYPE_SELF_CUSTODY_HOT_RECEIVE_ONLY WalletType = 4
	WalletType_WALLET_TYPE_SELF_CUSTODY_COLD_SINGLE_SIG  WalletType = 5
)

// Enum value maps for WalletType.
var (
	WalletType_name = map[int32]string{
		0: "WALLET_TYPE_INVALID",
		1: "WALLET_TYPE_SELF_CUSTODY_HOT",
		2: "WALLET_TYPE_SELF_CUSTODY_COLD",
		3: "WALLET_TYPE_SELF_CUSTODY_HOT_SINGLE_SIG",
		4: "WALLET_TYPE_SELF_CUSTODY_HOT_RECEIVE_ONLY",
		5: "WALLET_TYPE_SELF_CUSTODY_COLD_SINGLE_SIG",
	}
	WalletType_value = map[string]int32{
		"WALLET_TYPE_INVALID":                       0,
		"WALLET_TYPE_SELF_CUSTODY_HOT":              1,
		"WALLET_TYPE_SELF_CUSTODY_COLD":             2,
		"WALLET_TYPE_SELF_CUSTODY_HOT_SINGLE_SIG":   3,
		"WALLET_TYPE_SELF_CUSTODY_HOT_RECEIVE_ONLY": 4,
		"WALLET_TYPE_SELF_CUSTODY_COLD_SINGLE_SIG":  5,
	}
)

func (x WalletType) Enum() *WalletType {
	p := new(WalletType)
	*p = x
	return p
}

func (x WalletType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[0].Descriptor()
}

func (WalletType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[0]
}

func (x WalletType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletType.Descriptor instead.
func (WalletType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{0}
}

// WalletState is a state of wallet.
type WalletState int32

const (
	WalletState_WALLET_STATE_INVALID                              WalletState = 0
	WalletState_WALLET_STATE_PROPOSED                             WalletState = 1
	WalletState_WALLET_STATE_KEY_REGISTERING                      WalletState = 2  // Waiting for key register
	WalletState_WALLET_STATE_KEY_REGISTERED                       WalletState = 3  // Key was registed to Wallet
	WalletState_WALLET_STATE_VALIDATOR_REVIEWING                  WalletState = 4  // Waiting for review for validator
	WalletState_WALLET_STATE_VALIDATOR_REVIEWED                   WalletState = 5  // Validator reviewd
	WalletState_WALLET_STATE_ACTIVATING                           WalletState = 6  // Waiting for activate
	WalletState_WALLET_STATE_ACTIVATED                            WalletState = 7  // Wallet was activated
	WalletState_WALLET_STATE_SIGNING                              WalletState = 8  // Waiting for sign
	WalletState_WALLET_STATE_SIGNED                               WalletState = 9  // was signed
	WalletState_WALLET_STATE_SUBMITTING                           WalletState = 10 // Waiting for submit transaction which regist public key to contract
	WalletState_WALLET_STATE_SUBMITTED                            WalletState = 11 // Transaction was submitted
	WalletState_WALLET_STATE_COMPLETED                            WalletState = 12 // Creating wallet successfuly completed
	WalletState_WALLET_STATE_CANCELLED                            WalletState = 13 // Wallet was cancelled
	WalletState_WALLET_STATE_ARCHIVED                             WalletState = 14 // Wallet was archived
	WalletState_WALLET_STATE_ADDRESS_IMPORT_WAITING               WalletState = 15 // Waiting for import address
	WalletState_WALLET_STATE_ADDRESS_IMPORTING                    WalletState = 16 // Importing address
	WalletState_WALLET_STATE_ADDRESS_IMPORT_FAILED                WalletState = 17 // Failed import address
	WalletState_WALLET_STATE_ADDRESS_DELETING                     WalletState = 18 // Deleting address
	WalletState_WALLET_STATE_ADDRESS_DELETE_FAILED                WalletState = 19 // Failed delete address
	WalletState_WALLET_STATE_FLUSHING                             WalletState = 20 // Balance flushing
	WalletState_WALLET_STATE_ACCOUNT_CREATING                     WalletState = 21 // Waiting for create account
	WalletState_WALLET_STATE_ACCOUNT_CREATED                      WalletState = 22 // Account was created
	WalletState_WALLET_STATE_MANAGER_APPROVED_SENDING_TRANSACTION WalletState = 23 // Manager approved tx
)

// Enum value maps for WalletState.
var (
	WalletState_name = map[int32]string{
		0:  "WALLET_STATE_INVALID",
		1:  "WALLET_STATE_PROPOSED",
		2:  "WALLET_STATE_KEY_REGISTERING",
		3:  "WALLET_STATE_KEY_REGISTERED",
		4:  "WALLET_STATE_VALIDATOR_REVIEWING",
		5:  "WALLET_STATE_VALIDATOR_REVIEWED",
		6:  "WALLET_STATE_ACTIVATING",
		7:  "WALLET_STATE_ACTIVATED",
		8:  "WALLET_STATE_SIGNING",
		9:  "WALLET_STATE_SIGNED",
		10: "WALLET_STATE_SUBMITTING",
		11: "WALLET_STATE_SUBMITTED",
		12: "WALLET_STATE_COMPLETED",
		13: "WALLET_STATE_CANCELLED",
		14: "WALLET_STATE_ARCHIVED",
		15: "WALLET_STATE_ADDRESS_IMPORT_WAITING",
		16: "WALLET_STATE_ADDRESS_IMPORTING",
		17: "WALLET_STATE_ADDRESS_IMPORT_FAILED",
		18: "WALLET_STATE_ADDRESS_DELETING",
		19: "WALLET_STATE_ADDRESS_DELETE_FAILED",
		20: "WALLET_STATE_FLUSHING",
		21: "WALLET_STATE_ACCOUNT_CREATING",
		22: "WALLET_STATE_ACCOUNT_CREATED",
		23: "WALLET_STATE_MANAGER_APPROVED_SENDING_TRANSACTION",
	}
	WalletState_value = map[string]int32{
		"WALLET_STATE_INVALID":                              0,
		"WALLET_STATE_PROPOSED":                             1,
		"WALLET_STATE_KEY_REGISTERING":                      2,
		"WALLET_STATE_KEY_REGISTERED":                       3,
		"WALLET_STATE_VALIDATOR_REVIEWING":                  4,
		"WALLET_STATE_VALIDATOR_REVIEWED":                   5,
		"WALLET_STATE_ACTIVATING":                           6,
		"WALLET_STATE_ACTIVATED":                            7,
		"WALLET_STATE_SIGNING":                              8,
		"WALLET_STATE_SIGNED":                               9,
		"WALLET_STATE_SUBMITTING":                           10,
		"WALLET_STATE_SUBMITTED":                            11,
		"WALLET_STATE_COMPLETED":                            12,
		"WALLET_STATE_CANCELLED":                            13,
		"WALLET_STATE_ARCHIVED":                             14,
		"WALLET_STATE_ADDRESS_IMPORT_WAITING":               15,
		"WALLET_STATE_ADDRESS_IMPORTING":                    16,
		"WALLET_STATE_ADDRESS_IMPORT_FAILED":                17,
		"WALLET_STATE_ADDRESS_DELETING":                     18,
		"WALLET_STATE_ADDRESS_DELETE_FAILED":                19,
		"WALLET_STATE_FLUSHING":                             20,
		"WALLET_STATE_ACCOUNT_CREATING":                     21,
		"WALLET_STATE_ACCOUNT_CREATED":                      22,
		"WALLET_STATE_MANAGER_APPROVED_SENDING_TRANSACTION": 23,
	}
)

func (x WalletState) Enum() *WalletState {
	p := new(WalletState)
	*p = x
	return p
}

func (x WalletState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletState) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[1].Descriptor()
}

func (WalletState) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[1]
}

func (x WalletState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletState.Descriptor instead.
func (WalletState) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{1}
}

// WalletProposalType is a type of proposal
type WalletProposalType int32

const (
	WalletProposalType_WALLET_PROPOSAL_TYPE_INVALID WalletProposalType = 0
	// the wallet is requested to change policy
	WalletProposalType_WALLET_PROPOSAL_TYPE_POLICY WalletProposalType = 1
	// the wallet is requested to change validator/required_approval_count
	WalletProposalType_WALLET_PROPOSAL_TYPE_VALIDATOR WalletProposalType = 2
)

// Enum value maps for WalletProposalType.
var (
	WalletProposalType_name = map[int32]string{
		0: "WALLET_PROPOSAL_TYPE_INVALID",
		1: "WALLET_PROPOSAL_TYPE_POLICY",
		2: "WALLET_PROPOSAL_TYPE_VALIDATOR",
	}
	WalletProposalType_value = map[string]int32{
		"WALLET_PROPOSAL_TYPE_INVALID":   0,
		"WALLET_PROPOSAL_TYPE_POLICY":    1,
		"WALLET_PROPOSAL_TYPE_VALIDATOR": 2,
	}
)

func (x WalletProposalType) Enum() *WalletProposalType {
	p := new(WalletProposalType)
	*p = x
	return p
}

func (x WalletProposalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletProposalType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[2].Descriptor()
}

func (WalletProposalType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[2]
}

func (x WalletProposalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletProposalType.Descriptor instead.
func (WalletProposalType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{2}
}

// AddressState is a state of address.
type AddressState int32

const (
	AddressState_ADDRESS_STATE_INVALID    AddressState = 0
	AddressState_ADDRESS_STATE_SUBMITTING AddressState = 1
	AddressState_ADDRESS_STATE_SUBMITTED  AddressState = 2
	AddressState_ADDRESS_STATE_COMPLETED  AddressState = 3
)

// Enum value maps for AddressState.
var (
	AddressState_name = map[int32]string{
		0: "ADDRESS_STATE_INVALID",
		1: "ADDRESS_STATE_SUBMITTING",
		2: "ADDRESS_STATE_SUBMITTED",
		3: "ADDRESS_STATE_COMPLETED",
	}
	AddressState_value = map[string]int32{
		"ADDRESS_STATE_INVALID":    0,
		"ADDRESS_STATE_SUBMITTING": 1,
		"ADDRESS_STATE_SUBMITTED":  2,
		"ADDRESS_STATE_COMPLETED":  3,
	}
)

func (x AddressState) Enum() *AddressState {
	p := new(AddressState)
	*p = x
	return p
}

func (x AddressState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressState) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[3].Descriptor()
}

func (AddressState) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[3]
}

func (x AddressState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressState.Descriptor instead.
func (AddressState) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{3}
}

// TransactionState is a state of transaction.
type TransactionState int32

const (
	TransactionState_TRANSACTION_STATE_INVALID    TransactionState = 0
	TransactionState_TRANSACTION_STATE_SIGNING    TransactionState = 1  // Waiting for sign
	TransactionState_TRANSACTION_STATE_SIGNED     TransactionState = 2  // Transaction was Signed
	TransactionState_TRANSACTION_STATE_REVIEWING  TransactionState = 3  // Waiting for review
	TransactionState_TRANSACTION_STATE_REVIEWED   TransactionState = 4  // Transaction was reviewd
	TransactionState_TRANSACTION_STATE_SUBMITTING TransactionState = 5  // Waiting for submit
	TransactionState_TRANSACTION_STATE_SUBMITTED  TransactionState = 6  // Transaction was submitted
	TransactionState_TRANSACTION_STATE_CANCELLING TransactionState = 8  // Waiting for cancel
	TransactionState_TRANSACTION_STATE_CANCELLED  TransactionState = 7  // Transaction was cancelled
	TransactionState_TRANSACTION_STATE_APPROVING  TransactionState = 9  // Waiting for approve
	TransactionState_TRANSACTION_STATE_APPROVED   TransactionState = 10 // Transaction was approved
)

// Enum value maps for TransactionState.
var (
	TransactionState_name = map[int32]string{
		0:  "TRANSACTION_STATE_INVALID",
		1:  "TRANSACTION_STATE_SIGNING",
		2:  "TRANSACTION_STATE_SIGNED",
		3:  "TRANSACTION_STATE_REVIEWING",
		4:  "TRANSACTION_STATE_REVIEWED",
		5:  "TRANSACTION_STATE_SUBMITTING",
		6:  "TRANSACTION_STATE_SUBMITTED",
		8:  "TRANSACTION_STATE_CANCELLING",
		7:  "TRANSACTION_STATE_CANCELLED",
		9:  "TRANSACTION_STATE_APPROVING",
		10: "TRANSACTION_STATE_APPROVED",
	}
	TransactionState_value = map[string]int32{
		"TRANSACTION_STATE_INVALID":    0,
		"TRANSACTION_STATE_SIGNING":    1,
		"TRANSACTION_STATE_SIGNED":     2,
		"TRANSACTION_STATE_REVIEWING":  3,
		"TRANSACTION_STATE_REVIEWED":   4,
		"TRANSACTION_STATE_SUBMITTING": 5,
		"TRANSACTION_STATE_SUBMITTED":  6,
		"TRANSACTION_STATE_CANCELLING": 8,
		"TRANSACTION_STATE_CANCELLED":  7,
		"TRANSACTION_STATE_APPROVING":  9,
		"TRANSACTION_STATE_APPROVED":   10,
	}
)

func (x TransactionState) Enum() *TransactionState {
	p := new(TransactionState)
	*p = x
	return p
}

func (x TransactionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionState) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[4].Descriptor()
}

func (TransactionState) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[4]
}

func (x TransactionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionState.Descriptor instead.
func (TransactionState) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{4}
}

// AccountType is a type of role
type AccountType int32

const (
	AccountType_ACCOUNT_TYPE_INVALID         AccountType = 0
	AccountType_ACCOUNT_TYPE_USER            AccountType = 1 // User
	AccountType_ACCOUNT_TYPE_SERVICE_ACCOUNT AccountType = 2 // Service Account
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0: "ACCOUNT_TYPE_INVALID",
		1: "ACCOUNT_TYPE_USER",
		2: "ACCOUNT_TYPE_SERVICE_ACCOUNT",
	}
	AccountType_value = map[string]int32{
		"ACCOUNT_TYPE_INVALID":         0,
		"ACCOUNT_TYPE_USER":            1,
		"ACCOUNT_TYPE_SERVICE_ACCOUNT": 2,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[5].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[5]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{5}
}

// ExecutorType indicates who executes programs
type ExecutorType int32

const (
	ExecutorType_EXECUTOR_TYPE_INVALID ExecutorType = 0
	ExecutorType_EXECUTOR_TYPE_USER    ExecutorType = 1 // User
	ExecutorType_EXECUTOR_TYPE_SYSTEM  ExecutorType = 2 // Pub/Sub etc.
)

// Enum value maps for ExecutorType.
var (
	ExecutorType_name = map[int32]string{
		0: "EXECUTOR_TYPE_INVALID",
		1: "EXECUTOR_TYPE_USER",
		2: "EXECUTOR_TYPE_SYSTEM",
	}
	ExecutorType_value = map[string]int32{
		"EXECUTOR_TYPE_INVALID": 0,
		"EXECUTOR_TYPE_USER":    1,
		"EXECUTOR_TYPE_SYSTEM":  2,
	}
)

func (x ExecutorType) Enum() *ExecutorType {
	p := new(ExecutorType)
	*p = x
	return p
}

func (x ExecutorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutorType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[6].Descriptor()
}

func (ExecutorType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[6]
}

func (x ExecutorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutorType.Descriptor instead.
func (ExecutorType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{6}
}

// UserState is a state of user.
type UserState int32

const (
	UserState_USER_STATE_INVALID     UserState = 0
	UserState_USER_STATE_UNCONFIRMED UserState = 1
	UserState_USER_STATE_CONFIRMED   UserState = 2
	UserState_USER_STATE_DEACTIVATED UserState = 3
)

// Enum value maps for UserState.
var (
	UserState_name = map[int32]string{
		0: "USER_STATE_INVALID",
		1: "USER_STATE_UNCONFIRMED",
		2: "USER_STATE_CONFIRMED",
		3: "USER_STATE_DEACTIVATED",
	}
	UserState_value = map[string]int32{
		"USER_STATE_INVALID":     0,
		"USER_STATE_UNCONFIRMED": 1,
		"USER_STATE_CONFIRMED":   2,
		"USER_STATE_DEACTIVATED": 3,
	}
)

func (x UserState) Enum() *UserState {
	p := new(UserState)
	*p = x
	return p
}

func (x UserState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserState) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[7].Descriptor()
}

func (UserState) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[7]
}

func (x UserState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserState.Descriptor instead.
func (UserState) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{7}
}

// Role is a type of role
type RoleType int32

const (
	RoleType_ROLE_TYPE_INVALID           RoleType = 0
	RoleType_ROLE_TYPE_ORG_MANAGER       RoleType = 1 // Manager of Organization
	RoleType_ROLE_TYPE_ORG_SIGNER        RoleType = 2 // Signer which can sign transaction
	RoleType_ROLE_TYPE_ORG_VALIDATOR     RoleType = 3 // Validator which can validate transaction
	RoleType_ROLE_TYPE_ORG_VIEWER        RoleType = 4 // Viewer
	RoleType_ROLE_TYPE_ORG_DEVELOPER     RoleType = 5 // Developer which manage service-account
	RoleType_ROLE_TYPE_HOT_WALLET_ADMIN  RoleType = 6 // Service Account which manage hot wallet
	RoleType_ROLE_TYPE_HOT_WALLET_VIEWER RoleType = 7 // Service Account which can only get
)

// Enum value maps for RoleType.
var (
	RoleType_name = map[int32]string{
		0: "ROLE_TYPE_INVALID",
		1: "ROLE_TYPE_ORG_MANAGER",
		2: "ROLE_TYPE_ORG_SIGNER",
		3: "ROLE_TYPE_ORG_VALIDATOR",
		4: "ROLE_TYPE_ORG_VIEWER",
		5: "ROLE_TYPE_ORG_DEVELOPER",
		6: "ROLE_TYPE_HOT_WALLET_ADMIN",
		7: "ROLE_TYPE_HOT_WALLET_VIEWER",
	}
	RoleType_value = map[string]int32{
		"ROLE_TYPE_INVALID":           0,
		"ROLE_TYPE_ORG_MANAGER":       1,
		"ROLE_TYPE_ORG_SIGNER":        2,
		"ROLE_TYPE_ORG_VALIDATOR":     3,
		"ROLE_TYPE_ORG_VIEWER":        4,
		"ROLE_TYPE_ORG_DEVELOPER":     5,
		"ROLE_TYPE_HOT_WALLET_ADMIN":  6,
		"ROLE_TYPE_HOT_WALLET_VIEWER": 7,
	}
)

func (x RoleType) Enum() *RoleType {
	p := new(RoleType)
	*p = x
	return p
}

func (x RoleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoleType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[8].Descriptor()
}

func (RoleType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[8]
}

func (x RoleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoleType.Descriptor instead.
func (RoleType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{8}
}

// ResourceType is a target type of role
type ResourceType int32

const (
	ResourceType_RESOURCE_TYPE_INVALID      ResourceType = 0
	ResourceType_RESOURCE_TYPE_WALLET       ResourceType = 1
	ResourceType_RESOURCE_TYPE_ORGANIZATION ResourceType = 2
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_INVALID",
		1: "RESOURCE_TYPE_WALLET",
		2: "RESOURCE_TYPE_ORGANIZATION",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_INVALID":      0,
		"RESOURCE_TYPE_WALLET":       1,
		"RESOURCE_TYPE_ORGANIZATION": 2,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[9].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[9]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{9}
}

// TokenType is a type of token.
type TokenType int32

const (
	TokenType_TOKEN_TYPE_INVALID               TokenType = 0
	TokenType_TOKEN_TYPE_LOGIN_TOKEN           TokenType = 1
	TokenType_TOKEN_TYPE_MAIL_TOKEN            TokenType = 2
	TokenType_TOKEN_TYPE_PASSWORD_RESET_TOKEN  TokenType = 3
	TokenType_TOKEN_TYPE_PASSWORD_UPDATE_TOKEN TokenType = 4
	TokenType_TOKEN_TYPE_SIGNUP_TOKEN          TokenType = 5
	TokenType_TOKEN_TYPE_REFRESH_TOKEN         TokenType = 6
)

// Enum value maps for TokenType.
var (
	TokenType_name = map[int32]string{
		0: "TOKEN_TYPE_INVALID",
		1: "TOKEN_TYPE_LOGIN_TOKEN",
		2: "TOKEN_TYPE_MAIL_TOKEN",
		3: "TOKEN_TYPE_PASSWORD_RESET_TOKEN",
		4: "TOKEN_TYPE_PASSWORD_UPDATE_TOKEN",
		5: "TOKEN_TYPE_SIGNUP_TOKEN",
		6: "TOKEN_TYPE_REFRESH_TOKEN",
	}
	TokenType_value = map[string]int32{
		"TOKEN_TYPE_INVALID":               0,
		"TOKEN_TYPE_LOGIN_TOKEN":           1,
		"TOKEN_TYPE_MAIL_TOKEN":            2,
		"TOKEN_TYPE_PASSWORD_RESET_TOKEN":  3,
		"TOKEN_TYPE_PASSWORD_UPDATE_TOKEN": 4,
		"TOKEN_TYPE_SIGNUP_TOKEN":          5,
		"TOKEN_TYPE_REFRESH_TOKEN":         6,
	}
)

func (x TokenType) Enum() *TokenType {
	p := new(TokenType)
	*p = x
	return p
}

func (x TokenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[10].Descriptor()
}

func (TokenType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[10]
}

func (x TokenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenType.Descriptor instead.
func (TokenType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{10}
}

// PolicyType is a type of policy.
type PolicyType int32

const (
	PolicyType_POLICY_TYPE_INVALID            PolicyType = 0
	PolicyType_POLICY_TYPE_HOT_WALLET_POLICY  PolicyType = 1
	PolicyType_POLICY_TYPE_COLD_WALLET_POLICY PolicyType = 2
)

// Enum value maps for PolicyType.
var (
	PolicyType_name = map[int32]string{
		0: "POLICY_TYPE_INVALID",
		1: "POLICY_TYPE_HOT_WALLET_POLICY",
		2: "POLICY_TYPE_COLD_WALLET_POLICY",
	}
	PolicyType_value = map[string]int32{
		"POLICY_TYPE_INVALID":            0,
		"POLICY_TYPE_HOT_WALLET_POLICY":  1,
		"POLICY_TYPE_COLD_WALLET_POLICY": 2,
	}
)

func (x PolicyType) Enum() *PolicyType {
	p := new(PolicyType)
	*p = x
	return p
}

func (x PolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[11].Descriptor()
}

func (PolicyType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[11]
}

func (x PolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyType.Descriptor instead.
func (PolicyType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{11}
}

// TransferLimitType is a type of role
type TransferLimitType int32

const (
	TransferLimitType_TRANSFER_LIMIT_TYPE_INVALID  TransferLimitType = 0
	TransferLimitType_TRANSFER_LIMIT_TYPE_HOURLY   TransferLimitType = 1
	TransferLimitType_TRANSFER_LIMIT_TYPE_DAILY    TransferLimitType = 2
	TransferLimitType_TRANSFER_LIMIT_TYPE_ONE_TIME TransferLimitType = 3
)

// Enum value maps for TransferLimitType.
var (
	TransferLimitType_name = map[int32]string{
		0: "TRANSFER_LIMIT_TYPE_INVALID",
		1: "TRANSFER_LIMIT_TYPE_HOURLY",
		2: "TRANSFER_LIMIT_TYPE_DAILY",
		3: "TRANSFER_LIMIT_TYPE_ONE_TIME",
	}
	TransferLimitType_value = map[string]int32{
		"TRANSFER_LIMIT_TYPE_INVALID":  0,
		"TRANSFER_LIMIT_TYPE_HOURLY":   1,
		"TRANSFER_LIMIT_TYPE_DAILY":    2,
		"TRANSFER_LIMIT_TYPE_ONE_TIME": 3,
	}
)

func (x TransferLimitType) Enum() *TransferLimitType {
	p := new(TransferLimitType)
	*p = x
	return p
}

func (x TransferLimitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferLimitType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[12].Descriptor()
}

func (TransferLimitType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[12]
}

func (x TransferLimitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferLimitType.Descriptor instead.
func (TransferLimitType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{12}
}

// NotificationType is a type of notification
type NotificationType int32

const (
	NotificationType_NOTIFICATION_TYPE_INVALID                               NotificationType = 0
	NotificationType_NOTIFICATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST         NotificationType = 1
	NotificationType_NOTIFICATION_TYPE_WALLET_VALIDATOR_APPROVE_REQUEST      NotificationType = 2
	NotificationType_NOTIFICATION_TYPE_WALLET_ACTIVATE_FAILED                NotificationType = 3
	NotificationType_NOTIFICATION_TYPE_WALLET_CANCELLED                      NotificationType = 4
	NotificationType_NOTIFICATION_TYPE_WALLET_COMPLETED                      NotificationType = 5
	NotificationType_NOTIFICATION_TYPE_WALLET_FAILED                         NotificationType = 6
	NotificationType_NOTIFICATION_TYPE_WALLET_ADDRESS_APPROVE_REQUEST        NotificationType = 23
	NotificationType_NOTIFICATION_TYPE_WALLET_XRP_ACTIVATE_REQUEST           NotificationType = 24
	NotificationType_NOTIFICATION_TYPE_WALLET_MULTISIG_CONFIG_REQUEST        NotificationType = 25
	NotificationType_NOTIFICATION_TYPE_WALLET_MANAGER_TRANSACTION_REQUEST    NotificationType = 26
	NotificationType_NOTIFICATION_TYPE_WALLET_VALIDATOR_CHANGE_REQUEST       NotificationType = 27
	NotificationType_NOTIFICATION_TYPE_TRANSACTION_SIGNER_APPROVE_REQUEST    NotificationType = 7
	NotificationType_NOTIFICATION_TYPE_TRANSACTION_VALIDATOR_APPROVE_REQUEST NotificationType = 8
	NotificationType_NOTIFICATION_TYPE_TRANSACTION_READY                     NotificationType = 22
	NotificationType_NOTIFICATION_TYPE_TRANSACTION_SUBMITTED                 NotificationType = 9
	NotificationType_NOTIFICATION_TYPE_TRANSACTION_CANCELLED                 NotificationType = 10
	NotificationType_NOTIFICATION_TYPE_TRANSACTION_RESENT                    NotificationType = 28
	NotificationType_NOTIFICATION_TYPE_TRANSFER_SEND_COMPLETED               NotificationType = 11
	NotificationType_NOTIFICATION_TYPE_TRANSFER_SEND_FAILED                  NotificationType = 12
	NotificationType_NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPLETED            NotificationType = 13
	NotificationType_NOTIFICATION_TYPE_TRANSFER_RECEIVE_FAILED               NotificationType = 14
	NotificationType_NOTIFICATION_TYPE_ADDRESS_APPROVE_REQUEST               NotificationType = 15
	NotificationType_NOTIFICATION_TYPE_ADDRESS_COMPLETED                     NotificationType = 16
	NotificationType_NOTIFICATION_TYPE_ADDRESS_CANCELLED                     NotificationType = 17
	NotificationType_NOTIFICATION_TYPE_TRANSFERLIMIT_APPROVE_REQUEST         NotificationType = 18
	NotificationType_NOTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED               NotificationType = 19
	NotificationType_NOTIFICATION_TYPE_TRANSFERLIMIT_CANCELLED               NotificationType = 20
	NotificationType_NOTIFICATION_TYPE_WHITELIST_DETACH_REQUEST              NotificationType = 21
)

// Enum value maps for NotificationType.
var (
	NotificationType_name = map[int32]string{
		0:  "NOTIFICATION_TYPE_INVALID",
		1:  "NOTIFICATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST",
		2:  "NOTIFICATION_TYPE_WALLET_VALIDATOR_APPROVE_REQUEST",
		3:  "NOTIFICATION_TYPE_WALLET_ACTIVATE_FAILED",
		4:  "NOTIFICATION_TYPE_WALLET_CANCELLED",
		5:  "NOTIFICATION_TYPE_WALLET_COMPLETED",
		6:  "NOTIFICATION_TYPE_WALLET_FAILED",
		23: "NOTIFICATION_TYPE_WALLET_ADDRESS_APPROVE_REQUEST",
		24: "NOTIFICATION_TYPE_WALLET_XRP_ACTIVATE_REQUEST",
		25: "NOTIFICATION_TYPE_WALLET_MULTISIG_CONFIG_REQUEST",
		26: "NOTIFICATION_TYPE_WALLET_MANAGER_TRANSACTION_REQUEST",
		27: "NOTIFICATION_TYPE_WALLET_VALIDATOR_CHANGE_REQUEST",
		7:  "NOTIFICATION_TYPE_TRANSACTION_SIGNER_APPROVE_REQUEST",
		8:  "NOTIFICATION_TYPE_TRANSACTION_VALIDATOR_APPROVE_REQUEST",
		22: "NOTIFICATION_TYPE_TRANSACTION_READY",
		9:  "NOTIFICATION_TYPE_TRANSACTION_SUBMITTED",
		10: "NOTIFICATION_TYPE_TRANSACTION_CANCELLED",
		28: "NOTIFICATION_TYPE_TRANSACTION_RESENT",
		11: "NOTIFICATION_TYPE_TRANSFER_SEND_COMPLETED",
		12: "NOTIFICATION_TYPE_TRANSFER_SEND_FAILED",
		13: "NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPLETED",
		14: "NOTIFICATION_TYPE_TRANSFER_RECEIVE_FAILED",
		15: "NOTIFICATION_TYPE_ADDRESS_APPROVE_REQUEST",
		16: "NOTIFICATION_TYPE_ADDRESS_COMPLETED",
		17: "NOTIFICATION_TYPE_ADDRESS_CANCELLED",
		18: "NOTIFICATION_TYPE_TRANSFERLIMIT_APPROVE_REQUEST",
		19: "NOTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED",
		20: "NOTIFICATION_TYPE_TRANSFERLIMIT_CANCELLED",
		21: "NOTIFICATION_TYPE_WHITELIST_DETACH_REQUEST",
	}
	NotificationType_value = map[string]int32{
		"NOTIFICATION_TYPE_INVALID":                               0,
		"NOTIFICATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST":         1,
		"NOTIFICATION_TYPE_WALLET_VALIDATOR_APPROVE_REQUEST":      2,
		"NOTIFICATION_TYPE_WALLET_ACTIVATE_FAILED":                3,
		"NOTIFICATION_TYPE_WALLET_CANCELLED":                      4,
		"NOTIFICATION_TYPE_WALLET_COMPLETED":                      5,
		"NOTIFICATION_TYPE_WALLET_FAILED":                         6,
		"NOTIFICATION_TYPE_WALLET_ADDRESS_APPROVE_REQUEST":        23,
		"NOTIFICATION_TYPE_WALLET_XRP_ACTIVATE_REQUEST":           24,
		"NOTIFICATION_TYPE_WALLET_MULTISIG_CONFIG_REQUEST":        25,
		"NOTIFICATION_TYPE_WALLET_MANAGER_TRANSACTION_REQUEST":    26,
		"NOTIFICATION_TYPE_WALLET_VALIDATOR_CHANGE_REQUEST":       27,
		"NOTIFICATION_TYPE_TRANSACTION_SIGNER_APPROVE_REQUEST":    7,
		"NOTIFICATION_TYPE_TRANSACTION_VALIDATOR_APPROVE_REQUEST": 8,
		"NOTIFICATION_TYPE_TRANSACTION_READY":                     22,
		"NOTIFICATION_TYPE_TRANSACTION_SUBMITTED":                 9,
		"NOTIFICATION_TYPE_TRANSACTION_CANCELLED":                 10,
		"NOTIFICATION_TYPE_TRANSACTION_RESENT":                    28,
		"NOTIFICATION_TYPE_TRANSFER_SEND_COMPLETED":               11,
		"NOTIFICATION_TYPE_TRANSFER_SEND_FAILED":                  12,
		"NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPLETED":            13,
		"NOTIFICATION_TYPE_TRANSFER_RECEIVE_FAILED":               14,
		"NOTIFICATION_TYPE_ADDRESS_APPROVE_REQUEST":               15,
		"NOTIFICATION_TYPE_ADDRESS_COMPLETED":                     16,
		"NOTIFICATION_TYPE_ADDRESS_CANCELLED":                     17,
		"NOTIFICATION_TYPE_TRANSFERLIMIT_APPROVE_REQUEST":         18,
		"NOTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED":               19,
		"NOTIFICATION_TYPE_TRANSFERLIMIT_CANCELLED":               20,
		"NOTIFICATION_TYPE_WHITELIST_DETACH_REQUEST":              21,
	}
)

func (x NotificationType) Enum() *NotificationType {
	p := new(NotificationType)
	*p = x
	return p
}

func (x NotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[13].Descriptor()
}

func (NotificationType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[13]
}

func (x NotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationType.Descriptor instead.
func (NotificationType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{13}
}

// AuditLogGroup is a enum of AuditLogGroup
type AuditLogGroup int32

const (
	AuditLogGroup_AUDIT_LOG_GROUP_INVALID         AuditLogGroup = 0
	AuditLogGroup_AUDIT_LOG_GROUP_LOGIN           AuditLogGroup = 1
	AuditLogGroup_AUDIT_LOG_GROUP_ACCOUNT         AuditLogGroup = 2
	AuditLogGroup_AUDIT_LOG_GROUP_SERVICE_ACCOUNT AuditLogGroup = 3
	AuditLogGroup_AUDIT_LOG_GROUP_WALLET          AuditLogGroup = 4
	AuditLogGroup_AUDIT_LOG_GROUP_TRANSACTION     AuditLogGroup = 5
	AuditLogGroup_AUDIT_LOG_GROUP_POLICY          AuditLogGroup = 6
	AuditLogGroup_AUDIT_LOG_GROUP_WALLET_GROUP    AuditLogGroup = 7
	AuditLogGroup_AUDIT_LOG_GROUP_MAIL            AuditLogGroup = 8
)

// Enum value maps for AuditLogGroup.
var (
	AuditLogGroup_name = map[int32]string{
		0: "AUDIT_LOG_GROUP_INVALID",
		1: "AUDIT_LOG_GROUP_LOGIN",
		2: "AUDIT_LOG_GROUP_ACCOUNT",
		3: "AUDIT_LOG_GROUP_SERVICE_ACCOUNT",
		4: "AUDIT_LOG_GROUP_WALLET",
		5: "AUDIT_LOG_GROUP_TRANSACTION",
		6: "AUDIT_LOG_GROUP_POLICY",
		7: "AUDIT_LOG_GROUP_WALLET_GROUP",
		8: "AUDIT_LOG_GROUP_MAIL",
	}
	AuditLogGroup_value = map[string]int32{
		"AUDIT_LOG_GROUP_INVALID":         0,
		"AUDIT_LOG_GROUP_LOGIN":           1,
		"AUDIT_LOG_GROUP_ACCOUNT":         2,
		"AUDIT_LOG_GROUP_SERVICE_ACCOUNT": 3,
		"AUDIT_LOG_GROUP_WALLET":          4,
		"AUDIT_LOG_GROUP_TRANSACTION":     5,
		"AUDIT_LOG_GROUP_POLICY":          6,
		"AUDIT_LOG_GROUP_WALLET_GROUP":    7,
		"AUDIT_LOG_GROUP_MAIL":            8,
	}
)

func (x AuditLogGroup) Enum() *AuditLogGroup {
	p := new(AuditLogGroup)
	*p = x
	return p
}

func (x AuditLogGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditLogGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[14].Descriptor()
}

func (AuditLogGroup) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[14]
}

func (x AuditLogGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditLogGroup.Descriptor instead.
func (AuditLogGroup) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{14}
}

// AuditLogType is a type of AuditLog
type AuditLogType int32

const (
	AuditLogType_AUDIT_LOG_TYPE_INVALID                                   AuditLogType = 0
	AuditLogType_AUDIT_LOG_TYPE_LOGIN                                     AuditLogType = 1
	AuditLogType_AUDIT_LOG_TYPE_LOGIN_FAIL                                AuditLogType = 2
	AuditLogType_AUDIT_LOG_TYPE_2FA_FAIL                                  AuditLogType = 50
	AuditLogType_AUDIT_LOG_TYPE_LOGOUT                                    AuditLogType = 3
	AuditLogType_AUDIT_LOG_TYPE_MAIL_SETTINGS_CHANGE                      AuditLogType = 80
	AuditLogType_AUDIT_LOG_TYPE_WALLET_CREATE                             AuditLogType = 4
	AuditLogType_AUDIT_LOG_TYPE_WALLET_APPROVE                            AuditLogType = 5
	AuditLogType_AUDIT_LOG_TYPE_WALLET_CANCEL                             AuditLogType = 6
	AuditLogType_AUDIT_LOG_TYPE_WALLET_REGISTER_PUBKEY                    AuditLogType = 7
	AuditLogType_AUDIT_LOG_TYPE_WALLET_ARCHIVE                            AuditLogType = 8
	AuditLogType_AUDIT_LOG_TYPE_WALLET_UNARCHIVE                          AuditLogType = 9
	AuditLogType_AUDIT_LOG_TYPE_WALLET_NAME_CHANGE                        AuditLogType = 10
	AuditLogType_AUDIT_LOG_TYPE_WALLET_POLICY_CHANGE                      AuditLogType = 11
	AuditLogType_AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_REQUEST               AuditLogType = 12
	AuditLogType_AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_APPROVE               AuditLogType = 13
	AuditLogType_AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_CANCEL                AuditLogType = 14
	AuditLogType_AUDIT_LOG_TYPE_WALLET_ADDRESS_UPLOAD                     AuditLogType = 51
	AuditLogType_AUDIT_LOG_TYPE_WALLET_ADDRESS_DOWNLOAD                   AuditLogType = 52
	AuditLogType_AUDIT_LOG_TYPE_WALLET_ADDRESS_DELETE                     AuditLogType = 53
	AuditLogType_AUDIT_LOG_TYPE_WALLET_VALIDATOR_CHANGE                   AuditLogType = 60
	AuditLogType_AUDIT_LOG_TYPE_WALLET_VALIDATOR_APPROVE                  AuditLogType = 61
	AuditLogType_AUDIT_LOG_TYPE_WALLET_VALIDATOR_CANCEL                   AuditLogType = 62
	AuditLogType_AUDIT_LOG_TYPE_WALLET_DESTINATION_WALLET_CHANGE          AuditLogType = 63
	AuditLogType_AUDIT_LOG_TYPE_WALLET_GROUP_CREATE                       AuditLogType = 54
	AuditLogType_AUDIT_LOG_TYPE_WALLET_GROUP_NAME_CHANGE                  AuditLogType = 55
	AuditLogType_AUDIT_LOG_TYPE_WALLET_GROUP_CHANGE                       AuditLogType = 56
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_CREATE                        AuditLogType = 15
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_APPROVE                       AuditLogType = 16
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_CANCEL                        AuditLogType = 17
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_REGISTER_SIGNATURE            AuditLogType = 18
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_SUBMIT                        AuditLogType = 19
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_RESEND                        AuditLogType = 79
	AuditLogType_AUDIT_LOG_TYPE_ACCOUNT_PASSWORD_CHANGE                   AuditLogType = 20
	AuditLogType_AUDIT_LOG_TYPE_ACCOUNT_EMAIL_CHANGE                      AuditLogType = 21
	AuditLogType_AUDIT_LOG_TYPE_ACCOUNT_INVITE                            AuditLogType = 22
	AuditLogType_AUDIT_LOG_TYPE_ACCOUNT_ARCHIVE                           AuditLogType = 23
	AuditLogType_AUDIT_LOG_TYPE_ACCOUNT_UNARCHIVE                         AuditLogType = 24
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CREATE                    AuditLogType = 25
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CHANGE_PERMISSION         AuditLogType = 26
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_ACTIVATE                  AuditLogType = 27
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_INACTIVE                  AuditLogType = 28
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_DELETE                    AuditLogType = 29
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_CREATE                AuditLogType = 30
	AuditLogType_AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_DELETE                AuditLogType = 31
	AuditLogType_AUDIT_LOG_TYPE_POLICY_ADDRESS_CREATE                     AuditLogType = 32
	AuditLogType_AUDIT_LOG_TYPE_POLICY_ADDRESS_DELETE                     AuditLogType = 33
	AuditLogType_AUDIT_LOG_TYPE_POLICY_ADDRESS_APPROVE                    AuditLogType = 34
	AuditLogType_AUDIT_LOG_TYPE_POLICY_ADDRESS_CANCEL                     AuditLogType = 35
	AuditLogType_AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CREATE              AuditLogType = 36
	AuditLogType_AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CHANGE              AuditLogType = 37
	AuditLogType_AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_DELETE              AuditLogType = 38
	AuditLogType_AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_APPROVE             AuditLogType = 39
	AuditLogType_AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CANCEL              AuditLogType = 40
	AuditLogType_AUDIT_LOG_TYPE_POLICY_WHITELIST_CREATE                   AuditLogType = 41
	AuditLogType_AUDIT_LOG_TYPE_POLICY_WHITELIST_CHANGE                   AuditLogType = 42
	AuditLogType_AUDIT_LOG_TYPE_POLICY_WHITELIST_DELETE                   AuditLogType = 43
	AuditLogType_AUDIT_LOG_TYPE_POLICY_POLICY_CREATE                      AuditLogType = 44
	AuditLogType_AUDIT_LOG_TYPE_POLICY_POLICY_CHANGE                      AuditLogType = 45
	AuditLogType_AUDIT_LOG_TYPE_POLICY_POLICY_DELETE                      AuditLogType = 46
	AuditLogType_AUDIT_LOG_TYPE_POLICY_REQUEST_NO_WHITELIST               AuditLogType = 47
	AuditLogType_AUDIT_LOG_TYPE_POLICY_APPROVE_NO_WHITELIST               AuditLogType = 48
	AuditLogType_AUDIT_LOG_TYPE_POLICY_CANCEL_NO_WHITELIST                AuditLogType = 49
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_CREATE               AuditLogType = 64
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_APPROVE              AuditLogType = 65
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_CANCEL               AuditLogType = 66
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_REGISTER_SIGNATURE   AuditLogType = 67
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_SUBMIT               AuditLogType = 68
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_CREATE             AuditLogType = 69
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_APPROVE            AuditLogType = 70
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_CANCEL             AuditLogType = 71
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_REGISTER_SIGNATURE AuditLogType = 72
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_SUBMIT             AuditLogType = 73
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_CREATE               AuditLogType = 74
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_APPROVE              AuditLogType = 75
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_CANCEL               AuditLogType = 76
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_REGISTER_SIGNATURE   AuditLogType = 77
	AuditLogType_AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_SUBMIT               AuditLogType = 78
)

// Enum value maps for AuditLogType.
var (
	AuditLogType_name = map[int32]string{
		0:  "AUDIT_LOG_TYPE_INVALID",
		1:  "AUDIT_LOG_TYPE_LOGIN",
		2:  "AUDIT_LOG_TYPE_LOGIN_FAIL",
		50: "AUDIT_LOG_TYPE_2FA_FAIL",
		3:  "AUDIT_LOG_TYPE_LOGOUT",
		80: "AUDIT_LOG_TYPE_MAIL_SETTINGS_CHANGE",
		4:  "AUDIT_LOG_TYPE_WALLET_CREATE",
		5:  "AUDIT_LOG_TYPE_WALLET_APPROVE",
		6:  "AUDIT_LOG_TYPE_WALLET_CANCEL",
		7:  "AUDIT_LOG_TYPE_WALLET_REGISTER_PUBKEY",
		8:  "AUDIT_LOG_TYPE_WALLET_ARCHIVE",
		9:  "AUDIT_LOG_TYPE_WALLET_UNARCHIVE",
		10: "AUDIT_LOG_TYPE_WALLET_NAME_CHANGE",
		11: "AUDIT_LOG_TYPE_WALLET_POLICY_CHANGE",
		12: "AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_REQUEST",
		13: "AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_APPROVE",
		14: "AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_CANCEL",
		51: "AUDIT_LOG_TYPE_WALLET_ADDRESS_UPLOAD",
		52: "AUDIT_LOG_TYPE_WALLET_ADDRESS_DOWNLOAD",
		53: "AUDIT_LOG_TYPE_WALLET_ADDRESS_DELETE",
		60: "AUDIT_LOG_TYPE_WALLET_VALIDATOR_CHANGE",
		61: "AUDIT_LOG_TYPE_WALLET_VALIDATOR_APPROVE",
		62: "AUDIT_LOG_TYPE_WALLET_VALIDATOR_CANCEL",
		63: "AUDIT_LOG_TYPE_WALLET_DESTINATION_WALLET_CHANGE",
		54: "AUDIT_LOG_TYPE_WALLET_GROUP_CREATE",
		55: "AUDIT_LOG_TYPE_WALLET_GROUP_NAME_CHANGE",
		56: "AUDIT_LOG_TYPE_WALLET_GROUP_CHANGE",
		15: "AUDIT_LOG_TYPE_TRANSACTION_CREATE",
		16: "AUDIT_LOG_TYPE_TRANSACTION_APPROVE",
		17: "AUDIT_LOG_TYPE_TRANSACTION_CANCEL",
		18: "AUDIT_LOG_TYPE_TRANSACTION_REGISTER_SIGNATURE",
		19: "AUDIT_LOG_TYPE_TRANSACTION_SUBMIT",
		79: "AUDIT_LOG_TYPE_TRANSACTION_RESEND",
		20: "AUDIT_LOG_TYPE_ACCOUNT_PASSWORD_CHANGE",
		21: "AUDIT_LOG_TYPE_ACCOUNT_EMAIL_CHANGE",
		22: "AUDIT_LOG_TYPE_ACCOUNT_INVITE",
		23: "AUDIT_LOG_TYPE_ACCOUNT_ARCHIVE",
		24: "AUDIT_LOG_TYPE_ACCOUNT_UNARCHIVE",
		25: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CREATE",
		26: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CHANGE_PERMISSION",
		27: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_ACTIVATE",
		28: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_INACTIVE",
		29: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_DELETE",
		30: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_CREATE",
		31: "AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_DELETE",
		32: "AUDIT_LOG_TYPE_POLICY_ADDRESS_CREATE",
		33: "AUDIT_LOG_TYPE_POLICY_ADDRESS_DELETE",
		34: "AUDIT_LOG_TYPE_POLICY_ADDRESS_APPROVE",
		35: "AUDIT_LOG_TYPE_POLICY_ADDRESS_CANCEL",
		36: "AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CREATE",
		37: "AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CHANGE",
		38: "AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_DELETE",
		39: "AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_APPROVE",
		40: "AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CANCEL",
		41: "AUDIT_LOG_TYPE_POLICY_WHITELIST_CREATE",
		42: "AUDIT_LOG_TYPE_POLICY_WHITELIST_CHANGE",
		43: "AUDIT_LOG_TYPE_POLICY_WHITELIST_DELETE",
		44: "AUDIT_LOG_TYPE_POLICY_POLICY_CREATE",
		45: "AUDIT_LOG_TYPE_POLICY_POLICY_CHANGE",
		46: "AUDIT_LOG_TYPE_POLICY_POLICY_DELETE",
		47: "AUDIT_LOG_TYPE_POLICY_REQUEST_NO_WHITELIST",
		48: "AUDIT_LOG_TYPE_POLICY_APPROVE_NO_WHITELIST",
		49: "AUDIT_LOG_TYPE_POLICY_CANCEL_NO_WHITELIST",
		64: "AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_CREATE",
		65: "AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_APPROVE",
		66: "AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_CANCEL",
		67: "AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_REGISTER_SIGNATURE",
		68: "AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_SUBMIT",
		69: "AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_CREATE",
		70: "AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_APPROVE",
		71: "AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_CANCEL",
		72: "AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_REGISTER_SIGNATURE",
		73: "AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_SUBMIT",
		74: "AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_CREATE",
		75: "AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_APPROVE",
		76: "AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_CANCEL",
		77: "AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_REGISTER_SIGNATURE",
		78: "AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_SUBMIT",
	}
	AuditLogType_value = map[string]int32{
		"AUDIT_LOG_TYPE_INVALID":                                   0,
		"AUDIT_LOG_TYPE_LOGIN":                                     1,
		"AUDIT_LOG_TYPE_LOGIN_FAIL":                                2,
		"AUDIT_LOG_TYPE_2FA_FAIL":                                  50,
		"AUDIT_LOG_TYPE_LOGOUT":                                    3,
		"AUDIT_LOG_TYPE_MAIL_SETTINGS_CHANGE":                      80,
		"AUDIT_LOG_TYPE_WALLET_CREATE":                             4,
		"AUDIT_LOG_TYPE_WALLET_APPROVE":                            5,
		"AUDIT_LOG_TYPE_WALLET_CANCEL":                             6,
		"AUDIT_LOG_TYPE_WALLET_REGISTER_PUBKEY":                    7,
		"AUDIT_LOG_TYPE_WALLET_ARCHIVE":                            8,
		"AUDIT_LOG_TYPE_WALLET_UNARCHIVE":                          9,
		"AUDIT_LOG_TYPE_WALLET_NAME_CHANGE":                        10,
		"AUDIT_LOG_TYPE_WALLET_POLICY_CHANGE":                      11,
		"AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_REQUEST":               12,
		"AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_APPROVE":               13,
		"AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_CANCEL":                14,
		"AUDIT_LOG_TYPE_WALLET_ADDRESS_UPLOAD":                     51,
		"AUDIT_LOG_TYPE_WALLET_ADDRESS_DOWNLOAD":                   52,
		"AUDIT_LOG_TYPE_WALLET_ADDRESS_DELETE":                     53,
		"AUDIT_LOG_TYPE_WALLET_VALIDATOR_CHANGE":                   60,
		"AUDIT_LOG_TYPE_WALLET_VALIDATOR_APPROVE":                  61,
		"AUDIT_LOG_TYPE_WALLET_VALIDATOR_CANCEL":                   62,
		"AUDIT_LOG_TYPE_WALLET_DESTINATION_WALLET_CHANGE":          63,
		"AUDIT_LOG_TYPE_WALLET_GROUP_CREATE":                       54,
		"AUDIT_LOG_TYPE_WALLET_GROUP_NAME_CHANGE":                  55,
		"AUDIT_LOG_TYPE_WALLET_GROUP_CHANGE":                       56,
		"AUDIT_LOG_TYPE_TRANSACTION_CREATE":                        15,
		"AUDIT_LOG_TYPE_TRANSACTION_APPROVE":                       16,
		"AUDIT_LOG_TYPE_TRANSACTION_CANCEL":                        17,
		"AUDIT_LOG_TYPE_TRANSACTION_REGISTER_SIGNATURE":            18,
		"AUDIT_LOG_TYPE_TRANSACTION_SUBMIT":                        19,
		"AUDIT_LOG_TYPE_TRANSACTION_RESEND":                        79,
		"AUDIT_LOG_TYPE_ACCOUNT_PASSWORD_CHANGE":                   20,
		"AUDIT_LOG_TYPE_ACCOUNT_EMAIL_CHANGE":                      21,
		"AUDIT_LOG_TYPE_ACCOUNT_INVITE":                            22,
		"AUDIT_LOG_TYPE_ACCOUNT_ARCHIVE":                           23,
		"AUDIT_LOG_TYPE_ACCOUNT_UNARCHIVE":                         24,
		"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CREATE":                    25,
		"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CHANGE_PERMISSION":         26,
		"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_ACTIVATE":                  27,
		"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_INACTIVE":                  28,
		"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_DELETE":                    29,
		"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_CREATE":                30,
		"AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_DELETE":                31,
		"AUDIT_LOG_TYPE_POLICY_ADDRESS_CREATE":                     32,
		"AUDIT_LOG_TYPE_POLICY_ADDRESS_DELETE":                     33,
		"AUDIT_LOG_TYPE_POLICY_ADDRESS_APPROVE":                    34,
		"AUDIT_LOG_TYPE_POLICY_ADDRESS_CANCEL":                     35,
		"AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CREATE":              36,
		"AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CHANGE":              37,
		"AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_DELETE":              38,
		"AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_APPROVE":             39,
		"AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CANCEL":              40,
		"AUDIT_LOG_TYPE_POLICY_WHITELIST_CREATE":                   41,
		"AUDIT_LOG_TYPE_POLICY_WHITELIST_CHANGE":                   42,
		"AUDIT_LOG_TYPE_POLICY_WHITELIST_DELETE":                   43,
		"AUDIT_LOG_TYPE_POLICY_POLICY_CREATE":                      44,
		"AUDIT_LOG_TYPE_POLICY_POLICY_CHANGE":                      45,
		"AUDIT_LOG_TYPE_POLICY_POLICY_DELETE":                      46,
		"AUDIT_LOG_TYPE_POLICY_REQUEST_NO_WHITELIST":               47,
		"AUDIT_LOG_TYPE_POLICY_APPROVE_NO_WHITELIST":               48,
		"AUDIT_LOG_TYPE_POLICY_CANCEL_NO_WHITELIST":                49,
		"AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_CREATE":               64,
		"AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_APPROVE":              65,
		"AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_CANCEL":               66,
		"AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_REGISTER_SIGNATURE":   67,
		"AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_SUBMIT":               68,
		"AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_CREATE":             69,
		"AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_APPROVE":            70,
		"AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_CANCEL":             71,
		"AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_REGISTER_SIGNATURE": 72,
		"AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_SUBMIT":             73,
		"AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_CREATE":               74,
		"AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_APPROVE":              75,
		"AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_CANCEL":               76,
		"AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_REGISTER_SIGNATURE":   77,
		"AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_SUBMIT":               78,
	}
)

func (x AuditLogType) Enum() *AuditLogType {
	p := new(AuditLogType)
	*p = x
	return p
}

func (x AuditLogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditLogType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[15].Descriptor()
}

func (AuditLogType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[15]
}

func (x AuditLogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditLogType.Descriptor instead.
func (AuditLogType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{15}
}

// ErrDetailViolationType define violation type of
// errdetails.PreconditionFailure of grpc
type PreconditionFailureType int32

const (
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_INVALID PreconditionFailureType = 0
	// authenticator
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_MFA_REQUIRED                PreconditionFailureType = 1
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_MFA_NOT_REGISTERED          PreconditionFailureType = 2
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_USER_NOT_ACTIVE             PreconditionFailureType = 3
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_USER_IS_ARCHIVED            PreconditionFailureType = 4
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_EMAIL_IS_ALREADY_USED       PreconditionFailureType = 5
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_INVITATION_TOKEN_IS_INVALID PreconditionFailureType = 27
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_INVITATION_TOKEN_IS_EXPIRED PreconditionFailureType = 28
	// treasurer/gatekeeper
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_INSUFFICIENT_SPENDABLE_BALANCE                             PreconditionFailureType = 6
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_HOURLY_LIMIT_EXCEEDED                                      PreconditionFailureType = 7
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_DAILY_LIMIT_EXCEEDED                                       PreconditionFailureType = 8
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_ONETIME_LIMIT_EXCEEDED                                     PreconditionFailureType = 9
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_WALLET_NAME_IS_ALREADY_USED                                PreconditionFailureType = 10
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_WALLET_IS_CANCELED                                         PreconditionFailureType = 11
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_WALLET_IS_ARCHIVED                                         PreconditionFailureType = 12
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_TRANSACTION_IS_CANCELED                                    PreconditionFailureType = 13
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_PROPOSAL_ALREADY_EXISTS                                    PreconditionFailureType = 14
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_NO_RATE                                                    PreconditionFailureType = 15
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_WHITELIST_OF_BASEPOLICY                                    PreconditionFailureType = 16
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_CANNOT_ARCHIVE_WALLET_WITH_BALANCE                         PreconditionFailureType = 17
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_TEMPORARY_INCREASE_IN_FEERATE                              PreconditionFailureType = 18
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_INSUFFICIENT_FEE_ACCOUNT_BALANCE                           PreconditionFailureType = 20
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_CANNOT_FLUSH_BALANCE_DUE_TO_EXISTING_UNCONFIRMED_TRANSFERS PreconditionFailureType = 21
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_WALLET_STATE_IS_FLUSHING                                   PreconditionFailureType = 22
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_WALLET_FLUSH_SETTING_DOES_NOT_EXIST                        PreconditionFailureType = 23
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_TRANSACTION_ALREADY_CANCELED                               PreconditionFailureType = 24
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_TRANSACTION_ALREADY_SUBMITTED                              PreconditionFailureType = 25
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_CANNOT_OPERATE_TRANSACTION_DUE_TO_WALLET_STATE_IS_CREATING PreconditionFailureType = 26
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_TRANSACTION_INCLUDE_SELF_ADDRESS                           PreconditionFailureType = 29
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_WALLET_FLUSH_SETTING_DESTINATION_WALLET_ID_DOES_NOT_EXIST  PreconditionFailureType = 30
	// subscription
	PreconditionFailureType_PRECONDITION_FAILURE_TYPE_PROHIBITED_BY_SUBSCRIPTION PreconditionFailureType = 19
)

// Enum value maps for PreconditionFailureType.
var (
	PreconditionFailureType_name = map[int32]string{
		0:  "PRECONDITION_FAILURE_TYPE_INVALID",
		1:  "PRECONDITION_FAILURE_TYPE_MFA_REQUIRED",
		2:  "PRECONDITION_FAILURE_TYPE_MFA_NOT_REGISTERED",
		3:  "PRECONDITION_FAILURE_TYPE_USER_NOT_ACTIVE",
		4:  "PRECONDITION_FAILURE_TYPE_USER_IS_ARCHIVED",
		5:  "PRECONDITION_FAILURE_TYPE_EMAIL_IS_ALREADY_USED",
		27: "PRECONDITION_FAILURE_TYPE_INVITATION_TOKEN_IS_INVALID",
		28: "PRECONDITION_FAILURE_TYPE_INVITATION_TOKEN_IS_EXPIRED",
		6:  "PRECONDITION_FAILURE_TYPE_INSUFFICIENT_SPENDABLE_BALANCE",
		7:  "PRECONDITION_FAILURE_TYPE_HOURLY_LIMIT_EXCEEDED",
		8:  "PRECONDITION_FAILURE_TYPE_DAILY_LIMIT_EXCEEDED",
		9:  "PRECONDITION_FAILURE_TYPE_ONETIME_LIMIT_EXCEEDED",
		10: "PRECONDITION_FAILURE_TYPE_WALLET_NAME_IS_ALREADY_USED",
		11: "PRECONDITION_FAILURE_TYPE_WALLET_IS_CANCELED",
		12: "PRECONDITION_FAILURE_TYPE_WALLET_IS_ARCHIVED",
		13: "PRECONDITION_FAILURE_TYPE_TRANSACTION_IS_CANCELED",
		14: "PRECONDITION_FAILURE_TYPE_PROPOSAL_ALREADY_EXISTS",
		15: "PRECONDITION_FAILURE_TYPE_NO_RATE",
		16: "PRECONDITION_FAILURE_TYPE_WHITELIST_OF_BASEPOLICY",
		17: "PRECONDITION_FAILURE_TYPE_CANNOT_ARCHIVE_WALLET_WITH_BALANCE",
		18: "PRECONDITION_FAILURE_TYPE_TEMPORARY_INCREASE_IN_FEERATE",
		20: "PRECONDITION_FAILURE_TYPE_INSUFFICIENT_FEE_ACCOUNT_BALANCE",
		21: "PRECONDITION_FAILURE_TYPE_CANNOT_FLUSH_BALANCE_DUE_TO_EXISTING_UNCONFIRMED_TRANSFERS",
		22: "PRECONDITION_FAILURE_TYPE_WALLET_STATE_IS_FLUSHING",
		23: "PRECONDITION_FAILURE_TYPE_WALLET_FLUSH_SETTING_DOES_NOT_EXIST",
		24: "PRECONDITION_FAILURE_TYPE_TRANSACTION_ALREADY_CANCELED",
		25: "PRECONDITION_FAILURE_TYPE_TRANSACTION_ALREADY_SUBMITTED",
		26: "PRECONDITION_FAILURE_TYPE_CANNOT_OPERATE_TRANSACTION_DUE_TO_WALLET_STATE_IS_CREATING",
		29: "PRECONDITION_FAILURE_TYPE_TRANSACTION_INCLUDE_SELF_ADDRESS",
		30: "PRECONDITION_FAILURE_TYPE_WALLET_FLUSH_SETTING_DESTINATION_WALLET_ID_DOES_NOT_EXIST",
		19: "PRECONDITION_FAILURE_TYPE_PROHIBITED_BY_SUBSCRIPTION",
	}
	PreconditionFailureType_value = map[string]int32{
		"PRECONDITION_FAILURE_TYPE_INVALID":                                                    0,
		"PRECONDITION_FAILURE_TYPE_MFA_REQUIRED":                                               1,
		"PRECONDITION_FAILURE_TYPE_MFA_NOT_REGISTERED":                                         2,
		"PRECONDITION_FAILURE_TYPE_USER_NOT_ACTIVE":                                            3,
		"PRECONDITION_FAILURE_TYPE_USER_IS_ARCHIVED":                                           4,
		"PRECONDITION_FAILURE_TYPE_EMAIL_IS_ALREADY_USED":                                      5,
		"PRECONDITION_FAILURE_TYPE_INVITATION_TOKEN_IS_INVALID":                                27,
		"PRECONDITION_FAILURE_TYPE_INVITATION_TOKEN_IS_EXPIRED":                                28,
		"PRECONDITION_FAILURE_TYPE_INSUFFICIENT_SPENDABLE_BALANCE":                             6,
		"PRECONDITION_FAILURE_TYPE_HOURLY_LIMIT_EXCEEDED":                                      7,
		"PRECONDITION_FAILURE_TYPE_DAILY_LIMIT_EXCEEDED":                                       8,
		"PRECONDITION_FAILURE_TYPE_ONETIME_LIMIT_EXCEEDED":                                     9,
		"PRECONDITION_FAILURE_TYPE_WALLET_NAME_IS_ALREADY_USED":                                10,
		"PRECONDITION_FAILURE_TYPE_WALLET_IS_CANCELED":                                         11,
		"PRECONDITION_FAILURE_TYPE_WALLET_IS_ARCHIVED":                                         12,
		"PRECONDITION_FAILURE_TYPE_TRANSACTION_IS_CANCELED":                                    13,
		"PRECONDITION_FAILURE_TYPE_PROPOSAL_ALREADY_EXISTS":                                    14,
		"PRECONDITION_FAILURE_TYPE_NO_RATE":                                                    15,
		"PRECONDITION_FAILURE_TYPE_WHITELIST_OF_BASEPOLICY":                                    16,
		"PRECONDITION_FAILURE_TYPE_CANNOT_ARCHIVE_WALLET_WITH_BALANCE":                         17,
		"PRECONDITION_FAILURE_TYPE_TEMPORARY_INCREASE_IN_FEERATE":                              18,
		"PRECONDITION_FAILURE_TYPE_INSUFFICIENT_FEE_ACCOUNT_BALANCE":                           20,
		"PRECONDITION_FAILURE_TYPE_CANNOT_FLUSH_BALANCE_DUE_TO_EXISTING_UNCONFIRMED_TRANSFERS": 21,
		"PRECONDITION_FAILURE_TYPE_WALLET_STATE_IS_FLUSHING":                                   22,
		"PRECONDITION_FAILURE_TYPE_WALLET_FLUSH_SETTING_DOES_NOT_EXIST":                        23,
		"PRECONDITION_FAILURE_TYPE_TRANSACTION_ALREADY_CANCELED":                               24,
		"PRECONDITION_FAILURE_TYPE_TRANSACTION_ALREADY_SUBMITTED":                              25,
		"PRECONDITION_FAILURE_TYPE_CANNOT_OPERATE_TRANSACTION_DUE_TO_WALLET_STATE_IS_CREATING": 26,
		"PRECONDITION_FAILURE_TYPE_TRANSACTION_INCLUDE_SELF_ADDRESS":                           29,
		"PRECONDITION_FAILURE_TYPE_WALLET_FLUSH_SETTING_DESTINATION_WALLET_ID_DOES_NOT_EXIST":  30,
		"PRECONDITION_FAILURE_TYPE_PROHIBITED_BY_SUBSCRIPTION":                                 19,
	}
)

func (x PreconditionFailureType) Enum() *PreconditionFailureType {
	p := new(PreconditionFailureType)
	*p = x
	return p
}

func (x PreconditionFailureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreconditionFailureType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[16].Descriptor()
}

func (PreconditionFailureType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[16]
}

func (x PreconditionFailureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreconditionFailureType.Descriptor instead.
func (PreconditionFailureType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{16}
}

type ListFilterType int32

const (
	ListFilterType_LIST_FILTER_TYPE_INVALID               ListFilterType = 0
	ListFilterType_LIST_FILTER_TYPE_WALLET_ID             ListFilterType = 1
	ListFilterType_LIST_FILTER_TYPE_WALLET_NAME           ListFilterType = 2
	ListFilterType_LIST_FILTER_TYPE_WALLET_ADDRESS        ListFilterType = 3
	ListFilterType_LIST_FILTER_TYPE_TRANSACTION_ID        ListFilterType = 4
	ListFilterType_LIST_FILTER_TYPE_TRANSFER_ID           ListFilterType = 5
	ListFilterType_LIST_FILTER_TYPE_ADDRESS_NAME          ListFilterType = 6
	ListFilterType_LIST_FILTER_TYPE_ADDRESS               ListFilterType = 7
	ListFilterType_LIST_FILTER_TYPE_TXID                  ListFilterType = 8
	ListFilterType_LIST_FILTER_TYPE_OWNER_ID              ListFilterType = 9
	ListFilterType_LIST_FILTER_TYPE_WALLET_ID_CREATE_TIME ListFilterType = 10
	ListFilterType_LIST_FILTER_TYPE_POLICY_ID             ListFilterType = 11
	ListFilterType_LIST_FILTER_TYPE_POLICY_NAME           ListFilterType = 12
	ListFilterType_LIST_FILTER_TYPE_ADDRESS_ID            ListFilterType = 13
	ListFilterType_LIST_FILTER_TYPE_WHITELIST_ID          ListFilterType = 14
	ListFilterType_LIST_FILTER_TYPE_WHITELIST_NAME        ListFilterType = 15
	ListFilterType_LIST_FILTER_TYPE_TRANSFER_LIMIT_ID     ListFilterType = 16
	ListFilterType_LIST_FILTER_TYPE_TRANSFER_LIMIT_NAME   ListFilterType = 17
	ListFilterType_LIST_FILTER_TYPE_VALIDATOR_ID          ListFilterType = 18 // 例: validatorのpublic key
	ListFilterType_LIST_FILTER_TYPE_BLOCK_HASH            ListFilterType = 19
	ListFilterType_LIST_FILTER_TYPE_STAKING_VALIDATOR_ID  ListFilterType = 20 // db上のstaking_validator_id
	ListFilterType_LIST_FILTER_TYPE_STAKING_HISTORY_ID    ListFilterType = 21 // db上のstaking_history_id
)

// Enum value maps for ListFilterType.
var (
	ListFilterType_name = map[int32]string{
		0:  "LIST_FILTER_TYPE_INVALID",
		1:  "LIST_FILTER_TYPE_WALLET_ID",
		2:  "LIST_FILTER_TYPE_WALLET_NAME",
		3:  "LIST_FILTER_TYPE_WALLET_ADDRESS",
		4:  "LIST_FILTER_TYPE_TRANSACTION_ID",
		5:  "LIST_FILTER_TYPE_TRANSFER_ID",
		6:  "LIST_FILTER_TYPE_ADDRESS_NAME",
		7:  "LIST_FILTER_TYPE_ADDRESS",
		8:  "LIST_FILTER_TYPE_TXID",
		9:  "LIST_FILTER_TYPE_OWNER_ID",
		10: "LIST_FILTER_TYPE_WALLET_ID_CREATE_TIME",
		11: "LIST_FILTER_TYPE_POLICY_ID",
		12: "LIST_FILTER_TYPE_POLICY_NAME",
		13: "LIST_FILTER_TYPE_ADDRESS_ID",
		14: "LIST_FILTER_TYPE_WHITELIST_ID",
		15: "LIST_FILTER_TYPE_WHITELIST_NAME",
		16: "LIST_FILTER_TYPE_TRANSFER_LIMIT_ID",
		17: "LIST_FILTER_TYPE_TRANSFER_LIMIT_NAME",
		18: "LIST_FILTER_TYPE_VALIDATOR_ID",
		19: "LIST_FILTER_TYPE_BLOCK_HASH",
		20: "LIST_FILTER_TYPE_STAKING_VALIDATOR_ID",
		21: "LIST_FILTER_TYPE_STAKING_HISTORY_ID",
	}
	ListFilterType_value = map[string]int32{
		"LIST_FILTER_TYPE_INVALID":               0,
		"LIST_FILTER_TYPE_WALLET_ID":             1,
		"LIST_FILTER_TYPE_WALLET_NAME":           2,
		"LIST_FILTER_TYPE_WALLET_ADDRESS":        3,
		"LIST_FILTER_TYPE_TRANSACTION_ID":        4,
		"LIST_FILTER_TYPE_TRANSFER_ID":           5,
		"LIST_FILTER_TYPE_ADDRESS_NAME":          6,
		"LIST_FILTER_TYPE_ADDRESS":               7,
		"LIST_FILTER_TYPE_TXID":                  8,
		"LIST_FILTER_TYPE_OWNER_ID":              9,
		"LIST_FILTER_TYPE_WALLET_ID_CREATE_TIME": 10,
		"LIST_FILTER_TYPE_POLICY_ID":             11,
		"LIST_FILTER_TYPE_POLICY_NAME":           12,
		"LIST_FILTER_TYPE_ADDRESS_ID":            13,
		"LIST_FILTER_TYPE_WHITELIST_ID":          14,
		"LIST_FILTER_TYPE_WHITELIST_NAME":        15,
		"LIST_FILTER_TYPE_TRANSFER_LIMIT_ID":     16,
		"LIST_FILTER_TYPE_TRANSFER_LIMIT_NAME":   17,
		"LIST_FILTER_TYPE_VALIDATOR_ID":          18,
		"LIST_FILTER_TYPE_BLOCK_HASH":            19,
		"LIST_FILTER_TYPE_STAKING_VALIDATOR_ID":  20,
		"LIST_FILTER_TYPE_STAKING_HISTORY_ID":    21,
	}
)

func (x ListFilterType) Enum() *ListFilterType {
	p := new(ListFilterType)
	*p = x
	return p
}

func (x ListFilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListFilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[17].Descriptor()
}

func (ListFilterType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[17]
}

func (x ListFilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListFilterType.Descriptor instead.
func (ListFilterType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{17}
}

type MailType int32

const (
	MailType_MAIL_TYPE_INVALID                       MailType = 0
	MailType_MAIL_TYPE_USER_INVITED                  MailType = 1
	MailType_MAIL_TYPE_PASSWORD_RESET_REQUEST        MailType = 2
	MailType_MAIL_TYPE_PASSWORD_UPDATED              MailType = 3
	MailType_MAIL_TYPE_EMAIL_UPDATE_REQUEST          MailType = 4
	MailType_MAIL_TYPE_EMAIL_UPDATED                 MailType = 5
	MailType_MAIL_TYPE_FRAUD_TRANSACTION_SUBMITTED   MailType = 6
	MailType_MAIL_TYPE_IMPORT_ADDRESS_COMPLETED      MailType = 7
	MailType_MAIL_TYPE_VALIDATOR_CHANGE_REQUESTED    MailType = 8
	MailType_MAIL_TYPE_UNCHECKED_TRANSFER_EXISTS     MailType = 9
	MailType_MAIL_TYPE_DOWNLOAD_RESOURCE             MailType = 10
	MailType_MAIL_TYPE_TRANSFER_RECEIVED             MailType = 11
	MailType_MAIL_TYPE_TRANSACTION_CREATED           MailType = 12
	MailType_MAIL_TYPE_TRANSACTION_SUBMITTED         MailType = 13
	MailType_MAIL_TYPE_TRANSACTION_RESENT            MailType = 20
	MailType_MAIL_TYPE_VALIDATOR_APPROVED            MailType = 14
	MailType_MAIL_TYPE_VALIDATOR_CANCELED            MailType = 15
	MailType_MAIL_TYPE_WALLET_POLICY_CHANGED         MailType = 16
	MailType_MAIL_TYPE_WALLET_NO_WHITELIST_REQUESTED MailType = 17
	MailType_MAIL_TYPE_WALLET_NO_WHITELIST_APPROVED  MailType = 18
	MailType_MAIL_TYPE_WALLET_NO_WHITELIST_CANCELED  MailType = 19
	MailType_MAIL_TYPE_MAIL_SETTINGS_UPDATED         MailType = 21
)

// Enum value maps for MailType.
var (
	MailType_name = map[int32]string{
		0:  "MAIL_TYPE_INVALID",
		1:  "MAIL_TYPE_USER_INVITED",
		2:  "MAIL_TYPE_PASSWORD_RESET_REQUEST",
		3:  "MAIL_TYPE_PASSWORD_UPDATED",
		4:  "MAIL_TYPE_EMAIL_UPDATE_REQUEST",
		5:  "MAIL_TYPE_EMAIL_UPDATED",
		6:  "MAIL_TYPE_FRAUD_TRANSACTION_SUBMITTED",
		7:  "MAIL_TYPE_IMPORT_ADDRESS_COMPLETED",
		8:  "MAIL_TYPE_VALIDATOR_CHANGE_REQUESTED",
		9:  "MAIL_TYPE_UNCHECKED_TRANSFER_EXISTS",
		10: "MAIL_TYPE_DOWNLOAD_RESOURCE",
		11: "MAIL_TYPE_TRANSFER_RECEIVED",
		12: "MAIL_TYPE_TRANSACTION_CREATED",
		13: "MAIL_TYPE_TRANSACTION_SUBMITTED",
		20: "MAIL_TYPE_TRANSACTION_RESENT",
		14: "MAIL_TYPE_VALIDATOR_APPROVED",
		15: "MAIL_TYPE_VALIDATOR_CANCELED",
		16: "MAIL_TYPE_WALLET_POLICY_CHANGED",
		17: "MAIL_TYPE_WALLET_NO_WHITELIST_REQUESTED",
		18: "MAIL_TYPE_WALLET_NO_WHITELIST_APPROVED",
		19: "MAIL_TYPE_WALLET_NO_WHITELIST_CANCELED",
		21: "MAIL_TYPE_MAIL_SETTINGS_UPDATED",
	}
	MailType_value = map[string]int32{
		"MAIL_TYPE_INVALID":                       0,
		"MAIL_TYPE_USER_INVITED":                  1,
		"MAIL_TYPE_PASSWORD_RESET_REQUEST":        2,
		"MAIL_TYPE_PASSWORD_UPDATED":              3,
		"MAIL_TYPE_EMAIL_UPDATE_REQUEST":          4,
		"MAIL_TYPE_EMAIL_UPDATED":                 5,
		"MAIL_TYPE_FRAUD_TRANSACTION_SUBMITTED":   6,
		"MAIL_TYPE_IMPORT_ADDRESS_COMPLETED":      7,
		"MAIL_TYPE_VALIDATOR_CHANGE_REQUESTED":    8,
		"MAIL_TYPE_UNCHECKED_TRANSFER_EXISTS":     9,
		"MAIL_TYPE_DOWNLOAD_RESOURCE":             10,
		"MAIL_TYPE_TRANSFER_RECEIVED":             11,
		"MAIL_TYPE_TRANSACTION_CREATED":           12,
		"MAIL_TYPE_TRANSACTION_SUBMITTED":         13,
		"MAIL_TYPE_TRANSACTION_RESENT":            20,
		"MAIL_TYPE_VALIDATOR_APPROVED":            14,
		"MAIL_TYPE_VALIDATOR_CANCELED":            15,
		"MAIL_TYPE_WALLET_POLICY_CHANGED":         16,
		"MAIL_TYPE_WALLET_NO_WHITELIST_REQUESTED": 17,
		"MAIL_TYPE_WALLET_NO_WHITELIST_APPROVED":  18,
		"MAIL_TYPE_WALLET_NO_WHITELIST_CANCELED":  19,
		"MAIL_TYPE_MAIL_SETTINGS_UPDATED":         21,
	}
)

func (x MailType) Enum() *MailType {
	p := new(MailType)
	*p = x
	return p
}

func (x MailType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MailType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[18].Descriptor()
}

func (MailType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[18]
}

func (x MailType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MailType.Descriptor instead.
func (MailType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{18}
}

type WatchOnlyAddressState int32

const (
	WatchOnlyAddressState_WATCH_ONLY_ADDRESS_STATE_INVALID           WatchOnlyAddressState = 0
	WatchOnlyAddressState_WATCH_ONLY_ADDRESS_STATE_ADDRESS_IMPORTING WatchOnlyAddressState = 1
	WatchOnlyAddressState_WATCH_ONLY_ADDRESS_STATE_ADDRESS_IMPORTED  WatchOnlyAddressState = 2
	WatchOnlyAddressState_WATCH_ONLY_ADDRESS_STATE_IMPORT_FAILED     WatchOnlyAddressState = 3
	WatchOnlyAddressState_WATCH_ONLY_ADDRESS_STATE_ADDRESS_DELETING  WatchOnlyAddressState = 4
	WatchOnlyAddressState_WATCH_ONLY_ADDRESS_STATE_ADDRESS_DELETED   WatchOnlyAddressState = 5
	WatchOnlyAddressState_WATCH_ONLY_ADDRESS_STATE_DELETE_FAILED     WatchOnlyAddressState = 6
	WatchOnlyAddressState_WATCH_ONLY_ADDRESS_STATE_DOWNLOAD          WatchOnlyAddressState = 7
)

// Enum value maps for WatchOnlyAddressState.
var (
	WatchOnlyAddressState_name = map[int32]string{
		0: "WATCH_ONLY_ADDRESS_STATE_INVALID",
		1: "WATCH_ONLY_ADDRESS_STATE_ADDRESS_IMPORTING",
		2: "WATCH_ONLY_ADDRESS_STATE_ADDRESS_IMPORTED",
		3: "WATCH_ONLY_ADDRESS_STATE_IMPORT_FAILED",
		4: "WATCH_ONLY_ADDRESS_STATE_ADDRESS_DELETING",
		5: "WATCH_ONLY_ADDRESS_STATE_ADDRESS_DELETED",
		6: "WATCH_ONLY_ADDRESS_STATE_DELETE_FAILED",
		7: "WATCH_ONLY_ADDRESS_STATE_DOWNLOAD",
	}
	WatchOnlyAddressState_value = map[string]int32{
		"WATCH_ONLY_ADDRESS_STATE_INVALID":           0,
		"WATCH_ONLY_ADDRESS_STATE_ADDRESS_IMPORTING": 1,
		"WATCH_ONLY_ADDRESS_STATE_ADDRESS_IMPORTED":  2,
		"WATCH_ONLY_ADDRESS_STATE_IMPORT_FAILED":     3,
		"WATCH_ONLY_ADDRESS_STATE_ADDRESS_DELETING":  4,
		"WATCH_ONLY_ADDRESS_STATE_ADDRESS_DELETED":   5,
		"WATCH_ONLY_ADDRESS_STATE_DELETE_FAILED":     6,
		"WATCH_ONLY_ADDRESS_STATE_DOWNLOAD":          7,
	}
)

func (x WatchOnlyAddressState) Enum() *WatchOnlyAddressState {
	p := new(WatchOnlyAddressState)
	*p = x
	return p
}

func (x WatchOnlyAddressState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WatchOnlyAddressState) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[19].Descriptor()
}

func (WatchOnlyAddressState) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[19]
}

func (x WatchOnlyAddressState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WatchOnlyAddressState.Descriptor instead.
func (WatchOnlyAddressState) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{19}
}

type SubstrateCallType int32

const (
	SubstrateCallType_SUBSTRATE_CALL_TYPE_INVALID                 SubstrateCallType = 0
	SubstrateCallType_SUBSTRATE_CALL_TYPE_TRANSFER                SubstrateCallType = 1
	SubstrateCallType_SUBSTRATE_CALL_TYPE_TRANSFER_ALL            SubstrateCallType = 2
	SubstrateCallType_SUBSTRATE_CALL_TYPE_TRANSFER_KEEP_ALIVE     SubstrateCallType = 3
	SubstrateCallType_SUBSTRATE_CALL_TYPE_APPROVE_AS_MULTI        SubstrateCallType = 4
	SubstrateCallType_SUBSTRATE_CALL_TYPE_AS_MULTI                SubstrateCallType = 5
	SubstrateCallType_SUBSTRATE_CALL_TYPE_AS_MULTI_THRESHOLD1     SubstrateCallType = 6
	SubstrateCallType_SUBSTRATE_CALL_TYPE_CANCEL_AS_MULTI         SubstrateCallType = 7
	SubstrateCallType_SUBSTRATE_CALL_TYPE_TRANSFER_ALLOW_DEATH    SubstrateCallType = 8
	SubstrateCallType_SUBSTRATE_CALL_TYPE_JOIN                    SubstrateCallType = 9
	SubstrateCallType_SUBSTRATE_CALL_TYPE_BOND_EXTRA_FREE_BALANCE SubstrateCallType = 10
	SubstrateCallType_SUBSTRATE_CALL_TYPE_BOND_EXTRA_REWARDS      SubstrateCallType = 11
	SubstrateCallType_SUBSTRATE_CALL_TYPE_UNBOND                  SubstrateCallType = 12
	SubstrateCallType_SUBSTRATE_CALL_TYPE_WITHDRAW_UNBONDED       SubstrateCallType = 13
	SubstrateCallType_SUBSTRATE_CALL_TYPE_CLAIM_PAYOUT            SubstrateCallType = 14
)

// Enum value maps for SubstrateCallType.
var (
	SubstrateCallType_name = map[int32]string{
		0:  "SUBSTRATE_CALL_TYPE_INVALID",
		1:  "SUBSTRATE_CALL_TYPE_TRANSFER",
		2:  "SUBSTRATE_CALL_TYPE_TRANSFER_ALL",
		3:  "SUBSTRATE_CALL_TYPE_TRANSFER_KEEP_ALIVE",
		4:  "SUBSTRATE_CALL_TYPE_APPROVE_AS_MULTI",
		5:  "SUBSTRATE_CALL_TYPE_AS_MULTI",
		6:  "SUBSTRATE_CALL_TYPE_AS_MULTI_THRESHOLD1",
		7:  "SUBSTRATE_CALL_TYPE_CANCEL_AS_MULTI",
		8:  "SUBSTRATE_CALL_TYPE_TRANSFER_ALLOW_DEATH",
		9:  "SUBSTRATE_CALL_TYPE_JOIN",
		10: "SUBSTRATE_CALL_TYPE_BOND_EXTRA_FREE_BALANCE",
		11: "SUBSTRATE_CALL_TYPE_BOND_EXTRA_REWARDS",
		12: "SUBSTRATE_CALL_TYPE_UNBOND",
		13: "SUBSTRATE_CALL_TYPE_WITHDRAW_UNBONDED",
		14: "SUBSTRATE_CALL_TYPE_CLAIM_PAYOUT",
	}
	SubstrateCallType_value = map[string]int32{
		"SUBSTRATE_CALL_TYPE_INVALID":                 0,
		"SUBSTRATE_CALL_TYPE_TRANSFER":                1,
		"SUBSTRATE_CALL_TYPE_TRANSFER_ALL":            2,
		"SUBSTRATE_CALL_TYPE_TRANSFER_KEEP_ALIVE":     3,
		"SUBSTRATE_CALL_TYPE_APPROVE_AS_MULTI":        4,
		"SUBSTRATE_CALL_TYPE_AS_MULTI":                5,
		"SUBSTRATE_CALL_TYPE_AS_MULTI_THRESHOLD1":     6,
		"SUBSTRATE_CALL_TYPE_CANCEL_AS_MULTI":         7,
		"SUBSTRATE_CALL_TYPE_TRANSFER_ALLOW_DEATH":    8,
		"SUBSTRATE_CALL_TYPE_JOIN":                    9,
		"SUBSTRATE_CALL_TYPE_BOND_EXTRA_FREE_BALANCE": 10,
		"SUBSTRATE_CALL_TYPE_BOND_EXTRA_REWARDS":      11,
		"SUBSTRATE_CALL_TYPE_UNBOND":                  12,
		"SUBSTRATE_CALL_TYPE_WITHDRAW_UNBONDED":       13,
		"SUBSTRATE_CALL_TYPE_CLAIM_PAYOUT":            14,
	}
)

func (x SubstrateCallType) Enum() *SubstrateCallType {
	p := new(SubstrateCallType)
	*p = x
	return p
}

func (x SubstrateCallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubstrateCallType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[20].Descriptor()
}

func (SubstrateCallType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[20]
}

func (x SubstrateCallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubstrateCallType.Descriptor instead.
func (SubstrateCallType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{20}
}

type DownloadResourceType int32

const (
	DownloadResourceType_DOWNLOAD_RESOURCE_TYPE_INVALID                                     DownloadResourceType = 0
	DownloadResourceType_DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_BALANCE_SNAPSHOT_EOD             DownloadResourceType = 1
	DownloadResourceType_DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_GROUP_BALANCE_SNAPSHOT_EOD       DownloadResourceType = 2
	DownloadResourceType_DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_BALANCE_SNAPSHOT_ON_DEMAND       DownloadResourceType = 3
	DownloadResourceType_DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_GROUP_BALANCE_SNAPSHOT_ON_DEMAND DownloadResourceType = 4
	DownloadResourceType_DOWNLOAD_RESOURCE_TYPE_WALLET_TRANSFER                             DownloadResourceType = 5
	DownloadResourceType_DOWNLOAD_RESOURCE_TYPE_WALLET_ADDRESS                              DownloadResourceType = 6
	DownloadResourceType_DOWNLOAD_RESOURCE_TYPE_WALLET_ADDRESS_WITH_BALANCE                 DownloadResourceType = 7
)

// Enum value maps for DownloadResourceType.
var (
	DownloadResourceType_name = map[int32]string{
		0: "DOWNLOAD_RESOURCE_TYPE_INVALID",
		1: "DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_BALANCE_SNAPSHOT_EOD",
		2: "DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_GROUP_BALANCE_SNAPSHOT_EOD",
		3: "DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_BALANCE_SNAPSHOT_ON_DEMAND",
		4: "DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_GROUP_BALANCE_SNAPSHOT_ON_DEMAND",
		5: "DOWNLOAD_RESOURCE_TYPE_WALLET_TRANSFER",
		6: "DOWNLOAD_RESOURCE_TYPE_WALLET_ADDRESS",
		7: "DOWNLOAD_RESOURCE_TYPE_WALLET_ADDRESS_WITH_BALANCE",
	}
	DownloadResourceType_value = map[string]int32{
		"DOWNLOAD_RESOURCE_TYPE_INVALID":                                     0,
		"DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_BALANCE_SNAPSHOT_EOD":             1,
		"DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_GROUP_BALANCE_SNAPSHOT_EOD":       2,
		"DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_BALANCE_SNAPSHOT_ON_DEMAND":       3,
		"DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_GROUP_BALANCE_SNAPSHOT_ON_DEMAND": 4,
		"DOWNLOAD_RESOURCE_TYPE_WALLET_TRANSFER":                             5,
		"DOWNLOAD_RESOURCE_TYPE_WALLET_ADDRESS":                              6,
		"DOWNLOAD_RESOURCE_TYPE_WALLET_ADDRESS_WITH_BALANCE":                 7,
	}
)

func (x DownloadResourceType) Enum() *DownloadResourceType {
	p := new(DownloadResourceType)
	*p = x
	return p
}

func (x DownloadResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DownloadResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[21].Descriptor()
}

func (DownloadResourceType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[21]
}

func (x DownloadResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DownloadResourceType.Descriptor instead.
func (DownloadResourceType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{21}
}

type EventTriggeredMessageType int32

const (
	EventTriggeredMessageType_EVENT_TRIGGERED_MESSAGE_TYPE_INVALID                   EventTriggeredMessageType = 0
	EventTriggeredMessageType_EVENT_TRIGGERED_MESSAGE_TYPE_UNCHECKED_TRANSFER_ALERT  EventTriggeredMessageType = 1
	EventTriggeredMessageType_EVENT_TRIGGERED_MESSAGE_TYPE_FRAUDULENT_TRANSFER_ALERT EventTriggeredMessageType = 2
)

// Enum value maps for EventTriggeredMessageType.
var (
	EventTriggeredMessageType_name = map[int32]string{
		0: "EVENT_TRIGGERED_MESSAGE_TYPE_INVALID",
		1: "EVENT_TRIGGERED_MESSAGE_TYPE_UNCHECKED_TRANSFER_ALERT",
		2: "EVENT_TRIGGERED_MESSAGE_TYPE_FRAUDULENT_TRANSFER_ALERT",
	}
	EventTriggeredMessageType_value = map[string]int32{
		"EVENT_TRIGGERED_MESSAGE_TYPE_INVALID":                   0,
		"EVENT_TRIGGERED_MESSAGE_TYPE_UNCHECKED_TRANSFER_ALERT":  1,
		"EVENT_TRIGGERED_MESSAGE_TYPE_FRAUDULENT_TRANSFER_ALERT": 2,
	}
)

func (x EventTriggeredMessageType) Enum() *EventTriggeredMessageType {
	p := new(EventTriggeredMessageType)
	*p = x
	return p
}

func (x EventTriggeredMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventTriggeredMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[22].Descriptor()
}

func (EventTriggeredMessageType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[22]
}

func (x EventTriggeredMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventTriggeredMessageType.Descriptor instead.
func (EventTriggeredMessageType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{22}
}

type WalletConnectCallRequestType int32

const (
	WalletConnectCallRequestType_WALLET_CONNECT_CALL_REQUEST_TYPE_INVALID              WalletConnectCallRequestType = 0
	WalletConnectCallRequestType_WALLET_CONNECT_CALL_REQUEST_TYPE_ETH_SEND_TRANSACTION WalletConnectCallRequestType = 1
	WalletConnectCallRequestType_WALLET_CONNECT_CALL_REQUEST_TYPE_ETH_SIGN_TYPED_DATA  WalletConnectCallRequestType = 2
)

// Enum value maps for WalletConnectCallRequestType.
var (
	WalletConnectCallRequestType_name = map[int32]string{
		0: "WALLET_CONNECT_CALL_REQUEST_TYPE_INVALID",
		1: "WALLET_CONNECT_CALL_REQUEST_TYPE_ETH_SEND_TRANSACTION",
		2: "WALLET_CONNECT_CALL_REQUEST_TYPE_ETH_SIGN_TYPED_DATA",
	}
	WalletConnectCallRequestType_value = map[string]int32{
		"WALLET_CONNECT_CALL_REQUEST_TYPE_INVALID":              0,
		"WALLET_CONNECT_CALL_REQUEST_TYPE_ETH_SEND_TRANSACTION": 1,
		"WALLET_CONNECT_CALL_REQUEST_TYPE_ETH_SIGN_TYPED_DATA":  2,
	}
)

func (x WalletConnectCallRequestType) Enum() *WalletConnectCallRequestType {
	p := new(WalletConnectCallRequestType)
	*p = x
	return p
}

func (x WalletConnectCallRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletConnectCallRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[23].Descriptor()
}

func (WalletConnectCallRequestType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[23]
}

func (x WalletConnectCallRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletConnectCallRequestType.Descriptor instead.
func (WalletConnectCallRequestType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{23}
}

type EthereumContractMethodIDType int32

const (
	EthereumContractMethodIDType_ETHEREUM_CONTRACT_METHOD_ID_TYPE_INVALID           EthereumContractMethodIDType = 0
	EthereumContractMethodIDType_ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_APPROVE     EthereumContractMethodIDType = 1
	EthereumContractMethodIDType_ETHEREUM_CONTRACT_METHOD_ID_TYPE_UNISWAP_MULTICALL EthereumContractMethodIDType = 2
)

// Enum value maps for EthereumContractMethodIDType.
var (
	EthereumContractMethodIDType_name = map[int32]string{
		0: "ETHEREUM_CONTRACT_METHOD_ID_TYPE_INVALID",
		1: "ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_APPROVE",
		2: "ETHEREUM_CONTRACT_METHOD_ID_TYPE_UNISWAP_MULTICALL",
	}
	EthereumContractMethodIDType_value = map[string]int32{
		"ETHEREUM_CONTRACT_METHOD_ID_TYPE_INVALID":           0,
		"ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_APPROVE":     1,
		"ETHEREUM_CONTRACT_METHOD_ID_TYPE_UNISWAP_MULTICALL": 2,
	}
)

func (x EthereumContractMethodIDType) Enum() *EthereumContractMethodIDType {
	p := new(EthereumContractMethodIDType)
	*p = x
	return p
}

func (x EthereumContractMethodIDType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EthereumContractMethodIDType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[24].Descriptor()
}

func (EthereumContractMethodIDType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[24]
}

func (x EthereumContractMethodIDType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EthereumContractMethodIDType.Descriptor instead.
func (EthereumContractMethodIDType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{24}
}

type IOSTActionType int32

const (
	IOSTActionType_IOST_ACTION_TYPE_INVALID           IOSTActionType = 0
	IOSTActionType_IOST_ACTION_TYPE_SIGN_UP           IOSTActionType = 1
	IOSTActionType_IOST_ACTION_TYPE_ASSIGN_PERMISSION IOSTActionType = 2
	IOSTActionType_IOST_ACTION_TYPE_TRANSFER          IOSTActionType = 3
	IOSTActionType_IOST_ACTION_TYPE_BUY_RAM           IOSTActionType = 4
	IOSTActionType_IOST_ACTION_TYPE_SELL_RAM          IOSTActionType = 5
	IOSTActionType_IOST_ACTION_TYPE_VOTE              IOSTActionType = 6
	IOSTActionType_IOST_ACTION_TYPE_UNVOTE            IOSTActionType = 7
	IOSTActionType_IOST_ACTION_TYPE_WITHDRAW_BONUS    IOSTActionType = 8
	IOSTActionType_IOST_ACTION_TYPE_REVOKE_PERMISSION IOSTActionType = 9
)

// Enum value maps for IOSTActionType.
var (
	IOSTActionType_name = map[int32]string{
		0: "IOST_ACTION_TYPE_INVALID",
		1: "IOST_ACTION_TYPE_SIGN_UP",
		2: "IOST_ACTION_TYPE_ASSIGN_PERMISSION",
		3: "IOST_ACTION_TYPE_TRANSFER",
		4: "IOST_ACTION_TYPE_BUY_RAM",
		5: "IOST_ACTION_TYPE_SELL_RAM",
		6: "IOST_ACTION_TYPE_VOTE",
		7: "IOST_ACTION_TYPE_UNVOTE",
		8: "IOST_ACTION_TYPE_WITHDRAW_BONUS",
		9: "IOST_ACTION_TYPE_REVOKE_PERMISSION",
	}
	IOSTActionType_value = map[string]int32{
		"IOST_ACTION_TYPE_INVALID":           0,
		"IOST_ACTION_TYPE_SIGN_UP":           1,
		"IOST_ACTION_TYPE_ASSIGN_PERMISSION": 2,
		"IOST_ACTION_TYPE_TRANSFER":          3,
		"IOST_ACTION_TYPE_BUY_RAM":           4,
		"IOST_ACTION_TYPE_SELL_RAM":          5,
		"IOST_ACTION_TYPE_VOTE":              6,
		"IOST_ACTION_TYPE_UNVOTE":            7,
		"IOST_ACTION_TYPE_WITHDRAW_BONUS":    8,
		"IOST_ACTION_TYPE_REVOKE_PERMISSION": 9,
	}
)

func (x IOSTActionType) Enum() *IOSTActionType {
	p := new(IOSTActionType)
	*p = x
	return p
}

func (x IOSTActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IOSTActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[25].Descriptor()
}

func (IOSTActionType) Type() protoreflect.EnumType {
	return &file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes[25]
}

func (x IOSTActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IOSTActionType.Descriptor instead.
func (IOSTActionType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP(), []int{25}
}

var File_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto protoreflect.FileDescriptor

var file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDesc = []byte{
	0x0a, 0x35, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2a, 0xf4, 0x01, 0x0a, 0x0a, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x41, 0x4c,
	0x4c, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x44, 0x59, 0x5f, 0x48,
	0x4f, 0x54, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x44, 0x59,
	0x5f, 0x43, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x57, 0x41, 0x4c, 0x4c, 0x45,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x44, 0x59, 0x5f, 0x48, 0x4f, 0x54, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x53,
	0x49, 0x47, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x44, 0x59,
	0x5f, 0x48, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x44, 0x59, 0x5f,
	0x43, 0x4f, 0x4c, 0x44, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x10,
	0x05, 0x2a, 0x9f, 0x06, 0x0a, 0x0b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x57,
	0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x41, 0x4c, 0x4c,
	0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x41, 0x4c,
	0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12,
	0x23, 0x0a, 0x1f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x06, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x18, 0x0a,
	0x14, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x41, 0x4c, 0x4c, 0x45,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x09,
	0x12, 0x1b, 0x0a, 0x17, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x1a, 0x0a,
	0x16, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55,
	0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x41, 0x4c,
	0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x0d, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x27, 0x0a, 0x23,
	0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x41, 0x49, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x0f, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4d,
	0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x41, 0x4c,
	0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x11, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x12, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15,
	0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x55,
	0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x14, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x41, 0x4c, 0x4c, 0x45,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x15, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x41,
	0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x16, 0x12, 0x35, 0x0a, 0x31,
	0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x5f, 0x53, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x17, 0x2a, 0x7b, 0x0a, 0x12, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x41, 0x4c,
	0x4c, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x57,
	0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e,
	0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x02,
	0x2a, 0x81, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55,
	0x42, 0x4d, 0x49, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x4d,
	0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x2a, 0xf6, 0x02, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45,
	0x57, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x45, 0x44, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x4d,
	0x49, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55,
	0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x1e, 0x0a,
	0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x0a, 0x2a, 0x60, 0x0a,
	0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x2a,
	0x5b, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x2a, 0x75, 0x0a, 0x09,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0xeb, 0x01, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x52, 0x47, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x45,
	0x52, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x45, 0x52, 0x10, 0x05,
	0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f,
	0x54, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x06,
	0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f,
	0x54, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x10,
	0x07, 0x2a, 0x63, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41,
	0x4c, 0x4c, 0x45, 0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x2a, 0xe0, 0x01, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x1b,
	0x0a, 0x17, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x55, 0x50, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53,
	0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x06, 0x2a, 0x6c, 0x0a, 0x0a, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x4f, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x44, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x02, 0x2a, 0x95, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e,
	0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x20, 0x0a,
	0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x2a,
	0xf5, 0x0a, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x2f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x36, 0x0a, 0x32, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41,
	0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41,
	0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02,
	0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x26,
	0x0a, 0x22, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c,
	0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x23,
	0x0a, 0x1f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x34, 0x0a, 0x30, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x17, 0x12, 0x31, 0x0a, 0x2d, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57,
	0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x58, 0x52, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x18, 0x12, 0x34, 0x0a, 0x30,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53, 0x49,
	0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x19, 0x12, 0x38, 0x0a, 0x34, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x1a, 0x12, 0x35, 0x0a, 0x31,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x1b, 0x12, 0x38, 0x0a, 0x34, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x07, 0x12, 0x3b, 0x0a,
	0x37, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x10, 0x16, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x09,
	0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x28, 0x0a,
	0x24, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x1c, 0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x0c, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x0d, 0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x0e, 0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x0f, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x10, 0x12, 0x27, 0x0a, 0x23, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x11, 0x12, 0x33, 0x0a, 0x2f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x12, 0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x13, 0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x14, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x48, 0x49,
	0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x43, 0x48, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x15, 0x2a, 0x9e, 0x02, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55, 0x44,
	0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x23,
	0x0a, 0x1f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x04, 0x12,
	0x1f, 0x0a, 0x1b, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c,
	0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x07, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x08, 0x2a, 0xdf, 0x1a, 0x0a, 0x0c, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x55, 0x44,
	0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c,
	0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x32, 0x46, 0x41, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x32, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f,
	0x47, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x50, 0x12,
	0x20, 0x0a, 0x1c, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10,
	0x04, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x56, 0x45, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x10, 0x06, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x42, 0x4b, 0x45, 0x59, 0x10,
	0x07, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49,
	0x56, 0x45, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x55, 0x4e,
	0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x10, 0x09, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x55, 0x44,
	0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c,
	0x45, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0a,
	0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x55, 0x44,
	0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c,
	0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0c, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x55, 0x44,
	0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c,
	0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0x0d, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x55, 0x44,
	0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c,
	0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x0e, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x44, 0x49,
	0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45,
	0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44,
	0x10, 0x33, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x34, 0x12, 0x28,
	0x0a, 0x24, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x35, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x55, 0x44, 0x49,
	0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45,
	0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x3c, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10,
	0x3d, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x3e, 0x12, 0x33, 0x0a,
	0x2f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x3f, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x36, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x55,
	0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c,
	0x4c, 0x45, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x37, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x55, 0x44, 0x49, 0x54,
	0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x38, 0x12,
	0x25, 0x0a, 0x21, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x0f, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0x10, 0x12, 0x25,
	0x0a, 0x21, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x10, 0x11, 0x12, 0x31, 0x0a, 0x2d, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c,
	0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x55, 0x44, 0x49,
	0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x10, 0x13, 0x12,
	0x25, 0x0a, 0x21, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x4e, 0x44, 0x10, 0x4f, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x14, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x15, 0x12, 0x21, 0x0a, 0x1d, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x16, 0x12, 0x22,
	0x0a, 0x1e, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45,
	0x10, 0x17, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x41,
	0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x10, 0x18, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x55, 0x44, 0x49,
	0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x10, 0x19, 0x12, 0x34, 0x0a, 0x30, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x1a, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x55, 0x44,
	0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x10, 0x1b, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x1c, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x1d, 0x12, 0x2d,
	0x0a, 0x29, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x1e, 0x12, 0x2d, 0x0a,
	0x29, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x1f, 0x12, 0x28, 0x0a, 0x24,
	0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x20, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x21,
	0x12, 0x29, 0x0a, 0x25, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0x22, 0x12, 0x28, 0x0a, 0x24, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x10, 0x23, 0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c,
	0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x53,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x24, 0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x53, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x25, 0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x55, 0x44, 0x49, 0x54,
	0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x26, 0x12, 0x30, 0x0a, 0x2c, 0x41, 0x55, 0x44, 0x49,
	0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0x27, 0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x55,
	0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x28, 0x12, 0x2a, 0x0a, 0x26, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x29, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x55, 0x44, 0x49, 0x54,
	0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x2a, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x57, 0x48, 0x49,
	0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x2b, 0x12,
	0x27, 0x0a, 0x23, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x2c, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x44, 0x49,
	0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x2d, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x2e, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x55,
	0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x57,
	0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x2f, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x55,
	0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x57,
	0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x30, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x55,
	0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x5f, 0x57, 0x48,
	0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x31, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x55, 0x44,
	0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x40, 0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x55, 0x44,
	0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0x41, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x55,
	0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x42, 0x12, 0x3a, 0x0a, 0x36, 0x41, 0x55,
	0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x10, 0x43, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55,
	0x42, 0x4d, 0x49, 0x54, 0x10, 0x44, 0x12, 0x30, 0x0a, 0x2c, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x45, 0x12, 0x31, 0x0a, 0x2d, 0x41, 0x55, 0x44, 0x49,
	0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0x46, 0x12, 0x30, 0x0a, 0x2c, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x4c, 0x45,
	0x47, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x47, 0x12, 0x3c, 0x0a,
	0x38, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45,
	0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x48, 0x12, 0x30, 0x0a, 0x2c, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x4c, 0x45,
	0x47, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x10, 0x49, 0x12, 0x2e, 0x0a,
	0x2a, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x44, 0x52, 0x41, 0x57, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x4a, 0x12, 0x2f, 0x0a,
	0x2b, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x44, 0x52, 0x41, 0x57, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0x4b, 0x12, 0x2e,
	0x0a, 0x2a, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x4c, 0x12, 0x3a,
	0x0a, 0x36, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x4d, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x55,
	0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41,
	0x57, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x10, 0x4e, 0x2a, 0xaa, 0x0e, 0x0a, 0x17, 0x50,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a,
	0x26, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x46, 0x41, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x52, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x46, 0x41, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x50,
	0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x52,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f,
	0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x04, 0x12, 0x33, 0x0a, 0x2f, 0x50, 0x52,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x53,
	0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x39, 0x0a, 0x35, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x1b, 0x12, 0x39, 0x0a, 0x35, 0x50, 0x52,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x1c, 0x12, 0x3c, 0x0a, 0x38, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x50, 0x45, 0x4e, 0x44, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x06, 0x12, 0x33, 0x0a, 0x2f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x48, 0x4f, 0x55, 0x52, 0x4c, 0x59, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x07, 0x12, 0x32, 0x0a, 0x2e, 0x50, 0x52, 0x45, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x08, 0x12, 0x34, 0x0a, 0x30,
	0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0x09, 0x12, 0x39, 0x0a, 0x35, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x30, 0x0a,
	0x2c, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45,
	0x54, 0x5f, 0x49, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x12,
	0x30, 0x0a, 0x2c, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c,
	0x4c, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10,
	0x0c, 0x12, 0x35, 0x0a, 0x31, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x35, 0x0a, 0x31, 0x50, 0x52, 0x45, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x0e, 0x12,
	0x25, 0x0a, 0x21, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x0f, 0x12, 0x35, 0x0a, 0x31, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x46,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x10, 0x12, 0x40, 0x0a,
	0x3c, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x11, 0x12,
	0x3b, 0x0a, 0x37, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x4d,
	0x50, 0x4f, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f,
	0x49, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x12, 0x12, 0x3e, 0x0a, 0x3a,
	0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46,
	0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x14, 0x12, 0x58, 0x0a, 0x54,
	0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44,
	0x55, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x53, 0x10, 0x15, 0x12, 0x36, 0x0a, 0x32, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x53, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x16, 0x12, 0x41,
	0x0a, 0x3d, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c,
	0x45, 0x54, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10,
	0x17, 0x12, 0x3a, 0x0a, 0x36, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x18, 0x12, 0x3b, 0x0a,
	0x37, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x53,
	0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x19, 0x12, 0x58, 0x0a, 0x54, 0x50, 0x52,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x55, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x1a, 0x12, 0x3e, 0x0a, 0x3a, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x1d, 0x12, 0x57, 0x0a, 0x53, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x5f, 0x53,
	0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x45,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x1e, 0x12, 0x38, 0x0a,
	0x34, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49,
	0x42, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x13, 0x2a, 0x98, 0x06, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c,
	0x4c, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c,
	0x4c, 0x45, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57,
	0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12,
	0x23, 0x0a, 0x1f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x58, 0x49, 0x44,
	0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10,
	0x09, 0x12, 0x2a, 0x0a, 0x26, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0a, 0x12, 0x1e, 0x0a,
	0x1a, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x20, 0x0a,
	0x1c, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0c, 0x12,
	0x1f, 0x0a, 0x1b, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x44, 0x10, 0x0d,
	0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x49,
	0x44, 0x10, 0x0e, 0x12, 0x23, 0x0a, 0x1f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0f, 0x12, 0x26, 0x0a, 0x22, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x10,
	0x12, 0x28, 0x0a, 0x24, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x11, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x12, 0x12, 0x1f, 0x0a,
	0x1b, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x13, 0x12, 0x29,
	0x0a, 0x25, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x14, 0x12, 0x27, 0x0a, 0x23, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44,
	0x10, 0x15, 0x2a, 0xa9, 0x06, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x09, 0x12,
	0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x0a,
	0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10,
	0x0b, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x0c, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55,
	0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x20, 0x0a, 0x1c, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x20, 0x0a,
	0x1c, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x0f, 0x12,
	0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c,
	0x4c, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x44, 0x10, 0x10, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x57, 0x48, 0x49, 0x54,
	0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10,
	0x11, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57,
	0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2a, 0x0a,
	0x26, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45,
	0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x13, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x15, 0x2a, 0xf8,
	0x02, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x2e,
	0x0a, 0x2a, 0x57, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x2d,
	0x0a, 0x29, 0x57, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2a, 0x0a,
	0x26, 0x57, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x57, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x57, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x07, 0x2a, 0xe5, 0x04, 0x0a, 0x11, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x55, 0x42, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x55, 0x42, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x55, 0x42, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x55, 0x42, 0x53,
	0x54, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x41, 0x4c,
	0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x55, 0x42, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x10, 0x04, 0x12,
	0x20, 0x0a, 0x1c, 0x53, 0x55, 0x42, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x10,
	0x05, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x55, 0x42, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x31, 0x10, 0x06, 0x12, 0x27,
	0x0a, 0x23, 0x53, 0x55, 0x42, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x41, 0x53, 0x5f,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x10, 0x07, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x55, 0x42, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x45,
	0x41, 0x54, 0x48, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x55, 0x42, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x4f, 0x49,
	0x4e, 0x10, 0x09, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x55, 0x42, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x5f,
	0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x0a, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x55, 0x42, 0x53, 0x54, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x44,
	0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x53, 0x10, 0x0b,
	0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x55, 0x42, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x42, 0x4f, 0x4e, 0x44, 0x10, 0x0c,
	0x12, 0x29, 0x0a, 0x25, 0x53, 0x55, 0x42, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57,
	0x5f, 0x55, 0x4e, 0x42, 0x4f, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x24, 0x0a, 0x20, 0x53,
	0x55, 0x42, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x10,
	0x0e, 0x2a, 0xd1, 0x03, 0x0a, 0x14, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x4f,
	0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x3a,
	0x0a, 0x36, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x57, 0x41, 0x4c,
	0x4c, 0x45, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50,
	0x53, 0x48, 0x4f, 0x54, 0x5f, 0x45, 0x4f, 0x44, 0x10, 0x01, 0x12, 0x40, 0x0a, 0x3c, 0x44, 0x4f,
	0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x4e,
	0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x45, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x40, 0x0a, 0x3c,
	0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45,
	0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48,
	0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x46,
	0x0a, 0x42, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x57, 0x41, 0x4c,
	0x4c, 0x45, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x4d, 0x41, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c,
	0x4c, 0x45, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x06, 0x12, 0x36, 0x0a,
	0x32, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x42, 0x41, 0x4c, 0x41,
	0x4e, 0x43, 0x45, 0x10, 0x07, 0x2a, 0xbc, 0x01, 0x0a, 0x19, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x49,
	0x47, 0x47, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x39, 0x0a,
	0x35, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x45, 0x44,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x3a, 0x0a, 0x36, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x55, 0x4c,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x10, 0x02, 0x2a, 0xc1, 0x01, 0x0a, 0x1c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x39, 0x0a, 0x35, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x4e, 0x44,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x38,
	0x0a, 0x34, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x2a, 0xb8, 0x01, 0x0a, 0x1c, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x45, 0x55, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x43, 0x32,
	0x30, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0x01, 0x12, 0x36, 0x0a, 0x32, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x49, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x4c, 0x10, 0x02, 0x2a, 0xd5, 0x02, 0x0a, 0x0e, 0x49, 0x4f, 0x53, 0x54, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4f, 0x53, 0x54, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4f, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x55, 0x50,
	0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4f, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4f,
	0x53, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4f, 0x53,
	0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55,
	0x59, 0x5f, 0x52, 0x41, 0x4d, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4f, 0x53, 0x54, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c,
	0x5f, 0x52, 0x41, 0x4d, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4f, 0x53, 0x54, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x10,
	0x06, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4f, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x07, 0x12, 0x23,
	0x0a, 0x1f, 0x49, 0x4f, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x42, 0x4f, 0x4e, 0x55,
	0x53, 0x10, 0x08, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4f, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x42, 0x4c, 0x5a, 0x4a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x69, 0x6e, 0x63, 0x6f, 0x49,
	0x6e, 0x63, 0x2f, 0x67, 0x65, 0x77, 0x2d, 0x6b, 0x6d, 0x70, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescOnce sync.Once
	file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescData = file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDesc
)

func file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescGZIP() []byte {
	file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescOnce.Do(func() {
		file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescData = protoimpl.X.CompressGZIP(file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescData)
	})
	return file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDescData
}

var file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes = make([]protoimpl.EnumInfo, 26)
var file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_goTypes = []interface{}{
	(WalletType)(0),                   // 0: adamant.global.v1.WalletType
	(WalletState)(0),                  // 1: adamant.global.v1.WalletState
	(WalletProposalType)(0),           // 2: adamant.global.v1.WalletProposalType
	(AddressState)(0),                 // 3: adamant.global.v1.AddressState
	(TransactionState)(0),             // 4: adamant.global.v1.TransactionState
	(AccountType)(0),                  // 5: adamant.global.v1.AccountType
	(ExecutorType)(0),                 // 6: adamant.global.v1.ExecutorType
	(UserState)(0),                    // 7: adamant.global.v1.UserState
	(RoleType)(0),                     // 8: adamant.global.v1.RoleType
	(ResourceType)(0),                 // 9: adamant.global.v1.ResourceType
	(TokenType)(0),                    // 10: adamant.global.v1.TokenType
	(PolicyType)(0),                   // 11: adamant.global.v1.PolicyType
	(TransferLimitType)(0),            // 12: adamant.global.v1.TransferLimitType
	(NotificationType)(0),             // 13: adamant.global.v1.NotificationType
	(AuditLogGroup)(0),                // 14: adamant.global.v1.AuditLogGroup
	(AuditLogType)(0),                 // 15: adamant.global.v1.AuditLogType
	(PreconditionFailureType)(0),      // 16: adamant.global.v1.PreconditionFailureType
	(ListFilterType)(0),               // 17: adamant.global.v1.ListFilterType
	(MailType)(0),                     // 18: adamant.global.v1.MailType
	(WatchOnlyAddressState)(0),        // 19: adamant.global.v1.WatchOnlyAddressState
	(SubstrateCallType)(0),            // 20: adamant.global.v1.SubstrateCallType
	(DownloadResourceType)(0),         // 21: adamant.global.v1.DownloadResourceType
	(EventTriggeredMessageType)(0),    // 22: adamant.global.v1.EventTriggeredMessageType
	(WalletConnectCallRequestType)(0), // 23: adamant.global.v1.WalletConnectCallRequestType
	(EthereumContractMethodIDType)(0), // 24: adamant.global.v1.EthereumContractMethodIDType
	(IOSTActionType)(0),               // 25: adamant.global.v1.IOSTActionType
}
var file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_init() }
func file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_init() {
	if File_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDesc,
			NumEnums:      26,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_goTypes,
		DependencyIndexes: file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_depIdxs,
		EnumInfos:         file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_enumTypes,
	}.Build()
	File_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto = out.File
	file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_rawDesc = nil
	file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_goTypes = nil
	file_gincoinc_adamant_global_v1_adamantglobalv1_enum_proto_depIdxs = nil
}
