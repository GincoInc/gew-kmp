// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gincoinc/global/v1/gincoincglobalv1/enum.proto

package gincoincglobalv1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Coin is a type of crypto asset.
type Coin int32

const (
	Coin_COIN_INVALID Coin = 0
	Coin_COIN_BTC     Coin = 1
	Coin_COIN_ETH     Coin = 2
	Coin_COIN_LTC     Coin = 3
	Coin_COIN_BCH     Coin = 4
	Coin_COIN_XRP     Coin = 5
)

var Coin_name = map[int32]string{
	0: "COIN_INVALID",
	1: "COIN_BTC",
	2: "COIN_ETH",
	3: "COIN_LTC",
	4: "COIN_BCH",
	5: "COIN_XRP",
}

var Coin_value = map[string]int32{
	"COIN_INVALID": 0,
	"COIN_BTC":     1,
	"COIN_ETH":     2,
	"COIN_LTC":     3,
	"COIN_BCH":     4,
	"COIN_XRP":     5,
}

func (x Coin) String() string {
	return proto.EnumName(Coin_name, int32(x))
}

func (Coin) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_325b3e94c3ce0b6e, []int{0}
}

// Network is a type of blockchain network.
type Network int32

const (
	Network_NETWORK_INVALID             Network = 0
	Network_NETWORK_BITCOIN_MAINNET     Network = 1
	Network_NETWORK_BITCOIN_TESTNET     Network = 2
	Network_NETWORK_ETHEREUM_MAINNET    Network = 3
	Network_NETWORK_ETHEREUM_TESTNET    Network = 4
	Network_NETWORK_LITECOIN_MAINNET    Network = 5
	Network_NETWORK_LITECOIN_TESTNET    Network = 6
	Network_NETWORK_BITCOINCASH_MAINNET Network = 7
	Network_NETWORK_BITCOINCASH_TESTNET Network = 8
	Network_NETWORK_RIPPLE_MAINNET      Network = 9
	Network_NETWORK_RIPPLE_TESTNET      Network = 10
)

var Network_name = map[int32]string{
	0:  "NETWORK_INVALID",
	1:  "NETWORK_BITCOIN_MAINNET",
	2:  "NETWORK_BITCOIN_TESTNET",
	3:  "NETWORK_ETHEREUM_MAINNET",
	4:  "NETWORK_ETHEREUM_TESTNET",
	5:  "NETWORK_LITECOIN_MAINNET",
	6:  "NETWORK_LITECOIN_TESTNET",
	7:  "NETWORK_BITCOINCASH_MAINNET",
	8:  "NETWORK_BITCOINCASH_TESTNET",
	9:  "NETWORK_RIPPLE_MAINNET",
	10: "NETWORK_RIPPLE_TESTNET",
}

var Network_value = map[string]int32{
	"NETWORK_INVALID":             0,
	"NETWORK_BITCOIN_MAINNET":     1,
	"NETWORK_BITCOIN_TESTNET":     2,
	"NETWORK_ETHEREUM_MAINNET":    3,
	"NETWORK_ETHEREUM_TESTNET":    4,
	"NETWORK_LITECOIN_MAINNET":    5,
	"NETWORK_LITECOIN_TESTNET":    6,
	"NETWORK_BITCOINCASH_MAINNET": 7,
	"NETWORK_BITCOINCASH_TESTNET": 8,
	"NETWORK_RIPPLE_MAINNET":      9,
	"NETWORK_RIPPLE_TESTNET":      10,
}

func (x Network) String() string {
	return proto.EnumName(Network_name, int32(x))
}

func (Network) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_325b3e94c3ce0b6e, []int{1}
}

// AddressType is a type of address.
type AddressType int32

const (
	AddressType_ADDRESS_TYPE_INVALID    AddressType = 0
	AddressType_ADDRESS_TYPE_P2SH       AddressType = 1
	AddressType_ADDRESS_TYPE_P2SH_P2WSH AddressType = 2
	AddressType_ADDRESS_TYPE_P2WSH      AddressType = 3
	AddressType_ADDRESS_TYPE_NONE       AddressType = 100
)

var AddressType_name = map[int32]string{
	0:   "ADDRESS_TYPE_INVALID",
	1:   "ADDRESS_TYPE_P2SH",
	2:   "ADDRESS_TYPE_P2SH_P2WSH",
	3:   "ADDRESS_TYPE_P2WSH",
	100: "ADDRESS_TYPE_NONE",
}

var AddressType_value = map[string]int32{
	"ADDRESS_TYPE_INVALID":    0,
	"ADDRESS_TYPE_P2SH":       1,
	"ADDRESS_TYPE_P2SH_P2WSH": 2,
	"ADDRESS_TYPE_P2WSH":      3,
	"ADDRESS_TYPE_NONE":       100,
}

func (x AddressType) String() string {
	return proto.EnumName(AddressType_name, int32(x))
}

func (AddressType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_325b3e94c3ce0b6e, []int{2}
}

// TransactionState is a state of transaction.
// SUBMITTED:  SendTx成功
// PENDING:    Mempoolに入った
// PROCESSING: ブロックに入った
// CONFIRMED:  指定した承認数を超えた
type TransactionState int32

const (
	TransactionState_TRANSACTION_STATE_INVALID    TransactionState = 0
	TransactionState_TRANSACTION_STATE_SUBMITTED  TransactionState = 1
	TransactionState_TRANSACTION_STATE_PENDING    TransactionState = 2
	TransactionState_TRANSACTION_STATE_PROCESSING TransactionState = 3
	TransactionState_TRANSACTION_STATE_CONFIRMED  TransactionState = 4
)

var TransactionState_name = map[int32]string{
	0: "TRANSACTION_STATE_INVALID",
	1: "TRANSACTION_STATE_SUBMITTED",
	2: "TRANSACTION_STATE_PENDING",
	3: "TRANSACTION_STATE_PROCESSING",
	4: "TRANSACTION_STATE_CONFIRMED",
}

var TransactionState_value = map[string]int32{
	"TRANSACTION_STATE_INVALID":    0,
	"TRANSACTION_STATE_SUBMITTED":  1,
	"TRANSACTION_STATE_PENDING":    2,
	"TRANSACTION_STATE_PROCESSING": 3,
	"TRANSACTION_STATE_CONFIRMED":  4,
}

func (x TransactionState) String() string {
	return proto.EnumName(TransactionState_name, int32(x))
}

func (TransactionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_325b3e94c3ce0b6e, []int{3}
}

// UTXOState is a state of UTXO.
type UTXOState int32

const (
	UTXOState_UTXO_STATE_INVALID         UTXOState = 0
	UTXOState_UTXO_STATE_PENDING_UNSPENT UTXOState = 1
	UTXOState_UTXO_STATE_UNSPENT         UTXOState = 2
	UTXOState_UTXO_STATE_PENDING_SPENT   UTXOState = 3
	UTXOState_UTXO_STATE_SPENT           UTXOState = 4
)

var UTXOState_name = map[int32]string{
	0: "UTXO_STATE_INVALID",
	1: "UTXO_STATE_PENDING_UNSPENT",
	2: "UTXO_STATE_UNSPENT",
	3: "UTXO_STATE_PENDING_SPENT",
	4: "UTXO_STATE_SPENT",
}

var UTXOState_value = map[string]int32{
	"UTXO_STATE_INVALID":         0,
	"UTXO_STATE_PENDING_UNSPENT": 1,
	"UTXO_STATE_UNSPENT":         2,
	"UTXO_STATE_PENDING_SPENT":   3,
	"UTXO_STATE_SPENT":           4,
}

func (x UTXOState) String() string {
	return proto.EnumName(UTXOState_name, int32(x))
}

func (UTXOState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_325b3e94c3ce0b6e, []int{4}
}

// TransferType is a type of transaction.
type TransferType int32

const (
	TransferType_TRANSFER_TYPE_INVALID TransferType = 0
	TransferType_TRANSFER_TYPE_SEND    TransferType = 1
	TransferType_TRANSFER_TYPE_RECEIVE TransferType = 2
	TransferType_TRANSFER_TYPE_CHANGE  TransferType = 3
	TransferType_TRANSFER_TYPE_FATAL   TransferType = 4
)

var TransferType_name = map[int32]string{
	0: "TRANSFER_TYPE_INVALID",
	1: "TRANSFER_TYPE_SEND",
	2: "TRANSFER_TYPE_RECEIVE",
	3: "TRANSFER_TYPE_CHANGE",
	4: "TRANSFER_TYPE_FATAL",
}

var TransferType_value = map[string]int32{
	"TRANSFER_TYPE_INVALID": 0,
	"TRANSFER_TYPE_SEND":    1,
	"TRANSFER_TYPE_RECEIVE": 2,
	"TRANSFER_TYPE_CHANGE":  3,
	"TRANSFER_TYPE_FATAL":   4,
}

func (x TransferType) String() string {
	return proto.EnumName(TransferType_name, int32(x))
}

func (TransferType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_325b3e94c3ce0b6e, []int{5}
}

// XRPTransactionType is a type of xrp transaction.
type XRPTransactionType int32

const (
	XRPTransactionType_XRP_TRANSACTION_TYPE_INVALID         XRPTransactionType = 0
	XRPTransactionType_XRP_TRANSACTION_TYPE_PAYMENT         XRPTransactionType = 1
	XRPTransactionType_XRP_TRANSACTION_TYPE_SET_SIGNER_LIST XRPTransactionType = 2
	XRPTransactionType_XRP_TRANSACTION_TYPE_DISABLE_MASTER  XRPTransactionType = 3
)

var XRPTransactionType_name = map[int32]string{
	0: "XRP_TRANSACTION_TYPE_INVALID",
	1: "XRP_TRANSACTION_TYPE_PAYMENT",
	2: "XRP_TRANSACTION_TYPE_SET_SIGNER_LIST",
	3: "XRP_TRANSACTION_TYPE_DISABLE_MASTER",
}

var XRPTransactionType_value = map[string]int32{
	"XRP_TRANSACTION_TYPE_INVALID":         0,
	"XRP_TRANSACTION_TYPE_PAYMENT":         1,
	"XRP_TRANSACTION_TYPE_SET_SIGNER_LIST": 2,
	"XRP_TRANSACTION_TYPE_DISABLE_MASTER":  3,
}

func (x XRPTransactionType) String() string {
	return proto.EnumName(XRPTransactionType_name, int32(x))
}

func (XRPTransactionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_325b3e94c3ce0b6e, []int{6}
}

// TransactionResult is a result of transaction.
type TransactionResult int32

const (
	TransactionResult_TRANSACTION_RESULT_INVALID TransactionResult = 0
	TransactionResult_TRANSACTION_RESULT_PENDING TransactionResult = 1
	TransactionResult_TRANSACTION_RESULT_SUCCESS TransactionResult = 2
	TransactionResult_TRANSACTION_RESULT_FAILURE TransactionResult = 3
	TransactionResult_TRANSACTION_RESULT_NONE    TransactionResult = 100
)

var TransactionResult_name = map[int32]string{
	0:   "TRANSACTION_RESULT_INVALID",
	1:   "TRANSACTION_RESULT_PENDING",
	2:   "TRANSACTION_RESULT_SUCCESS",
	3:   "TRANSACTION_RESULT_FAILURE",
	100: "TRANSACTION_RESULT_NONE",
}

var TransactionResult_value = map[string]int32{
	"TRANSACTION_RESULT_INVALID": 0,
	"TRANSACTION_RESULT_PENDING": 1,
	"TRANSACTION_RESULT_SUCCESS": 2,
	"TRANSACTION_RESULT_FAILURE": 3,
	"TRANSACTION_RESULT_NONE":    100,
}

func (x TransactionResult) String() string {
	return proto.EnumName(TransactionResult_name, int32(x))
}

func (TransactionResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_325b3e94c3ce0b6e, []int{7}
}

func init() {
	proto.RegisterEnum("gincoinc.global.v1.Coin", Coin_name, Coin_value)
	proto.RegisterEnum("gincoinc.global.v1.Network", Network_name, Network_value)
	proto.RegisterEnum("gincoinc.global.v1.AddressType", AddressType_name, AddressType_value)
	proto.RegisterEnum("gincoinc.global.v1.TransactionState", TransactionState_name, TransactionState_value)
	proto.RegisterEnum("gincoinc.global.v1.UTXOState", UTXOState_name, UTXOState_value)
	proto.RegisterEnum("gincoinc.global.v1.TransferType", TransferType_name, TransferType_value)
	proto.RegisterEnum("gincoinc.global.v1.XRPTransactionType", XRPTransactionType_name, XRPTransactionType_value)
	proto.RegisterEnum("gincoinc.global.v1.TransactionResult", TransactionResult_name, TransactionResult_value)
}

func init() {
	proto.RegisterFile("gincoinc/global/v1/gincoincglobalv1/enum.proto", fileDescriptor_325b3e94c3ce0b6e)
}

var fileDescriptor_325b3e94c3ce0b6e = []byte{
	// 635 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xcd, 0x6e, 0xd3, 0x4e,
	0x14, 0xc5, 0xff, 0x4e, 0xd2, 0xaf, 0xfb, 0xaf, 0xc4, 0x74, 0xda, 0xa6, 0x1f, 0x29, 0xb4, 0x12,
	0x48, 0x20, 0x2f, 0x12, 0xb5, 0x3c, 0xc1, 0xc4, 0xbe, 0x69, 0x46, 0x38, 0x63, 0x6b, 0x66, 0xdc,
	0xa6, 0x2c, 0xb0, 0xd2, 0xd6, 0x54, 0x11, 0x25, 0xae, 0x92, 0xb4, 0x88, 0x57, 0x60, 0xc3, 0x83,
	0xb0, 0x61, 0xc1, 0x53, 0xf0, 0x54, 0xc8, 0x36, 0x0e, 0x76, 0xe2, 0x2c, 0xe7, 0xfc, 0xee, 0xf1,
	0x1c, 0xdf, 0x7b, 0x6d, 0x68, 0xde, 0x0d, 0x47, 0x37, 0xd1, 0x70, 0x74, 0xd3, 0xba, 0xbb, 0x8f,
	0xae, 0x07, 0xf7, 0xad, 0xa7, 0xd3, 0x56, 0x26, 0xa5, 0xca, 0xd3, 0x69, 0x2b, 0x1c, 0x3d, 0x7e,
	0x6e, 0x3e, 0x8c, 0xa3, 0x69, 0x44, 0x69, 0x06, 0x9b, 0x29, 0x6d, 0x3e, 0x9d, 0x9a, 0x1f, 0xa0,
	0x66, 0x45, 0xc3, 0x11, 0x25, 0xb0, 0x69, 0xb9, 0x5c, 0x04, 0x5c, 0x5c, 0x30, 0x87, 0xdb, 0xe4,
	0x3f, 0xba, 0x09, 0xeb, 0x89, 0xd2, 0xd6, 0x16, 0x31, 0x66, 0x27, 0xd4, 0x5d, 0x52, 0x99, 0x9d,
	0x1c, 0x6d, 0x91, 0xea, 0xbf, 0x4a, 0xab, 0x4b, 0x6a, 0xb3, 0x53, 0x5f, 0x7a, 0x64, 0xc5, 0xfc,
	0x5d, 0x81, 0x35, 0x11, 0x4e, 0xbf, 0x44, 0xe3, 0x4f, 0x74, 0x1b, 0x9e, 0x09, 0xd4, 0x97, 0xae,
	0x7c, 0x97, 0xbb, 0xa6, 0x01, 0x7b, 0x99, 0xd8, 0xe6, 0x3a, 0x71, 0xf6, 0x18, 0x17, 0x02, 0x35,
	0x31, 0xca, 0xa0, 0x46, 0xa5, 0x63, 0x58, 0xa1, 0x47, 0xb0, 0x9f, 0x41, 0xd4, 0x5d, 0x94, 0xe8,
	0xf7, 0x66, 0xd6, 0x6a, 0x29, 0xcd, 0xbc, 0xb5, 0x3c, 0x75, 0xb8, 0xc6, 0xc2, 0xb5, 0x2b, 0xa5,
	0x34, 0xf3, 0xae, 0xd2, 0x63, 0x68, 0xcc, 0x85, 0xb2, 0x98, 0xea, 0xce, 0xec, 0x6b, 0xcb, 0x0a,
	0xb2, 0x27, 0xac, 0xd3, 0x43, 0xa8, 0x67, 0x05, 0x92, 0x7b, 0x9e, 0x83, 0x33, 0xf3, 0x46, 0x09,
	0xcb, 0x7c, 0x60, 0x7e, 0x33, 0xe0, 0x7f, 0x76, 0x7b, 0x3b, 0x0e, 0x27, 0x13, 0xfd, 0xf5, 0x21,
	0xa4, 0xfb, 0xb0, 0xc3, 0x6c, 0x5b, 0xa2, 0x52, 0x81, 0xbe, 0xf2, 0x30, 0xd7, 0xd5, 0x5d, 0xd8,
	0x2a, 0x10, 0xef, 0x4c, 0x75, 0xd3, 0x7e, 0x2e, 0xc8, 0x81, 0x77, 0x76, 0xa9, 0xe2, 0xa1, 0xd6,
	0x81, 0xce, 0xc1, 0x58, 0xaf, 0x2e, 0x3c, 0x4b, 0xb8, 0x02, 0xc9, 0xad, 0xf9, 0xcb, 0x00, 0xa2,
	0xc7, 0x83, 0xd1, 0x64, 0x70, 0x33, 0x1d, 0x46, 0x23, 0x35, 0x1d, 0x4c, 0x43, 0xfa, 0x1c, 0x0e,
	0xb4, 0x64, 0x42, 0x31, 0x4b, 0x73, 0x57, 0x04, 0x4a, 0x33, 0x9d, 0x8f, 0x75, 0x0c, 0x8d, 0x45,
	0xac, 0xfc, 0x76, 0x8f, 0x6b, 0x8d, 0x36, 0x31, 0xca, 0xfd, 0x1e, 0x0a, 0x9b, 0x8b, 0x73, 0x52,
	0xa1, 0x27, 0x70, 0x54, 0x82, 0xa5, 0x6b, 0xa1, 0x52, 0x71, 0x45, 0xb5, 0xfc, 0x06, 0xcb, 0x15,
	0x1d, 0x2e, 0x7b, 0x68, 0x93, 0x9a, 0xf9, 0xdd, 0x80, 0x0d, 0x5f, 0xf7, 0xdd, 0x34, 0x6f, 0x1d,
	0x68, 0x7c, 0x58, 0x08, 0xfa, 0x02, 0x0e, 0x73, 0xfa, 0xdf, 0x00, 0x81, 0x2f, 0x94, 0x87, 0x22,
	0x5e, 0xcc, 0xa2, 0x2f, 0xd3, 0x93, 0x9d, 0x2c, 0xf1, 0xa5, 0xb4, 0x4a, 0x77, 0x80, 0xe4, 0x68,
	0xaa, 0x26, 0x89, 0x36, 0x93, 0x46, 0x7e, 0x0c, 0xc7, 0xc9, 0x58, 0x0f, 0x60, 0x37, 0x79, 0x87,
	0x0e, 0xca, 0xf9, 0xb9, 0xd6, 0x81, 0x16, 0x91, 0x42, 0x11, 0xf7, 0x6d, 0xc1, 0x22, 0xd1, 0x42,
	0x7e, 0x81, 0xa4, 0x12, 0x2f, 0x49, 0x11, 0x59, 0x5d, 0x26, 0xce, 0x91, 0x54, 0xe9, 0x1e, 0x6c,
	0x17, 0x49, 0x87, 0x69, 0xe6, 0x90, 0x9a, 0xf9, 0xc3, 0x00, 0xda, 0x97, 0x5e, 0x6e, 0xba, 0x49,
	0xae, 0x13, 0x38, 0xea, 0x4b, 0x2f, 0xc8, 0xf7, 0x77, 0x2e, 0xde, 0xb2, 0x0a, 0x8f, 0x5d, 0xf5,
	0xd2, 0xc6, 0xbd, 0x81, 0x57, 0xa5, 0x15, 0x0a, 0x75, 0xa0, 0xf8, 0xb9, 0x40, 0x19, 0x38, 0x5c,
	0xc5, 0xad, 0x7c, 0x0d, 0x2f, 0x4b, 0x2b, 0x6d, 0xae, 0x58, 0x3b, 0xf9, 0x64, 0x94, 0x46, 0x49,
	0xaa, 0xe6, 0x4f, 0x03, 0xb6, 0x72, 0x51, 0x65, 0x38, 0x79, 0xbc, 0x9f, 0xc6, 0x13, 0xcc, 0x5b,
	0x25, 0x2a, 0xdf, 0xd1, 0xc5, 0x09, 0x97, 0xf0, 0x6c, 0xd5, 0x8c, 0x25, 0x5c, 0xf9, 0x56, 0xbc,
	0x6b, 0xa4, 0xb2, 0x84, 0x77, 0x18, 0x77, 0x7c, 0x19, 0x37, 0xb7, 0x01, 0x7b, 0x25, 0x3c, 0xfd,
	0x76, 0xda, 0xf4, 0x3d, 0x99, 0xff, 0x51, 0x5f, 0xaf, 0x26, 0x3f, 0xe9, 0xb7, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x3c, 0xca, 0xd2, 0x37, 0xd6, 0x05, 0x00, 0x00,
}
