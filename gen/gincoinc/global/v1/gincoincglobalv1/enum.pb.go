// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.8.0
// source: gincoinc/global/v1/gincoincglobalv1/enum.proto

package gincoincglobalv1

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Coin is a type of crypto asset.
type Coin int32

const (
	Coin_COIN_INVALID Coin = 0
	Coin_COIN_BTC     Coin = 1
	Coin_COIN_ETH     Coin = 2
	Coin_COIN_LTC     Coin = 3
	Coin_COIN_BCH     Coin = 4
	Coin_COIN_XRP     Coin = 5
	Coin_COIN_BAT     Coin = 6
	Coin_COIN_TRX     Coin = 7
	Coin_COIN_USDT    Coin = 8
	Coin_COIN_RYO     Coin = 9
	Coin_COIN_JASMY   Coin = 10
	Coin_COIN_ENJ     Coin = 11
	Coin_COIN_OMG     Coin = 12
	Coin_COIN_XLM     Coin = 13
	Coin_COIN_ADA     Coin = 14
	Coin_COIN_DOT     Coin = 15
)

// Enum value maps for Coin.
var (
	Coin_name = map[int32]string{
		0:  "COIN_INVALID",
		1:  "COIN_BTC",
		2:  "COIN_ETH",
		3:  "COIN_LTC",
		4:  "COIN_BCH",
		5:  "COIN_XRP",
		6:  "COIN_BAT",
		7:  "COIN_TRX",
		8:  "COIN_USDT",
		9:  "COIN_RYO",
		10: "COIN_JASMY",
		11: "COIN_ENJ",
		12: "COIN_OMG",
		13: "COIN_XLM",
		14: "COIN_ADA",
		15: "COIN_DOT",
	}
	Coin_value = map[string]int32{
		"COIN_INVALID": 0,
		"COIN_BTC":     1,
		"COIN_ETH":     2,
		"COIN_LTC":     3,
		"COIN_BCH":     4,
		"COIN_XRP":     5,
		"COIN_BAT":     6,
		"COIN_TRX":     7,
		"COIN_USDT":    8,
		"COIN_RYO":     9,
		"COIN_JASMY":   10,
		"COIN_ENJ":     11,
		"COIN_OMG":     12,
		"COIN_XLM":     13,
		"COIN_ADA":     14,
		"COIN_DOT":     15,
	}
)

func (x Coin) Enum() *Coin {
	p := new(Coin)
	*p = x
	return p
}

func (x Coin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Coin) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[0].Descriptor()
}

func (Coin) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[0]
}

func (x Coin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Coin.Descriptor instead.
func (Coin) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{0}
}

// Network is a type of blockchain network.
type Network int32

const (
	Network_NETWORK_INVALID             Network = 0
	Network_NETWORK_BITCOIN_MAINNET     Network = 1
	Network_NETWORK_BITCOIN_TESTNET     Network = 2
	Network_NETWORK_ETHEREUM_MAINNET    Network = 3
	Network_NETWORK_ETHEREUM_TESTNET    Network = 4
	Network_NETWORK_LITECOIN_MAINNET    Network = 5
	Network_NETWORK_LITECOIN_TESTNET    Network = 6
	Network_NETWORK_BITCOINCASH_MAINNET Network = 7
	Network_NETWORK_BITCOINCASH_TESTNET Network = 8
	Network_NETWORK_RIPPLE_MAINNET      Network = 9
	Network_NETWORK_RIPPLE_TESTNET      Network = 10
	Network_NETWORK_TRON_MAINNET        Network = 11
	Network_NETWORK_TRON_TESTNET        Network = 12
	Network_NETWORK_C0BAN_MAINNET       Network = 13
	Network_NETWORK_C0BAN_TESTNET       Network = 14
	Network_NETWORK_STELLAR_MAINNET     Network = 15
	Network_NETWORK_STELLAR_TESTNET     Network = 16
	Network_NETWORK_CARDANO_MAINNET     Network = 17
	Network_NETWORK_CARDANO_TESTNET     Network = 18
	Network_NETWORK_POLKADOT_MAINNET    Network = 19
	Network_NETWORK_POLKADOT_TESTNET    Network = 20
)

// Enum value maps for Network.
var (
	Network_name = map[int32]string{
		0:  "NETWORK_INVALID",
		1:  "NETWORK_BITCOIN_MAINNET",
		2:  "NETWORK_BITCOIN_TESTNET",
		3:  "NETWORK_ETHEREUM_MAINNET",
		4:  "NETWORK_ETHEREUM_TESTNET",
		5:  "NETWORK_LITECOIN_MAINNET",
		6:  "NETWORK_LITECOIN_TESTNET",
		7:  "NETWORK_BITCOINCASH_MAINNET",
		8:  "NETWORK_BITCOINCASH_TESTNET",
		9:  "NETWORK_RIPPLE_MAINNET",
		10: "NETWORK_RIPPLE_TESTNET",
		11: "NETWORK_TRON_MAINNET",
		12: "NETWORK_TRON_TESTNET",
		13: "NETWORK_C0BAN_MAINNET",
		14: "NETWORK_C0BAN_TESTNET",
		15: "NETWORK_STELLAR_MAINNET",
		16: "NETWORK_STELLAR_TESTNET",
		17: "NETWORK_CARDANO_MAINNET",
		18: "NETWORK_CARDANO_TESTNET",
		19: "NETWORK_POLKADOT_MAINNET",
		20: "NETWORK_POLKADOT_TESTNET",
	}
	Network_value = map[string]int32{
		"NETWORK_INVALID":             0,
		"NETWORK_BITCOIN_MAINNET":     1,
		"NETWORK_BITCOIN_TESTNET":     2,
		"NETWORK_ETHEREUM_MAINNET":    3,
		"NETWORK_ETHEREUM_TESTNET":    4,
		"NETWORK_LITECOIN_MAINNET":    5,
		"NETWORK_LITECOIN_TESTNET":    6,
		"NETWORK_BITCOINCASH_MAINNET": 7,
		"NETWORK_BITCOINCASH_TESTNET": 8,
		"NETWORK_RIPPLE_MAINNET":      9,
		"NETWORK_RIPPLE_TESTNET":      10,
		"NETWORK_TRON_MAINNET":        11,
		"NETWORK_TRON_TESTNET":        12,
		"NETWORK_C0BAN_MAINNET":       13,
		"NETWORK_C0BAN_TESTNET":       14,
		"NETWORK_STELLAR_MAINNET":     15,
		"NETWORK_STELLAR_TESTNET":     16,
		"NETWORK_CARDANO_MAINNET":     17,
		"NETWORK_CARDANO_TESTNET":     18,
		"NETWORK_POLKADOT_MAINNET":    19,
		"NETWORK_POLKADOT_TESTNET":    20,
	}
)

func (x Network) Enum() *Network {
	p := new(Network)
	*p = x
	return p
}

func (x Network) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Network) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[1].Descriptor()
}

func (Network) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[1]
}

func (x Network) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Network.Descriptor instead.
func (Network) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{1}
}

// AddressType is a type of address.
type AddressType int32

const (
	AddressType_ADDRESS_TYPE_INVALID    AddressType = 0
	AddressType_ADDRESS_TYPE_P2SH       AddressType = 1   //Pay to Script Hash
	AddressType_ADDRESS_TYPE_P2SH_P2WSH AddressType = 2   //Pay to Witness Script Hash nested P2SH
	AddressType_ADDRESS_TYPE_P2WSH      AddressType = 3   //Pay to Witness Script Hash
	AddressType_ADDRESS_TYPE_NONE       AddressType = 100 //For ETH/XRP
)

// Enum value maps for AddressType.
var (
	AddressType_name = map[int32]string{
		0:   "ADDRESS_TYPE_INVALID",
		1:   "ADDRESS_TYPE_P2SH",
		2:   "ADDRESS_TYPE_P2SH_P2WSH",
		3:   "ADDRESS_TYPE_P2WSH",
		100: "ADDRESS_TYPE_NONE",
	}
	AddressType_value = map[string]int32{
		"ADDRESS_TYPE_INVALID":    0,
		"ADDRESS_TYPE_P2SH":       1,
		"ADDRESS_TYPE_P2SH_P2WSH": 2,
		"ADDRESS_TYPE_P2WSH":      3,
		"ADDRESS_TYPE_NONE":       100,
	}
)

func (x AddressType) Enum() *AddressType {
	p := new(AddressType)
	*p = x
	return p
}

func (x AddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[2].Descriptor()
}

func (AddressType) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[2]
}

func (x AddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressType.Descriptor instead.
func (AddressType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{2}
}

// TransactionState is a state of transaction.
type TransactionState int32

const (
	TransactionState_TRANSACTION_STATE_INVALID    TransactionState = 0
	TransactionState_TRANSACTION_STATE_SUBMITTED  TransactionState = 1 //Transaction is submitted
	TransactionState_TRANSACTION_STATE_PENDING    TransactionState = 2 //Transaction is included in mempool
	TransactionState_TRANSACTION_STATE_PROCESSING TransactionState = 3 //Transaction is included in a block
	TransactionState_TRANSACTION_STATE_CONFIRMED  TransactionState = 4 //Exceeded number of confirmations specified
	TransactionState_TRANSACTION_STATE_DROPPED    TransactionState = 5 //Transaction is dropped
)

// Enum value maps for TransactionState.
var (
	TransactionState_name = map[int32]string{
		0: "TRANSACTION_STATE_INVALID",
		1: "TRANSACTION_STATE_SUBMITTED",
		2: "TRANSACTION_STATE_PENDING",
		3: "TRANSACTION_STATE_PROCESSING",
		4: "TRANSACTION_STATE_CONFIRMED",
		5: "TRANSACTION_STATE_DROPPED",
	}
	TransactionState_value = map[string]int32{
		"TRANSACTION_STATE_INVALID":    0,
		"TRANSACTION_STATE_SUBMITTED":  1,
		"TRANSACTION_STATE_PENDING":    2,
		"TRANSACTION_STATE_PROCESSING": 3,
		"TRANSACTION_STATE_CONFIRMED":  4,
		"TRANSACTION_STATE_DROPPED":    5,
	}
)

func (x TransactionState) Enum() *TransactionState {
	p := new(TransactionState)
	*p = x
	return p
}

func (x TransactionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionState) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[3].Descriptor()
}

func (TransactionState) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[3]
}

func (x TransactionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionState.Descriptor instead.
func (TransactionState) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{3}
}

// UTXOState is a state of UTXO.
type UTXOState int32

const (
	UTXOState_UTXO_STATE_INVALID         UTXOState = 0
	UTXOState_UTXO_STATE_PENDING_UNSPENT UTXOState = 1
	UTXOState_UTXO_STATE_UNSPENT         UTXOState = 2
	UTXOState_UTXO_STATE_PENDING_SPENT   UTXOState = 3
	UTXOState_UTXO_STATE_SPENT           UTXOState = 4
)

// Enum value maps for UTXOState.
var (
	UTXOState_name = map[int32]string{
		0: "UTXO_STATE_INVALID",
		1: "UTXO_STATE_PENDING_UNSPENT",
		2: "UTXO_STATE_UNSPENT",
		3: "UTXO_STATE_PENDING_SPENT",
		4: "UTXO_STATE_SPENT",
	}
	UTXOState_value = map[string]int32{
		"UTXO_STATE_INVALID":         0,
		"UTXO_STATE_PENDING_UNSPENT": 1,
		"UTXO_STATE_UNSPENT":         2,
		"UTXO_STATE_PENDING_SPENT":   3,
		"UTXO_STATE_SPENT":           4,
	}
)

func (x UTXOState) Enum() *UTXOState {
	p := new(UTXOState)
	*p = x
	return p
}

func (x UTXOState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UTXOState) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[4].Descriptor()
}

func (UTXOState) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[4]
}

func (x UTXOState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UTXOState.Descriptor instead.
func (UTXOState) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{4}
}

// TransferType is a type of transaction.
type TransferType int32

const (
	TransferType_TRANSFER_TYPE_INVALID TransferType = 0
	TransferType_TRANSFER_TYPE_SEND    TransferType = 1 //The type of send
	TransferType_TRANSFER_TYPE_RECEIVE TransferType = 2 //The type of receive
	TransferType_TRANSFER_TYPE_CHANGE  TransferType = 3 //The type of change transaction for BTC/LTC/BCH
	TransferType_TRANSFER_TYPE_FATAL   TransferType = 4 //The type of fraudulent remittance
)

// Enum value maps for TransferType.
var (
	TransferType_name = map[int32]string{
		0: "TRANSFER_TYPE_INVALID",
		1: "TRANSFER_TYPE_SEND",
		2: "TRANSFER_TYPE_RECEIVE",
		3: "TRANSFER_TYPE_CHANGE",
		4: "TRANSFER_TYPE_FATAL",
	}
	TransferType_value = map[string]int32{
		"TRANSFER_TYPE_INVALID": 0,
		"TRANSFER_TYPE_SEND":    1,
		"TRANSFER_TYPE_RECEIVE": 2,
		"TRANSFER_TYPE_CHANGE":  3,
		"TRANSFER_TYPE_FATAL":   4,
	}
)

func (x TransferType) Enum() *TransferType {
	p := new(TransferType)
	*p = x
	return p
}

func (x TransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[5].Descriptor()
}

func (TransferType) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[5]
}

func (x TransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferType.Descriptor instead.
func (TransferType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{5}
}

// XRPTransactionType is a type of xrp transaction.
type XRPTransactionType int32

const (
	XRPTransactionType_XRP_TRANSACTION_TYPE_INVALID         XRPTransactionType = 0
	XRPTransactionType_XRP_TRANSACTION_TYPE_PAYMENT         XRPTransactionType = 1
	XRPTransactionType_XRP_TRANSACTION_TYPE_SET_SIGNER_LIST XRPTransactionType = 2
	XRPTransactionType_XRP_TRANSACTION_TYPE_DISABLE_MASTER  XRPTransactionType = 3
)

// Enum value maps for XRPTransactionType.
var (
	XRPTransactionType_name = map[int32]string{
		0: "XRP_TRANSACTION_TYPE_INVALID",
		1: "XRP_TRANSACTION_TYPE_PAYMENT",
		2: "XRP_TRANSACTION_TYPE_SET_SIGNER_LIST",
		3: "XRP_TRANSACTION_TYPE_DISABLE_MASTER",
	}
	XRPTransactionType_value = map[string]int32{
		"XRP_TRANSACTION_TYPE_INVALID":         0,
		"XRP_TRANSACTION_TYPE_PAYMENT":         1,
		"XRP_TRANSACTION_TYPE_SET_SIGNER_LIST": 2,
		"XRP_TRANSACTION_TYPE_DISABLE_MASTER":  3,
	}
)

func (x XRPTransactionType) Enum() *XRPTransactionType {
	p := new(XRPTransactionType)
	*p = x
	return p
}

func (x XRPTransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XRPTransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[6].Descriptor()
}

func (XRPTransactionType) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[6]
}

func (x XRPTransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XRPTransactionType.Descriptor instead.
func (XRPTransactionType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{6}
}

// TransactionResult is a result of transaction.
type TransactionResult int32

const (
	TransactionResult_TRANSACTION_RESULT_INVALID TransactionResult = 0
	TransactionResult_TRANSACTION_RESULT_PENDING TransactionResult = 1 // Transaction is pending
	TransactionResult_TRANSACTION_RESULT_SUCCESS TransactionResult = 2 // Transaction is included in block
	TransactionResult_TRANSACTION_RESULT_FAILURE TransactionResult = 3 // Failed to send transaction
	TransactionResult_TRANSACTION_RESULT_NONE    TransactionResult = 100
)

// Enum value maps for TransactionResult.
var (
	TransactionResult_name = map[int32]string{
		0:   "TRANSACTION_RESULT_INVALID",
		1:   "TRANSACTION_RESULT_PENDING",
		2:   "TRANSACTION_RESULT_SUCCESS",
		3:   "TRANSACTION_RESULT_FAILURE",
		100: "TRANSACTION_RESULT_NONE",
	}
	TransactionResult_value = map[string]int32{
		"TRANSACTION_RESULT_INVALID": 0,
		"TRANSACTION_RESULT_PENDING": 1,
		"TRANSACTION_RESULT_SUCCESS": 2,
		"TRANSACTION_RESULT_FAILURE": 3,
		"TRANSACTION_RESULT_NONE":    100,
	}
)

func (x TransactionResult) Enum() *TransactionResult {
	p := new(TransactionResult)
	*p = x
	return p
}

func (x TransactionResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionResult) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[7].Descriptor()
}

func (TransactionResult) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[7]
}

func (x TransactionResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionResult.Descriptor instead.
func (TransactionResult) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{7}
}

var File_gincoinc_global_v1_gincoincglobalv1_enum_proto protoreflect.FileDescriptor

var file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2a, 0xed, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x42, 0x54, 0x43, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x54, 0x48, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x4f, 0x49, 0x4e, 0x5f, 0x4c, 0x54, 0x43, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x42, 0x43, 0x48, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f,
	0x58, 0x52, 0x50, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x42, 0x41,
	0x54, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x58, 0x10,
	0x07, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x44, 0x54, 0x10, 0x08,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x52, 0x59, 0x4f, 0x10, 0x09, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4a, 0x41, 0x53, 0x4d, 0x59, 0x10, 0x0a, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x4e, 0x4a, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4f, 0x4d, 0x47, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f,
	0x49, 0x4e, 0x5f, 0x58, 0x4c, 0x4d, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e,
	0x5f, 0x41, 0x44, 0x41, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x44,
	0x4f, 0x54, 0x10, 0x0f, 0x2a, 0xe4, 0x04, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x42, 0x49,
	0x54, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x45, 0x55, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x03, 0x12, 0x1c, 0x0a,
	0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55,
	0x4d, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x49, 0x54, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x5f,
	0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x49, 0x54, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x43, 0x41, 0x53, 0x48, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x49, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e,
	0x4e, 0x45, 0x54, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x52, 0x49, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10,
	0x0a, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x52, 0x4f,
	0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x52, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54,
	0x4e, 0x45, 0x54, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x43, 0x30, 0x42, 0x41, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x0d,
	0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x30, 0x42, 0x41,
	0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x54, 0x45, 0x4c, 0x4c, 0x41, 0x52, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x54, 0x45, 0x4c, 0x4c, 0x41, 0x52, 0x5f, 0x54, 0x45, 0x53, 0x54,
	0x4e, 0x45, 0x54, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x41, 0x4e, 0x4f, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54,
	0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x41, 0x4e, 0x4f, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x12, 0x12,
	0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4f, 0x4c, 0x4b, 0x41,
	0x44, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x13, 0x12, 0x1c, 0x0a,
	0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4f, 0x4c, 0x4b, 0x41, 0x44, 0x4f,
	0x54, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x14, 0x2a, 0x8a, 0x01, 0x0a, 0x0b,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x32, 0x53, 0x48, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x32, 0x53,
	0x48, 0x5f, 0x50, 0x32, 0x57, 0x53, 0x48, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x32, 0x57, 0x53, 0x48, 0x10,
	0x03, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x64, 0x2a, 0xd3, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1f,
	0x0a, 0x1b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x8f,
	0x01, 0x0a, 0x09, 0x55, 0x54, 0x58, 0x4f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x54, 0x58, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x54, 0x58, 0x4f, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x54, 0x58, 0x4f, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x55, 0x54, 0x58, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x50, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x54,
	0x58, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x4e, 0x54, 0x10, 0x04,
	0x2a, 0x8f, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c,
	0x10, 0x04, 0x2a, 0xab, 0x01, 0x0a, 0x12, 0x58, 0x52, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x58, 0x52, 0x50,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x58,
	0x52, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x28, 0x0a,
	0x24, 0x58, 0x52, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x52,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x58, 0x52, 0x50, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x03,
	0x2a, 0xb0, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x64, 0x42, 0x12, 0x5a, 0x10, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescOnce sync.Once
	file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescData = file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDesc
)

func file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP() []byte {
	file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescOnce.Do(func() {
		file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescData = protoimpl.X.CompressGZIP(file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescData)
	})
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescData
}

var file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_gincoinc_global_v1_gincoincglobalv1_enum_proto_goTypes = []interface{}{
	(Coin)(0),               // 0: gincoinc.global.v1.Coin
	(Network)(0),            // 1: gincoinc.global.v1.Network
	(AddressType)(0),        // 2: gincoinc.global.v1.AddressType
	(TransactionState)(0),   // 3: gincoinc.global.v1.TransactionState
	(UTXOState)(0),          // 4: gincoinc.global.v1.UTXOState
	(TransferType)(0),       // 5: gincoinc.global.v1.TransferType
	(XRPTransactionType)(0), // 6: gincoinc.global.v1.XRPTransactionType
	(TransactionResult)(0),  // 7: gincoinc.global.v1.TransactionResult
}
var file_gincoinc_global_v1_gincoincglobalv1_enum_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_gincoinc_global_v1_gincoincglobalv1_enum_proto_init() }
func file_gincoinc_global_v1_gincoincglobalv1_enum_proto_init() {
	if File_gincoinc_global_v1_gincoincglobalv1_enum_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gincoinc_global_v1_gincoincglobalv1_enum_proto_goTypes,
		DependencyIndexes: file_gincoinc_global_v1_gincoincglobalv1_enum_proto_depIdxs,
		EnumInfos:         file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes,
	}.Build()
	File_gincoinc_global_v1_gincoincglobalv1_enum_proto = out.File
	file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDesc = nil
	file_gincoinc_global_v1_gincoincglobalv1_enum_proto_goTypes = nil
	file_gincoinc_global_v1_gincoincglobalv1_enum_proto_depIdxs = nil
}
