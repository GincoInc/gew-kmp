// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: gincoinc/global/v1/gincoincglobalv1/enum.proto

package gincoincglobalv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Coin is a type of crypto asset.
type Coin int32

const (
	Coin_COIN_INVALID              Coin = 0
	Coin_COIN_BTC                  Coin = 1
	Coin_COIN_ETH                  Coin = 2
	Coin_COIN_LTC                  Coin = 3
	Coin_COIN_BCH                  Coin = 4
	Coin_COIN_XRP                  Coin = 5
	Coin_COIN_ERC20_BAT            Coin = 6
	Coin_COIN_TRX                  Coin = 7
	Coin_COIN_ERC20_USDT           Coin = 8
	Coin_COIN_RYO                  Coin = 9
	Coin_COIN_ERC20_JASMY          Coin = 10
	Coin_COIN_ERC20_ENJ            Coin = 11
	Coin_COIN_ERC20_OMG            Coin = 12
	Coin_COIN_XLM                  Coin = 13
	Coin_COIN_ADA                  Coin = 14
	Coin_COIN_DOT                  Coin = 15
	Coin_COIN_ERC20_LINK           Coin = 16
	Coin_COIN_ERC20_DEP            Coin = 17
	Coin_COIN_ERC20_USDC           Coin = 18
	Coin_COIN_ERC20_GYEN           Coin = 19
	Coin_COIN_ERC20_ZAIF           Coin = 20
	Coin_COIN_ERC20_FSCC           Coin = 21
	Coin_COIN_ERC20_CMS            Coin = 22
	Coin_COIN_ERC20_CICC           Coin = 23
	Coin_COIN_ERC20_NCXC           Coin = 24
	Coin_COIN_ERC20_COT            Coin = 25
	Coin_COIN_XEM                  Coin = 26
	Coin_COIN_MONA                 Coin = 27
	Coin_COIN_IOST                 Coin = 28
	Coin_COIN_ERC20_SKEB           Coin = 29
	Coin_COIN_KLAY                 Coin = 30
	Coin_COIN_MATIC                Coin = 31
	Coin_COIN_XYM                  Coin = 32
	Coin_COIN_AVAX                 Coin = 33
	Coin_COIN_ERC20_MATIC          Coin = 34
	Coin_COIN_ERC20_ROND           Coin = 35
	Coin_COIN_ERC20_MV             Coin = 36
	Coin_COIN_POLYGON_ERC20_ROND   Coin = 37
	Coin_COIN_POLYGON_ERC20_MV     Coin = 38
	Coin_COIN_POLYGON_ERC20_TSUGT  Coin = 39
	Coin_COIN_ERC20_GXE            Coin = 40
	Coin_COIN_OAS                  Coin = 41
	Coin_COIN_ASTR                 Coin = 42
	Coin_COIN_XDC                  Coin = 43
	Coin_COIN_ATOM                 Coin = 44
	Coin_COIN_KLAYTN_KIP7_MBX      Coin = 45
	Coin_COIN_ETC                  Coin = 46
	Coin_COIN_ERC20_DAI            Coin = 47
	Coin_COIN_ERC20_WETH           Coin = 48
	Coin_COIN_ALGO                 Coin = 49
	Coin_COIN_ERC20_AXS            Coin = 50
	Coin_COIN_ERC20_SAND           Coin = 51
	Coin_COIN_ERC20_MKR            Coin = 52
	Coin_COIN_ERC20_CHZ            Coin = 53
	Coin_COIN_ERC20_NIDT           Coin = 54
	Coin_COIN_ERC20_FNCT           Coin = 55
	Coin_COIN_ERC20_SHIB           Coin = 56
	Coin_COIN_ERC20_APE            Coin = 57
	Coin_COIN_ERC20_BNB            Coin = 58
	Coin_COIN_ERC20_FCR            Coin = 59
	Coin_COIN_HBAR                 Coin = 60
	Coin_COIN_JOC                  Coin = 61
	Coin_COIN_SOL                  Coin = 62
	Coin_COIN_BNB                  Coin = 63
	Coin_COIN_FLR                  Coin = 64
	Coin_COIN_POLYGON_ERC20_OSHI   Coin = 65
	Coin_COIN_ARBITRUM_ERC20_ARB   Coin = 66
	Coin_COIN_KLAYTN_KIP7_BORA     Coin = 67
	Coin_COIN_ERC20_MASK           Coin = 68
	Coin_COIN_ERC20_SUP            Coin = 69
	Coin_COIN_ERC20_DM2P           Coin = 70
	Coin_COIN_APT                  Coin = 71
	Coin_COIN_DOGE                 Coin = 72
	Coin_COIN_POLYGON_ERC20_SNPT   Coin = 73
	Coin_COIN_ERC20_RAT            Coin = 74
	Coin_COIN_QUORUM               Coin = 75
	Coin_COIN_QUORUM_ERC721_TCC    Coin = 76
	Coin_COIN_ERC20_JPYPX          Coin = 77
	Coin_COIN_ERC20_JPYCT          Coin = 78
	Coin_COIN_SDN                  Coin = 10002
	Coin_COIN_ERC20_SCDEV          Coin = 10003 // for stable coin development in dev
	Coin_COIN_ERC20_SCQA           Coin = 10004 // for stable coin development in qa
	Coin_COIN_ERC20_SCPROD         Coin = 10005 // for stable coin development in prod
	Coin_COIN_ERC20_COINSCDEV      Coin = 10006 // for stable coin development in dev
	Coin_COIN_ERC20_COINSCQA       Coin = 10007 // for stable coin development in qa
	Coin_COIN_ERC20_COINSCPROD     Coin = 10008 // for stable coin development in prod
	Coin_COIN_ERC20_COIN1          Coin = 10009
	Coin_COIN_ERC20_COIN2          Coin = 10010
	Coin_COIN_ERC20_COIN3          Coin = 10011
	Coin_COIN_ERC20_COIN4          Coin = 10012
	Coin_COIN_ERC20_COIN5          Coin = 10013
	Coin_COIN_ERC20_COIN6          Coin = 10014
	Coin_COIN_ERC20_COIN7          Coin = 10015
	Coin_COIN_ERC20_COIN8          Coin = 10016
	Coin_COIN_ERC20_COIN9          Coin = 10017
	Coin_COIN_ERC20_COIN10         Coin = 10018
	Coin_COIN_ERC20_COIN11         Coin = 10019
	Coin_COIN_ERC20_COIN12         Coin = 10020
	Coin_COIN_ERC20_COIN13         Coin = 10021
	Coin_COIN_ERC20_COIN14         Coin = 10022
	Coin_COIN_ERC20_COIN15         Coin = 10023
	Coin_COIN_ERC20_COIN           Coin = 10024
	Coin_COIN_ERC20_PREUAT1        Coin = 10025
	Coin_COIN_ERC20_PREUAT2        Coin = 10026
	Coin_COIN_ERC20_PREUAT3        Coin = 10027
	Coin_COIN_ERC20_PREUAT4        Coin = 10028
	Coin_COIN_ERC20_DEVCOIN1       Coin = 10029
	Coin_COIN_ERC20_DEVCOIN2       Coin = 10030
	Coin_COIN_ERC20_MTBJJPY        Coin = 10031
	Coin_COIN_ERC20_MTBJUSD        Coin = 10032
	Coin_COIN_ERC20_PJPY           Coin = 10033
	Coin_COIN_ERC20_PUSD           Coin = 10034
	Coin_COIN_ERC20_UATJPY         Coin = 10035
	Coin_COIN_ERC20_UATUSD         Coin = 10036
	Coin_COIN_ERC20_COIN21         Coin = 10037
	Coin_COIN_ERC20_COIN22         Coin = 10038
	Coin_COIN_ERC20_COIN23         Coin = 10039
	Coin_COIN_ERC20_COIN24         Coin = 10040
	Coin_COIN_ERC20_COIN25         Coin = 10041
	Coin_COIN_ERC20_COIN26         Coin = 10042
	Coin_COIN_ERC20_COIN27         Coin = 10043
	Coin_COIN_ERC20_COIN28         Coin = 10044
	Coin_COIN_ERC20_COIN29         Coin = 10045
	Coin_COIN_ERC20_COIN30         Coin = 10046
	Coin_COIN_ERC20_COIN31         Coin = 10047
	Coin_COIN_ERC20_COIN32         Coin = 10048
	Coin_COIN_QUORUM_ERC721_TCCDEV Coin = 10049 // for Quorum ERC721 development
)

// Enum value maps for Coin.
var (
	Coin_name = map[int32]string{
		0:     "COIN_INVALID",
		1:     "COIN_BTC",
		2:     "COIN_ETH",
		3:     "COIN_LTC",
		4:     "COIN_BCH",
		5:     "COIN_XRP",
		6:     "COIN_ERC20_BAT",
		7:     "COIN_TRX",
		8:     "COIN_ERC20_USDT",
		9:     "COIN_RYO",
		10:    "COIN_ERC20_JASMY",
		11:    "COIN_ERC20_ENJ",
		12:    "COIN_ERC20_OMG",
		13:    "COIN_XLM",
		14:    "COIN_ADA",
		15:    "COIN_DOT",
		16:    "COIN_ERC20_LINK",
		17:    "COIN_ERC20_DEP",
		18:    "COIN_ERC20_USDC",
		19:    "COIN_ERC20_GYEN",
		20:    "COIN_ERC20_ZAIF",
		21:    "COIN_ERC20_FSCC",
		22:    "COIN_ERC20_CMS",
		23:    "COIN_ERC20_CICC",
		24:    "COIN_ERC20_NCXC",
		25:    "COIN_ERC20_COT",
		26:    "COIN_XEM",
		27:    "COIN_MONA",
		28:    "COIN_IOST",
		29:    "COIN_ERC20_SKEB",
		30:    "COIN_KLAY",
		31:    "COIN_MATIC",
		32:    "COIN_XYM",
		33:    "COIN_AVAX",
		34:    "COIN_ERC20_MATIC",
		35:    "COIN_ERC20_ROND",
		36:    "COIN_ERC20_MV",
		37:    "COIN_POLYGON_ERC20_ROND",
		38:    "COIN_POLYGON_ERC20_MV",
		39:    "COIN_POLYGON_ERC20_TSUGT",
		40:    "COIN_ERC20_GXE",
		41:    "COIN_OAS",
		42:    "COIN_ASTR",
		43:    "COIN_XDC",
		44:    "COIN_ATOM",
		45:    "COIN_KLAYTN_KIP7_MBX",
		46:    "COIN_ETC",
		47:    "COIN_ERC20_DAI",
		48:    "COIN_ERC20_WETH",
		49:    "COIN_ALGO",
		50:    "COIN_ERC20_AXS",
		51:    "COIN_ERC20_SAND",
		52:    "COIN_ERC20_MKR",
		53:    "COIN_ERC20_CHZ",
		54:    "COIN_ERC20_NIDT",
		55:    "COIN_ERC20_FNCT",
		56:    "COIN_ERC20_SHIB",
		57:    "COIN_ERC20_APE",
		58:    "COIN_ERC20_BNB",
		59:    "COIN_ERC20_FCR",
		60:    "COIN_HBAR",
		61:    "COIN_JOC",
		62:    "COIN_SOL",
		63:    "COIN_BNB",
		64:    "COIN_FLR",
		65:    "COIN_POLYGON_ERC20_OSHI",
		66:    "COIN_ARBITRUM_ERC20_ARB",
		67:    "COIN_KLAYTN_KIP7_BORA",
		68:    "COIN_ERC20_MASK",
		69:    "COIN_ERC20_SUP",
		70:    "COIN_ERC20_DM2P",
		71:    "COIN_APT",
		72:    "COIN_DOGE",
		73:    "COIN_POLYGON_ERC20_SNPT",
		74:    "COIN_ERC20_RAT",
		75:    "COIN_QUORUM",
		76:    "COIN_QUORUM_ERC721_TCC",
		77:    "COIN_ERC20_JPYPX",
		78:    "COIN_ERC20_JPYCT",
		10002: "COIN_SDN",
		10003: "COIN_ERC20_SCDEV",
		10004: "COIN_ERC20_SCQA",
		10005: "COIN_ERC20_SCPROD",
		10006: "COIN_ERC20_COINSCDEV",
		10007: "COIN_ERC20_COINSCQA",
		10008: "COIN_ERC20_COINSCPROD",
		10009: "COIN_ERC20_COIN1",
		10010: "COIN_ERC20_COIN2",
		10011: "COIN_ERC20_COIN3",
		10012: "COIN_ERC20_COIN4",
		10013: "COIN_ERC20_COIN5",
		10014: "COIN_ERC20_COIN6",
		10015: "COIN_ERC20_COIN7",
		10016: "COIN_ERC20_COIN8",
		10017: "COIN_ERC20_COIN9",
		10018: "COIN_ERC20_COIN10",
		10019: "COIN_ERC20_COIN11",
		10020: "COIN_ERC20_COIN12",
		10021: "COIN_ERC20_COIN13",
		10022: "COIN_ERC20_COIN14",
		10023: "COIN_ERC20_COIN15",
		10024: "COIN_ERC20_COIN",
		10025: "COIN_ERC20_PREUAT1",
		10026: "COIN_ERC20_PREUAT2",
		10027: "COIN_ERC20_PREUAT3",
		10028: "COIN_ERC20_PREUAT4",
		10029: "COIN_ERC20_DEVCOIN1",
		10030: "COIN_ERC20_DEVCOIN2",
		10031: "COIN_ERC20_MTBJJPY",
		10032: "COIN_ERC20_MTBJUSD",
		10033: "COIN_ERC20_PJPY",
		10034: "COIN_ERC20_PUSD",
		10035: "COIN_ERC20_UATJPY",
		10036: "COIN_ERC20_UATUSD",
		10037: "COIN_ERC20_COIN21",
		10038: "COIN_ERC20_COIN22",
		10039: "COIN_ERC20_COIN23",
		10040: "COIN_ERC20_COIN24",
		10041: "COIN_ERC20_COIN25",
		10042: "COIN_ERC20_COIN26",
		10043: "COIN_ERC20_COIN27",
		10044: "COIN_ERC20_COIN28",
		10045: "COIN_ERC20_COIN29",
		10046: "COIN_ERC20_COIN30",
		10047: "COIN_ERC20_COIN31",
		10048: "COIN_ERC20_COIN32",
		10049: "COIN_QUORUM_ERC721_TCCDEV",
	}
	Coin_value = map[string]int32{
		"COIN_INVALID":              0,
		"COIN_BTC":                  1,
		"COIN_ETH":                  2,
		"COIN_LTC":                  3,
		"COIN_BCH":                  4,
		"COIN_XRP":                  5,
		"COIN_ERC20_BAT":            6,
		"COIN_TRX":                  7,
		"COIN_ERC20_USDT":           8,
		"COIN_RYO":                  9,
		"COIN_ERC20_JASMY":          10,
		"COIN_ERC20_ENJ":            11,
		"COIN_ERC20_OMG":            12,
		"COIN_XLM":                  13,
		"COIN_ADA":                  14,
		"COIN_DOT":                  15,
		"COIN_ERC20_LINK":           16,
		"COIN_ERC20_DEP":            17,
		"COIN_ERC20_USDC":           18,
		"COIN_ERC20_GYEN":           19,
		"COIN_ERC20_ZAIF":           20,
		"COIN_ERC20_FSCC":           21,
		"COIN_ERC20_CMS":            22,
		"COIN_ERC20_CICC":           23,
		"COIN_ERC20_NCXC":           24,
		"COIN_ERC20_COT":            25,
		"COIN_XEM":                  26,
		"COIN_MONA":                 27,
		"COIN_IOST":                 28,
		"COIN_ERC20_SKEB":           29,
		"COIN_KLAY":                 30,
		"COIN_MATIC":                31,
		"COIN_XYM":                  32,
		"COIN_AVAX":                 33,
		"COIN_ERC20_MATIC":          34,
		"COIN_ERC20_ROND":           35,
		"COIN_ERC20_MV":             36,
		"COIN_POLYGON_ERC20_ROND":   37,
		"COIN_POLYGON_ERC20_MV":     38,
		"COIN_POLYGON_ERC20_TSUGT":  39,
		"COIN_ERC20_GXE":            40,
		"COIN_OAS":                  41,
		"COIN_ASTR":                 42,
		"COIN_XDC":                  43,
		"COIN_ATOM":                 44,
		"COIN_KLAYTN_KIP7_MBX":      45,
		"COIN_ETC":                  46,
		"COIN_ERC20_DAI":            47,
		"COIN_ERC20_WETH":           48,
		"COIN_ALGO":                 49,
		"COIN_ERC20_AXS":            50,
		"COIN_ERC20_SAND":           51,
		"COIN_ERC20_MKR":            52,
		"COIN_ERC20_CHZ":            53,
		"COIN_ERC20_NIDT":           54,
		"COIN_ERC20_FNCT":           55,
		"COIN_ERC20_SHIB":           56,
		"COIN_ERC20_APE":            57,
		"COIN_ERC20_BNB":            58,
		"COIN_ERC20_FCR":            59,
		"COIN_HBAR":                 60,
		"COIN_JOC":                  61,
		"COIN_SOL":                  62,
		"COIN_BNB":                  63,
		"COIN_FLR":                  64,
		"COIN_POLYGON_ERC20_OSHI":   65,
		"COIN_ARBITRUM_ERC20_ARB":   66,
		"COIN_KLAYTN_KIP7_BORA":     67,
		"COIN_ERC20_MASK":           68,
		"COIN_ERC20_SUP":            69,
		"COIN_ERC20_DM2P":           70,
		"COIN_APT":                  71,
		"COIN_DOGE":                 72,
		"COIN_POLYGON_ERC20_SNPT":   73,
		"COIN_ERC20_RAT":            74,
		"COIN_QUORUM":               75,
		"COIN_QUORUM_ERC721_TCC":    76,
		"COIN_ERC20_JPYPX":          77,
		"COIN_ERC20_JPYCT":          78,
		"COIN_SDN":                  10002,
		"COIN_ERC20_SCDEV":          10003,
		"COIN_ERC20_SCQA":           10004,
		"COIN_ERC20_SCPROD":         10005,
		"COIN_ERC20_COINSCDEV":      10006,
		"COIN_ERC20_COINSCQA":       10007,
		"COIN_ERC20_COINSCPROD":     10008,
		"COIN_ERC20_COIN1":          10009,
		"COIN_ERC20_COIN2":          10010,
		"COIN_ERC20_COIN3":          10011,
		"COIN_ERC20_COIN4":          10012,
		"COIN_ERC20_COIN5":          10013,
		"COIN_ERC20_COIN6":          10014,
		"COIN_ERC20_COIN7":          10015,
		"COIN_ERC20_COIN8":          10016,
		"COIN_ERC20_COIN9":          10017,
		"COIN_ERC20_COIN10":         10018,
		"COIN_ERC20_COIN11":         10019,
		"COIN_ERC20_COIN12":         10020,
		"COIN_ERC20_COIN13":         10021,
		"COIN_ERC20_COIN14":         10022,
		"COIN_ERC20_COIN15":         10023,
		"COIN_ERC20_COIN":           10024,
		"COIN_ERC20_PREUAT1":        10025,
		"COIN_ERC20_PREUAT2":        10026,
		"COIN_ERC20_PREUAT3":        10027,
		"COIN_ERC20_PREUAT4":        10028,
		"COIN_ERC20_DEVCOIN1":       10029,
		"COIN_ERC20_DEVCOIN2":       10030,
		"COIN_ERC20_MTBJJPY":        10031,
		"COIN_ERC20_MTBJUSD":        10032,
		"COIN_ERC20_PJPY":           10033,
		"COIN_ERC20_PUSD":           10034,
		"COIN_ERC20_UATJPY":         10035,
		"COIN_ERC20_UATUSD":         10036,
		"COIN_ERC20_COIN21":         10037,
		"COIN_ERC20_COIN22":         10038,
		"COIN_ERC20_COIN23":         10039,
		"COIN_ERC20_COIN24":         10040,
		"COIN_ERC20_COIN25":         10041,
		"COIN_ERC20_COIN26":         10042,
		"COIN_ERC20_COIN27":         10043,
		"COIN_ERC20_COIN28":         10044,
		"COIN_ERC20_COIN29":         10045,
		"COIN_ERC20_COIN30":         10046,
		"COIN_ERC20_COIN31":         10047,
		"COIN_ERC20_COIN32":         10048,
		"COIN_QUORUM_ERC721_TCCDEV": 10049,
	}
)

func (x Coin) Enum() *Coin {
	p := new(Coin)
	*p = x
	return p
}

func (x Coin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Coin) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[0].Descriptor()
}

func (Coin) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[0]
}

func (x Coin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Coin.Descriptor instead.
func (Coin) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{0}
}

// Network is a type of blockchain network.
type Network int32

const (
	Network_NETWORK_INVALID                          Network = 0
	Network_NETWORK_BITCOIN_MAINNET                  Network = 1
	Network_NETWORK_BITCOIN_TESTNET                  Network = 2
	Network_NETWORK_ETHEREUM_MAINNET                 Network = 3
	Network_NETWORK_ETHEREUM_TESTNET                 Network = 4  // Sepolia
	Network_NETWORK_ETHEREUM_TESTNET_2               Network = 59 // Holesky
	Network_NETWORK_LITECOIN_MAINNET                 Network = 5
	Network_NETWORK_LITECOIN_TESTNET                 Network = 6
	Network_NETWORK_BITCOINCASH_MAINNET              Network = 7
	Network_NETWORK_BITCOINCASH_TESTNET              Network = 8
	Network_NETWORK_RIPPLE_MAINNET                   Network = 9
	Network_NETWORK_RIPPLE_TESTNET                   Network = 10
	Network_NETWORK_TRON_MAINNET                     Network = 11
	Network_NETWORK_TRON_TESTNET                     Network = 12
	Network_NETWORK_C0BAN_MAINNET                    Network = 13
	Network_NETWORK_C0BAN_TESTNET                    Network = 14
	Network_NETWORK_STELLAR_MAINNET                  Network = 15
	Network_NETWORK_STELLAR_TESTNET                  Network = 16
	Network_NETWORK_CARDANO_MAINNET                  Network = 17
	Network_NETWORK_CARDANO_TESTNET                  Network = 18
	Network_NETWORK_POLKADOT_MAINNET                 Network = 19
	Network_NETWORK_POLKADOT_TESTNET                 Network = 20
	Network_NETWORK_NEM_MAINNET                      Network = 21
	Network_NETWORK_NEM_TESTNET                      Network = 22
	Network_NETWORK_MONACOIN_MAINNET                 Network = 23
	Network_NETWORK_MONACOIN_TESTNET                 Network = 24
	Network_NETWORK_IOST_MAINNET                     Network = 25
	Network_NETWORK_IOST_TESTNET                     Network = 26
	Network_NETWORK_KLAY_MAINNET                     Network = 27
	Network_NETWORK_KLAY_TESTNET                     Network = 28
	Network_NETWORK_POLYGON_MAINNET                  Network = 29
	Network_NETWORK_POLYGON_TESTNET                  Network = 30
	Network_NETWORK_SYMBOL_MAINNET                   Network = 31
	Network_NETWORK_SYMBOL_TESTNET                   Network = 32
	Network_NETWORK_AVALANCHE_MAINNET                Network = 33
	Network_NETWORK_AVALANCHE_TESTNET                Network = 34
	Network_NETWORK_OASYS_MAINNET                    Network = 35
	Network_NETWORK_OASYS_TESTNET                    Network = 36
	Network_NETWORK_ASTAR_MAINNET                    Network = 37
	Network_NETWORK_SHIBUYA_TESTNET                  Network = 38
	Network_NETWORK_XDC_MAINNET                      Network = 39
	Network_NETWORK_XDC_TESTNET                      Network = 40
	Network_NETWORK_COSMOS_MAINNET                   Network = 41
	Network_NETWORK_COSMOS_TESTNET                   Network = 42
	Network_NETWORK_ETHEREUM_CLASSIC_MAINNET         Network = 43
	Network_NETWORK_ETHEREUM_CLASSIC_TESTNET         Network = 44
	Network_NETWORK_ALGORAND_MAINNET                 Network = 45
	Network_NETWORK_ALGORAND_TESTNET                 Network = 46
	Network_NETWORK_HEDERA_MAINNET                   Network = 47
	Network_NETWORK_HEDERA_TESTNET                   Network = 48
	Network_NETWORK_JAPAN_OPEN_CHAIN_MAINNET         Network = 49
	Network_NETWORK_JAPAN_OPEN_CHAIN_TESTNET         Network = 50
	Network_NETWORK_SOLANA_MAINNET                   Network = 51
	Network_NETWORK_SOLANA_TESTNET                   Network = 52
	Network_NETWORK_BNB_SMART_CHAIN_MAINNET          Network = 53
	Network_NETWORK_BNB_SMART_CHAIN_TESTNET          Network = 54
	Network_NETWORK_FLARE_MAINNET                    Network = 55
	Network_NETWORK_FLARE_TESTNET                    Network = 56
	Network_NETWORK_ARBITRUM_ONE_MAINNET             Network = 57
	Network_NETWORK_ARBITRUM_ONE_TESTNET             Network = 58
	Network_NETWORK_APTOS_MAINNET                    Network = 60
	Network_NETWORK_APTOS_TESTNET                    Network = 61
	Network_NETWORK_DOGECOIN_MAINNET                 Network = 62
	Network_NETWORK_DOGECOIN_TESTNET                 Network = 63
	Network_NETWORK_AVALANCHE_PLATFORM_CHAIN_MAINNET Network = 64
	Network_NETWORK_AVALANCHE_PLATFORM_CHAIN_TESTNET Network = 65
	Network_NETWORK_QUORUM_MAINNET                   Network = 66
	Network_NETWORK_QUORUM_TESTNET                   Network = 67
	Network_NETWORK_SHIDEN_MAINNET                   Network = 10002
)

// Enum value maps for Network.
var (
	Network_name = map[int32]string{
		0:     "NETWORK_INVALID",
		1:     "NETWORK_BITCOIN_MAINNET",
		2:     "NETWORK_BITCOIN_TESTNET",
		3:     "NETWORK_ETHEREUM_MAINNET",
		4:     "NETWORK_ETHEREUM_TESTNET",
		59:    "NETWORK_ETHEREUM_TESTNET_2",
		5:     "NETWORK_LITECOIN_MAINNET",
		6:     "NETWORK_LITECOIN_TESTNET",
		7:     "NETWORK_BITCOINCASH_MAINNET",
		8:     "NETWORK_BITCOINCASH_TESTNET",
		9:     "NETWORK_RIPPLE_MAINNET",
		10:    "NETWORK_RIPPLE_TESTNET",
		11:    "NETWORK_TRON_MAINNET",
		12:    "NETWORK_TRON_TESTNET",
		13:    "NETWORK_C0BAN_MAINNET",
		14:    "NETWORK_C0BAN_TESTNET",
		15:    "NETWORK_STELLAR_MAINNET",
		16:    "NETWORK_STELLAR_TESTNET",
		17:    "NETWORK_CARDANO_MAINNET",
		18:    "NETWORK_CARDANO_TESTNET",
		19:    "NETWORK_POLKADOT_MAINNET",
		20:    "NETWORK_POLKADOT_TESTNET",
		21:    "NETWORK_NEM_MAINNET",
		22:    "NETWORK_NEM_TESTNET",
		23:    "NETWORK_MONACOIN_MAINNET",
		24:    "NETWORK_MONACOIN_TESTNET",
		25:    "NETWORK_IOST_MAINNET",
		26:    "NETWORK_IOST_TESTNET",
		27:    "NETWORK_KLAY_MAINNET",
		28:    "NETWORK_KLAY_TESTNET",
		29:    "NETWORK_POLYGON_MAINNET",
		30:    "NETWORK_POLYGON_TESTNET",
		31:    "NETWORK_SYMBOL_MAINNET",
		32:    "NETWORK_SYMBOL_TESTNET",
		33:    "NETWORK_AVALANCHE_MAINNET",
		34:    "NETWORK_AVALANCHE_TESTNET",
		35:    "NETWORK_OASYS_MAINNET",
		36:    "NETWORK_OASYS_TESTNET",
		37:    "NETWORK_ASTAR_MAINNET",
		38:    "NETWORK_SHIBUYA_TESTNET",
		39:    "NETWORK_XDC_MAINNET",
		40:    "NETWORK_XDC_TESTNET",
		41:    "NETWORK_COSMOS_MAINNET",
		42:    "NETWORK_COSMOS_TESTNET",
		43:    "NETWORK_ETHEREUM_CLASSIC_MAINNET",
		44:    "NETWORK_ETHEREUM_CLASSIC_TESTNET",
		45:    "NETWORK_ALGORAND_MAINNET",
		46:    "NETWORK_ALGORAND_TESTNET",
		47:    "NETWORK_HEDERA_MAINNET",
		48:    "NETWORK_HEDERA_TESTNET",
		49:    "NETWORK_JAPAN_OPEN_CHAIN_MAINNET",
		50:    "NETWORK_JAPAN_OPEN_CHAIN_TESTNET",
		51:    "NETWORK_SOLANA_MAINNET",
		52:    "NETWORK_SOLANA_TESTNET",
		53:    "NETWORK_BNB_SMART_CHAIN_MAINNET",
		54:    "NETWORK_BNB_SMART_CHAIN_TESTNET",
		55:    "NETWORK_FLARE_MAINNET",
		56:    "NETWORK_FLARE_TESTNET",
		57:    "NETWORK_ARBITRUM_ONE_MAINNET",
		58:    "NETWORK_ARBITRUM_ONE_TESTNET",
		60:    "NETWORK_APTOS_MAINNET",
		61:    "NETWORK_APTOS_TESTNET",
		62:    "NETWORK_DOGECOIN_MAINNET",
		63:    "NETWORK_DOGECOIN_TESTNET",
		64:    "NETWORK_AVALANCHE_PLATFORM_CHAIN_MAINNET",
		65:    "NETWORK_AVALANCHE_PLATFORM_CHAIN_TESTNET",
		66:    "NETWORK_QUORUM_MAINNET",
		67:    "NETWORK_QUORUM_TESTNET",
		10002: "NETWORK_SHIDEN_MAINNET",
	}
	Network_value = map[string]int32{
		"NETWORK_INVALID":                          0,
		"NETWORK_BITCOIN_MAINNET":                  1,
		"NETWORK_BITCOIN_TESTNET":                  2,
		"NETWORK_ETHEREUM_MAINNET":                 3,
		"NETWORK_ETHEREUM_TESTNET":                 4,
		"NETWORK_ETHEREUM_TESTNET_2":               59,
		"NETWORK_LITECOIN_MAINNET":                 5,
		"NETWORK_LITECOIN_TESTNET":                 6,
		"NETWORK_BITCOINCASH_MAINNET":              7,
		"NETWORK_BITCOINCASH_TESTNET":              8,
		"NETWORK_RIPPLE_MAINNET":                   9,
		"NETWORK_RIPPLE_TESTNET":                   10,
		"NETWORK_TRON_MAINNET":                     11,
		"NETWORK_TRON_TESTNET":                     12,
		"NETWORK_C0BAN_MAINNET":                    13,
		"NETWORK_C0BAN_TESTNET":                    14,
		"NETWORK_STELLAR_MAINNET":                  15,
		"NETWORK_STELLAR_TESTNET":                  16,
		"NETWORK_CARDANO_MAINNET":                  17,
		"NETWORK_CARDANO_TESTNET":                  18,
		"NETWORK_POLKADOT_MAINNET":                 19,
		"NETWORK_POLKADOT_TESTNET":                 20,
		"NETWORK_NEM_MAINNET":                      21,
		"NETWORK_NEM_TESTNET":                      22,
		"NETWORK_MONACOIN_MAINNET":                 23,
		"NETWORK_MONACOIN_TESTNET":                 24,
		"NETWORK_IOST_MAINNET":                     25,
		"NETWORK_IOST_TESTNET":                     26,
		"NETWORK_KLAY_MAINNET":                     27,
		"NETWORK_KLAY_TESTNET":                     28,
		"NETWORK_POLYGON_MAINNET":                  29,
		"NETWORK_POLYGON_TESTNET":                  30,
		"NETWORK_SYMBOL_MAINNET":                   31,
		"NETWORK_SYMBOL_TESTNET":                   32,
		"NETWORK_AVALANCHE_MAINNET":                33,
		"NETWORK_AVALANCHE_TESTNET":                34,
		"NETWORK_OASYS_MAINNET":                    35,
		"NETWORK_OASYS_TESTNET":                    36,
		"NETWORK_ASTAR_MAINNET":                    37,
		"NETWORK_SHIBUYA_TESTNET":                  38,
		"NETWORK_XDC_MAINNET":                      39,
		"NETWORK_XDC_TESTNET":                      40,
		"NETWORK_COSMOS_MAINNET":                   41,
		"NETWORK_COSMOS_TESTNET":                   42,
		"NETWORK_ETHEREUM_CLASSIC_MAINNET":         43,
		"NETWORK_ETHEREUM_CLASSIC_TESTNET":         44,
		"NETWORK_ALGORAND_MAINNET":                 45,
		"NETWORK_ALGORAND_TESTNET":                 46,
		"NETWORK_HEDERA_MAINNET":                   47,
		"NETWORK_HEDERA_TESTNET":                   48,
		"NETWORK_JAPAN_OPEN_CHAIN_MAINNET":         49,
		"NETWORK_JAPAN_OPEN_CHAIN_TESTNET":         50,
		"NETWORK_SOLANA_MAINNET":                   51,
		"NETWORK_SOLANA_TESTNET":                   52,
		"NETWORK_BNB_SMART_CHAIN_MAINNET":          53,
		"NETWORK_BNB_SMART_CHAIN_TESTNET":          54,
		"NETWORK_FLARE_MAINNET":                    55,
		"NETWORK_FLARE_TESTNET":                    56,
		"NETWORK_ARBITRUM_ONE_MAINNET":             57,
		"NETWORK_ARBITRUM_ONE_TESTNET":             58,
		"NETWORK_APTOS_MAINNET":                    60,
		"NETWORK_APTOS_TESTNET":                    61,
		"NETWORK_DOGECOIN_MAINNET":                 62,
		"NETWORK_DOGECOIN_TESTNET":                 63,
		"NETWORK_AVALANCHE_PLATFORM_CHAIN_MAINNET": 64,
		"NETWORK_AVALANCHE_PLATFORM_CHAIN_TESTNET": 65,
		"NETWORK_QUORUM_MAINNET":                   66,
		"NETWORK_QUORUM_TESTNET":                   67,
		"NETWORK_SHIDEN_MAINNET":                   10002,
	}
)

func (x Network) Enum() *Network {
	p := new(Network)
	*p = x
	return p
}

func (x Network) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Network) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[1].Descriptor()
}

func (Network) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[1]
}

func (x Network) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Network.Descriptor instead.
func (Network) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{1}
}

// AddressType is a type of address.
type AddressType int32

const (
	AddressType_ADDRESS_TYPE_INVALID    AddressType = 0
	AddressType_ADDRESS_TYPE_P2SH       AddressType = 1   // Pay to Script Hash
	AddressType_ADDRESS_TYPE_P2SH_P2WSH AddressType = 2   // Pay to Witness Script Hash nested P2SH
	AddressType_ADDRESS_TYPE_P2WSH      AddressType = 3   // Pay to Witness Script Hash
	AddressType_ADDRESS_TYPE_NONE       AddressType = 100 // For ETH/XRP
)

// Enum value maps for AddressType.
var (
	AddressType_name = map[int32]string{
		0:   "ADDRESS_TYPE_INVALID",
		1:   "ADDRESS_TYPE_P2SH",
		2:   "ADDRESS_TYPE_P2SH_P2WSH",
		3:   "ADDRESS_TYPE_P2WSH",
		100: "ADDRESS_TYPE_NONE",
	}
	AddressType_value = map[string]int32{
		"ADDRESS_TYPE_INVALID":    0,
		"ADDRESS_TYPE_P2SH":       1,
		"ADDRESS_TYPE_P2SH_P2WSH": 2,
		"ADDRESS_TYPE_P2WSH":      3,
		"ADDRESS_TYPE_NONE":       100,
	}
)

func (x AddressType) Enum() *AddressType {
	p := new(AddressType)
	*p = x
	return p
}

func (x AddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[2].Descriptor()
}

func (AddressType) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[2]
}

func (x AddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressType.Descriptor instead.
func (AddressType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{2}
}

// TransactionState is a state of transaction.
type TransactionState int32

const (
	TransactionState_TRANSACTION_STATE_INVALID    TransactionState = 0
	TransactionState_TRANSACTION_STATE_SUBMITTED  TransactionState = 1 // Transaction is submitted
	TransactionState_TRANSACTION_STATE_PENDING    TransactionState = 2 // Transaction is included in mempool
	TransactionState_TRANSACTION_STATE_PROCESSING TransactionState = 3 // Transaction is included in a block
	TransactionState_TRANSACTION_STATE_CONFIRMED  TransactionState = 4 // Exceeded number of confirmations
	// specified
	TransactionState_TRANSACTION_STATE_DROPPED TransactionState = 5 // Transaction is dropped
)

// Enum value maps for TransactionState.
var (
	TransactionState_name = map[int32]string{
		0: "TRANSACTION_STATE_INVALID",
		1: "TRANSACTION_STATE_SUBMITTED",
		2: "TRANSACTION_STATE_PENDING",
		3: "TRANSACTION_STATE_PROCESSING",
		4: "TRANSACTION_STATE_CONFIRMED",
		5: "TRANSACTION_STATE_DROPPED",
	}
	TransactionState_value = map[string]int32{
		"TRANSACTION_STATE_INVALID":    0,
		"TRANSACTION_STATE_SUBMITTED":  1,
		"TRANSACTION_STATE_PENDING":    2,
		"TRANSACTION_STATE_PROCESSING": 3,
		"TRANSACTION_STATE_CONFIRMED":  4,
		"TRANSACTION_STATE_DROPPED":    5,
	}
)

func (x TransactionState) Enum() *TransactionState {
	p := new(TransactionState)
	*p = x
	return p
}

func (x TransactionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionState) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[3].Descriptor()
}

func (TransactionState) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[3]
}

func (x TransactionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionState.Descriptor instead.
func (TransactionState) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{3}
}

// UTXOState is a state of UTXO.
type UTXOState int32

const (
	UTXOState_UTXO_STATE_INVALID         UTXOState = 0
	UTXOState_UTXO_STATE_PENDING_UNSPENT UTXOState = 1
	UTXOState_UTXO_STATE_UNSPENT         UTXOState = 2
	UTXOState_UTXO_STATE_PENDING_SPENT   UTXOState = 3
	UTXOState_UTXO_STATE_SPENT           UTXOState = 4
)

// Enum value maps for UTXOState.
var (
	UTXOState_name = map[int32]string{
		0: "UTXO_STATE_INVALID",
		1: "UTXO_STATE_PENDING_UNSPENT",
		2: "UTXO_STATE_UNSPENT",
		3: "UTXO_STATE_PENDING_SPENT",
		4: "UTXO_STATE_SPENT",
	}
	UTXOState_value = map[string]int32{
		"UTXO_STATE_INVALID":         0,
		"UTXO_STATE_PENDING_UNSPENT": 1,
		"UTXO_STATE_UNSPENT":         2,
		"UTXO_STATE_PENDING_SPENT":   3,
		"UTXO_STATE_SPENT":           4,
	}
)

func (x UTXOState) Enum() *UTXOState {
	p := new(UTXOState)
	*p = x
	return p
}

func (x UTXOState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UTXOState) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[4].Descriptor()
}

func (UTXOState) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[4]
}

func (x UTXOState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UTXOState.Descriptor instead.
func (UTXOState) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{4}
}

// TransferType is a type of transaction.
type TransferType int32

const (
	TransferType_TRANSFER_TYPE_INVALID TransferType = 0
	TransferType_TRANSFER_TYPE_SEND    TransferType = 1 // The type of send
	TransferType_TRANSFER_TYPE_RECEIVE TransferType = 2 // The type of receive
	TransferType_TRANSFER_TYPE_CHANGE  TransferType = 3 // The type of change transaction for BTC/LTC/BCH
	TransferType_TRANSFER_TYPE_FATAL   TransferType = 4 // The type of fraudulent remittance
)

// Enum value maps for TransferType.
var (
	TransferType_name = map[int32]string{
		0: "TRANSFER_TYPE_INVALID",
		1: "TRANSFER_TYPE_SEND",
		2: "TRANSFER_TYPE_RECEIVE",
		3: "TRANSFER_TYPE_CHANGE",
		4: "TRANSFER_TYPE_FATAL",
	}
	TransferType_value = map[string]int32{
		"TRANSFER_TYPE_INVALID": 0,
		"TRANSFER_TYPE_SEND":    1,
		"TRANSFER_TYPE_RECEIVE": 2,
		"TRANSFER_TYPE_CHANGE":  3,
		"TRANSFER_TYPE_FATAL":   4,
	}
)

func (x TransferType) Enum() *TransferType {
	p := new(TransferType)
	*p = x
	return p
}

func (x TransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[5].Descriptor()
}

func (TransferType) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[5]
}

func (x TransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferType.Descriptor instead.
func (TransferType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{5}
}

// XRPTransactionType is a type of xrp transaction.
type XRPTransactionType int32

const (
	XRPTransactionType_XRP_TRANSACTION_TYPE_INVALID         XRPTransactionType = 0
	XRPTransactionType_XRP_TRANSACTION_TYPE_PAYMENT         XRPTransactionType = 1
	XRPTransactionType_XRP_TRANSACTION_TYPE_SET_SIGNER_LIST XRPTransactionType = 2
	XRPTransactionType_XRP_TRANSACTION_TYPE_DISABLE_MASTER  XRPTransactionType = 3
)

// Enum value maps for XRPTransactionType.
var (
	XRPTransactionType_name = map[int32]string{
		0: "XRP_TRANSACTION_TYPE_INVALID",
		1: "XRP_TRANSACTION_TYPE_PAYMENT",
		2: "XRP_TRANSACTION_TYPE_SET_SIGNER_LIST",
		3: "XRP_TRANSACTION_TYPE_DISABLE_MASTER",
	}
	XRPTransactionType_value = map[string]int32{
		"XRP_TRANSACTION_TYPE_INVALID":         0,
		"XRP_TRANSACTION_TYPE_PAYMENT":         1,
		"XRP_TRANSACTION_TYPE_SET_SIGNER_LIST": 2,
		"XRP_TRANSACTION_TYPE_DISABLE_MASTER":  3,
	}
)

func (x XRPTransactionType) Enum() *XRPTransactionType {
	p := new(XRPTransactionType)
	*p = x
	return p
}

func (x XRPTransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XRPTransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[6].Descriptor()
}

func (XRPTransactionType) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[6]
}

func (x XRPTransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XRPTransactionType.Descriptor instead.
func (XRPTransactionType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{6}
}

// TransactionResult is a result of transaction.
type TransactionResult int32

const (
	TransactionResult_TRANSACTION_RESULT_INVALID TransactionResult = 0
	TransactionResult_TRANSACTION_RESULT_PENDING TransactionResult = 1 // Transaction is pending
	TransactionResult_TRANSACTION_RESULT_SUCCESS TransactionResult = 2 // Transaction is included in block
	TransactionResult_TRANSACTION_RESULT_FAILURE TransactionResult = 3 // Failed to send transaction
	TransactionResult_TRANSACTION_RESULT_NONE    TransactionResult = 100
)

// Enum value maps for TransactionResult.
var (
	TransactionResult_name = map[int32]string{
		0:   "TRANSACTION_RESULT_INVALID",
		1:   "TRANSACTION_RESULT_PENDING",
		2:   "TRANSACTION_RESULT_SUCCESS",
		3:   "TRANSACTION_RESULT_FAILURE",
		100: "TRANSACTION_RESULT_NONE",
	}
	TransactionResult_value = map[string]int32{
		"TRANSACTION_RESULT_INVALID": 0,
		"TRANSACTION_RESULT_PENDING": 1,
		"TRANSACTION_RESULT_SUCCESS": 2,
		"TRANSACTION_RESULT_FAILURE": 3,
		"TRANSACTION_RESULT_NONE":    100,
	}
)

func (x TransactionResult) Enum() *TransactionResult {
	p := new(TransactionResult)
	*p = x
	return p
}

func (x TransactionResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionResult) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[7].Descriptor()
}

func (TransactionResult) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[7]
}

func (x TransactionResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionResult.Descriptor instead.
func (TransactionResult) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{7}
}

// NemTransactionType is a type of nem transaction.
type NemTransactionType int32

const (
	NemTransactionType_NEM_TRANSACTION_TYPE_INVALID                    NemTransactionType = 0
	NemTransactionType_NEM_TRANSACTION_TYPE_TRANSFER_TYPE              NemTransactionType = 1
	NemTransactionType_NEM_TRANSACTION_TYPE_IMPORTANCE_TRANSFER_TYPE   NemTransactionType = 2
	NemTransactionType_NEM_TRANSACTION_TYPE_MULTISIG_MODIFICATION_TYPE NemTransactionType = 3
	NemTransactionType_NEM_TRANSACTION_TYPE_MULTISIG_SIGNATURE_TYPE    NemTransactionType = 4
	NemTransactionType_NEM_TRANSACTION_TYPE_MULTISIG_TRANSACTION_TYPE  NemTransactionType = 5
	NemTransactionType_NEM_TRANSACTION_TYPE_PROVISION_NAMESPACE_TYPE   NemTransactionType = 6
	NemTransactionType_NEM_TRANSACTION_TYPE_MOSAIC_DEFINITION_TYPE     NemTransactionType = 7
	NemTransactionType_NEM_TRANSACTION_TYPE_MOSAIC_SUPPLY_TYPE         NemTransactionType = 8
)

// Enum value maps for NemTransactionType.
var (
	NemTransactionType_name = map[int32]string{
		0: "NEM_TRANSACTION_TYPE_INVALID",
		1: "NEM_TRANSACTION_TYPE_TRANSFER_TYPE",
		2: "NEM_TRANSACTION_TYPE_IMPORTANCE_TRANSFER_TYPE",
		3: "NEM_TRANSACTION_TYPE_MULTISIG_MODIFICATION_TYPE",
		4: "NEM_TRANSACTION_TYPE_MULTISIG_SIGNATURE_TYPE",
		5: "NEM_TRANSACTION_TYPE_MULTISIG_TRANSACTION_TYPE",
		6: "NEM_TRANSACTION_TYPE_PROVISION_NAMESPACE_TYPE",
		7: "NEM_TRANSACTION_TYPE_MOSAIC_DEFINITION_TYPE",
		8: "NEM_TRANSACTION_TYPE_MOSAIC_SUPPLY_TYPE",
	}
	NemTransactionType_value = map[string]int32{
		"NEM_TRANSACTION_TYPE_INVALID":                    0,
		"NEM_TRANSACTION_TYPE_TRANSFER_TYPE":              1,
		"NEM_TRANSACTION_TYPE_IMPORTANCE_TRANSFER_TYPE":   2,
		"NEM_TRANSACTION_TYPE_MULTISIG_MODIFICATION_TYPE": 3,
		"NEM_TRANSACTION_TYPE_MULTISIG_SIGNATURE_TYPE":    4,
		"NEM_TRANSACTION_TYPE_MULTISIG_TRANSACTION_TYPE":  5,
		"NEM_TRANSACTION_TYPE_PROVISION_NAMESPACE_TYPE":   6,
		"NEM_TRANSACTION_TYPE_MOSAIC_DEFINITION_TYPE":     7,
		"NEM_TRANSACTION_TYPE_MOSAIC_SUPPLY_TYPE":         8,
	}
)

func (x NemTransactionType) Enum() *NemTransactionType {
	p := new(NemTransactionType)
	*p = x
	return p
}

func (x NemTransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NemTransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[8].Descriptor()
}

func (NemTransactionType) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[8]
}

func (x NemTransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NemTransactionType.Descriptor instead.
func (NemTransactionType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{8}
}

// SymbolTransactionType is a type of symbol transaction.
type SymbolTransactionType int32

const (
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_INVALID                       SymbolTransactionType = 0
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_ACCOUNT_KEY_LINK              SymbolTransactionType = 1
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_NODE_KEY_LINK                 SymbolTransactionType = 2
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_AGGREGATE_COMPLETE            SymbolTransactionType = 3
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_AGGREGATE_BONDED              SymbolTransactionType = 4
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_VOTING_KEY_LINK               SymbolTransactionType = 5
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_VRF_KEY_LINK                  SymbolTransactionType = 6
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_HASH_LOCK                     SymbolTransactionType = 7
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_SECRET_LOCK                   SymbolTransactionType = 8
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_SECRET_PROOF                  SymbolTransactionType = 9
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_ACCOUNT_METADATA              SymbolTransactionType = 10
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_MOSAIC_METADATA               SymbolTransactionType = 11
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_NAMESPACE_METADATA            SymbolTransactionType = 12
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_MOSAIC_DEFINITION             SymbolTransactionType = 13
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_MOSAIC_SUPPLY_CHANGE          SymbolTransactionType = 14
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_MOSAIC_SUPPLY_REVOCATION      SymbolTransactionType = 15
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_MULTISIG_ACCOUNT_MODIFICATION SymbolTransactionType = 16
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_ADDRESS_ALIAS                 SymbolTransactionType = 17
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_MOSAIC_ALIAS                  SymbolTransactionType = 18
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_NAMESPACE_REGISTRATION        SymbolTransactionType = 19
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_ACCOUNT_ADDRESS_RESTRICTION   SymbolTransactionType = 20
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_ACCOUNT_MOSAIC_RESTRICTION    SymbolTransactionType = 21
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_ACCOUNT_OPERATION_RESTRICTION SymbolTransactionType = 22
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_MOSAIC_ADDRESS_RESTRICTION    SymbolTransactionType = 23
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_MOSAIC_GLOBAL_RESTRICTION     SymbolTransactionType = 24
	SymbolTransactionType_SYMBOL_TRANSACTION_TYPE_TRANSFER                      SymbolTransactionType = 25
)

// Enum value maps for SymbolTransactionType.
var (
	SymbolTransactionType_name = map[int32]string{
		0:  "SYMBOL_TRANSACTION_TYPE_INVALID",
		1:  "SYMBOL_TRANSACTION_TYPE_ACCOUNT_KEY_LINK",
		2:  "SYMBOL_TRANSACTION_TYPE_NODE_KEY_LINK",
		3:  "SYMBOL_TRANSACTION_TYPE_AGGREGATE_COMPLETE",
		4:  "SYMBOL_TRANSACTION_TYPE_AGGREGATE_BONDED",
		5:  "SYMBOL_TRANSACTION_TYPE_VOTING_KEY_LINK",
		6:  "SYMBOL_TRANSACTION_TYPE_VRF_KEY_LINK",
		7:  "SYMBOL_TRANSACTION_TYPE_HASH_LOCK",
		8:  "SYMBOL_TRANSACTION_TYPE_SECRET_LOCK",
		9:  "SYMBOL_TRANSACTION_TYPE_SECRET_PROOF",
		10: "SYMBOL_TRANSACTION_TYPE_ACCOUNT_METADATA",
		11: "SYMBOL_TRANSACTION_TYPE_MOSAIC_METADATA",
		12: "SYMBOL_TRANSACTION_TYPE_NAMESPACE_METADATA",
		13: "SYMBOL_TRANSACTION_TYPE_MOSAIC_DEFINITION",
		14: "SYMBOL_TRANSACTION_TYPE_MOSAIC_SUPPLY_CHANGE",
		15: "SYMBOL_TRANSACTION_TYPE_MOSAIC_SUPPLY_REVOCATION",
		16: "SYMBOL_TRANSACTION_TYPE_MULTISIG_ACCOUNT_MODIFICATION",
		17: "SYMBOL_TRANSACTION_TYPE_ADDRESS_ALIAS",
		18: "SYMBOL_TRANSACTION_TYPE_MOSAIC_ALIAS",
		19: "SYMBOL_TRANSACTION_TYPE_NAMESPACE_REGISTRATION",
		20: "SYMBOL_TRANSACTION_TYPE_ACCOUNT_ADDRESS_RESTRICTION",
		21: "SYMBOL_TRANSACTION_TYPE_ACCOUNT_MOSAIC_RESTRICTION",
		22: "SYMBOL_TRANSACTION_TYPE_ACCOUNT_OPERATION_RESTRICTION",
		23: "SYMBOL_TRANSACTION_TYPE_MOSAIC_ADDRESS_RESTRICTION",
		24: "SYMBOL_TRANSACTION_TYPE_MOSAIC_GLOBAL_RESTRICTION",
		25: "SYMBOL_TRANSACTION_TYPE_TRANSFER",
	}
	SymbolTransactionType_value = map[string]int32{
		"SYMBOL_TRANSACTION_TYPE_INVALID":                       0,
		"SYMBOL_TRANSACTION_TYPE_ACCOUNT_KEY_LINK":              1,
		"SYMBOL_TRANSACTION_TYPE_NODE_KEY_LINK":                 2,
		"SYMBOL_TRANSACTION_TYPE_AGGREGATE_COMPLETE":            3,
		"SYMBOL_TRANSACTION_TYPE_AGGREGATE_BONDED":              4,
		"SYMBOL_TRANSACTION_TYPE_VOTING_KEY_LINK":               5,
		"SYMBOL_TRANSACTION_TYPE_VRF_KEY_LINK":                  6,
		"SYMBOL_TRANSACTION_TYPE_HASH_LOCK":                     7,
		"SYMBOL_TRANSACTION_TYPE_SECRET_LOCK":                   8,
		"SYMBOL_TRANSACTION_TYPE_SECRET_PROOF":                  9,
		"SYMBOL_TRANSACTION_TYPE_ACCOUNT_METADATA":              10,
		"SYMBOL_TRANSACTION_TYPE_MOSAIC_METADATA":               11,
		"SYMBOL_TRANSACTION_TYPE_NAMESPACE_METADATA":            12,
		"SYMBOL_TRANSACTION_TYPE_MOSAIC_DEFINITION":             13,
		"SYMBOL_TRANSACTION_TYPE_MOSAIC_SUPPLY_CHANGE":          14,
		"SYMBOL_TRANSACTION_TYPE_MOSAIC_SUPPLY_REVOCATION":      15,
		"SYMBOL_TRANSACTION_TYPE_MULTISIG_ACCOUNT_MODIFICATION": 16,
		"SYMBOL_TRANSACTION_TYPE_ADDRESS_ALIAS":                 17,
		"SYMBOL_TRANSACTION_TYPE_MOSAIC_ALIAS":                  18,
		"SYMBOL_TRANSACTION_TYPE_NAMESPACE_REGISTRATION":        19,
		"SYMBOL_TRANSACTION_TYPE_ACCOUNT_ADDRESS_RESTRICTION":   20,
		"SYMBOL_TRANSACTION_TYPE_ACCOUNT_MOSAIC_RESTRICTION":    21,
		"SYMBOL_TRANSACTION_TYPE_ACCOUNT_OPERATION_RESTRICTION": 22,
		"SYMBOL_TRANSACTION_TYPE_MOSAIC_ADDRESS_RESTRICTION":    23,
		"SYMBOL_TRANSACTION_TYPE_MOSAIC_GLOBAL_RESTRICTION":     24,
		"SYMBOL_TRANSACTION_TYPE_TRANSFER":                      25,
	}
)

func (x SymbolTransactionType) Enum() *SymbolTransactionType {
	p := new(SymbolTransactionType)
	*p = x
	return p
}

func (x SymbolTransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolTransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[9].Descriptor()
}

func (SymbolTransactionType) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[9]
}

func (x SymbolTransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymbolTransactionType.Descriptor instead.
func (SymbolTransactionType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{9}
}

type EthereumStakingRewardLayerType int32

const (
	EthereumStakingRewardLayerType_ETHEREUM_STAKING_REWARD_LAYER_TYPE_INVALID       EthereumStakingRewardLayerType = 0
	EthereumStakingRewardLayerType_ETHEREUM_STAKING_REWARD_LAYER_TYPE_CONSENSUS     EthereumStakingRewardLayerType = 1
	EthereumStakingRewardLayerType_ETHEREUM_STAKING_REWARD_LAYER_TYPE_EXECUTION     EthereumStakingRewardLayerType = 2
	EthereumStakingRewardLayerType_ETHEREUM_STAKING_REWARD_LAYER_TYPE_EXECUTION_MEV EthereumStakingRewardLayerType = 3
)

// Enum value maps for EthereumStakingRewardLayerType.
var (
	EthereumStakingRewardLayerType_name = map[int32]string{
		0: "ETHEREUM_STAKING_REWARD_LAYER_TYPE_INVALID",
		1: "ETHEREUM_STAKING_REWARD_LAYER_TYPE_CONSENSUS",
		2: "ETHEREUM_STAKING_REWARD_LAYER_TYPE_EXECUTION",
		3: "ETHEREUM_STAKING_REWARD_LAYER_TYPE_EXECUTION_MEV",
	}
	EthereumStakingRewardLayerType_value = map[string]int32{
		"ETHEREUM_STAKING_REWARD_LAYER_TYPE_INVALID":       0,
		"ETHEREUM_STAKING_REWARD_LAYER_TYPE_CONSENSUS":     1,
		"ETHEREUM_STAKING_REWARD_LAYER_TYPE_EXECUTION":     2,
		"ETHEREUM_STAKING_REWARD_LAYER_TYPE_EXECUTION_MEV": 3,
	}
)

func (x EthereumStakingRewardLayerType) Enum() *EthereumStakingRewardLayerType {
	p := new(EthereumStakingRewardLayerType)
	*p = x
	return p
}

func (x EthereumStakingRewardLayerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EthereumStakingRewardLayerType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[10].Descriptor()
}

func (EthereumStakingRewardLayerType) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[10]
}

func (x EthereumStakingRewardLayerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EthereumStakingRewardLayerType.Descriptor instead.
func (EthereumStakingRewardLayerType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{10}
}

type CosmosMsgType int32

const (
	CosmosMsgType_COSMOS_MSG_TYPE_INVALID                   CosmosMsgType = 0
	CosmosMsgType_COSMOS_MSG_TYPE_SEND                      CosmosMsgType = 1
	CosmosMsgType_COSMOS_MSG_TYPE_DELEGATE                  CosmosMsgType = 2
	CosmosMsgType_COSMOS_MSG_TYPE_UNDELEGATE                CosmosMsgType = 3
	CosmosMsgType_COSMOS_MSG_TYPE_UNBONDED                  CosmosMsgType = 4
	CosmosMsgType_COSMOS_MSG_TYPE_WITHDRAW_DELEGATOR_REWARD CosmosMsgType = 5
)

// Enum value maps for CosmosMsgType.
var (
	CosmosMsgType_name = map[int32]string{
		0: "COSMOS_MSG_TYPE_INVALID",
		1: "COSMOS_MSG_TYPE_SEND",
		2: "COSMOS_MSG_TYPE_DELEGATE",
		3: "COSMOS_MSG_TYPE_UNDELEGATE",
		4: "COSMOS_MSG_TYPE_UNBONDED",
		5: "COSMOS_MSG_TYPE_WITHDRAW_DELEGATOR_REWARD",
	}
	CosmosMsgType_value = map[string]int32{
		"COSMOS_MSG_TYPE_INVALID":                   0,
		"COSMOS_MSG_TYPE_SEND":                      1,
		"COSMOS_MSG_TYPE_DELEGATE":                  2,
		"COSMOS_MSG_TYPE_UNDELEGATE":                3,
		"COSMOS_MSG_TYPE_UNBONDED":                  4,
		"COSMOS_MSG_TYPE_WITHDRAW_DELEGATOR_REWARD": 5,
	}
)

func (x CosmosMsgType) Enum() *CosmosMsgType {
	p := new(CosmosMsgType)
	*p = x
	return p
}

func (x CosmosMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CosmosMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[11].Descriptor()
}

func (CosmosMsgType) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[11]
}

func (x CosmosMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CosmosMsgType.Descriptor instead.
func (CosmosMsgType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{11}
}

type StakingValidatorStatus int32

const (
	StakingValidatorStatus_STAKING_VALIDATOR_STATUS_INVALID StakingValidatorStatus = 0
	StakingValidatorStatus_STAKING_VALIDATOR_STATUS_ACTIVE  StakingValidatorStatus = 1 // 稼働中
	StakingValidatorStatus_STAKING_VALIDATOR_STATUS_STOP    StakingValidatorStatus = 2 // 停止中
	StakingValidatorStatus_STAKING_VALIDATOR_STATUS_PAUSE   StakingValidatorStatus = 3 // 一時停止中
)

// Enum value maps for StakingValidatorStatus.
var (
	StakingValidatorStatus_name = map[int32]string{
		0: "STAKING_VALIDATOR_STATUS_INVALID",
		1: "STAKING_VALIDATOR_STATUS_ACTIVE",
		2: "STAKING_VALIDATOR_STATUS_STOP",
		3: "STAKING_VALIDATOR_STATUS_PAUSE",
	}
	StakingValidatorStatus_value = map[string]int32{
		"STAKING_VALIDATOR_STATUS_INVALID": 0,
		"STAKING_VALIDATOR_STATUS_ACTIVE":  1,
		"STAKING_VALIDATOR_STATUS_STOP":    2,
		"STAKING_VALIDATOR_STATUS_PAUSE":   3,
	}
)

func (x StakingValidatorStatus) Enum() *StakingValidatorStatus {
	p := new(StakingValidatorStatus)
	*p = x
	return p
}

func (x StakingValidatorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StakingValidatorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[12].Descriptor()
}

func (StakingValidatorStatus) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[12]
}

func (x StakingValidatorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StakingValidatorStatus.Descriptor instead.
func (StakingValidatorStatus) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{12}
}

type StakingEventType int32

const (
	StakingEventType_STAKING_EVENT_TYPE_INVALID StakingEventType = 0
	StakingEventType_STAKING_EVENT_TYPE_STAKE   StakingEventType = 1 // ステーキング開始
	StakingEventType_STAKING_EVENT_TYPE_UNSTAKE StakingEventType = 2 // ステーキング解除
	StakingEventType_STAKING_EVENT_TYPE_REWARD  StakingEventType = 3 // 報酬受取
)

// Enum value maps for StakingEventType.
var (
	StakingEventType_name = map[int32]string{
		0: "STAKING_EVENT_TYPE_INVALID",
		1: "STAKING_EVENT_TYPE_STAKE",
		2: "STAKING_EVENT_TYPE_UNSTAKE",
		3: "STAKING_EVENT_TYPE_REWARD",
	}
	StakingEventType_value = map[string]int32{
		"STAKING_EVENT_TYPE_INVALID": 0,
		"STAKING_EVENT_TYPE_STAKE":   1,
		"STAKING_EVENT_TYPE_UNSTAKE": 2,
		"STAKING_EVENT_TYPE_REWARD":  3,
	}
)

func (x StakingEventType) Enum() *StakingEventType {
	p := new(StakingEventType)
	*p = x
	return p
}

func (x StakingEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StakingEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[13].Descriptor()
}

func (StakingEventType) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[13]
}

func (x StakingEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StakingEventType.Descriptor instead.
func (StakingEventType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{13}
}

type EthereumStakingHistoryType int32

const (
	EthereumStakingHistoryType_ETHEREUM_STAKING_HISTORY_TYPE_INVALID          EthereumStakingHistoryType = 0
	EthereumStakingHistoryType_ETHEREUM_STAKING_HISTORY_TYPE_REWARD_CONSENSUS EthereumStakingHistoryType = 1
	EthereumStakingHistoryType_ETHEREUM_STAKING_HISTORY_TYPE_REWARD_EXECUTION EthereumStakingHistoryType = 2
	EthereumStakingHistoryType_ETHEREUM_STAKING_HISTORY_TYPE_REWARD_MEV       EthereumStakingHistoryType = 3
	EthereumStakingHistoryType_ETHEREUM_STAKING_HISTORY_TYPE_START            EthereumStakingHistoryType = 4
	EthereumStakingHistoryType_ETHEREUM_STAKING_HISTORY_TYPE_EXIT             EthereumStakingHistoryType = 5
)

// Enum value maps for EthereumStakingHistoryType.
var (
	EthereumStakingHistoryType_name = map[int32]string{
		0: "ETHEREUM_STAKING_HISTORY_TYPE_INVALID",
		1: "ETHEREUM_STAKING_HISTORY_TYPE_REWARD_CONSENSUS",
		2: "ETHEREUM_STAKING_HISTORY_TYPE_REWARD_EXECUTION",
		3: "ETHEREUM_STAKING_HISTORY_TYPE_REWARD_MEV",
		4: "ETHEREUM_STAKING_HISTORY_TYPE_START",
		5: "ETHEREUM_STAKING_HISTORY_TYPE_EXIT",
	}
	EthereumStakingHistoryType_value = map[string]int32{
		"ETHEREUM_STAKING_HISTORY_TYPE_INVALID":          0,
		"ETHEREUM_STAKING_HISTORY_TYPE_REWARD_CONSENSUS": 1,
		"ETHEREUM_STAKING_HISTORY_TYPE_REWARD_EXECUTION": 2,
		"ETHEREUM_STAKING_HISTORY_TYPE_REWARD_MEV":       3,
		"ETHEREUM_STAKING_HISTORY_TYPE_START":            4,
		"ETHEREUM_STAKING_HISTORY_TYPE_EXIT":             5,
	}
)

func (x EthereumStakingHistoryType) Enum() *EthereumStakingHistoryType {
	p := new(EthereumStakingHistoryType)
	*p = x
	return p
}

func (x EthereumStakingHistoryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EthereumStakingHistoryType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[14].Descriptor()
}

func (EthereumStakingHistoryType) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[14]
}

func (x EthereumStakingHistoryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EthereumStakingHistoryType.Descriptor instead.
func (EthereumStakingHistoryType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{14}
}

type SolanaRecentBlockhashType int32

const (
	SolanaRecentBlockhashType_SOLANA_RECENT_BLOCKHASH_TYPE_INVALID   SolanaRecentBlockhashType = 0
	SolanaRecentBlockhashType_SOLANA_RECENT_BLOCKHASH_TYPE_FINALIZED SolanaRecentBlockhashType = 1
	SolanaRecentBlockhashType_SOLANA_RECENT_BLOCKHASH_TYPE_CONFIRMED SolanaRecentBlockhashType = 2
	SolanaRecentBlockhashType_SOLANA_RECENT_BLOCKHASH_TYPE_PROCESSED SolanaRecentBlockhashType = 3
)

// Enum value maps for SolanaRecentBlockhashType.
var (
	SolanaRecentBlockhashType_name = map[int32]string{
		0: "SOLANA_RECENT_BLOCKHASH_TYPE_INVALID",
		1: "SOLANA_RECENT_BLOCKHASH_TYPE_FINALIZED",
		2: "SOLANA_RECENT_BLOCKHASH_TYPE_CONFIRMED",
		3: "SOLANA_RECENT_BLOCKHASH_TYPE_PROCESSED",
	}
	SolanaRecentBlockhashType_value = map[string]int32{
		"SOLANA_RECENT_BLOCKHASH_TYPE_INVALID":   0,
		"SOLANA_RECENT_BLOCKHASH_TYPE_FINALIZED": 1,
		"SOLANA_RECENT_BLOCKHASH_TYPE_CONFIRMED": 2,
		"SOLANA_RECENT_BLOCKHASH_TYPE_PROCESSED": 3,
	}
)

func (x SolanaRecentBlockhashType) Enum() *SolanaRecentBlockhashType {
	p := new(SolanaRecentBlockhashType)
	*p = x
	return p
}

func (x SolanaRecentBlockhashType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolanaRecentBlockhashType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[15].Descriptor()
}

func (SolanaRecentBlockhashType) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[15]
}

func (x SolanaRecentBlockhashType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolanaRecentBlockhashType.Descriptor instead.
func (SolanaRecentBlockhashType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{15}
}

type SolanaEventType int32

const (
	SolanaEventType_SOLANA_EVENT_TYPE_INVALID    SolanaEventType = 0
	SolanaEventType_SOLANA_EVENT_TYPE_DELEGATE   SolanaEventType = 1
	SolanaEventType_SOLANA_EVENT_TYPE_DEACTIVATE SolanaEventType = 2
	SolanaEventType_SOLANA_EVENT_TYPE_WITHDRAW   SolanaEventType = 3
	SolanaEventType_SOLANA_EVENT_TYPE_STAKE_INIT SolanaEventType = 4 // ステークアカウント作成
	SolanaEventType_SOLANA_EVENT_TYPE_REWARD     SolanaEventType = 5
	// ステータス遷移を監視する場合(ステータス変化するまで1Epoch要)
	// Withdrawだけは即時反映されるので不要
	SolanaEventType_SOLANA_EVENT_TYPE_DELEGATE_COMPLETE   SolanaEventType = 6 // Delegateステータス遷移時
	SolanaEventType_SOLANA_EVENT_TYPE_DEACTIVATE_COMPLETE SolanaEventType = 7 // Deactivateステータス遷移時
)

// Enum value maps for SolanaEventType.
var (
	SolanaEventType_name = map[int32]string{
		0: "SOLANA_EVENT_TYPE_INVALID",
		1: "SOLANA_EVENT_TYPE_DELEGATE",
		2: "SOLANA_EVENT_TYPE_DEACTIVATE",
		3: "SOLANA_EVENT_TYPE_WITHDRAW",
		4: "SOLANA_EVENT_TYPE_STAKE_INIT",
		5: "SOLANA_EVENT_TYPE_REWARD",
		6: "SOLANA_EVENT_TYPE_DELEGATE_COMPLETE",
		7: "SOLANA_EVENT_TYPE_DEACTIVATE_COMPLETE",
	}
	SolanaEventType_value = map[string]int32{
		"SOLANA_EVENT_TYPE_INVALID":             0,
		"SOLANA_EVENT_TYPE_DELEGATE":            1,
		"SOLANA_EVENT_TYPE_DEACTIVATE":          2,
		"SOLANA_EVENT_TYPE_WITHDRAW":            3,
		"SOLANA_EVENT_TYPE_STAKE_INIT":          4,
		"SOLANA_EVENT_TYPE_REWARD":              5,
		"SOLANA_EVENT_TYPE_DELEGATE_COMPLETE":   6,
		"SOLANA_EVENT_TYPE_DEACTIVATE_COMPLETE": 7,
	}
)

func (x SolanaEventType) Enum() *SolanaEventType {
	p := new(SolanaEventType)
	*p = x
	return p
}

func (x SolanaEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolanaEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[16].Descriptor()
}

func (SolanaEventType) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[16]
}

func (x SolanaEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolanaEventType.Descriptor instead.
func (SolanaEventType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{16}
}

type EthereumCallMethod int32

const (
	EthereumCallMethod_ETHEREUM_CALL_METHOD_INVALID                                     EthereumCallMethod = 0
	EthereumCallMethod_ETHEREUM_CALL_METHOD_PROGMAT_COIN_INITIALIZE                     EthereumCallMethod = 1
	EthereumCallMethod_ETHEREUM_CALL_METHOD_PROGMAT_COIN_CONFIGURE_MINTER               EthereumCallMethod = 2
	EthereumCallMethod_ETHEREUM_CALL_METHOD_PROGMAT_COIN_MINT_AND_TRANSFER_DIRECT       EthereumCallMethod = 3
	EthereumCallMethod_ETHEREUM_CALL_METHOD_PROGMAT_COIN_MINT                           EthereumCallMethod = 4
	EthereumCallMethod_ETHEREUM_CALL_METHOD_PROGMAT_COIN_BURN                           EthereumCallMethod = 5
	EthereumCallMethod_ETHEREUM_CALL_METHOD_PROGMAT_COIN_BULK_ADD_TO_WHITELIST          EthereumCallMethod = 6
	EthereumCallMethod_ETHEREUM_CALL_METHOD_PROGMAT_COIN_BULK_REMOVE_FROM_WHITELIST     EthereumCallMethod = 7
	EthereumCallMethod_ETHEREUM_CALL_METHOD_PROGMAT_COIN_BULK_ADD_TO_BLACKLIST          EthereumCallMethod = 8
	EthereumCallMethod_ETHEREUM_CALL_METHOD_PROGMAT_COIN_BULK_REMOVE_FROM_BLACKLIST     EthereumCallMethod = 9
	EthereumCallMethod_ETHEREUM_CALL_METHOD_PROGMAT_COIN_CONFISCATE                     EthereumCallMethod = 10
	EthereumCallMethod_ETHEREUM_CALL_METHOD_PROGMAT_COIN_PAUSE                          EthereumCallMethod = 11
	EthereumCallMethod_ETHEREUM_CALL_METHOD_PROGMAT_COIN_UNPAUSE                        EthereumCallMethod = 12
	EthereumCallMethod_ETHEREUM_CALL_METHOD_PROGMAT_COIN_MINT_AND_TRANSFER_INTERMEDIARY EthereumCallMethod = 13
	EthereumCallMethod_ETHEREUM_CALL_METHOD_PROGMAT_COIN_GRANT_WHITE_AND_BLACK_LISTER   EthereumCallMethod = 14
	EthereumCallMethod_ETHEREUM_CALL_METHOD_PROGMAT_COIN_CONTRACT_CREATION              EthereumCallMethod = 15
	EthereumCallMethod_ETHEREUM_CALL_METHOD_PROGMAT_COIN_UPGRADE_TO_AND_CALL            EthereumCallMethod = 16
)

// Enum value maps for EthereumCallMethod.
var (
	EthereumCallMethod_name = map[int32]string{
		0:  "ETHEREUM_CALL_METHOD_INVALID",
		1:  "ETHEREUM_CALL_METHOD_PROGMAT_COIN_INITIALIZE",
		2:  "ETHEREUM_CALL_METHOD_PROGMAT_COIN_CONFIGURE_MINTER",
		3:  "ETHEREUM_CALL_METHOD_PROGMAT_COIN_MINT_AND_TRANSFER_DIRECT",
		4:  "ETHEREUM_CALL_METHOD_PROGMAT_COIN_MINT",
		5:  "ETHEREUM_CALL_METHOD_PROGMAT_COIN_BURN",
		6:  "ETHEREUM_CALL_METHOD_PROGMAT_COIN_BULK_ADD_TO_WHITELIST",
		7:  "ETHEREUM_CALL_METHOD_PROGMAT_COIN_BULK_REMOVE_FROM_WHITELIST",
		8:  "ETHEREUM_CALL_METHOD_PROGMAT_COIN_BULK_ADD_TO_BLACKLIST",
		9:  "ETHEREUM_CALL_METHOD_PROGMAT_COIN_BULK_REMOVE_FROM_BLACKLIST",
		10: "ETHEREUM_CALL_METHOD_PROGMAT_COIN_CONFISCATE",
		11: "ETHEREUM_CALL_METHOD_PROGMAT_COIN_PAUSE",
		12: "ETHEREUM_CALL_METHOD_PROGMAT_COIN_UNPAUSE",
		13: "ETHEREUM_CALL_METHOD_PROGMAT_COIN_MINT_AND_TRANSFER_INTERMEDIARY",
		14: "ETHEREUM_CALL_METHOD_PROGMAT_COIN_GRANT_WHITE_AND_BLACK_LISTER",
		15: "ETHEREUM_CALL_METHOD_PROGMAT_COIN_CONTRACT_CREATION",
		16: "ETHEREUM_CALL_METHOD_PROGMAT_COIN_UPGRADE_TO_AND_CALL",
	}
	EthereumCallMethod_value = map[string]int32{
		"ETHEREUM_CALL_METHOD_INVALID":                                     0,
		"ETHEREUM_CALL_METHOD_PROGMAT_COIN_INITIALIZE":                     1,
		"ETHEREUM_CALL_METHOD_PROGMAT_COIN_CONFIGURE_MINTER":               2,
		"ETHEREUM_CALL_METHOD_PROGMAT_COIN_MINT_AND_TRANSFER_DIRECT":       3,
		"ETHEREUM_CALL_METHOD_PROGMAT_COIN_MINT":                           4,
		"ETHEREUM_CALL_METHOD_PROGMAT_COIN_BURN":                           5,
		"ETHEREUM_CALL_METHOD_PROGMAT_COIN_BULK_ADD_TO_WHITELIST":          6,
		"ETHEREUM_CALL_METHOD_PROGMAT_COIN_BULK_REMOVE_FROM_WHITELIST":     7,
		"ETHEREUM_CALL_METHOD_PROGMAT_COIN_BULK_ADD_TO_BLACKLIST":          8,
		"ETHEREUM_CALL_METHOD_PROGMAT_COIN_BULK_REMOVE_FROM_BLACKLIST":     9,
		"ETHEREUM_CALL_METHOD_PROGMAT_COIN_CONFISCATE":                     10,
		"ETHEREUM_CALL_METHOD_PROGMAT_COIN_PAUSE":                          11,
		"ETHEREUM_CALL_METHOD_PROGMAT_COIN_UNPAUSE":                        12,
		"ETHEREUM_CALL_METHOD_PROGMAT_COIN_MINT_AND_TRANSFER_INTERMEDIARY": 13,
		"ETHEREUM_CALL_METHOD_PROGMAT_COIN_GRANT_WHITE_AND_BLACK_LISTER":   14,
		"ETHEREUM_CALL_METHOD_PROGMAT_COIN_CONTRACT_CREATION":              15,
		"ETHEREUM_CALL_METHOD_PROGMAT_COIN_UPGRADE_TO_AND_CALL":            16,
	}
)

func (x EthereumCallMethod) Enum() *EthereumCallMethod {
	p := new(EthereumCallMethod)
	*p = x
	return p
}

func (x EthereumCallMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EthereumCallMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[17].Descriptor()
}

func (EthereumCallMethod) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[17]
}

func (x EthereumCallMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EthereumCallMethod.Descriptor instead.
func (EthereumCallMethod) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{17}
}

type AvalancheTxType int32

const (
	AvalancheTxType_AVALANCHE_TX_TYPE_INVALID                      AvalancheTxType = 0
	AvalancheTxType_AVALANCHE_TX_TYPE_TRANSFER                     AvalancheTxType = 1
	AvalancheTxType_AVALANCHE_TX_TYPE_EXPORT                       AvalancheTxType = 2
	AvalancheTxType_AVALANCHE_TX_TYPE_IMPORT                       AvalancheTxType = 3
	AvalancheTxType_AVALANCHE_TX_TYPE_ADD_PERMISSIONLESS_DELEGATOR AvalancheTxType = 4
	AvalancheTxType_AVALANCHE_TX_TYPE_REWARD_VALIDATOR             AvalancheTxType = 5
)

// Enum value maps for AvalancheTxType.
var (
	AvalancheTxType_name = map[int32]string{
		0: "AVALANCHE_TX_TYPE_INVALID",
		1: "AVALANCHE_TX_TYPE_TRANSFER",
		2: "AVALANCHE_TX_TYPE_EXPORT",
		3: "AVALANCHE_TX_TYPE_IMPORT",
		4: "AVALANCHE_TX_TYPE_ADD_PERMISSIONLESS_DELEGATOR",
		5: "AVALANCHE_TX_TYPE_REWARD_VALIDATOR",
	}
	AvalancheTxType_value = map[string]int32{
		"AVALANCHE_TX_TYPE_INVALID":                      0,
		"AVALANCHE_TX_TYPE_TRANSFER":                     1,
		"AVALANCHE_TX_TYPE_EXPORT":                       2,
		"AVALANCHE_TX_TYPE_IMPORT":                       3,
		"AVALANCHE_TX_TYPE_ADD_PERMISSIONLESS_DELEGATOR": 4,
		"AVALANCHE_TX_TYPE_REWARD_VALIDATOR":             5,
	}
)

func (x AvalancheTxType) Enum() *AvalancheTxType {
	p := new(AvalancheTxType)
	*p = x
	return p
}

func (x AvalancheTxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvalancheTxType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[18].Descriptor()
}

func (AvalancheTxType) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[18]
}

func (x AvalancheTxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvalancheTxType.Descriptor instead.
func (AvalancheTxType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{18}
}

type AvalancheInputType int32

const (
	AvalancheInputType_AVALANCHE_INPUT_TYPE_INVALID            AvalancheInputType = 0
	AvalancheInputType_AVALANCHE_INPUT_TYPE_TRANSFERABLE_INPUT AvalancheInputType = 1
	AvalancheInputType_AVALANCHE_INPUT_TYPE_IMPORTED_INPUT     AvalancheInputType = 2
	AvalancheInputType_AVALANCHE_INPUT_TYPE_EVM_INPUT          AvalancheInputType = 3
)

// Enum value maps for AvalancheInputType.
var (
	AvalancheInputType_name = map[int32]string{
		0: "AVALANCHE_INPUT_TYPE_INVALID",
		1: "AVALANCHE_INPUT_TYPE_TRANSFERABLE_INPUT",
		2: "AVALANCHE_INPUT_TYPE_IMPORTED_INPUT",
		3: "AVALANCHE_INPUT_TYPE_EVM_INPUT",
	}
	AvalancheInputType_value = map[string]int32{
		"AVALANCHE_INPUT_TYPE_INVALID":            0,
		"AVALANCHE_INPUT_TYPE_TRANSFERABLE_INPUT": 1,
		"AVALANCHE_INPUT_TYPE_IMPORTED_INPUT":     2,
		"AVALANCHE_INPUT_TYPE_EVM_INPUT":          3,
	}
)

func (x AvalancheInputType) Enum() *AvalancheInputType {
	p := new(AvalancheInputType)
	*p = x
	return p
}

func (x AvalancheInputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvalancheInputType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[19].Descriptor()
}

func (AvalancheInputType) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[19]
}

func (x AvalancheInputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvalancheInputType.Descriptor instead.
func (AvalancheInputType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{19}
}

type AvalancheOutputType int32

const (
	AvalancheOutputType_AVALANCHE_OUTPUT_TYPE_INVALID             AvalancheOutputType = 0
	AvalancheOutputType_AVALANCHE_OUTPUT_TYPE_TRANSFERABLE_OUTPUT AvalancheOutputType = 1
	AvalancheOutputType_AVALANCHE_OUTPUT_TYPE_EXPORTED_OUTPUT     AvalancheOutputType = 2
	AvalancheOutputType_AVALANCHE_OUTPUT_TYPE_EVM_OUTPUT          AvalancheOutputType = 3
	AvalancheOutputType_AVALANCHE_OUTPUT_TYPE_STAKE_OUTPUT        AvalancheOutputType = 4
	AvalancheOutputType_AVALANCHE_OUTPUT_TYPE_OWNERS_OUTPUT       AvalancheOutputType = 5
)

// Enum value maps for AvalancheOutputType.
var (
	AvalancheOutputType_name = map[int32]string{
		0: "AVALANCHE_OUTPUT_TYPE_INVALID",
		1: "AVALANCHE_OUTPUT_TYPE_TRANSFERABLE_OUTPUT",
		2: "AVALANCHE_OUTPUT_TYPE_EXPORTED_OUTPUT",
		3: "AVALANCHE_OUTPUT_TYPE_EVM_OUTPUT",
		4: "AVALANCHE_OUTPUT_TYPE_STAKE_OUTPUT",
		5: "AVALANCHE_OUTPUT_TYPE_OWNERS_OUTPUT",
	}
	AvalancheOutputType_value = map[string]int32{
		"AVALANCHE_OUTPUT_TYPE_INVALID":             0,
		"AVALANCHE_OUTPUT_TYPE_TRANSFERABLE_OUTPUT": 1,
		"AVALANCHE_OUTPUT_TYPE_EXPORTED_OUTPUT":     2,
		"AVALANCHE_OUTPUT_TYPE_EVM_OUTPUT":          3,
		"AVALANCHE_OUTPUT_TYPE_STAKE_OUTPUT":        4,
		"AVALANCHE_OUTPUT_TYPE_OWNERS_OUTPUT":       5,
	}
)

func (x AvalancheOutputType) Enum() *AvalancheOutputType {
	p := new(AvalancheOutputType)
	*p = x
	return p
}

func (x AvalancheOutputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvalancheOutputType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[20].Descriptor()
}

func (AvalancheOutputType) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[20]
}

func (x AvalancheOutputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvalancheOutputType.Descriptor instead.
func (AvalancheOutputType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{20}
}

type ContractCreationType int32

const (
	ContractCreationType_CONTRACT_CREATION_TYPE_INVALID ContractCreationType = 0
	ContractCreationType_CONTRACT_CREATION_TYPE_IMPL    ContractCreationType = 1
	ContractCreationType_CONTRACT_CREATION_TYPE_UTILS   ContractCreationType = 2
)

// Enum value maps for ContractCreationType.
var (
	ContractCreationType_name = map[int32]string{
		0: "CONTRACT_CREATION_TYPE_INVALID",
		1: "CONTRACT_CREATION_TYPE_IMPL",
		2: "CONTRACT_CREATION_TYPE_UTILS",
	}
	ContractCreationType_value = map[string]int32{
		"CONTRACT_CREATION_TYPE_INVALID": 0,
		"CONTRACT_CREATION_TYPE_IMPL":    1,
		"CONTRACT_CREATION_TYPE_UTILS":   2,
	}
)

func (x ContractCreationType) Enum() *ContractCreationType {
	p := new(ContractCreationType)
	*p = x
	return p
}

func (x ContractCreationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractCreationType) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[21].Descriptor()
}

func (ContractCreationType) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[21]
}

func (x ContractCreationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractCreationType.Descriptor instead.
func (ContractCreationType) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{21}
}

type NFTCallMethod int32

const (
	NFTCallMethod_NFT_CALL_METHOD_INVALID  NFTCallMethod = 0
	NFTCallMethod_NFT_CALL_METHOD_MINT     NFTCallMethod = 1
	NFTCallMethod_NFT_CALL_METHOD_BURN     NFTCallMethod = 2
	NFTCallMethod_NFT_CALL_METHOD_TRANSFER NFTCallMethod = 3
)

// Enum value maps for NFTCallMethod.
var (
	NFTCallMethod_name = map[int32]string{
		0: "NFT_CALL_METHOD_INVALID",
		1: "NFT_CALL_METHOD_MINT",
		2: "NFT_CALL_METHOD_BURN",
		3: "NFT_CALL_METHOD_TRANSFER",
	}
	NFTCallMethod_value = map[string]int32{
		"NFT_CALL_METHOD_INVALID":  0,
		"NFT_CALL_METHOD_MINT":     1,
		"NFT_CALL_METHOD_BURN":     2,
		"NFT_CALL_METHOD_TRANSFER": 3,
	}
)

func (x NFTCallMethod) Enum() *NFTCallMethod {
	p := new(NFTCallMethod)
	*p = x
	return p
}

func (x NFTCallMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NFTCallMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[22].Descriptor()
}

func (NFTCallMethod) Type() protoreflect.EnumType {
	return &file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes[22]
}

func (x NFTCallMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NFTCallMethod.Descriptor instead.
func (NFTCallMethod) EnumDescriptor() ([]byte, []int) {
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP(), []int{22}
}

var File_gincoinc_global_v1_gincoincglobalv1_enum_proto protoreflect.FileDescriptor

var file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x67, 0x69, 0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2a, 0xe6, 0x14, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x42, 0x54, 0x43, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x54, 0x48, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x4f, 0x49, 0x4e, 0x5f, 0x4c, 0x54, 0x43, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x42, 0x43, 0x48, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f,
	0x58, 0x52, 0x50, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x5f, 0x42, 0x41, 0x54, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x54, 0x52, 0x58, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x49, 0x4e, 0x5f,
	0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x55, 0x53, 0x44, 0x54, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x52, 0x59, 0x4f, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f,
	0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x4a, 0x41, 0x53, 0x4d, 0x59, 0x10, 0x0a,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x45,
	0x4e, 0x4a, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43,
	0x32, 0x30, 0x5f, 0x4f, 0x4d, 0x47, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e,
	0x5f, 0x58, 0x4c, 0x4d, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41,
	0x44, 0x41, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x44, 0x4f, 0x54,
	0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x49, 0x4e, 0x5f,
	0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x44, 0x45, 0x50, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x55, 0x53, 0x44, 0x43, 0x10, 0x12,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x47,
	0x59, 0x45, 0x4e, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x5f, 0x5a, 0x41, 0x49, 0x46, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f,
	0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x46, 0x53, 0x43, 0x43, 0x10, 0x15, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x43, 0x4d,
	0x53, 0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32,
	0x30, 0x5f, 0x43, 0x49, 0x43, 0x43, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x49, 0x4e,
	0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x4e, 0x43, 0x58, 0x43, 0x10, 0x18, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x54, 0x10,
	0x19, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x58, 0x45, 0x4d, 0x10, 0x1a, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x41, 0x10, 0x1b, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x49, 0x4f, 0x53, 0x54, 0x10, 0x1c, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x53, 0x4b, 0x45, 0x42,
	0x10, 0x1d, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4b, 0x4c, 0x41, 0x59, 0x10,
	0x1e, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10,
	0x1f, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x58, 0x59, 0x4d, 0x10, 0x20, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x56, 0x41, 0x58, 0x10, 0x21, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x4d, 0x41, 0x54,
	0x49, 0x43, 0x10, 0x22, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43,
	0x32, 0x30, 0x5f, 0x52, 0x4f, 0x4e, 0x44, 0x10, 0x23, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x4d, 0x56, 0x10, 0x24, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x43,
	0x32, 0x30, 0x5f, 0x52, 0x4f, 0x4e, 0x44, 0x10, 0x25, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f,
	0x4d, 0x56, 0x10, 0x26, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x50, 0x4f, 0x4c,
	0x59, 0x47, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x54, 0x53, 0x55, 0x47, 0x54,
	0x10, 0x27, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30,
	0x5f, 0x47, 0x58, 0x45, 0x10, 0x28, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4f,
	0x41, 0x53, 0x10, 0x29, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x53, 0x54,
	0x52, 0x10, 0x2a, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x58, 0x44, 0x43, 0x10,
	0x2b, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x54, 0x4f, 0x4d, 0x10, 0x2c,
	0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4b, 0x4c, 0x41, 0x59, 0x54, 0x4e, 0x5f,
	0x4b, 0x49, 0x50, 0x37, 0x5f, 0x4d, 0x42, 0x58, 0x10, 0x2d, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f,
	0x49, 0x4e, 0x5f, 0x45, 0x54, 0x43, 0x10, 0x2e, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x49, 0x4e,
	0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x44, 0x41, 0x49, 0x10, 0x2f, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x57, 0x45, 0x54, 0x48, 0x10,
	0x30, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x10, 0x31,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x41,
	0x58, 0x53, 0x10, 0x32, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43,
	0x32, 0x30, 0x5f, 0x53, 0x41, 0x4e, 0x44, 0x10, 0x33, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x4d, 0x4b, 0x52, 0x10, 0x34, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x43, 0x48, 0x5a, 0x10,
	0x35, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f,
	0x4e, 0x49, 0x44, 0x54, 0x10, 0x36, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45,
	0x52, 0x43, 0x32, 0x30, 0x5f, 0x46, 0x4e, 0x43, 0x54, 0x10, 0x37, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x53, 0x48, 0x49, 0x42, 0x10, 0x38,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x41,
	0x50, 0x45, 0x10, 0x39, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43,
	0x32, 0x30, 0x5f, 0x42, 0x4e, 0x42, 0x10, 0x3a, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x49, 0x4e,
	0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x46, 0x43, 0x52, 0x10, 0x3b, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x48, 0x42, 0x41, 0x52, 0x10, 0x3c, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x4f, 0x49, 0x4e, 0x5f, 0x4a, 0x4f, 0x43, 0x10, 0x3d, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x53, 0x4f, 0x4c, 0x10, 0x3e, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f,
	0x42, 0x4e, 0x42, 0x10, 0x3f, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x46, 0x4c,
	0x52, 0x10, 0x40, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x50, 0x4f, 0x4c, 0x59,
	0x47, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x4f, 0x53, 0x48, 0x49, 0x10, 0x41,
	0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x52, 0x42, 0x49, 0x54, 0x52, 0x55,
	0x4d, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x41, 0x52, 0x42, 0x10, 0x42, 0x12, 0x19, 0x0a,
	0x15, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4b, 0x4c, 0x41, 0x59, 0x54, 0x4e, 0x5f, 0x4b, 0x49, 0x50,
	0x37, 0x5f, 0x42, 0x4f, 0x52, 0x41, 0x10, 0x43, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x49, 0x4e,
	0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x44, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x53, 0x55, 0x50, 0x10,
	0x45, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f,
	0x44, 0x4d, 0x32, 0x50, 0x10, 0x46, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41,
	0x50, 0x54, 0x10, 0x47, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x44, 0x4f, 0x47,
	0x45, 0x10, 0x48, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x50, 0x4f, 0x4c, 0x59,
	0x47, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x53, 0x4e, 0x50, 0x54, 0x10, 0x49,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x52,
	0x41, 0x54, 0x10, 0x4a, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x51, 0x55, 0x4f,
	0x52, 0x55, 0x4d, 0x10, 0x4b, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x51, 0x55,
	0x4f, 0x52, 0x55, 0x4d, 0x5f, 0x45, 0x52, 0x43, 0x37, 0x32, 0x31, 0x5f, 0x54, 0x43, 0x43, 0x10,
	0x4c, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f,
	0x4a, 0x50, 0x59, 0x50, 0x58, 0x10, 0x4d, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x49, 0x4e, 0x5f,
	0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x4a, 0x50, 0x59, 0x43, 0x54, 0x10, 0x4e, 0x12, 0x0d, 0x0a,
	0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x53, 0x44, 0x4e, 0x10, 0x92, 0x4e, 0x12, 0x15, 0x0a, 0x10,
	0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x53, 0x43, 0x44, 0x45, 0x56,
	0x10, 0x93, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32,
	0x30, 0x5f, 0x53, 0x43, 0x51, 0x41, 0x10, 0x94, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x53, 0x43, 0x50, 0x52, 0x4f, 0x44, 0x10, 0x95,
	0x4e, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f,
	0x43, 0x4f, 0x49, 0x4e, 0x53, 0x43, 0x44, 0x45, 0x56, 0x10, 0x96, 0x4e, 0x12, 0x18, 0x0a, 0x13,
	0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x53,
	0x43, 0x51, 0x41, 0x10, 0x97, 0x4e, 0x12, 0x1a, 0x0a, 0x15, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45,
	0x52, 0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x53, 0x43, 0x50, 0x52, 0x4f, 0x44, 0x10,
	0x98, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30,
	0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x31, 0x10, 0x99, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x32, 0x10, 0x9a, 0x4e,
	0x12, 0x15, 0x0a, 0x10, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x43,
	0x4f, 0x49, 0x4e, 0x33, 0x10, 0x9b, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x4f, 0x49, 0x4e, 0x5f,
	0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x34, 0x10, 0x9c, 0x4e, 0x12, 0x15,
	0x0a, 0x10, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49,
	0x4e, 0x35, 0x10, 0x9d, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x36, 0x10, 0x9e, 0x4e, 0x12, 0x15, 0x0a, 0x10,
	0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x37,
	0x10, 0x9f, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32,
	0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x38, 0x10, 0xa0, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x4f,
	0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x39, 0x10, 0xa1,
	0x4e, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f,
	0x43, 0x4f, 0x49, 0x4e, 0x31, 0x30, 0x10, 0xa2, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x31, 0x31, 0x10, 0xa3,
	0x4e, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f,
	0x43, 0x4f, 0x49, 0x4e, 0x31, 0x32, 0x10, 0xa4, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x31, 0x33, 0x10, 0xa5,
	0x4e, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f,
	0x43, 0x4f, 0x49, 0x4e, 0x31, 0x34, 0x10, 0xa6, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x31, 0x35, 0x10, 0xa7,
	0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f,
	0x43, 0x4f, 0x49, 0x4e, 0x10, 0xa8, 0x4e, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x4f, 0x49, 0x4e, 0x5f,
	0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x50, 0x52, 0x45, 0x55, 0x41, 0x54, 0x31, 0x10, 0xa9, 0x4e,
	0x12, 0x17, 0x0a, 0x12, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x50,
	0x52, 0x45, 0x55, 0x41, 0x54, 0x32, 0x10, 0xaa, 0x4e, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x50, 0x52, 0x45, 0x55, 0x41, 0x54, 0x33, 0x10,
	0xab, 0x4e, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30,
	0x5f, 0x50, 0x52, 0x45, 0x55, 0x41, 0x54, 0x34, 0x10, 0xac, 0x4e, 0x12, 0x18, 0x0a, 0x13, 0x43,
	0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x44, 0x45, 0x56, 0x43, 0x4f, 0x49,
	0x4e, 0x31, 0x10, 0xad, 0x4e, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x5f, 0x44, 0x45, 0x56, 0x43, 0x4f, 0x49, 0x4e, 0x32, 0x10, 0xae, 0x4e, 0x12,
	0x17, 0x0a, 0x12, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x4d, 0x54,
	0x42, 0x4a, 0x4a, 0x50, 0x59, 0x10, 0xaf, 0x4e, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x4f, 0x49, 0x4e,
	0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x4d, 0x54, 0x42, 0x4a, 0x55, 0x53, 0x44, 0x10, 0xb0,
	0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f,
	0x50, 0x4a, 0x50, 0x59, 0x10, 0xb1, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x49, 0x4e, 0x5f,
	0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x50, 0x55, 0x53, 0x44, 0x10, 0xb2, 0x4e, 0x12, 0x16, 0x0a,
	0x11, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x55, 0x41, 0x54, 0x4a,
	0x50, 0x59, 0x10, 0xb3, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x5f, 0x55, 0x41, 0x54, 0x55, 0x53, 0x44, 0x10, 0xb4, 0x4e, 0x12, 0x16, 0x0a,
	0x11, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e,
	0x32, 0x31, 0x10, 0xb5, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x32, 0x32, 0x10, 0xb6, 0x4e, 0x12, 0x16, 0x0a,
	0x11, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e,
	0x32, 0x33, 0x10, 0xb7, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x32, 0x34, 0x10, 0xb8, 0x4e, 0x12, 0x16, 0x0a,
	0x11, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e,
	0x32, 0x35, 0x10, 0xb9, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x32, 0x36, 0x10, 0xba, 0x4e, 0x12, 0x16, 0x0a,
	0x11, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e,
	0x32, 0x37, 0x10, 0xbb, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x32, 0x38, 0x10, 0xbc, 0x4e, 0x12, 0x16, 0x0a,
	0x11, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e,
	0x32, 0x39, 0x10, 0xbd, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x33, 0x30, 0x10, 0xbe, 0x4e, 0x12, 0x16, 0x0a,
	0x11, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e,
	0x33, 0x31, 0x10, 0xbf, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x33, 0x32, 0x10, 0xc0, 0x4e, 0x12, 0x1e, 0x0a,
	0x19, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x51, 0x55, 0x4f, 0x52, 0x55, 0x4d, 0x5f, 0x45, 0x52, 0x43,
	0x37, 0x32, 0x31, 0x5f, 0x54, 0x43, 0x43, 0x44, 0x45, 0x56, 0x10, 0xc1, 0x4e, 0x2a, 0x8d, 0x10,
	0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x54,
	0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x4e, 0x45, 0x54, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e,
	0x45, 0x54, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54,
	0x5f, 0x32, 0x10, 0x3b, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x4c, 0x49, 0x54, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54,
	0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x49,
	0x54, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x06,
	0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x42, 0x49, 0x54, 0x43,
	0x4f, 0x49, 0x4e, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10,
	0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x42, 0x49, 0x54,
	0x43, 0x4f, 0x49, 0x4e, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54,
	0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x49,
	0x50, 0x50, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x09, 0x12, 0x1a,
	0x0a, 0x16, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x49, 0x50, 0x50, 0x4c, 0x45,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x52, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e,
	0x45, 0x54, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x54, 0x52, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x0c, 0x12, 0x19,
	0x0a, 0x15, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x30, 0x42, 0x41, 0x4e, 0x5f,
	0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x30, 0x42, 0x41, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e,
	0x45, 0x54, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x53, 0x54, 0x45, 0x4c, 0x4c, 0x41, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10,
	0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x54, 0x45,
	0x4c, 0x4c, 0x41, 0x52, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x10, 0x12, 0x1b,
	0x0a, 0x17, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x41, 0x4e,
	0x4f, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x41, 0x4e, 0x4f, 0x5f, 0x54,
	0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x12, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4f, 0x4c, 0x4b, 0x41, 0x44, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x4e, 0x45, 0x54, 0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x50, 0x4f, 0x4c, 0x4b, 0x41, 0x44, 0x4f, 0x54, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e,
	0x45, 0x54, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x4e, 0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x15, 0x12, 0x17, 0x0a,
	0x13, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4e, 0x45, 0x4d, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x4e, 0x45, 0x54, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x4d, 0x4f, 0x4e, 0x41, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e,
	0x45, 0x54, 0x10, 0x17, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x4d, 0x4f, 0x4e, 0x41, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54,
	0x10, 0x18, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4f,
	0x53, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x19, 0x12, 0x18, 0x0a, 0x14,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x4e, 0x45, 0x54, 0x10, 0x1a, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x4b, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x1b,
	0x12, 0x18, 0x0a, 0x14, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4b, 0x4c, 0x41, 0x59,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x1c, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x5f, 0x4d, 0x41,
	0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x1d, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e,
	0x45, 0x54, 0x10, 0x1e, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x1f,
	0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x59, 0x4d, 0x42,
	0x4f, 0x4c, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x20, 0x12, 0x1d, 0x0a, 0x19,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x48,
	0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x21, 0x12, 0x1d, 0x0a, 0x19, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x48, 0x45,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x22, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4f, 0x41, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x49, 0x4e,
	0x4e, 0x45, 0x54, 0x10, 0x23, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x4f, 0x41, 0x53, 0x59, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x24,
	0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x53, 0x54, 0x41,
	0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x25, 0x12, 0x1b, 0x0a, 0x17, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x48, 0x49, 0x42, 0x55, 0x59, 0x41, 0x5f, 0x54,
	0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x26, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x58, 0x44, 0x43, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10,
	0x27, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x58, 0x44, 0x43,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x28, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x53, 0x4d, 0x4f, 0x53, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x4e, 0x45, 0x54, 0x10, 0x29, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x43, 0x4f, 0x53, 0x4d, 0x4f, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54,
	0x10, 0x2a, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x2b, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x49, 0x43, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x2c, 0x12, 0x1c,
	0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x41,
	0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x2d, 0x12, 0x1c, 0x0a, 0x18,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x41, 0x4e, 0x44,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x2e, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x48, 0x45, 0x44, 0x45, 0x52, 0x41, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x4e, 0x45, 0x54, 0x10, 0x2f, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x48, 0x45, 0x44, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54,
	0x10, 0x30, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4a, 0x41,
	0x50, 0x41, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x31, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x4a, 0x41, 0x50, 0x41, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43,
	0x48, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x32, 0x12, 0x1a,
	0x0a, 0x16, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x4f, 0x4c, 0x41, 0x4e, 0x41,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x33, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x4f, 0x4c, 0x41, 0x4e, 0x41, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x4e, 0x45, 0x54, 0x10, 0x34, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x42, 0x4e, 0x42, 0x5f, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x49,
	0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x35, 0x12, 0x23, 0x0a, 0x1f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x42, 0x4e, 0x42, 0x5f, 0x53, 0x4d, 0x41, 0x52, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x36,
	0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x4c, 0x41, 0x52,
	0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x37, 0x12, 0x19, 0x0a, 0x15, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x4c, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x4e, 0x45, 0x54, 0x10, 0x38, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x41, 0x52, 0x42, 0x49, 0x54, 0x52, 0x55, 0x4d, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x39, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x52, 0x42, 0x49, 0x54, 0x52, 0x55, 0x4d, 0x5f, 0x4f, 0x4e, 0x45,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x3a, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x50, 0x54, 0x4f, 0x53, 0x5f, 0x4d, 0x41, 0x49, 0x4e,
	0x4e, 0x45, 0x54, 0x10, 0x3c, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x41, 0x50, 0x54, 0x4f, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x3d,
	0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x4f, 0x47, 0x45,
	0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x3e, 0x12, 0x1c,
	0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x4f, 0x47, 0x45, 0x43, 0x4f,
	0x49, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x3f, 0x12, 0x2c, 0x0a, 0x28,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x48,
	0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x40, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x54,
	0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x41, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x51, 0x55, 0x4f, 0x52, 0x55, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e,
	0x45, 0x54, 0x10, 0x42, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x51, 0x55, 0x4f, 0x52, 0x55, 0x4d, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10, 0x43,
	0x12, 0x1b, 0x0a, 0x16, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x48, 0x49, 0x44,
	0x45, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x92, 0x4e, 0x2a, 0x8a, 0x01,
	0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x32, 0x53, 0x48, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x32, 0x53, 0x48, 0x5f, 0x50, 0x32, 0x57, 0x53, 0x48, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x32, 0x57, 0x53,
	0x48, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x64, 0x2a, 0xd3, 0x01, 0x0a, 0x10, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05,
	0x2a, 0x8f, 0x01, 0x0a, 0x09, 0x55, 0x54, 0x58, 0x4f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x55, 0x54, 0x58, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x54, 0x58, 0x4f, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x54, 0x58, 0x4f, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1c,
	0x0a, 0x18, 0x55, 0x54, 0x58, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x50, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x55, 0x54, 0x58, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x4e, 0x54,
	0x10, 0x04, 0x2a, 0x8f, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x54,
	0x41, 0x4c, 0x10, 0x04, 0x2a, 0xab, 0x01, 0x0a, 0x12, 0x58, 0x52, 0x50, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x58,
	0x52, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x58, 0x52, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12,
	0x28, 0x0a, 0x24, 0x58, 0x52, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e,
	0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x58, 0x52, 0x50,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x10, 0x03, 0x2a, 0xb0, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x64, 0x2a, 0xbd, 0x03, 0x0a, 0x12, 0x4e, 0x65, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c,
	0x4e, 0x45, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x26,
	0x0a, 0x22, 0x4e, 0x45, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x31, 0x0a, 0x2d, 0x4e, 0x45, 0x4d, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4d, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x4e, 0x45, 0x4d,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53, 0x49, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x30,
	0x0a, 0x2c, 0x4e, 0x45, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53, 0x49, 0x47, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04,
	0x12, 0x32, 0x0a, 0x2e, 0x4e, 0x45, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53, 0x49,
	0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x05, 0x12, 0x31, 0x0a, 0x2d, 0x4e, 0x45, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x06, 0x12, 0x2f, 0x0a, 0x2b, 0x4e, 0x45, 0x4d, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x4f, 0x53, 0x41, 0x49, 0x43, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x07, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x45, 0x4d, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x4f, 0x53, 0x41, 0x49, 0x43, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x08, 0x2a, 0xeb, 0x09, 0x0a, 0x15, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x1f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x02, 0x12, 0x2e, 0x0a,
	0x2a, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x2c, 0x0a,
	0x28, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41,
	0x54, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x59, 0x4d, 0x42,
	0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x56, 0x52, 0x46, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41,
	0x53, 0x48, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b,
	0x10, 0x08, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x43, 0x52, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x10, 0x09, 0x12, 0x2c, 0x0a, 0x28,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x0a, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x59,
	0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x53, 0x41, 0x49, 0x43, 0x5f, 0x4d, 0x45, 0x54,
	0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x0b, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x59, 0x4d, 0x42, 0x4f,
	0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x54,
	0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x0c, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x59, 0x4d, 0x42, 0x4f,
	0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x53, 0x41, 0x49, 0x43, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x4f, 0x53, 0x41, 0x49, 0x43, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0e, 0x12, 0x34, 0x0a, 0x30, 0x53, 0x59, 0x4d, 0x42,
	0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x53, 0x41, 0x49, 0x43, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c,
	0x59, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x39,
	0x0a, 0x35, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53,
	0x49, 0x47, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x4c, 0x49,
	0x41, 0x53, 0x10, 0x11, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x4f, 0x53, 0x41, 0x49, 0x43, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10, 0x12, 0x12, 0x32,
	0x0a, 0x2e, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x13, 0x12, 0x37, 0x0a, 0x33, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x12, 0x36, 0x0a, 0x32, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d,
	0x4f, 0x53, 0x41, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x15, 0x12, 0x39, 0x0a, 0x35, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x16, 0x12, 0x36,
	0x0a, 0x32, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x53, 0x41, 0x49, 0x43,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x17, 0x12, 0x35, 0x0a, 0x31, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x4f, 0x53, 0x41, 0x49, 0x43, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f,
	0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x18, 0x12, 0x24, 0x0a,
	0x20, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x10, 0x19, 0x2a, 0xea, 0x01, 0x0a, 0x1e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45,
	0x55, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45,
	0x55, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x54, 0x48, 0x45,
	0x52, 0x45, 0x55, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x34, 0x0a, 0x30, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x52,
	0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x56, 0x10, 0x03,
	0x2a, 0xd1, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x53, 0x4d, 0x4f, 0x53, 0x5f, 0x4d, 0x53, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x43, 0x4f, 0x53, 0x4d, 0x4f, 0x53, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x53,
	0x4d, 0x4f, 0x53, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x53, 0x4d, 0x4f,
	0x53, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x4c,
	0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x53, 0x4d, 0x4f,
	0x53, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x42, 0x4f, 0x4e,
	0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x4f, 0x53, 0x4d, 0x4f, 0x53, 0x5f,
	0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41,
	0x57, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x57, 0x41,
	0x52, 0x44, 0x10, 0x05, 0x2a, 0xaa, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x24, 0x0a, 0x20, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47,
	0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54,
	0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x22, 0x0a,
	0x1e, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10,
	0x03, 0x2a, 0x8f, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x4b, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x54, 0x41,
	0x4b, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x10, 0x03, 0x2a, 0xae, 0x02, 0x0a, 0x1a, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x53,
	0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x32, 0x0a,
	0x2e, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x10,
	0x01, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x53, 0x54,
	0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55,
	0x4d, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x45,
	0x56, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f,
	0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22,
	0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47,
	0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58,
	0x49, 0x54, 0x10, 0x05, 0x2a, 0xc9, 0x01, 0x0a, 0x19, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x4f, 0x4c, 0x41, 0x4e, 0x41, 0x5f, 0x52, 0x45, 0x43,
	0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26,
	0x53, 0x4f, 0x4c, 0x41, 0x4e, 0x41, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4e,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4f, 0x4c, 0x41,
	0x4e, 0x41, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4f, 0x4c, 0x41, 0x4e, 0x41, 0x5f, 0x52,
	0x45, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x48, 0x41, 0x53, 0x48, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x03,
	0x2a, 0xa6, 0x02, 0x0a, 0x0f, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x4f, 0x4c, 0x41, 0x4e, 0x41, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4f, 0x4c, 0x41, 0x4e, 0x41, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4f, 0x4c, 0x41, 0x4e, 0x41, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4f, 0x4c, 0x41, 0x4e, 0x41, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44,
	0x52, 0x41, 0x57, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4f, 0x4c, 0x41, 0x4e, 0x41, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x45,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4f, 0x4c, 0x41, 0x4e,
	0x41, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4f, 0x4c, 0x41, 0x4e, 0x41, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x06, 0x12, 0x29,
	0x0a, 0x25, 0x53, 0x4f, 0x4c, 0x41, 0x4e, 0x41, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x07, 0x2a, 0xc2, 0x07, 0x0a, 0x12, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x20, 0x0a, 0x1c, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x4d,
	0x41, 0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x10, 0x01, 0x12, 0x36, 0x0a, 0x32, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x4d, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x55, 0x52, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x3e, 0x0a, 0x3a,
	0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x4d, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26,
	0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x4d, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x49,
	0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x54, 0x48, 0x45,
	0x52, 0x45, 0x55, 0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x4d, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x42, 0x55,
	0x52, 0x4e, 0x10, 0x05, 0x12, 0x3b, 0x0a, 0x37, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x4d, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x42, 0x55, 0x4c, 0x4b, 0x5f, 0x41,
	0x44, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x06, 0x12, 0x40, 0x0a, 0x3c, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x4d, 0x41,
	0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x42, 0x55, 0x4c, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x56, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x07, 0x12, 0x3b, 0x0a, 0x37, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47,
	0x4d, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x42, 0x55, 0x4c, 0x4b, 0x5f, 0x41, 0x44,
	0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x08,
	0x12, 0x40, 0x0a, 0x3c, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x4d, 0x41, 0x54,
	0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x42, 0x55, 0x4c, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0x09, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x4d,
	0x41, 0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x53, 0x43, 0x41,
	0x54, 0x45, 0x10, 0x0a, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x4d, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10,
	0x0b, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x4d, 0x41,
	0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x0c,
	0x12, 0x44, 0x0a, 0x40, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x4d, 0x41, 0x54,
	0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x52, 0x59, 0x10, 0x0d, 0x12, 0x42, 0x0a, 0x3e, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45,
	0x55, 0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x4d, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x41, 0x4e,
	0x54, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x42, 0x4c, 0x41, 0x43,
	0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x37, 0x0a, 0x33, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x4d, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x0f, 0x12, 0x39, 0x0a, 0x35, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47,
	0x4d, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x10, 0x2a, 0xe8,
	0x01, 0x0a, 0x0f, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x54, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f,
	0x54, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x54,
	0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x54,
	0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x54, 0x58, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x32, 0x0a,
	0x2e, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x54, 0x58, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x4f, 0x52, 0x10,
	0x04, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x54,
	0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x05, 0x2a, 0xb0, 0x01, 0x0a, 0x12, 0x41, 0x76,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x1c, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x49, 0x4e,
	0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f,
	0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x01, 0x12,
	0x27, 0x0a, 0x23, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x49, 0x4e, 0x50,
	0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x56, 0x41, 0x4c,
	0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x56, 0x4d, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x03, 0x2a, 0x89, 0x02, 0x0a,
	0x13, 0x41, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x48,
	0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x56, 0x41, 0x4c, 0x41,
	0x4e, 0x43, 0x48, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4f, 0x55,
	0x54, 0x50, 0x55, 0x54, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e,
	0x43, 0x48, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10,
	0x02, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x4f,
	0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x4d, 0x5f, 0x4f,
	0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x56, 0x41, 0x4c, 0x41,
	0x4e, 0x43, 0x48, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x04, 0x12,
	0x27, 0x0a, 0x23, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x4f, 0x55, 0x54,
	0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x53, 0x5f,
	0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x05, 0x2a, 0x7d, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4d, 0x50, 0x4c, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43,
	0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x54, 0x49, 0x4c, 0x53, 0x10, 0x02, 0x2a, 0x7e, 0x0a, 0x0d, 0x4e, 0x46, 0x54, 0x43, 0x61,
	0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x46, 0x54, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x46, 0x54, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x4e, 0x46, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x42, 0x55, 0x52, 0x4e, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x46, 0x54,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x03, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x69, 0x6e, 0x63, 0x6f, 0x49, 0x6e, 0x63, 0x2f, 0x67,
	0x65, 0x77, 0x2d, 0x6b, 0x6d, 0x70, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x69, 0x6e, 0x63, 0x6f,
	0x69, 0x6e, 0x63, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x69,
	0x6e, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescOnce sync.Once
	file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescData = file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDesc
)

func file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescGZIP() []byte {
	file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescOnce.Do(func() {
		file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescData = protoimpl.X.CompressGZIP(file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescData)
	})
	return file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDescData
}

var file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes = make([]protoimpl.EnumInfo, 23)
var file_gincoinc_global_v1_gincoincglobalv1_enum_proto_goTypes = []interface{}{
	(Coin)(0),                           // 0: gincoinc.global.v1.Coin
	(Network)(0),                        // 1: gincoinc.global.v1.Network
	(AddressType)(0),                    // 2: gincoinc.global.v1.AddressType
	(TransactionState)(0),               // 3: gincoinc.global.v1.TransactionState
	(UTXOState)(0),                      // 4: gincoinc.global.v1.UTXOState
	(TransferType)(0),                   // 5: gincoinc.global.v1.TransferType
	(XRPTransactionType)(0),             // 6: gincoinc.global.v1.XRPTransactionType
	(TransactionResult)(0),              // 7: gincoinc.global.v1.TransactionResult
	(NemTransactionType)(0),             // 8: gincoinc.global.v1.NemTransactionType
	(SymbolTransactionType)(0),          // 9: gincoinc.global.v1.SymbolTransactionType
	(EthereumStakingRewardLayerType)(0), // 10: gincoinc.global.v1.EthereumStakingRewardLayerType
	(CosmosMsgType)(0),                  // 11: gincoinc.global.v1.CosmosMsgType
	(StakingValidatorStatus)(0),         // 12: gincoinc.global.v1.StakingValidatorStatus
	(StakingEventType)(0),               // 13: gincoinc.global.v1.StakingEventType
	(EthereumStakingHistoryType)(0),     // 14: gincoinc.global.v1.EthereumStakingHistoryType
	(SolanaRecentBlockhashType)(0),      // 15: gincoinc.global.v1.SolanaRecentBlockhashType
	(SolanaEventType)(0),                // 16: gincoinc.global.v1.SolanaEventType
	(EthereumCallMethod)(0),             // 17: gincoinc.global.v1.EthereumCallMethod
	(AvalancheTxType)(0),                // 18: gincoinc.global.v1.AvalancheTxType
	(AvalancheInputType)(0),             // 19: gincoinc.global.v1.AvalancheInputType
	(AvalancheOutputType)(0),            // 20: gincoinc.global.v1.AvalancheOutputType
	(ContractCreationType)(0),           // 21: gincoinc.global.v1.ContractCreationType
	(NFTCallMethod)(0),                  // 22: gincoinc.global.v1.NFTCallMethod
}
var file_gincoinc_global_v1_gincoincglobalv1_enum_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_gincoinc_global_v1_gincoincglobalv1_enum_proto_init() }
func file_gincoinc_global_v1_gincoincglobalv1_enum_proto_init() {
	if File_gincoinc_global_v1_gincoincglobalv1_enum_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDesc,
			NumEnums:      23,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gincoinc_global_v1_gincoincglobalv1_enum_proto_goTypes,
		DependencyIndexes: file_gincoinc_global_v1_gincoincglobalv1_enum_proto_depIdxs,
		EnumInfos:         file_gincoinc_global_v1_gincoincglobalv1_enum_proto_enumTypes,
	}.Build()
	File_gincoinc_global_v1_gincoincglobalv1_enum_proto = out.File
	file_gincoinc_global_v1_gincoincglobalv1_enum_proto_rawDesc = nil
	file_gincoinc_global_v1_gincoincglobalv1_enum_proto_goTypes = nil
	file_gincoinc_global_v1_gincoincglobalv1_enum_proto_depIdxs = nil
}
