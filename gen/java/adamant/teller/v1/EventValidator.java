// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gincoinc/adamant/teller/v1/adamanttellerv1/event.proto

package adamant.teller.v1;


@SuppressWarnings("all")
public class EventValidator {
	public static io.envoyproxy.pgv.ValidatorImpl validatorFor(Class clazz) {
		
		if (clazz.equals(adamant.teller.v1.Event.TransferUpdated.class)) return new TransferUpdatedValidator();
		if (clazz.equals(adamant.teller.v1.Event.TransferUpdateCosmosSpecific.class)) return new TransferUpdateCosmosSpecificValidator();
		if (clazz.equals(adamant.teller.v1.Event.TransferUpdateSubstrateSpecific.class)) return new TransferUpdateSubstrateSpecificValidator();
		if (clazz.equals(adamant.teller.v1.Event.TransferUpdateEvent.class)) return new TransferUpdateEventValidator();
		if (clazz.equals(adamant.teller.v1.Event.EthereumStakingReward.class)) return new EthereumStakingRewardValidator();
		if (clazz.equals(adamant.teller.v1.Event.StakingRewardReceived.class)) return new StakingRewardReceivedValidator();
		return null;
	}


/**
	 * Validates {@code TransferUpdated} protobuf objects.
	 */
	public static class TransferUpdatedValidator implements io.envoyproxy.pgv.ValidatorImpl<adamant.teller.v1.Event.TransferUpdated> {
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
	

	public void assertValid(adamant.teller.v1.Event.TransferUpdated proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for WalletId

	// no validation rules for TransferId

	// no validation rules for Coin

	// no validation rules for TxId

	// no validation rules for TxIndex

	// no validation rules for Value

	// no validation rules for StringValue

	// no validation rules for JpyRate

	// no validation rules for Address

	// no validation rules for DestinationTag

	// no validation rules for MemoId

	// no validation rules for Message

	// no validation rules for State

	// no validation rules for Result

	// no validation rules for TransferType

	// no validation rules for From

	// no validation rules for To

	
			// Validate time
			if (proto.hasTime()) index.validatorFor(proto.getTime()).assertValid(proto.getTime());
	// no validation rules for EventId

	// no validation rules for Fee

	// no validation rules for StringFee

	
			// Validate cosmos_specific
			if (proto.hasCosmosSpecific()) index.validatorFor(proto.getCosmosSpecific()).assertValid(proto.getCosmosSpecific());
	
			// Validate substrate_specific
			if (proto.hasSubstrateSpecific()) index.validatorFor(proto.getSubstrateSpecific()).assertValid(proto.getSubstrateSpecific());
	// no validation rules for Method

	// no validation rules for Network

	
	}
}
/**
	 * Validates {@code TransferUpdateCosmosSpecific} protobuf objects.
	 */
	public static class TransferUpdateCosmosSpecificValidator implements io.envoyproxy.pgv.ValidatorImpl<adamant.teller.v1.Event.TransferUpdateCosmosSpecific> {
		
	
		
	
		
	
	

	public void assertValid(adamant.teller.v1.Event.TransferUpdateCosmosSpecific proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for Type

	// no validation rules for DelegateAmount

	// no validation rules for RewardAmount

	
	}
}
/**
	 * Validates {@code TransferUpdateSubstrateSpecific} protobuf objects.
	 */
	public static class TransferUpdateSubstrateSpecificValidator implements io.envoyproxy.pgv.ValidatorImpl<adamant.teller.v1.Event.TransferUpdateSubstrateSpecific> {
		
	
		
	
	

	public void assertValid(adamant.teller.v1.Event.TransferUpdateSubstrateSpecific proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for ExtrinsicId

	// no validation rules for ExtrinsicHash

	
	}
}
/**
	 * Validates {@code TransferUpdateEvent} protobuf objects.
	 */
	public static class TransferUpdateEventValidator implements io.envoyproxy.pgv.ValidatorImpl<adamant.teller.v1.Event.TransferUpdateEvent> {
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
	

	public void assertValid(adamant.teller.v1.Event.TransferUpdateEvent proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for EventId

	// no validation rules for WalletId

	// no validation rules for Coin

	// no validation rules for TxId

	// no validation rules for TxIndex

	// no validation rules for Value

	// no validation rules for StringValue

	// no validation rules for JpyRate

	// no validation rules for Address

	// no validation rules for DestinationTag

	// no validation rules for MemoId

	// no validation rules for State

	// no validation rules for Result

	// no validation rules for TransferType

	
			// Validate time
			if (proto.hasTime()) index.validatorFor(proto.getTime()).assertValid(proto.getTime());
	
			// Validate substrate_specific
			if (proto.hasSubstrateSpecific()) index.validatorFor(proto.getSubstrateSpecific()).assertValid(proto.getSubstrateSpecific());
	
	}
}
/**
	 * Validates {@code EthereumStakingReward} protobuf objects.
	 */
	public static class EthereumStakingRewardValidator implements io.envoyproxy.pgv.ValidatorImpl<adamant.teller.v1.Event.EthereumStakingReward> {
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
		com.google.re2j.Pattern WALLET_ID__PATTERN = com.google.re2j.Pattern.compile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$");
	
		
	
		
	
		
	
	

	public void assertValid(adamant.teller.v1.Event.EthereumStakingReward proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for EventId

	// no validation rules for WithdrawalIndex

	// no validation rules for BlockNumber

	
			// Validate block_time
			if (proto.hasBlockTime()) index.validatorFor(proto.getBlockTime()).assertValid(proto.getBlockTime());
	// no validation rules for ValidatorIndex

	// no validation rules for Address

	// no validation rules for Value

	
			io.envoyproxy.pgv.StringValidation.pattern(".adamant.teller.v1.EthereumStakingReward.wallet_id", proto.getWalletId(), WALLET_ID__PATTERN);
	// no validation rules for EthereumStakingRewardLayerType

	// no validation rules for StringValue

	// no validation rules for BlockHash

	
	}
}
/**
	 * Validates {@code StakingRewardReceived} protobuf objects.
	 */
	public static class StakingRewardReceivedValidator implements io.envoyproxy.pgv.ValidatorImpl<adamant.teller.v1.Event.StakingRewardReceived> {
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
	

	public void assertValid(adamant.teller.v1.Event.StakingRewardReceived proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for EventId

	// no validation rules for ValidatorId

	// no validation rules for Value

	// no validation rules for StringValue

	// no validation rules for TxId

	// no validation rules for TxIndex

	// no validation rules for WalletId

	// no validation rules for Address

	// no validation rules for Coin

	
			// Validate time
			if (proto.hasTime()) index.validatorFor(proto.getTime()).assertValid(proto.getTime());
	
	}
}
}

