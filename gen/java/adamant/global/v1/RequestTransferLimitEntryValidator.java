// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gincoinc/adamant/global/v1/adamantglobalv1/model.proto

package java.adamant.global.v1;

/**
* Validates {@code RequestTransferLimitEntry} protobuf objects.
*/
public class RequestTransferLimitEntryValidator implements io.envoyproxy.pgv.ValidatorImpl<java.adamant.global.v1.RequestTransferLimitEntry>{
	public static io.envoyproxy.pgv.ValidatorImpl validatorFor(Class clazz) {
		if (clazz.equals(java.adamant.global.v1.RequestTransferLimitEntry.class)) return new RequestTransferLimitEntryValidator();
		
		return null;
	}
		
		private final java.adamant.global.v1.TransferLimitType[] TRANSFER_LIMIT_TYPE__NOT_IN = new java.adamant.global.v1.TransferLimitType[]{
			java.adamant.global.v1.TransferLimitType.forNumber(0),
		};
	
		
		private final Long TRANSFER_LIMIT_VALUE__GTE = 0L;
	
	

	public void assertValid(java.adamant.global.v1.RequestTransferLimitEntry proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
			io.envoyproxy.pgv.EnumValidation.definedOnly(".adamant.global.v1.RequestTransferLimitEntry.transfer_limit_type", proto.getTransferLimitType());
			io.envoyproxy.pgv.CollectiveValidation.notIn(".adamant.global.v1.RequestTransferLimitEntry.transfer_limit_type", proto.getTransferLimitType(), TRANSFER_LIMIT_TYPE__NOT_IN);
	
			io.envoyproxy.pgv.ComparativeValidation.greaterThanOrEqual(".adamant.global.v1.RequestTransferLimitEntry.transfer_limit_value", proto.getTransferLimitValue(), TRANSFER_LIMIT_VALUE__GTE, java.util.Comparator.naturalOrder());
	
	}

}

