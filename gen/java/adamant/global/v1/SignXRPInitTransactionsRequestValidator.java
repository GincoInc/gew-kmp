// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gincoinc/adamant/global/v1/adamantglobalv1/global_api.proto

package adamant.global.v1;

/**
* Validates {@code SignXRPInitTransactionsRequest} protobuf objects.
*/
public class SignXRPInitTransactionsRequestValidator implements io.envoyproxy.pgv.ValidatorImpl<adamant.global.v1.SignXRPInitTransactionsRequest>{
	public static io.envoyproxy.pgv.ValidatorImpl validatorFor(Class clazz) {
		if (clazz.equals(adamant.global.v1.SignXRPInitTransactionsRequest.class)) return new SignXRPInitTransactionsRequestValidator();
		
		return null;
	}
		
		com.google.re2j.Pattern WALLET_ID__PATTERN = com.google.re2j.Pattern.compile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$");
	
		
		com.google.re2j.Pattern KEY_ID__PATTERN = com.google.re2j.Pattern.compile("^[0-9A-F]{64}$");
	
		
	
	

	public void assertValid(adamant.global.v1.SignXRPInitTransactionsRequest proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
			io.envoyproxy.pgv.StringValidation.pattern(".adamant.global.v1.SignXRPInitTransactionsRequest.wallet_id", proto.getWalletId(), WALLET_ID__PATTERN);
	
			io.envoyproxy.pgv.StringValidation.pattern(".adamant.global.v1.SignXRPInitTransactionsRequest.key_id", proto.getKeyId(), KEY_ID__PATTERN);
	
			io.envoyproxy.pgv.RepeatedValidation.minItems(".adamant.global.v1.SignXRPInitTransactionsRequest.signed_info", proto.getSignedInfoList(), 1);
			io.envoyproxy.pgv.RepeatedValidation.forEach(proto.getSignedInfoList(), item -> {
				
			// Validate signed_info
			if (true) index.validatorFor(item).assertValid(item);
			});

	
	}

}

