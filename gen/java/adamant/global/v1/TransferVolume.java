// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gincoinc/adamant/global/v1/adamantglobalv1/model.proto

package java.adamant.global.v1;

/**
 * Protobuf type {@code adamant.global.v1.TransferVolume}
 */
public final class TransferVolume extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:adamant.global.v1.TransferVolume)
    TransferVolumeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TransferVolume.newBuilder() to construct.
  private TransferVolume(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TransferVolume() {
    coin_ = 0;
    hotStringVolume_ = "";
    coldStringVolume_ = "";
    hotStringJpyVolume_ = "";
    coldStringJpyVolume_ = "";
    transferType_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new TransferVolume();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private TransferVolume(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();

            coin_ = rawValue;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            hotStringVolume_ = s;
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            coldStringVolume_ = s;
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            hotStringJpyVolume_ = s;
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            coldStringJpyVolume_ = s;
            break;
          }
          case 48: {

            hotNumber_ = input.readInt64();
            break;
          }
          case 56: {

            coldNumber_ = input.readInt64();
            break;
          }
          case 64: {
            int rawValue = input.readEnum();

            transferType_ = rawValue;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return java.adamant.global.v1.ModelProto.internal_static_adamant_global_v1_TransferVolume_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return java.adamant.global.v1.ModelProto.internal_static_adamant_global_v1_TransferVolume_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            java.adamant.global.v1.TransferVolume.class, java.adamant.global.v1.TransferVolume.Builder.class);
  }

  public static final int COIN_FIELD_NUMBER = 1;
  private int coin_;
  /**
   * <pre>
   * coin
   * </pre>
   *
   * <code>.gincoinc.global.v1.Coin coin = 1 [json_name = "coin"];</code>
   * @return The enum numeric value on the wire for coin.
   */
  @java.lang.Override public int getCoinValue() {
    return coin_;
  }
  /**
   * <pre>
   * coin
   * </pre>
   *
   * <code>.gincoinc.global.v1.Coin coin = 1 [json_name = "coin"];</code>
   * @return The coin.
   */
  @java.lang.Override public java.gincoinc.global.v1.Coin getCoin() {
    @SuppressWarnings("deprecation")
    java.gincoinc.global.v1.Coin result = java.gincoinc.global.v1.Coin.valueOf(coin_);
    return result == null ? java.gincoinc.global.v1.Coin.UNRECOGNIZED : result;
  }

  public static final int HOT_STRING_VOLUME_FIELD_NUMBER = 2;
  private volatile java.lang.Object hotStringVolume_;
  /**
   * <pre>
   * hot volume
   * </pre>
   *
   * <code>string hot_string_volume = 2 [json_name = "hotStringVolume"];</code>
   * @return The hotStringVolume.
   */
  @java.lang.Override
  public java.lang.String getHotStringVolume() {
    java.lang.Object ref = hotStringVolume_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      hotStringVolume_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * hot volume
   * </pre>
   *
   * <code>string hot_string_volume = 2 [json_name = "hotStringVolume"];</code>
   * @return The bytes for hotStringVolume.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getHotStringVolumeBytes() {
    java.lang.Object ref = hotStringVolume_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      hotStringVolume_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int COLD_STRING_VOLUME_FIELD_NUMBER = 3;
  private volatile java.lang.Object coldStringVolume_;
  /**
   * <pre>
   * col volume
   * </pre>
   *
   * <code>string cold_string_volume = 3 [json_name = "coldStringVolume"];</code>
   * @return The coldStringVolume.
   */
  @java.lang.Override
  public java.lang.String getColdStringVolume() {
    java.lang.Object ref = coldStringVolume_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      coldStringVolume_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * col volume
   * </pre>
   *
   * <code>string cold_string_volume = 3 [json_name = "coldStringVolume"];</code>
   * @return The bytes for coldStringVolume.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getColdStringVolumeBytes() {
    java.lang.Object ref = coldStringVolume_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      coldStringVolume_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int HOT_STRING_JPY_VOLUME_FIELD_NUMBER = 4;
  private volatile java.lang.Object hotStringJpyVolume_;
  /**
   * <pre>
   * hot volume
   * </pre>
   *
   * <code>string hot_string_jpy_volume = 4 [json_name = "hotStringJpyVolume"];</code>
   * @return The hotStringJpyVolume.
   */
  @java.lang.Override
  public java.lang.String getHotStringJpyVolume() {
    java.lang.Object ref = hotStringJpyVolume_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      hotStringJpyVolume_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * hot volume
   * </pre>
   *
   * <code>string hot_string_jpy_volume = 4 [json_name = "hotStringJpyVolume"];</code>
   * @return The bytes for hotStringJpyVolume.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getHotStringJpyVolumeBytes() {
    java.lang.Object ref = hotStringJpyVolume_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      hotStringJpyVolume_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int COLD_STRING_JPY_VOLUME_FIELD_NUMBER = 5;
  private volatile java.lang.Object coldStringJpyVolume_;
  /**
   * <pre>
   * col volume
   * </pre>
   *
   * <code>string cold_string_jpy_volume = 5 [json_name = "coldStringJpyVolume"];</code>
   * @return The coldStringJpyVolume.
   */
  @java.lang.Override
  public java.lang.String getColdStringJpyVolume() {
    java.lang.Object ref = coldStringJpyVolume_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      coldStringJpyVolume_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * col volume
   * </pre>
   *
   * <code>string cold_string_jpy_volume = 5 [json_name = "coldStringJpyVolume"];</code>
   * @return The bytes for coldStringJpyVolume.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getColdStringJpyVolumeBytes() {
    java.lang.Object ref = coldStringJpyVolume_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      coldStringJpyVolume_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int HOT_NUMBER_FIELD_NUMBER = 6;
  private long hotNumber_;
  /**
   * <pre>
   * hot transfer number volume
   * </pre>
   *
   * <code>int64 hot_number = 6 [json_name = "hotNumber"];</code>
   * @return The hotNumber.
   */
  @java.lang.Override
  public long getHotNumber() {
    return hotNumber_;
  }

  public static final int COLD_NUMBER_FIELD_NUMBER = 7;
  private long coldNumber_;
  /**
   * <pre>
   * cold transfer number volume
   * </pre>
   *
   * <code>int64 cold_number = 7 [json_name = "coldNumber"];</code>
   * @return The coldNumber.
   */
  @java.lang.Override
  public long getColdNumber() {
    return coldNumber_;
  }

  public static final int TRANSFER_TYPE_FIELD_NUMBER = 8;
  private int transferType_;
  /**
   * <pre>
   * transfer type
   * </pre>
   *
   * <code>.gincoinc.global.v1.TransferType transfer_type = 8 [json_name = "transferType"];</code>
   * @return The enum numeric value on the wire for transferType.
   */
  @java.lang.Override public int getTransferTypeValue() {
    return transferType_;
  }
  /**
   * <pre>
   * transfer type
   * </pre>
   *
   * <code>.gincoinc.global.v1.TransferType transfer_type = 8 [json_name = "transferType"];</code>
   * @return The transferType.
   */
  @java.lang.Override public java.gincoinc.global.v1.TransferType getTransferType() {
    @SuppressWarnings("deprecation")
    java.gincoinc.global.v1.TransferType result = java.gincoinc.global.v1.TransferType.valueOf(transferType_);
    return result == null ? java.gincoinc.global.v1.TransferType.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (coin_ != java.gincoinc.global.v1.Coin.COIN_INVALID.getNumber()) {
      output.writeEnum(1, coin_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(hotStringVolume_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, hotStringVolume_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(coldStringVolume_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, coldStringVolume_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(hotStringJpyVolume_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, hotStringJpyVolume_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(coldStringJpyVolume_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, coldStringJpyVolume_);
    }
    if (hotNumber_ != 0L) {
      output.writeInt64(6, hotNumber_);
    }
    if (coldNumber_ != 0L) {
      output.writeInt64(7, coldNumber_);
    }
    if (transferType_ != java.gincoinc.global.v1.TransferType.TRANSFER_TYPE_INVALID.getNumber()) {
      output.writeEnum(8, transferType_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (coin_ != java.gincoinc.global.v1.Coin.COIN_INVALID.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, coin_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(hotStringVolume_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, hotStringVolume_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(coldStringVolume_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, coldStringVolume_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(hotStringJpyVolume_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, hotStringJpyVolume_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(coldStringJpyVolume_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, coldStringJpyVolume_);
    }
    if (hotNumber_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(6, hotNumber_);
    }
    if (coldNumber_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(7, coldNumber_);
    }
    if (transferType_ != java.gincoinc.global.v1.TransferType.TRANSFER_TYPE_INVALID.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(8, transferType_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof java.adamant.global.v1.TransferVolume)) {
      return super.equals(obj);
    }
    java.adamant.global.v1.TransferVolume other = (java.adamant.global.v1.TransferVolume) obj;

    if (coin_ != other.coin_) return false;
    if (!getHotStringVolume()
        .equals(other.getHotStringVolume())) return false;
    if (!getColdStringVolume()
        .equals(other.getColdStringVolume())) return false;
    if (!getHotStringJpyVolume()
        .equals(other.getHotStringJpyVolume())) return false;
    if (!getColdStringJpyVolume()
        .equals(other.getColdStringJpyVolume())) return false;
    if (getHotNumber()
        != other.getHotNumber()) return false;
    if (getColdNumber()
        != other.getColdNumber()) return false;
    if (transferType_ != other.transferType_) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + COIN_FIELD_NUMBER;
    hash = (53 * hash) + coin_;
    hash = (37 * hash) + HOT_STRING_VOLUME_FIELD_NUMBER;
    hash = (53 * hash) + getHotStringVolume().hashCode();
    hash = (37 * hash) + COLD_STRING_VOLUME_FIELD_NUMBER;
    hash = (53 * hash) + getColdStringVolume().hashCode();
    hash = (37 * hash) + HOT_STRING_JPY_VOLUME_FIELD_NUMBER;
    hash = (53 * hash) + getHotStringJpyVolume().hashCode();
    hash = (37 * hash) + COLD_STRING_JPY_VOLUME_FIELD_NUMBER;
    hash = (53 * hash) + getColdStringJpyVolume().hashCode();
    hash = (37 * hash) + HOT_NUMBER_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getHotNumber());
    hash = (37 * hash) + COLD_NUMBER_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getColdNumber());
    hash = (37 * hash) + TRANSFER_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + transferType_;
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static java.adamant.global.v1.TransferVolume parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static java.adamant.global.v1.TransferVolume parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static java.adamant.global.v1.TransferVolume parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static java.adamant.global.v1.TransferVolume parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static java.adamant.global.v1.TransferVolume parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static java.adamant.global.v1.TransferVolume parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static java.adamant.global.v1.TransferVolume parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static java.adamant.global.v1.TransferVolume parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static java.adamant.global.v1.TransferVolume parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static java.adamant.global.v1.TransferVolume parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static java.adamant.global.v1.TransferVolume parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static java.adamant.global.v1.TransferVolume parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(java.adamant.global.v1.TransferVolume prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code adamant.global.v1.TransferVolume}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:adamant.global.v1.TransferVolume)
      java.adamant.global.v1.TransferVolumeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return java.adamant.global.v1.ModelProto.internal_static_adamant_global_v1_TransferVolume_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return java.adamant.global.v1.ModelProto.internal_static_adamant_global_v1_TransferVolume_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              java.adamant.global.v1.TransferVolume.class, java.adamant.global.v1.TransferVolume.Builder.class);
    }

    // Construct using java.adamant.global.v1.TransferVolume.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      coin_ = 0;

      hotStringVolume_ = "";

      coldStringVolume_ = "";

      hotStringJpyVolume_ = "";

      coldStringJpyVolume_ = "";

      hotNumber_ = 0L;

      coldNumber_ = 0L;

      transferType_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return java.adamant.global.v1.ModelProto.internal_static_adamant_global_v1_TransferVolume_descriptor;
    }

    @java.lang.Override
    public java.adamant.global.v1.TransferVolume getDefaultInstanceForType() {
      return java.adamant.global.v1.TransferVolume.getDefaultInstance();
    }

    @java.lang.Override
    public java.adamant.global.v1.TransferVolume build() {
      java.adamant.global.v1.TransferVolume result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public java.adamant.global.v1.TransferVolume buildPartial() {
      java.adamant.global.v1.TransferVolume result = new java.adamant.global.v1.TransferVolume(this);
      result.coin_ = coin_;
      result.hotStringVolume_ = hotStringVolume_;
      result.coldStringVolume_ = coldStringVolume_;
      result.hotStringJpyVolume_ = hotStringJpyVolume_;
      result.coldStringJpyVolume_ = coldStringJpyVolume_;
      result.hotNumber_ = hotNumber_;
      result.coldNumber_ = coldNumber_;
      result.transferType_ = transferType_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof java.adamant.global.v1.TransferVolume) {
        return mergeFrom((java.adamant.global.v1.TransferVolume)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(java.adamant.global.v1.TransferVolume other) {
      if (other == java.adamant.global.v1.TransferVolume.getDefaultInstance()) return this;
      if (other.coin_ != 0) {
        setCoinValue(other.getCoinValue());
      }
      if (!other.getHotStringVolume().isEmpty()) {
        hotStringVolume_ = other.hotStringVolume_;
        onChanged();
      }
      if (!other.getColdStringVolume().isEmpty()) {
        coldStringVolume_ = other.coldStringVolume_;
        onChanged();
      }
      if (!other.getHotStringJpyVolume().isEmpty()) {
        hotStringJpyVolume_ = other.hotStringJpyVolume_;
        onChanged();
      }
      if (!other.getColdStringJpyVolume().isEmpty()) {
        coldStringJpyVolume_ = other.coldStringJpyVolume_;
        onChanged();
      }
      if (other.getHotNumber() != 0L) {
        setHotNumber(other.getHotNumber());
      }
      if (other.getColdNumber() != 0L) {
        setColdNumber(other.getColdNumber());
      }
      if (other.transferType_ != 0) {
        setTransferTypeValue(other.getTransferTypeValue());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      java.adamant.global.v1.TransferVolume parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (java.adamant.global.v1.TransferVolume) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int coin_ = 0;
    /**
     * <pre>
     * coin
     * </pre>
     *
     * <code>.gincoinc.global.v1.Coin coin = 1 [json_name = "coin"];</code>
     * @return The enum numeric value on the wire for coin.
     */
    @java.lang.Override public int getCoinValue() {
      return coin_;
    }
    /**
     * <pre>
     * coin
     * </pre>
     *
     * <code>.gincoinc.global.v1.Coin coin = 1 [json_name = "coin"];</code>
     * @param value The enum numeric value on the wire for coin to set.
     * @return This builder for chaining.
     */
    public Builder setCoinValue(int value) {
      
      coin_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * coin
     * </pre>
     *
     * <code>.gincoinc.global.v1.Coin coin = 1 [json_name = "coin"];</code>
     * @return The coin.
     */
    @java.lang.Override
    public java.gincoinc.global.v1.Coin getCoin() {
      @SuppressWarnings("deprecation")
      java.gincoinc.global.v1.Coin result = java.gincoinc.global.v1.Coin.valueOf(coin_);
      return result == null ? java.gincoinc.global.v1.Coin.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * coin
     * </pre>
     *
     * <code>.gincoinc.global.v1.Coin coin = 1 [json_name = "coin"];</code>
     * @param value The coin to set.
     * @return This builder for chaining.
     */
    public Builder setCoin(java.gincoinc.global.v1.Coin value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      coin_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * coin
     * </pre>
     *
     * <code>.gincoinc.global.v1.Coin coin = 1 [json_name = "coin"];</code>
     * @return This builder for chaining.
     */
    public Builder clearCoin() {
      
      coin_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object hotStringVolume_ = "";
    /**
     * <pre>
     * hot volume
     * </pre>
     *
     * <code>string hot_string_volume = 2 [json_name = "hotStringVolume"];</code>
     * @return The hotStringVolume.
     */
    public java.lang.String getHotStringVolume() {
      java.lang.Object ref = hotStringVolume_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        hotStringVolume_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * hot volume
     * </pre>
     *
     * <code>string hot_string_volume = 2 [json_name = "hotStringVolume"];</code>
     * @return The bytes for hotStringVolume.
     */
    public com.google.protobuf.ByteString
        getHotStringVolumeBytes() {
      java.lang.Object ref = hotStringVolume_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        hotStringVolume_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * hot volume
     * </pre>
     *
     * <code>string hot_string_volume = 2 [json_name = "hotStringVolume"];</code>
     * @param value The hotStringVolume to set.
     * @return This builder for chaining.
     */
    public Builder setHotStringVolume(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      hotStringVolume_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * hot volume
     * </pre>
     *
     * <code>string hot_string_volume = 2 [json_name = "hotStringVolume"];</code>
     * @return This builder for chaining.
     */
    public Builder clearHotStringVolume() {
      
      hotStringVolume_ = getDefaultInstance().getHotStringVolume();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * hot volume
     * </pre>
     *
     * <code>string hot_string_volume = 2 [json_name = "hotStringVolume"];</code>
     * @param value The bytes for hotStringVolume to set.
     * @return This builder for chaining.
     */
    public Builder setHotStringVolumeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      hotStringVolume_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object coldStringVolume_ = "";
    /**
     * <pre>
     * col volume
     * </pre>
     *
     * <code>string cold_string_volume = 3 [json_name = "coldStringVolume"];</code>
     * @return The coldStringVolume.
     */
    public java.lang.String getColdStringVolume() {
      java.lang.Object ref = coldStringVolume_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        coldStringVolume_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * col volume
     * </pre>
     *
     * <code>string cold_string_volume = 3 [json_name = "coldStringVolume"];</code>
     * @return The bytes for coldStringVolume.
     */
    public com.google.protobuf.ByteString
        getColdStringVolumeBytes() {
      java.lang.Object ref = coldStringVolume_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        coldStringVolume_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * col volume
     * </pre>
     *
     * <code>string cold_string_volume = 3 [json_name = "coldStringVolume"];</code>
     * @param value The coldStringVolume to set.
     * @return This builder for chaining.
     */
    public Builder setColdStringVolume(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      coldStringVolume_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * col volume
     * </pre>
     *
     * <code>string cold_string_volume = 3 [json_name = "coldStringVolume"];</code>
     * @return This builder for chaining.
     */
    public Builder clearColdStringVolume() {
      
      coldStringVolume_ = getDefaultInstance().getColdStringVolume();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * col volume
     * </pre>
     *
     * <code>string cold_string_volume = 3 [json_name = "coldStringVolume"];</code>
     * @param value The bytes for coldStringVolume to set.
     * @return This builder for chaining.
     */
    public Builder setColdStringVolumeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      coldStringVolume_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object hotStringJpyVolume_ = "";
    /**
     * <pre>
     * hot volume
     * </pre>
     *
     * <code>string hot_string_jpy_volume = 4 [json_name = "hotStringJpyVolume"];</code>
     * @return The hotStringJpyVolume.
     */
    public java.lang.String getHotStringJpyVolume() {
      java.lang.Object ref = hotStringJpyVolume_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        hotStringJpyVolume_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * hot volume
     * </pre>
     *
     * <code>string hot_string_jpy_volume = 4 [json_name = "hotStringJpyVolume"];</code>
     * @return The bytes for hotStringJpyVolume.
     */
    public com.google.protobuf.ByteString
        getHotStringJpyVolumeBytes() {
      java.lang.Object ref = hotStringJpyVolume_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        hotStringJpyVolume_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * hot volume
     * </pre>
     *
     * <code>string hot_string_jpy_volume = 4 [json_name = "hotStringJpyVolume"];</code>
     * @param value The hotStringJpyVolume to set.
     * @return This builder for chaining.
     */
    public Builder setHotStringJpyVolume(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      hotStringJpyVolume_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * hot volume
     * </pre>
     *
     * <code>string hot_string_jpy_volume = 4 [json_name = "hotStringJpyVolume"];</code>
     * @return This builder for chaining.
     */
    public Builder clearHotStringJpyVolume() {
      
      hotStringJpyVolume_ = getDefaultInstance().getHotStringJpyVolume();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * hot volume
     * </pre>
     *
     * <code>string hot_string_jpy_volume = 4 [json_name = "hotStringJpyVolume"];</code>
     * @param value The bytes for hotStringJpyVolume to set.
     * @return This builder for chaining.
     */
    public Builder setHotStringJpyVolumeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      hotStringJpyVolume_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object coldStringJpyVolume_ = "";
    /**
     * <pre>
     * col volume
     * </pre>
     *
     * <code>string cold_string_jpy_volume = 5 [json_name = "coldStringJpyVolume"];</code>
     * @return The coldStringJpyVolume.
     */
    public java.lang.String getColdStringJpyVolume() {
      java.lang.Object ref = coldStringJpyVolume_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        coldStringJpyVolume_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * col volume
     * </pre>
     *
     * <code>string cold_string_jpy_volume = 5 [json_name = "coldStringJpyVolume"];</code>
     * @return The bytes for coldStringJpyVolume.
     */
    public com.google.protobuf.ByteString
        getColdStringJpyVolumeBytes() {
      java.lang.Object ref = coldStringJpyVolume_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        coldStringJpyVolume_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * col volume
     * </pre>
     *
     * <code>string cold_string_jpy_volume = 5 [json_name = "coldStringJpyVolume"];</code>
     * @param value The coldStringJpyVolume to set.
     * @return This builder for chaining.
     */
    public Builder setColdStringJpyVolume(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      coldStringJpyVolume_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * col volume
     * </pre>
     *
     * <code>string cold_string_jpy_volume = 5 [json_name = "coldStringJpyVolume"];</code>
     * @return This builder for chaining.
     */
    public Builder clearColdStringJpyVolume() {
      
      coldStringJpyVolume_ = getDefaultInstance().getColdStringJpyVolume();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * col volume
     * </pre>
     *
     * <code>string cold_string_jpy_volume = 5 [json_name = "coldStringJpyVolume"];</code>
     * @param value The bytes for coldStringJpyVolume to set.
     * @return This builder for chaining.
     */
    public Builder setColdStringJpyVolumeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      coldStringJpyVolume_ = value;
      onChanged();
      return this;
    }

    private long hotNumber_ ;
    /**
     * <pre>
     * hot transfer number volume
     * </pre>
     *
     * <code>int64 hot_number = 6 [json_name = "hotNumber"];</code>
     * @return The hotNumber.
     */
    @java.lang.Override
    public long getHotNumber() {
      return hotNumber_;
    }
    /**
     * <pre>
     * hot transfer number volume
     * </pre>
     *
     * <code>int64 hot_number = 6 [json_name = "hotNumber"];</code>
     * @param value The hotNumber to set.
     * @return This builder for chaining.
     */
    public Builder setHotNumber(long value) {
      
      hotNumber_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * hot transfer number volume
     * </pre>
     *
     * <code>int64 hot_number = 6 [json_name = "hotNumber"];</code>
     * @return This builder for chaining.
     */
    public Builder clearHotNumber() {
      
      hotNumber_ = 0L;
      onChanged();
      return this;
    }

    private long coldNumber_ ;
    /**
     * <pre>
     * cold transfer number volume
     * </pre>
     *
     * <code>int64 cold_number = 7 [json_name = "coldNumber"];</code>
     * @return The coldNumber.
     */
    @java.lang.Override
    public long getColdNumber() {
      return coldNumber_;
    }
    /**
     * <pre>
     * cold transfer number volume
     * </pre>
     *
     * <code>int64 cold_number = 7 [json_name = "coldNumber"];</code>
     * @param value The coldNumber to set.
     * @return This builder for chaining.
     */
    public Builder setColdNumber(long value) {
      
      coldNumber_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * cold transfer number volume
     * </pre>
     *
     * <code>int64 cold_number = 7 [json_name = "coldNumber"];</code>
     * @return This builder for chaining.
     */
    public Builder clearColdNumber() {
      
      coldNumber_ = 0L;
      onChanged();
      return this;
    }

    private int transferType_ = 0;
    /**
     * <pre>
     * transfer type
     * </pre>
     *
     * <code>.gincoinc.global.v1.TransferType transfer_type = 8 [json_name = "transferType"];</code>
     * @return The enum numeric value on the wire for transferType.
     */
    @java.lang.Override public int getTransferTypeValue() {
      return transferType_;
    }
    /**
     * <pre>
     * transfer type
     * </pre>
     *
     * <code>.gincoinc.global.v1.TransferType transfer_type = 8 [json_name = "transferType"];</code>
     * @param value The enum numeric value on the wire for transferType to set.
     * @return This builder for chaining.
     */
    public Builder setTransferTypeValue(int value) {
      
      transferType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * transfer type
     * </pre>
     *
     * <code>.gincoinc.global.v1.TransferType transfer_type = 8 [json_name = "transferType"];</code>
     * @return The transferType.
     */
    @java.lang.Override
    public java.gincoinc.global.v1.TransferType getTransferType() {
      @SuppressWarnings("deprecation")
      java.gincoinc.global.v1.TransferType result = java.gincoinc.global.v1.TransferType.valueOf(transferType_);
      return result == null ? java.gincoinc.global.v1.TransferType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * transfer type
     * </pre>
     *
     * <code>.gincoinc.global.v1.TransferType transfer_type = 8 [json_name = "transferType"];</code>
     * @param value The transferType to set.
     * @return This builder for chaining.
     */
    public Builder setTransferType(java.gincoinc.global.v1.TransferType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      transferType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * transfer type
     * </pre>
     *
     * <code>.gincoinc.global.v1.TransferType transfer_type = 8 [json_name = "transferType"];</code>
     * @return This builder for chaining.
     */
    public Builder clearTransferType() {
      
      transferType_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:adamant.global.v1.TransferVolume)
  }

  // @@protoc_insertion_point(class_scope:adamant.global.v1.TransferVolume)
  private static final java.adamant.global.v1.TransferVolume DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new java.adamant.global.v1.TransferVolume();
  }

  public static java.adamant.global.v1.TransferVolume getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TransferVolume>
      PARSER = new com.google.protobuf.AbstractParser<TransferVolume>() {
    @java.lang.Override
    public TransferVolume parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new TransferVolume(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<TransferVolume> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TransferVolume> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public java.adamant.global.v1.TransferVolume getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

