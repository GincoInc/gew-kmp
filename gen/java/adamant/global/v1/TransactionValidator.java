// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gincoinc/adamant/global/v1/adamantglobalv1/model.proto

package java.adamant.global.v1;

/**
* Validates {@code Transaction} protobuf objects.
*/
public class TransactionValidator implements io.envoyproxy.pgv.ValidatorImpl<java.adamant.global.v1.Transaction>{
	public static io.envoyproxy.pgv.ValidatorImpl validatorFor(Class clazz) {
		if (clazz.equals(java.adamant.global.v1.Transaction.class)) return new TransactionValidator();
		
		return null;
	}
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
	

	public void assertValid(java.adamant.global.v1.Transaction proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for WalletId

	// no validation rules for TransactionId

	// no validation rules for Coin

	// no validation rules for TxId

	// no validation rules for Address

	// no validation rules for Value

	// no validation rules for StringValue

	// no validation rules for JpyRate

	// no validation rules for Fee

	// no validation rules for StringFee

	// no validation rules for FeeRate

	// no validation rules for State

	
			io.envoyproxy.pgv.RepeatedValidation.forEach(proto.getSignedKeysList(), item -> {
				
			// Validate signed_keys
			if (true) index.validatorFor(item).assertValid(item);
			});

	
			io.envoyproxy.pgv.RepeatedValidation.forEach(proto.getMembersList(), item -> {
				
			// Validate members
			if (true) index.validatorFor(item).assertValid(item);
			});

	
			// Validate bitcoin_specific
			if (proto.hasBitcoinSpecific()) index.validatorFor(proto.getBitcoinSpecific()).assertValid(proto.getBitcoinSpecific());
	
			// Validate ethereum_specific
			if (proto.hasEthereumSpecific()) index.validatorFor(proto.getEthereumSpecific()).assertValid(proto.getEthereumSpecific());
	
			// Validate litecoin_specific
			if (proto.hasLitecoinSpecific()) index.validatorFor(proto.getLitecoinSpecific()).assertValid(proto.getLitecoinSpecific());
	
			// Validate bitcoincash_specific
			if (proto.hasBitcoincashSpecific()) index.validatorFor(proto.getBitcoincashSpecific()).assertValid(proto.getBitcoincashSpecific());
	
			// Validate xrp_specific
			if (proto.hasXrpSpecific()) index.validatorFor(proto.getXrpSpecific()).assertValid(proto.getXrpSpecific());
	
			// Validate tron_specific
			if (proto.hasTronSpecific()) index.validatorFor(proto.getTronSpecific()).assertValid(proto.getTronSpecific());
	
			// Validate c0ban_specific
			if (proto.hasC0BanSpecific()) index.validatorFor(proto.getC0BanSpecific()).assertValid(proto.getC0BanSpecific());
	
			// Validate stellar_specific
			if (proto.hasStellarSpecific()) index.validatorFor(proto.getStellarSpecific()).assertValid(proto.getStellarSpecific());
	
			// Validate cardano_specific
			if (proto.hasCardanoSpecific()) index.validatorFor(proto.getCardanoSpecific()).assertValid(proto.getCardanoSpecific());
	
			// Validate substrate_specific
			if (proto.hasSubstrateSpecific()) index.validatorFor(proto.getSubstrateSpecific()).assertValid(proto.getSubstrateSpecific());
	
			// Validate create_time
			if (proto.hasCreateTime()) index.validatorFor(proto.getCreateTime()).assertValid(proto.getCreateTime());
	
			// Validate update_time
			if (proto.hasUpdateTime()) index.validatorFor(proto.getUpdateTime()).assertValid(proto.getUpdateTime());
	
	}

}

