// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gincoinc/adamant/global/v1/adamantglobalv1/model.proto

package java.adamant.global.v1;

public interface WalletTransferVolumeSnapshotOrBuilder extends
    // @@protoc_insertion_point(interface_extends:adamant.global.v1.WalletTransferVolumeSnapshot)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.google.protobuf.Timestamp target_time = 1 [json_name = "targetTime"];</code>
   * @return Whether the targetTime field is set.
   */
  boolean hasTargetTime();
  /**
   * <code>.google.protobuf.Timestamp target_time = 1 [json_name = "targetTime"];</code>
   * @return The targetTime.
   */
  com.google.protobuf.Timestamp getTargetTime();
  /**
   * <code>.google.protobuf.Timestamp target_time = 1 [json_name = "targetTime"];</code>
   */
  com.google.protobuf.TimestampOrBuilder getTargetTimeOrBuilder();

  /**
   * <pre>
   * map&lt;k, v&gt; ... k: transfer type / v:TransferVolumeByCoin
   * </pre>
   *
   * <code>map&lt;int32, .adamant.global.v1.WalletTransferVolume&gt; wallet_transfer_volume_by_transfer_type = 2 [json_name = "walletTransferVolumeByTransferType"];</code>
   */
  int getWalletTransferVolumeByTransferTypeCount();
  /**
   * <pre>
   * map&lt;k, v&gt; ... k: transfer type / v:TransferVolumeByCoin
   * </pre>
   *
   * <code>map&lt;int32, .adamant.global.v1.WalletTransferVolume&gt; wallet_transfer_volume_by_transfer_type = 2 [json_name = "walletTransferVolumeByTransferType"];</code>
   */
  boolean containsWalletTransferVolumeByTransferType(
      int key);
  /**
   * Use {@link #getWalletTransferVolumeByTransferTypeMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.Integer, java.adamant.global.v1.WalletTransferVolume>
  getWalletTransferVolumeByTransferType();
  /**
   * <pre>
   * map&lt;k, v&gt; ... k: transfer type / v:TransferVolumeByCoin
   * </pre>
   *
   * <code>map&lt;int32, .adamant.global.v1.WalletTransferVolume&gt; wallet_transfer_volume_by_transfer_type = 2 [json_name = "walletTransferVolumeByTransferType"];</code>
   */
  java.util.Map<java.lang.Integer, java.adamant.global.v1.WalletTransferVolume>
  getWalletTransferVolumeByTransferTypeMap();
  /**
   * <pre>
   * map&lt;k, v&gt; ... k: transfer type / v:TransferVolumeByCoin
   * </pre>
   *
   * <code>map&lt;int32, .adamant.global.v1.WalletTransferVolume&gt; wallet_transfer_volume_by_transfer_type = 2 [json_name = "walletTransferVolumeByTransferType"];</code>
   */

  java.adamant.global.v1.WalletTransferVolume getWalletTransferVolumeByTransferTypeOrDefault(
      int key,
      java.adamant.global.v1.WalletTransferVolume defaultValue);
  /**
   * <pre>
   * map&lt;k, v&gt; ... k: transfer type / v:TransferVolumeByCoin
   * </pre>
   *
   * <code>map&lt;int32, .adamant.global.v1.WalletTransferVolume&gt; wallet_transfer_volume_by_transfer_type = 2 [json_name = "walletTransferVolumeByTransferType"];</code>
   */

  java.adamant.global.v1.WalletTransferVolume getWalletTransferVolumeByTransferTypeOrThrow(
      int key);
}
