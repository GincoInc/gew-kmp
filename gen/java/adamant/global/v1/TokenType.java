// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gincoinc/adamant/global/v1/adamantglobalv1/enum.proto

package java.adamant.global.v1;

/**
 * <pre>
 * TokenType is a type of token.
 * </pre>
 *
 * Protobuf enum {@code adamant.global.v1.TokenType}
 */
public enum TokenType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>TOKEN_TYPE_INVALID = 0;</code>
   */
  TOKEN_TYPE_INVALID(0),
  /**
   * <code>TOKEN_TYPE_LOGIN_TOKEN = 1;</code>
   */
  TOKEN_TYPE_LOGIN_TOKEN(1),
  /**
   * <code>TOKEN_TYPE_MAIL_TOKEN = 2;</code>
   */
  TOKEN_TYPE_MAIL_TOKEN(2),
  /**
   * <code>TOKEN_TYPE_PASSWORD_RESET_TOKEN = 3;</code>
   */
  TOKEN_TYPE_PASSWORD_RESET_TOKEN(3),
  /**
   * <code>TOKEN_TYPE_PASSWORD_UPDATE_TOKEN = 4;</code>
   */
  TOKEN_TYPE_PASSWORD_UPDATE_TOKEN(4),
  /**
   * <code>TOKEN_TYPE_SIGNUP_TOKEN = 5;</code>
   */
  TOKEN_TYPE_SIGNUP_TOKEN(5),
  /**
   * <code>TOKEN_TYPE_REFRESH_TOKEN = 6;</code>
   */
  TOKEN_TYPE_REFRESH_TOKEN(6),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>TOKEN_TYPE_INVALID = 0;</code>
   */
  public static final int TOKEN_TYPE_INVALID_VALUE = 0;
  /**
   * <code>TOKEN_TYPE_LOGIN_TOKEN = 1;</code>
   */
  public static final int TOKEN_TYPE_LOGIN_TOKEN_VALUE = 1;
  /**
   * <code>TOKEN_TYPE_MAIL_TOKEN = 2;</code>
   */
  public static final int TOKEN_TYPE_MAIL_TOKEN_VALUE = 2;
  /**
   * <code>TOKEN_TYPE_PASSWORD_RESET_TOKEN = 3;</code>
   */
  public static final int TOKEN_TYPE_PASSWORD_RESET_TOKEN_VALUE = 3;
  /**
   * <code>TOKEN_TYPE_PASSWORD_UPDATE_TOKEN = 4;</code>
   */
  public static final int TOKEN_TYPE_PASSWORD_UPDATE_TOKEN_VALUE = 4;
  /**
   * <code>TOKEN_TYPE_SIGNUP_TOKEN = 5;</code>
   */
  public static final int TOKEN_TYPE_SIGNUP_TOKEN_VALUE = 5;
  /**
   * <code>TOKEN_TYPE_REFRESH_TOKEN = 6;</code>
   */
  public static final int TOKEN_TYPE_REFRESH_TOKEN_VALUE = 6;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TokenType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static TokenType forNumber(int value) {
    switch (value) {
      case 0: return TOKEN_TYPE_INVALID;
      case 1: return TOKEN_TYPE_LOGIN_TOKEN;
      case 2: return TOKEN_TYPE_MAIL_TOKEN;
      case 3: return TOKEN_TYPE_PASSWORD_RESET_TOKEN;
      case 4: return TOKEN_TYPE_PASSWORD_UPDATE_TOKEN;
      case 5: return TOKEN_TYPE_SIGNUP_TOKEN;
      case 6: return TOKEN_TYPE_REFRESH_TOKEN;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TokenType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      TokenType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TokenType>() {
          public TokenType findValueByNumber(int number) {
            return TokenType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return java.adamant.global.v1.EnumProto.getDescriptor().getEnumTypes().get(9);
  }

  private static final TokenType[] VALUES = values();

  public static TokenType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TokenType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:adamant.global.v1.TokenType)
}

