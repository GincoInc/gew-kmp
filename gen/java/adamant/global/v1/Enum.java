// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gincoinc/adamant/global/v1/adamantglobalv1/enum.proto

package adamant.global.v1;

public final class Enum {
  private Enum() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * WalletType is a type of wallet.
   * </pre>
   *
   * Protobuf enum {@code adamant.global.v1.WalletType}
   */
  public enum WalletType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>WALLET_TYPE_INVALID = 0;</code>
     */
    WALLET_TYPE_INVALID(0),
    /**
     * <code>WALLET_TYPE_SELF_CUSTODY_HOT = 1;</code>
     */
    WALLET_TYPE_SELF_CUSTODY_HOT(1),
    /**
     * <code>WALLET_TYPE_SELF_CUSTODY_COLD = 2;</code>
     */
    WALLET_TYPE_SELF_CUSTODY_COLD(2),
    /**
     * <code>WALLET_TYPE_SELF_CUSTODY_HOT_SINGLE_SIG = 3;</code>
     */
    WALLET_TYPE_SELF_CUSTODY_HOT_SINGLE_SIG(3),
    /**
     * <code>WALLET_TYPE_SELF_CUSTODY_HOT_RECEIVE_ONLY = 4;</code>
     */
    WALLET_TYPE_SELF_CUSTODY_HOT_RECEIVE_ONLY(4),
    /**
     * <code>WALLET_TYPE_SELF_CUSTODY_COLD_SINGLE_SIG = 5;</code>
     */
    WALLET_TYPE_SELF_CUSTODY_COLD_SINGLE_SIG(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>WALLET_TYPE_INVALID = 0;</code>
     */
    public static final int WALLET_TYPE_INVALID_VALUE = 0;
    /**
     * <code>WALLET_TYPE_SELF_CUSTODY_HOT = 1;</code>
     */
    public static final int WALLET_TYPE_SELF_CUSTODY_HOT_VALUE = 1;
    /**
     * <code>WALLET_TYPE_SELF_CUSTODY_COLD = 2;</code>
     */
    public static final int WALLET_TYPE_SELF_CUSTODY_COLD_VALUE = 2;
    /**
     * <code>WALLET_TYPE_SELF_CUSTODY_HOT_SINGLE_SIG = 3;</code>
     */
    public static final int WALLET_TYPE_SELF_CUSTODY_HOT_SINGLE_SIG_VALUE = 3;
    /**
     * <code>WALLET_TYPE_SELF_CUSTODY_HOT_RECEIVE_ONLY = 4;</code>
     */
    public static final int WALLET_TYPE_SELF_CUSTODY_HOT_RECEIVE_ONLY_VALUE = 4;
    /**
     * <code>WALLET_TYPE_SELF_CUSTODY_COLD_SINGLE_SIG = 5;</code>
     */
    public static final int WALLET_TYPE_SELF_CUSTODY_COLD_SINGLE_SIG_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static WalletType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static WalletType forNumber(int value) {
      switch (value) {
        case 0: return WALLET_TYPE_INVALID;
        case 1: return WALLET_TYPE_SELF_CUSTODY_HOT;
        case 2: return WALLET_TYPE_SELF_CUSTODY_COLD;
        case 3: return WALLET_TYPE_SELF_CUSTODY_HOT_SINGLE_SIG;
        case 4: return WALLET_TYPE_SELF_CUSTODY_HOT_RECEIVE_ONLY;
        case 5: return WALLET_TYPE_SELF_CUSTODY_COLD_SINGLE_SIG;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<WalletType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        WalletType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<WalletType>() {
            public WalletType findValueByNumber(int number) {
              return WalletType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(0);
    }

    private static final WalletType[] VALUES = values();

    public static WalletType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private WalletType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.WalletType)
  }

  /**
   * <pre>
   * WalletState is a state of wallet.
   * </pre>
   *
   * Protobuf enum {@code adamant.global.v1.WalletState}
   */
  public enum WalletState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>WALLET_STATE_INVALID = 0;</code>
     */
    WALLET_STATE_INVALID(0),
    /**
     * <code>WALLET_STATE_PROPOSED = 1;</code>
     */
    WALLET_STATE_PROPOSED(1),
    /**
     * <pre>
     * Waiting for key register
     * </pre>
     *
     * <code>WALLET_STATE_KEY_REGISTERING = 2;</code>
     */
    WALLET_STATE_KEY_REGISTERING(2),
    /**
     * <pre>
     * Key was registed to Wallet
     * </pre>
     *
     * <code>WALLET_STATE_KEY_REGISTERED = 3;</code>
     */
    WALLET_STATE_KEY_REGISTERED(3),
    /**
     * <pre>
     * Waiting for review for validator
     * </pre>
     *
     * <code>WALLET_STATE_VALIDATOR_REVIEWING = 4;</code>
     */
    WALLET_STATE_VALIDATOR_REVIEWING(4),
    /**
     * <pre>
     * Validator reviewd
     * </pre>
     *
     * <code>WALLET_STATE_VALIDATOR_REVIEWED = 5;</code>
     */
    WALLET_STATE_VALIDATOR_REVIEWED(5),
    /**
     * <pre>
     * Waiting for activate
     * </pre>
     *
     * <code>WALLET_STATE_ACTIVATING = 6;</code>
     */
    WALLET_STATE_ACTIVATING(6),
    /**
     * <pre>
     * Wallet was activated
     * </pre>
     *
     * <code>WALLET_STATE_ACTIVATED = 7;</code>
     */
    WALLET_STATE_ACTIVATED(7),
    /**
     * <pre>
     * Waiting for sign
     * </pre>
     *
     * <code>WALLET_STATE_SIGNING = 8;</code>
     */
    WALLET_STATE_SIGNING(8),
    /**
     * <pre>
     * was signed
     * </pre>
     *
     * <code>WALLET_STATE_SIGNED = 9;</code>
     */
    WALLET_STATE_SIGNED(9),
    /**
     * <pre>
     * Waiting for submit transaction which regist public key to contract
     * </pre>
     *
     * <code>WALLET_STATE_SUBMITTING = 10;</code>
     */
    WALLET_STATE_SUBMITTING(10),
    /**
     * <pre>
     * Transaction was submitted
     * </pre>
     *
     * <code>WALLET_STATE_SUBMITTED = 11;</code>
     */
    WALLET_STATE_SUBMITTED(11),
    /**
     * <pre>
     * Creating wallet successfuly completed
     * </pre>
     *
     * <code>WALLET_STATE_COMPLETED = 12;</code>
     */
    WALLET_STATE_COMPLETED(12),
    /**
     * <pre>
     * Wallet was cancelled
     * </pre>
     *
     * <code>WALLET_STATE_CANCELLED = 13;</code>
     */
    WALLET_STATE_CANCELLED(13),
    /**
     * <pre>
     * Wallet was archived
     * </pre>
     *
     * <code>WALLET_STATE_ARCHIVED = 14;</code>
     */
    WALLET_STATE_ARCHIVED(14),
    /**
     * <pre>
     * Waiting for import address
     * </pre>
     *
     * <code>WALLET_STATE_ADDRESS_IMPORT_WAITING = 15;</code>
     */
    WALLET_STATE_ADDRESS_IMPORT_WAITING(15),
    /**
     * <pre>
     * Importing address
     * </pre>
     *
     * <code>WALLET_STATE_ADDRESS_IMPORTING = 16;</code>
     */
    WALLET_STATE_ADDRESS_IMPORTING(16),
    /**
     * <pre>
     * Failed import address
     * </pre>
     *
     * <code>WALLET_STATE_ADDRESS_IMPORT_FAILED = 17;</code>
     */
    WALLET_STATE_ADDRESS_IMPORT_FAILED(17),
    /**
     * <pre>
     * Deleting address
     * </pre>
     *
     * <code>WALLET_STATE_ADDRESS_DELETING = 18;</code>
     */
    WALLET_STATE_ADDRESS_DELETING(18),
    /**
     * <pre>
     * Failed delete address
     * </pre>
     *
     * <code>WALLET_STATE_ADDRESS_DELETE_FAILED = 19;</code>
     */
    WALLET_STATE_ADDRESS_DELETE_FAILED(19),
    /**
     * <pre>
     * Balance flushing
     * </pre>
     *
     * <code>WALLET_STATE_FLUSHING = 20;</code>
     */
    WALLET_STATE_FLUSHING(20),
    /**
     * <pre>
     * Waiting for create account
     * </pre>
     *
     * <code>WALLET_STATE_ACCOUNT_CREATING = 21;</code>
     */
    WALLET_STATE_ACCOUNT_CREATING(21),
    /**
     * <pre>
     * Account was created
     * </pre>
     *
     * <code>WALLET_STATE_ACCOUNT_CREATED = 22;</code>
     */
    WALLET_STATE_ACCOUNT_CREATED(22),
    /**
     * <pre>
     * Manager approved tx
     * </pre>
     *
     * <code>WALLET_STATE_MANAGER_APPROVED_SENDING_TRANSACTION = 23;</code>
     */
    WALLET_STATE_MANAGER_APPROVED_SENDING_TRANSACTION(23),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>WALLET_STATE_INVALID = 0;</code>
     */
    public static final int WALLET_STATE_INVALID_VALUE = 0;
    /**
     * <code>WALLET_STATE_PROPOSED = 1;</code>
     */
    public static final int WALLET_STATE_PROPOSED_VALUE = 1;
    /**
     * <pre>
     * Waiting for key register
     * </pre>
     *
     * <code>WALLET_STATE_KEY_REGISTERING = 2;</code>
     */
    public static final int WALLET_STATE_KEY_REGISTERING_VALUE = 2;
    /**
     * <pre>
     * Key was registed to Wallet
     * </pre>
     *
     * <code>WALLET_STATE_KEY_REGISTERED = 3;</code>
     */
    public static final int WALLET_STATE_KEY_REGISTERED_VALUE = 3;
    /**
     * <pre>
     * Waiting for review for validator
     * </pre>
     *
     * <code>WALLET_STATE_VALIDATOR_REVIEWING = 4;</code>
     */
    public static final int WALLET_STATE_VALIDATOR_REVIEWING_VALUE = 4;
    /**
     * <pre>
     * Validator reviewd
     * </pre>
     *
     * <code>WALLET_STATE_VALIDATOR_REVIEWED = 5;</code>
     */
    public static final int WALLET_STATE_VALIDATOR_REVIEWED_VALUE = 5;
    /**
     * <pre>
     * Waiting for activate
     * </pre>
     *
     * <code>WALLET_STATE_ACTIVATING = 6;</code>
     */
    public static final int WALLET_STATE_ACTIVATING_VALUE = 6;
    /**
     * <pre>
     * Wallet was activated
     * </pre>
     *
     * <code>WALLET_STATE_ACTIVATED = 7;</code>
     */
    public static final int WALLET_STATE_ACTIVATED_VALUE = 7;
    /**
     * <pre>
     * Waiting for sign
     * </pre>
     *
     * <code>WALLET_STATE_SIGNING = 8;</code>
     */
    public static final int WALLET_STATE_SIGNING_VALUE = 8;
    /**
     * <pre>
     * was signed
     * </pre>
     *
     * <code>WALLET_STATE_SIGNED = 9;</code>
     */
    public static final int WALLET_STATE_SIGNED_VALUE = 9;
    /**
     * <pre>
     * Waiting for submit transaction which regist public key to contract
     * </pre>
     *
     * <code>WALLET_STATE_SUBMITTING = 10;</code>
     */
    public static final int WALLET_STATE_SUBMITTING_VALUE = 10;
    /**
     * <pre>
     * Transaction was submitted
     * </pre>
     *
     * <code>WALLET_STATE_SUBMITTED = 11;</code>
     */
    public static final int WALLET_STATE_SUBMITTED_VALUE = 11;
    /**
     * <pre>
     * Creating wallet successfuly completed
     * </pre>
     *
     * <code>WALLET_STATE_COMPLETED = 12;</code>
     */
    public static final int WALLET_STATE_COMPLETED_VALUE = 12;
    /**
     * <pre>
     * Wallet was cancelled
     * </pre>
     *
     * <code>WALLET_STATE_CANCELLED = 13;</code>
     */
    public static final int WALLET_STATE_CANCELLED_VALUE = 13;
    /**
     * <pre>
     * Wallet was archived
     * </pre>
     *
     * <code>WALLET_STATE_ARCHIVED = 14;</code>
     */
    public static final int WALLET_STATE_ARCHIVED_VALUE = 14;
    /**
     * <pre>
     * Waiting for import address
     * </pre>
     *
     * <code>WALLET_STATE_ADDRESS_IMPORT_WAITING = 15;</code>
     */
    public static final int WALLET_STATE_ADDRESS_IMPORT_WAITING_VALUE = 15;
    /**
     * <pre>
     * Importing address
     * </pre>
     *
     * <code>WALLET_STATE_ADDRESS_IMPORTING = 16;</code>
     */
    public static final int WALLET_STATE_ADDRESS_IMPORTING_VALUE = 16;
    /**
     * <pre>
     * Failed import address
     * </pre>
     *
     * <code>WALLET_STATE_ADDRESS_IMPORT_FAILED = 17;</code>
     */
    public static final int WALLET_STATE_ADDRESS_IMPORT_FAILED_VALUE = 17;
    /**
     * <pre>
     * Deleting address
     * </pre>
     *
     * <code>WALLET_STATE_ADDRESS_DELETING = 18;</code>
     */
    public static final int WALLET_STATE_ADDRESS_DELETING_VALUE = 18;
    /**
     * <pre>
     * Failed delete address
     * </pre>
     *
     * <code>WALLET_STATE_ADDRESS_DELETE_FAILED = 19;</code>
     */
    public static final int WALLET_STATE_ADDRESS_DELETE_FAILED_VALUE = 19;
    /**
     * <pre>
     * Balance flushing
     * </pre>
     *
     * <code>WALLET_STATE_FLUSHING = 20;</code>
     */
    public static final int WALLET_STATE_FLUSHING_VALUE = 20;
    /**
     * <pre>
     * Waiting for create account
     * </pre>
     *
     * <code>WALLET_STATE_ACCOUNT_CREATING = 21;</code>
     */
    public static final int WALLET_STATE_ACCOUNT_CREATING_VALUE = 21;
    /**
     * <pre>
     * Account was created
     * </pre>
     *
     * <code>WALLET_STATE_ACCOUNT_CREATED = 22;</code>
     */
    public static final int WALLET_STATE_ACCOUNT_CREATED_VALUE = 22;
    /**
     * <pre>
     * Manager approved tx
     * </pre>
     *
     * <code>WALLET_STATE_MANAGER_APPROVED_SENDING_TRANSACTION = 23;</code>
     */
    public static final int WALLET_STATE_MANAGER_APPROVED_SENDING_TRANSACTION_VALUE = 23;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static WalletState valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static WalletState forNumber(int value) {
      switch (value) {
        case 0: return WALLET_STATE_INVALID;
        case 1: return WALLET_STATE_PROPOSED;
        case 2: return WALLET_STATE_KEY_REGISTERING;
        case 3: return WALLET_STATE_KEY_REGISTERED;
        case 4: return WALLET_STATE_VALIDATOR_REVIEWING;
        case 5: return WALLET_STATE_VALIDATOR_REVIEWED;
        case 6: return WALLET_STATE_ACTIVATING;
        case 7: return WALLET_STATE_ACTIVATED;
        case 8: return WALLET_STATE_SIGNING;
        case 9: return WALLET_STATE_SIGNED;
        case 10: return WALLET_STATE_SUBMITTING;
        case 11: return WALLET_STATE_SUBMITTED;
        case 12: return WALLET_STATE_COMPLETED;
        case 13: return WALLET_STATE_CANCELLED;
        case 14: return WALLET_STATE_ARCHIVED;
        case 15: return WALLET_STATE_ADDRESS_IMPORT_WAITING;
        case 16: return WALLET_STATE_ADDRESS_IMPORTING;
        case 17: return WALLET_STATE_ADDRESS_IMPORT_FAILED;
        case 18: return WALLET_STATE_ADDRESS_DELETING;
        case 19: return WALLET_STATE_ADDRESS_DELETE_FAILED;
        case 20: return WALLET_STATE_FLUSHING;
        case 21: return WALLET_STATE_ACCOUNT_CREATING;
        case 22: return WALLET_STATE_ACCOUNT_CREATED;
        case 23: return WALLET_STATE_MANAGER_APPROVED_SENDING_TRANSACTION;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<WalletState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        WalletState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<WalletState>() {
            public WalletState findValueByNumber(int number) {
              return WalletState.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(1);
    }

    private static final WalletState[] VALUES = values();

    public static WalletState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private WalletState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.WalletState)
  }

  /**
   * <pre>
   * WalletProposalType is a type of proposal
   * </pre>
   *
   * Protobuf enum {@code adamant.global.v1.WalletProposalType}
   */
  public enum WalletProposalType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>WALLET_PROPOSAL_TYPE_INVALID = 0;</code>
     */
    WALLET_PROPOSAL_TYPE_INVALID(0),
    /**
     * <pre>
     * the wallet is requested to change policy
     * </pre>
     *
     * <code>WALLET_PROPOSAL_TYPE_POLICY = 1;</code>
     */
    WALLET_PROPOSAL_TYPE_POLICY(1),
    /**
     * <pre>
     * the wallet is requested to change validator/required_approval_count
     * </pre>
     *
     * <code>WALLET_PROPOSAL_TYPE_VALIDATOR = 2;</code>
     */
    WALLET_PROPOSAL_TYPE_VALIDATOR(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>WALLET_PROPOSAL_TYPE_INVALID = 0;</code>
     */
    public static final int WALLET_PROPOSAL_TYPE_INVALID_VALUE = 0;
    /**
     * <pre>
     * the wallet is requested to change policy
     * </pre>
     *
     * <code>WALLET_PROPOSAL_TYPE_POLICY = 1;</code>
     */
    public static final int WALLET_PROPOSAL_TYPE_POLICY_VALUE = 1;
    /**
     * <pre>
     * the wallet is requested to change validator/required_approval_count
     * </pre>
     *
     * <code>WALLET_PROPOSAL_TYPE_VALIDATOR = 2;</code>
     */
    public static final int WALLET_PROPOSAL_TYPE_VALIDATOR_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static WalletProposalType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static WalletProposalType forNumber(int value) {
      switch (value) {
        case 0: return WALLET_PROPOSAL_TYPE_INVALID;
        case 1: return WALLET_PROPOSAL_TYPE_POLICY;
        case 2: return WALLET_PROPOSAL_TYPE_VALIDATOR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<WalletProposalType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        WalletProposalType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<WalletProposalType>() {
            public WalletProposalType findValueByNumber(int number) {
              return WalletProposalType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(2);
    }

    private static final WalletProposalType[] VALUES = values();

    public static WalletProposalType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private WalletProposalType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.WalletProposalType)
  }

  /**
   * <pre>
   * AddressState is a state of address.
   * </pre>
   *
   * Protobuf enum {@code adamant.global.v1.AddressState}
   */
  public enum AddressState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ADDRESS_STATE_INVALID = 0;</code>
     */
    ADDRESS_STATE_INVALID(0),
    /**
     * <code>ADDRESS_STATE_SUBMITTING = 1;</code>
     */
    ADDRESS_STATE_SUBMITTING(1),
    /**
     * <code>ADDRESS_STATE_SUBMITTED = 2;</code>
     */
    ADDRESS_STATE_SUBMITTED(2),
    /**
     * <code>ADDRESS_STATE_COMPLETED = 3;</code>
     */
    ADDRESS_STATE_COMPLETED(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>ADDRESS_STATE_INVALID = 0;</code>
     */
    public static final int ADDRESS_STATE_INVALID_VALUE = 0;
    /**
     * <code>ADDRESS_STATE_SUBMITTING = 1;</code>
     */
    public static final int ADDRESS_STATE_SUBMITTING_VALUE = 1;
    /**
     * <code>ADDRESS_STATE_SUBMITTED = 2;</code>
     */
    public static final int ADDRESS_STATE_SUBMITTED_VALUE = 2;
    /**
     * <code>ADDRESS_STATE_COMPLETED = 3;</code>
     */
    public static final int ADDRESS_STATE_COMPLETED_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AddressState valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static AddressState forNumber(int value) {
      switch (value) {
        case 0: return ADDRESS_STATE_INVALID;
        case 1: return ADDRESS_STATE_SUBMITTING;
        case 2: return ADDRESS_STATE_SUBMITTED;
        case 3: return ADDRESS_STATE_COMPLETED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AddressState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        AddressState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AddressState>() {
            public AddressState findValueByNumber(int number) {
              return AddressState.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(3);
    }

    private static final AddressState[] VALUES = values();

    public static AddressState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private AddressState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.AddressState)
  }

  /**
   * Protobuf enum {@code adamant.global.v1.PreTransactionState}
   */
  public enum PreTransactionState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PRE_TRANSACTION_STATE_INVALID = 0;</code>
     */
    PRE_TRANSACTION_STATE_INVALID(0),
    /**
     * <pre>
     * Waiting for approve
     * </pre>
     *
     * <code>PRE_TRANSACTION_STATE_APPROVING = 1;</code>
     */
    PRE_TRANSACTION_STATE_APPROVING(1),
    /**
     * <pre>
     * Pre-transaction was approved or Transaction where it was used got canceled
     * </pre>
     *
     * <code>PRE_TRANSACTION_STATE_AVAILABLE = 2;</code>
     */
    PRE_TRANSACTION_STATE_AVAILABLE(2),
    /**
     * <pre>
     * Pre-transaction was rejected by reviewer
     * </pre>
     *
     * <code>PRE_TRANSACTION_STATE_REJECTED = 3;</code>
     */
    PRE_TRANSACTION_STATE_REJECTED(3),
    /**
     * <pre>
     * Pre-transaction was canceled
     * </pre>
     *
     * <code>PRE_TRANSACTION_STATE_CANCELLED = 4;</code>
     */
    PRE_TRANSACTION_STATE_CANCELLED(4),
    /**
     * <pre>
     * Pre-transaction was used for Transaction creation
     * </pre>
     *
     * <code>PRE_TRANSACTION_STATE_USED = 5;</code>
     */
    PRE_TRANSACTION_STATE_USED(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>PRE_TRANSACTION_STATE_INVALID = 0;</code>
     */
    public static final int PRE_TRANSACTION_STATE_INVALID_VALUE = 0;
    /**
     * <pre>
     * Waiting for approve
     * </pre>
     *
     * <code>PRE_TRANSACTION_STATE_APPROVING = 1;</code>
     */
    public static final int PRE_TRANSACTION_STATE_APPROVING_VALUE = 1;
    /**
     * <pre>
     * Pre-transaction was approved or Transaction where it was used got canceled
     * </pre>
     *
     * <code>PRE_TRANSACTION_STATE_AVAILABLE = 2;</code>
     */
    public static final int PRE_TRANSACTION_STATE_AVAILABLE_VALUE = 2;
    /**
     * <pre>
     * Pre-transaction was rejected by reviewer
     * </pre>
     *
     * <code>PRE_TRANSACTION_STATE_REJECTED = 3;</code>
     */
    public static final int PRE_TRANSACTION_STATE_REJECTED_VALUE = 3;
    /**
     * <pre>
     * Pre-transaction was canceled
     * </pre>
     *
     * <code>PRE_TRANSACTION_STATE_CANCELLED = 4;</code>
     */
    public static final int PRE_TRANSACTION_STATE_CANCELLED_VALUE = 4;
    /**
     * <pre>
     * Pre-transaction was used for Transaction creation
     * </pre>
     *
     * <code>PRE_TRANSACTION_STATE_USED = 5;</code>
     */
    public static final int PRE_TRANSACTION_STATE_USED_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PreTransactionState valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PreTransactionState forNumber(int value) {
      switch (value) {
        case 0: return PRE_TRANSACTION_STATE_INVALID;
        case 1: return PRE_TRANSACTION_STATE_APPROVING;
        case 2: return PRE_TRANSACTION_STATE_AVAILABLE;
        case 3: return PRE_TRANSACTION_STATE_REJECTED;
        case 4: return PRE_TRANSACTION_STATE_CANCELLED;
        case 5: return PRE_TRANSACTION_STATE_USED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PreTransactionState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PreTransactionState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PreTransactionState>() {
            public PreTransactionState findValueByNumber(int number) {
              return PreTransactionState.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(4);
    }

    private static final PreTransactionState[] VALUES = values();

    public static PreTransactionState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PreTransactionState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.PreTransactionState)
  }

  /**
   * <pre>
   * TransactionState is a state of transaction.
   * </pre>
   *
   * Protobuf enum {@code adamant.global.v1.TransactionState}
   */
  public enum TransactionState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TRANSACTION_STATE_INVALID = 0;</code>
     */
    TRANSACTION_STATE_INVALID(0),
    /**
     * <pre>
     * Waiting for sign
     * </pre>
     *
     * <code>TRANSACTION_STATE_SIGNING = 1;</code>
     */
    TRANSACTION_STATE_SIGNING(1),
    /**
     * <pre>
     * Transaction was Signed
     * </pre>
     *
     * <code>TRANSACTION_STATE_SIGNED = 2;</code>
     */
    TRANSACTION_STATE_SIGNED(2),
    /**
     * <pre>
     * Waiting for review
     * </pre>
     *
     * <code>TRANSACTION_STATE_REVIEWING = 3;</code>
     */
    TRANSACTION_STATE_REVIEWING(3),
    /**
     * <pre>
     * Transaction was reviewd
     * </pre>
     *
     * <code>TRANSACTION_STATE_REVIEWED = 4;</code>
     */
    TRANSACTION_STATE_REVIEWED(4),
    /**
     * <pre>
     * Waiting for submit
     * </pre>
     *
     * <code>TRANSACTION_STATE_SUBMITTING = 5;</code>
     */
    TRANSACTION_STATE_SUBMITTING(5),
    /**
     * <pre>
     * Transaction was submitted
     * </pre>
     *
     * <code>TRANSACTION_STATE_SUBMITTED = 6;</code>
     */
    TRANSACTION_STATE_SUBMITTED(6),
    /**
     * <pre>
     * Waiting for cancel
     * </pre>
     *
     * <code>TRANSACTION_STATE_CANCELLING = 8;</code>
     */
    TRANSACTION_STATE_CANCELLING(8),
    /**
     * <pre>
     * Transaction was cancelled
     * </pre>
     *
     * <code>TRANSACTION_STATE_CANCELLED = 7;</code>
     */
    TRANSACTION_STATE_CANCELLED(7),
    /**
     * <pre>
     * Waiting for approve
     * </pre>
     *
     * <code>TRANSACTION_STATE_APPROVING = 9;</code>
     */
    TRANSACTION_STATE_APPROVING(9),
    /**
     * <pre>
     * Transaction was approved
     * </pre>
     *
     * <code>TRANSACTION_STATE_APPROVED = 10;</code>
     */
    TRANSACTION_STATE_APPROVED(10),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>TRANSACTION_STATE_INVALID = 0;</code>
     */
    public static final int TRANSACTION_STATE_INVALID_VALUE = 0;
    /**
     * <pre>
     * Waiting for sign
     * </pre>
     *
     * <code>TRANSACTION_STATE_SIGNING = 1;</code>
     */
    public static final int TRANSACTION_STATE_SIGNING_VALUE = 1;
    /**
     * <pre>
     * Transaction was Signed
     * </pre>
     *
     * <code>TRANSACTION_STATE_SIGNED = 2;</code>
     */
    public static final int TRANSACTION_STATE_SIGNED_VALUE = 2;
    /**
     * <pre>
     * Waiting for review
     * </pre>
     *
     * <code>TRANSACTION_STATE_REVIEWING = 3;</code>
     */
    public static final int TRANSACTION_STATE_REVIEWING_VALUE = 3;
    /**
     * <pre>
     * Transaction was reviewd
     * </pre>
     *
     * <code>TRANSACTION_STATE_REVIEWED = 4;</code>
     */
    public static final int TRANSACTION_STATE_REVIEWED_VALUE = 4;
    /**
     * <pre>
     * Waiting for submit
     * </pre>
     *
     * <code>TRANSACTION_STATE_SUBMITTING = 5;</code>
     */
    public static final int TRANSACTION_STATE_SUBMITTING_VALUE = 5;
    /**
     * <pre>
     * Transaction was submitted
     * </pre>
     *
     * <code>TRANSACTION_STATE_SUBMITTED = 6;</code>
     */
    public static final int TRANSACTION_STATE_SUBMITTED_VALUE = 6;
    /**
     * <pre>
     * Waiting for cancel
     * </pre>
     *
     * <code>TRANSACTION_STATE_CANCELLING = 8;</code>
     */
    public static final int TRANSACTION_STATE_CANCELLING_VALUE = 8;
    /**
     * <pre>
     * Transaction was cancelled
     * </pre>
     *
     * <code>TRANSACTION_STATE_CANCELLED = 7;</code>
     */
    public static final int TRANSACTION_STATE_CANCELLED_VALUE = 7;
    /**
     * <pre>
     * Waiting for approve
     * </pre>
     *
     * <code>TRANSACTION_STATE_APPROVING = 9;</code>
     */
    public static final int TRANSACTION_STATE_APPROVING_VALUE = 9;
    /**
     * <pre>
     * Transaction was approved
     * </pre>
     *
     * <code>TRANSACTION_STATE_APPROVED = 10;</code>
     */
    public static final int TRANSACTION_STATE_APPROVED_VALUE = 10;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TransactionState valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TransactionState forNumber(int value) {
      switch (value) {
        case 0: return TRANSACTION_STATE_INVALID;
        case 1: return TRANSACTION_STATE_SIGNING;
        case 2: return TRANSACTION_STATE_SIGNED;
        case 3: return TRANSACTION_STATE_REVIEWING;
        case 4: return TRANSACTION_STATE_REVIEWED;
        case 5: return TRANSACTION_STATE_SUBMITTING;
        case 6: return TRANSACTION_STATE_SUBMITTED;
        case 8: return TRANSACTION_STATE_CANCELLING;
        case 7: return TRANSACTION_STATE_CANCELLED;
        case 9: return TRANSACTION_STATE_APPROVING;
        case 10: return TRANSACTION_STATE_APPROVED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TransactionState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TransactionState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TransactionState>() {
            public TransactionState findValueByNumber(int number) {
              return TransactionState.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(5);
    }

    private static final TransactionState[] VALUES = values();

    public static TransactionState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TransactionState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.TransactionState)
  }

  /**
   * <pre>
   * AccountType is a type of role
   * </pre>
   *
   * Protobuf enum {@code adamant.global.v1.AccountType}
   */
  public enum AccountType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ACCOUNT_TYPE_INVALID = 0;</code>
     */
    ACCOUNT_TYPE_INVALID(0),
    /**
     * <pre>
     * User
     * </pre>
     *
     * <code>ACCOUNT_TYPE_USER = 1;</code>
     */
    ACCOUNT_TYPE_USER(1),
    /**
     * <pre>
     * Service Account
     * </pre>
     *
     * <code>ACCOUNT_TYPE_SERVICE_ACCOUNT = 2;</code>
     */
    ACCOUNT_TYPE_SERVICE_ACCOUNT(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>ACCOUNT_TYPE_INVALID = 0;</code>
     */
    public static final int ACCOUNT_TYPE_INVALID_VALUE = 0;
    /**
     * <pre>
     * User
     * </pre>
     *
     * <code>ACCOUNT_TYPE_USER = 1;</code>
     */
    public static final int ACCOUNT_TYPE_USER_VALUE = 1;
    /**
     * <pre>
     * Service Account
     * </pre>
     *
     * <code>ACCOUNT_TYPE_SERVICE_ACCOUNT = 2;</code>
     */
    public static final int ACCOUNT_TYPE_SERVICE_ACCOUNT_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AccountType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static AccountType forNumber(int value) {
      switch (value) {
        case 0: return ACCOUNT_TYPE_INVALID;
        case 1: return ACCOUNT_TYPE_USER;
        case 2: return ACCOUNT_TYPE_SERVICE_ACCOUNT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AccountType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        AccountType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AccountType>() {
            public AccountType findValueByNumber(int number) {
              return AccountType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(6);
    }

    private static final AccountType[] VALUES = values();

    public static AccountType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private AccountType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.AccountType)
  }

  /**
   * <pre>
   * ExecutorType indicates who executes programs
   * </pre>
   *
   * Protobuf enum {@code adamant.global.v1.ExecutorType}
   */
  public enum ExecutorType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EXECUTOR_TYPE_INVALID = 0;</code>
     */
    EXECUTOR_TYPE_INVALID(0),
    /**
     * <pre>
     * User
     * </pre>
     *
     * <code>EXECUTOR_TYPE_USER = 1;</code>
     */
    EXECUTOR_TYPE_USER(1),
    /**
     * <pre>
     * Pub/Sub etc.
     * </pre>
     *
     * <code>EXECUTOR_TYPE_SYSTEM = 2;</code>
     */
    EXECUTOR_TYPE_SYSTEM(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>EXECUTOR_TYPE_INVALID = 0;</code>
     */
    public static final int EXECUTOR_TYPE_INVALID_VALUE = 0;
    /**
     * <pre>
     * User
     * </pre>
     *
     * <code>EXECUTOR_TYPE_USER = 1;</code>
     */
    public static final int EXECUTOR_TYPE_USER_VALUE = 1;
    /**
     * <pre>
     * Pub/Sub etc.
     * </pre>
     *
     * <code>EXECUTOR_TYPE_SYSTEM = 2;</code>
     */
    public static final int EXECUTOR_TYPE_SYSTEM_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ExecutorType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ExecutorType forNumber(int value) {
      switch (value) {
        case 0: return EXECUTOR_TYPE_INVALID;
        case 1: return EXECUTOR_TYPE_USER;
        case 2: return EXECUTOR_TYPE_SYSTEM;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ExecutorType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ExecutorType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ExecutorType>() {
            public ExecutorType findValueByNumber(int number) {
              return ExecutorType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(7);
    }

    private static final ExecutorType[] VALUES = values();

    public static ExecutorType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ExecutorType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.ExecutorType)
  }

  /**
   * <pre>
   * UserState is a state of user.
   * </pre>
   *
   * Protobuf enum {@code adamant.global.v1.UserState}
   */
  public enum UserState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>USER_STATE_INVALID = 0;</code>
     */
    USER_STATE_INVALID(0),
    /**
     * <code>USER_STATE_UNCONFIRMED = 1;</code>
     */
    USER_STATE_UNCONFIRMED(1),
    /**
     * <code>USER_STATE_CONFIRMED = 2;</code>
     */
    USER_STATE_CONFIRMED(2),
    /**
     * <code>USER_STATE_DEACTIVATED = 3;</code>
     */
    USER_STATE_DEACTIVATED(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>USER_STATE_INVALID = 0;</code>
     */
    public static final int USER_STATE_INVALID_VALUE = 0;
    /**
     * <code>USER_STATE_UNCONFIRMED = 1;</code>
     */
    public static final int USER_STATE_UNCONFIRMED_VALUE = 1;
    /**
     * <code>USER_STATE_CONFIRMED = 2;</code>
     */
    public static final int USER_STATE_CONFIRMED_VALUE = 2;
    /**
     * <code>USER_STATE_DEACTIVATED = 3;</code>
     */
    public static final int USER_STATE_DEACTIVATED_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static UserState valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static UserState forNumber(int value) {
      switch (value) {
        case 0: return USER_STATE_INVALID;
        case 1: return USER_STATE_UNCONFIRMED;
        case 2: return USER_STATE_CONFIRMED;
        case 3: return USER_STATE_DEACTIVATED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<UserState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        UserState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<UserState>() {
            public UserState findValueByNumber(int number) {
              return UserState.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(8);
    }

    private static final UserState[] VALUES = values();

    public static UserState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private UserState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.UserState)
  }

  /**
   * <pre>
   * Role is a type of role
   * </pre>
   *
   * Protobuf enum {@code adamant.global.v1.RoleType}
   */
  public enum RoleType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ROLE_TYPE_INVALID = 0;</code>
     */
    ROLE_TYPE_INVALID(0),
    /**
     * <pre>
     * Manager of Organization
     * </pre>
     *
     * <code>ROLE_TYPE_ORG_MANAGER = 1;</code>
     */
    ROLE_TYPE_ORG_MANAGER(1),
    /**
     * <pre>
     * Signer which can sign transaction
     * </pre>
     *
     * <code>ROLE_TYPE_ORG_SIGNER = 2;</code>
     */
    ROLE_TYPE_ORG_SIGNER(2),
    /**
     * <pre>
     * Validator which can validate transaction
     * </pre>
     *
     * <code>ROLE_TYPE_ORG_VALIDATOR = 3;</code>
     */
    ROLE_TYPE_ORG_VALIDATOR(3),
    /**
     * <pre>
     * Viewer
     * </pre>
     *
     * <code>ROLE_TYPE_ORG_VIEWER = 4;</code>
     */
    ROLE_TYPE_ORG_VIEWER(4),
    /**
     * <pre>
     * Developer which manage service-account
     * </pre>
     *
     * <code>ROLE_TYPE_ORG_DEVELOPER = 5;</code>
     */
    ROLE_TYPE_ORG_DEVELOPER(5),
    /**
     * <pre>
     * Service Account which manage hot wallet
     * </pre>
     *
     * <code>ROLE_TYPE_HOT_WALLET_ADMIN = 6;</code>
     */
    ROLE_TYPE_HOT_WALLET_ADMIN(6),
    /**
     * <pre>
     * Service Account which can only get
     * </pre>
     *
     * <code>ROLE_TYPE_HOT_WALLET_VIEWER = 7;</code>
     */
    ROLE_TYPE_HOT_WALLET_VIEWER(7),
    /**
     * <pre>
     * Transaction Operator of Organization
     * </pre>
     *
     * <code>ROLE_TYPE_ORG_TRANSACTION_OPERATOR = 8;</code>
     */
    ROLE_TYPE_ORG_TRANSACTION_OPERATOR(8),
    /**
     * <pre>
     * PreTransaction Reviewer of Organization
     * </pre>
     *
     * <code>ROLE_TYPE_ORG_PRE_TRANSACTION_REVIEWER = 9;</code>
     */
    ROLE_TYPE_ORG_PRE_TRANSACTION_REVIEWER(9),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>ROLE_TYPE_INVALID = 0;</code>
     */
    public static final int ROLE_TYPE_INVALID_VALUE = 0;
    /**
     * <pre>
     * Manager of Organization
     * </pre>
     *
     * <code>ROLE_TYPE_ORG_MANAGER = 1;</code>
     */
    public static final int ROLE_TYPE_ORG_MANAGER_VALUE = 1;
    /**
     * <pre>
     * Signer which can sign transaction
     * </pre>
     *
     * <code>ROLE_TYPE_ORG_SIGNER = 2;</code>
     */
    public static final int ROLE_TYPE_ORG_SIGNER_VALUE = 2;
    /**
     * <pre>
     * Validator which can validate transaction
     * </pre>
     *
     * <code>ROLE_TYPE_ORG_VALIDATOR = 3;</code>
     */
    public static final int ROLE_TYPE_ORG_VALIDATOR_VALUE = 3;
    /**
     * <pre>
     * Viewer
     * </pre>
     *
     * <code>ROLE_TYPE_ORG_VIEWER = 4;</code>
     */
    public static final int ROLE_TYPE_ORG_VIEWER_VALUE = 4;
    /**
     * <pre>
     * Developer which manage service-account
     * </pre>
     *
     * <code>ROLE_TYPE_ORG_DEVELOPER = 5;</code>
     */
    public static final int ROLE_TYPE_ORG_DEVELOPER_VALUE = 5;
    /**
     * <pre>
     * Service Account which manage hot wallet
     * </pre>
     *
     * <code>ROLE_TYPE_HOT_WALLET_ADMIN = 6;</code>
     */
    public static final int ROLE_TYPE_HOT_WALLET_ADMIN_VALUE = 6;
    /**
     * <pre>
     * Service Account which can only get
     * </pre>
     *
     * <code>ROLE_TYPE_HOT_WALLET_VIEWER = 7;</code>
     */
    public static final int ROLE_TYPE_HOT_WALLET_VIEWER_VALUE = 7;
    /**
     * <pre>
     * Transaction Operator of Organization
     * </pre>
     *
     * <code>ROLE_TYPE_ORG_TRANSACTION_OPERATOR = 8;</code>
     */
    public static final int ROLE_TYPE_ORG_TRANSACTION_OPERATOR_VALUE = 8;
    /**
     * <pre>
     * PreTransaction Reviewer of Organization
     * </pre>
     *
     * <code>ROLE_TYPE_ORG_PRE_TRANSACTION_REVIEWER = 9;</code>
     */
    public static final int ROLE_TYPE_ORG_PRE_TRANSACTION_REVIEWER_VALUE = 9;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RoleType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static RoleType forNumber(int value) {
      switch (value) {
        case 0: return ROLE_TYPE_INVALID;
        case 1: return ROLE_TYPE_ORG_MANAGER;
        case 2: return ROLE_TYPE_ORG_SIGNER;
        case 3: return ROLE_TYPE_ORG_VALIDATOR;
        case 4: return ROLE_TYPE_ORG_VIEWER;
        case 5: return ROLE_TYPE_ORG_DEVELOPER;
        case 6: return ROLE_TYPE_HOT_WALLET_ADMIN;
        case 7: return ROLE_TYPE_HOT_WALLET_VIEWER;
        case 8: return ROLE_TYPE_ORG_TRANSACTION_OPERATOR;
        case 9: return ROLE_TYPE_ORG_PRE_TRANSACTION_REVIEWER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RoleType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        RoleType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RoleType>() {
            public RoleType findValueByNumber(int number) {
              return RoleType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(9);
    }

    private static final RoleType[] VALUES = values();

    public static RoleType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private RoleType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.RoleType)
  }

  /**
   * <pre>
   * ResourceType is a target type of role
   * </pre>
   *
   * Protobuf enum {@code adamant.global.v1.ResourceType}
   */
  public enum ResourceType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>RESOURCE_TYPE_INVALID = 0;</code>
     */
    RESOURCE_TYPE_INVALID(0),
    /**
     * <code>RESOURCE_TYPE_WALLET = 1;</code>
     */
    RESOURCE_TYPE_WALLET(1),
    /**
     * <code>RESOURCE_TYPE_ORGANIZATION = 2;</code>
     */
    RESOURCE_TYPE_ORGANIZATION(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>RESOURCE_TYPE_INVALID = 0;</code>
     */
    public static final int RESOURCE_TYPE_INVALID_VALUE = 0;
    /**
     * <code>RESOURCE_TYPE_WALLET = 1;</code>
     */
    public static final int RESOURCE_TYPE_WALLET_VALUE = 1;
    /**
     * <code>RESOURCE_TYPE_ORGANIZATION = 2;</code>
     */
    public static final int RESOURCE_TYPE_ORGANIZATION_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ResourceType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ResourceType forNumber(int value) {
      switch (value) {
        case 0: return RESOURCE_TYPE_INVALID;
        case 1: return RESOURCE_TYPE_WALLET;
        case 2: return RESOURCE_TYPE_ORGANIZATION;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ResourceType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ResourceType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ResourceType>() {
            public ResourceType findValueByNumber(int number) {
              return ResourceType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(10);
    }

    private static final ResourceType[] VALUES = values();

    public static ResourceType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ResourceType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.ResourceType)
  }

  /**
   * <pre>
   * TokenType is a type of token.
   * </pre>
   *
   * Protobuf enum {@code adamant.global.v1.TokenType}
   */
  public enum TokenType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TOKEN_TYPE_INVALID = 0;</code>
     */
    TOKEN_TYPE_INVALID(0),
    /**
     * <code>TOKEN_TYPE_LOGIN_TOKEN = 1;</code>
     */
    TOKEN_TYPE_LOGIN_TOKEN(1),
    /**
     * <code>TOKEN_TYPE_MAIL_TOKEN = 2;</code>
     */
    TOKEN_TYPE_MAIL_TOKEN(2),
    /**
     * <code>TOKEN_TYPE_PASSWORD_RESET_TOKEN = 3;</code>
     */
    TOKEN_TYPE_PASSWORD_RESET_TOKEN(3),
    /**
     * <code>TOKEN_TYPE_PASSWORD_UPDATE_TOKEN = 4;</code>
     */
    TOKEN_TYPE_PASSWORD_UPDATE_TOKEN(4),
    /**
     * <code>TOKEN_TYPE_SIGNUP_TOKEN = 5;</code>
     */
    TOKEN_TYPE_SIGNUP_TOKEN(5),
    /**
     * <code>TOKEN_TYPE_REFRESH_TOKEN = 6;</code>
     */
    TOKEN_TYPE_REFRESH_TOKEN(6),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>TOKEN_TYPE_INVALID = 0;</code>
     */
    public static final int TOKEN_TYPE_INVALID_VALUE = 0;
    /**
     * <code>TOKEN_TYPE_LOGIN_TOKEN = 1;</code>
     */
    public static final int TOKEN_TYPE_LOGIN_TOKEN_VALUE = 1;
    /**
     * <code>TOKEN_TYPE_MAIL_TOKEN = 2;</code>
     */
    public static final int TOKEN_TYPE_MAIL_TOKEN_VALUE = 2;
    /**
     * <code>TOKEN_TYPE_PASSWORD_RESET_TOKEN = 3;</code>
     */
    public static final int TOKEN_TYPE_PASSWORD_RESET_TOKEN_VALUE = 3;
    /**
     * <code>TOKEN_TYPE_PASSWORD_UPDATE_TOKEN = 4;</code>
     */
    public static final int TOKEN_TYPE_PASSWORD_UPDATE_TOKEN_VALUE = 4;
    /**
     * <code>TOKEN_TYPE_SIGNUP_TOKEN = 5;</code>
     */
    public static final int TOKEN_TYPE_SIGNUP_TOKEN_VALUE = 5;
    /**
     * <code>TOKEN_TYPE_REFRESH_TOKEN = 6;</code>
     */
    public static final int TOKEN_TYPE_REFRESH_TOKEN_VALUE = 6;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TokenType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TokenType forNumber(int value) {
      switch (value) {
        case 0: return TOKEN_TYPE_INVALID;
        case 1: return TOKEN_TYPE_LOGIN_TOKEN;
        case 2: return TOKEN_TYPE_MAIL_TOKEN;
        case 3: return TOKEN_TYPE_PASSWORD_RESET_TOKEN;
        case 4: return TOKEN_TYPE_PASSWORD_UPDATE_TOKEN;
        case 5: return TOKEN_TYPE_SIGNUP_TOKEN;
        case 6: return TOKEN_TYPE_REFRESH_TOKEN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TokenType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TokenType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TokenType>() {
            public TokenType findValueByNumber(int number) {
              return TokenType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(11);
    }

    private static final TokenType[] VALUES = values();

    public static TokenType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TokenType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.TokenType)
  }

  /**
   * <pre>
   * PolicyType is a type of policy.
   * </pre>
   *
   * Protobuf enum {@code adamant.global.v1.PolicyType}
   */
  public enum PolicyType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>POLICY_TYPE_INVALID = 0;</code>
     */
    POLICY_TYPE_INVALID(0),
    /**
     * <code>POLICY_TYPE_HOT_WALLET_POLICY = 1;</code>
     */
    POLICY_TYPE_HOT_WALLET_POLICY(1),
    /**
     * <code>POLICY_TYPE_COLD_WALLET_POLICY = 2;</code>
     */
    POLICY_TYPE_COLD_WALLET_POLICY(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>POLICY_TYPE_INVALID = 0;</code>
     */
    public static final int POLICY_TYPE_INVALID_VALUE = 0;
    /**
     * <code>POLICY_TYPE_HOT_WALLET_POLICY = 1;</code>
     */
    public static final int POLICY_TYPE_HOT_WALLET_POLICY_VALUE = 1;
    /**
     * <code>POLICY_TYPE_COLD_WALLET_POLICY = 2;</code>
     */
    public static final int POLICY_TYPE_COLD_WALLET_POLICY_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PolicyType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PolicyType forNumber(int value) {
      switch (value) {
        case 0: return POLICY_TYPE_INVALID;
        case 1: return POLICY_TYPE_HOT_WALLET_POLICY;
        case 2: return POLICY_TYPE_COLD_WALLET_POLICY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PolicyType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PolicyType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PolicyType>() {
            public PolicyType findValueByNumber(int number) {
              return PolicyType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(12);
    }

    private static final PolicyType[] VALUES = values();

    public static PolicyType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PolicyType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.PolicyType)
  }

  /**
   * <pre>
   * TransferLimitType is a type of role
   * </pre>
   *
   * Protobuf enum {@code adamant.global.v1.TransferLimitType}
   */
  public enum TransferLimitType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TRANSFER_LIMIT_TYPE_INVALID = 0;</code>
     */
    TRANSFER_LIMIT_TYPE_INVALID(0),
    /**
     * <code>TRANSFER_LIMIT_TYPE_HOURLY = 1;</code>
     */
    TRANSFER_LIMIT_TYPE_HOURLY(1),
    /**
     * <code>TRANSFER_LIMIT_TYPE_DAILY = 2;</code>
     */
    TRANSFER_LIMIT_TYPE_DAILY(2),
    /**
     * <code>TRANSFER_LIMIT_TYPE_ONE_TIME = 3;</code>
     */
    TRANSFER_LIMIT_TYPE_ONE_TIME(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>TRANSFER_LIMIT_TYPE_INVALID = 0;</code>
     */
    public static final int TRANSFER_LIMIT_TYPE_INVALID_VALUE = 0;
    /**
     * <code>TRANSFER_LIMIT_TYPE_HOURLY = 1;</code>
     */
    public static final int TRANSFER_LIMIT_TYPE_HOURLY_VALUE = 1;
    /**
     * <code>TRANSFER_LIMIT_TYPE_DAILY = 2;</code>
     */
    public static final int TRANSFER_LIMIT_TYPE_DAILY_VALUE = 2;
    /**
     * <code>TRANSFER_LIMIT_TYPE_ONE_TIME = 3;</code>
     */
    public static final int TRANSFER_LIMIT_TYPE_ONE_TIME_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TransferLimitType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TransferLimitType forNumber(int value) {
      switch (value) {
        case 0: return TRANSFER_LIMIT_TYPE_INVALID;
        case 1: return TRANSFER_LIMIT_TYPE_HOURLY;
        case 2: return TRANSFER_LIMIT_TYPE_DAILY;
        case 3: return TRANSFER_LIMIT_TYPE_ONE_TIME;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TransferLimitType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TransferLimitType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TransferLimitType>() {
            public TransferLimitType findValueByNumber(int number) {
              return TransferLimitType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(13);
    }

    private static final TransferLimitType[] VALUES = values();

    public static TransferLimitType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TransferLimitType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.TransferLimitType)
  }

  /**
   * <pre>
   * NotificationType is a type of notification
   * </pre>
   *
   * Protobuf enum {@code adamant.global.v1.NotificationType}
   */
  public enum NotificationType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NOTIFICATION_TYPE_INVALID = 0;</code>
     */
    NOTIFICATION_TYPE_INVALID(0),
    /**
     * <code>NOTIFICATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST = 1;</code>
     */
    NOTIFICATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST(1),
    /**
     * <code>NOTIFICATION_TYPE_WALLET_VALIDATOR_APPROVE_REQUEST = 2;</code>
     */
    NOTIFICATION_TYPE_WALLET_VALIDATOR_APPROVE_REQUEST(2),
    /**
     * <code>NOTIFICATION_TYPE_WALLET_ACTIVATE_FAILED = 3;</code>
     */
    NOTIFICATION_TYPE_WALLET_ACTIVATE_FAILED(3),
    /**
     * <code>NOTIFICATION_TYPE_WALLET_CANCELLED = 4;</code>
     */
    NOTIFICATION_TYPE_WALLET_CANCELLED(4),
    /**
     * <code>NOTIFICATION_TYPE_WALLET_COMPLETED = 5;</code>
     */
    NOTIFICATION_TYPE_WALLET_COMPLETED(5),
    /**
     * <code>NOTIFICATION_TYPE_WALLET_FAILED = 6;</code>
     */
    NOTIFICATION_TYPE_WALLET_FAILED(6),
    /**
     * <code>NOTIFICATION_TYPE_WALLET_ADDRESS_APPROVE_REQUEST = 23;</code>
     */
    NOTIFICATION_TYPE_WALLET_ADDRESS_APPROVE_REQUEST(23),
    /**
     * <code>NOTIFICATION_TYPE_WALLET_XRP_ACTIVATE_REQUEST = 24;</code>
     */
    NOTIFICATION_TYPE_WALLET_XRP_ACTIVATE_REQUEST(24),
    /**
     * <code>NOTIFICATION_TYPE_WALLET_MULTISIG_CONFIG_REQUEST = 25;</code>
     */
    NOTIFICATION_TYPE_WALLET_MULTISIG_CONFIG_REQUEST(25),
    /**
     * <code>NOTIFICATION_TYPE_WALLET_MANAGER_TRANSACTION_REQUEST = 26;</code>
     */
    NOTIFICATION_TYPE_WALLET_MANAGER_TRANSACTION_REQUEST(26),
    /**
     * <code>NOTIFICATION_TYPE_WALLET_VALIDATOR_CHANGE_REQUEST = 27;</code>
     */
    NOTIFICATION_TYPE_WALLET_VALIDATOR_CHANGE_REQUEST(27),
    /**
     * <code>NOTIFICATION_TYPE_TRANSACTION_SIGNER_APPROVE_REQUEST = 7;</code>
     */
    NOTIFICATION_TYPE_TRANSACTION_SIGNER_APPROVE_REQUEST(7),
    /**
     * <code>NOTIFICATION_TYPE_TRANSACTION_VALIDATOR_APPROVE_REQUEST = 8;</code>
     */
    NOTIFICATION_TYPE_TRANSACTION_VALIDATOR_APPROVE_REQUEST(8),
    /**
     * <code>NOTIFICATION_TYPE_TRANSACTION_READY = 22;</code>
     */
    NOTIFICATION_TYPE_TRANSACTION_READY(22),
    /**
     * <code>NOTIFICATION_TYPE_TRANSACTION_SUBMITTED = 9;</code>
     */
    NOTIFICATION_TYPE_TRANSACTION_SUBMITTED(9),
    /**
     * <code>NOTIFICATION_TYPE_TRANSACTION_CANCELLED = 10;</code>
     */
    NOTIFICATION_TYPE_TRANSACTION_CANCELLED(10),
    /**
     * <code>NOTIFICATION_TYPE_TRANSACTION_RESENT = 28;</code>
     */
    NOTIFICATION_TYPE_TRANSACTION_RESENT(28),
    /**
     * <code>NOTIFICATION_TYPE_TRANSFER_SEND_COMPLETED = 11;</code>
     */
    NOTIFICATION_TYPE_TRANSFER_SEND_COMPLETED(11),
    /**
     * <code>NOTIFICATION_TYPE_TRANSFER_SEND_FAILED = 12;</code>
     */
    NOTIFICATION_TYPE_TRANSFER_SEND_FAILED(12),
    /**
     * <code>NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPLETED = 13;</code>
     */
    NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPLETED(13),
    /**
     * <code>NOTIFICATION_TYPE_TRANSFER_RECEIVE_FAILED = 14;</code>
     */
    NOTIFICATION_TYPE_TRANSFER_RECEIVE_FAILED(14),
    /**
     * <code>NOTIFICATION_TYPE_ADDRESS_APPROVE_REQUEST = 15;</code>
     */
    NOTIFICATION_TYPE_ADDRESS_APPROVE_REQUEST(15),
    /**
     * <code>NOTIFICATION_TYPE_ADDRESS_COMPLETED = 16;</code>
     */
    NOTIFICATION_TYPE_ADDRESS_COMPLETED(16),
    /**
     * <code>NOTIFICATION_TYPE_ADDRESS_CANCELLED = 17;</code>
     */
    NOTIFICATION_TYPE_ADDRESS_CANCELLED(17),
    /**
     * <code>NOTIFICATION_TYPE_TRANSFERLIMIT_APPROVE_REQUEST = 18;</code>
     */
    NOTIFICATION_TYPE_TRANSFERLIMIT_APPROVE_REQUEST(18),
    /**
     * <code>NOTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED = 19;</code>
     */
    NOTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED(19),
    /**
     * <code>NOTIFICATION_TYPE_TRANSFERLIMIT_CANCELLED = 20;</code>
     */
    NOTIFICATION_TYPE_TRANSFERLIMIT_CANCELLED(20),
    /**
     * <code>NOTIFICATION_TYPE_WHITELIST_DETACH_REQUEST = 21;</code>
     */
    NOTIFICATION_TYPE_WHITELIST_DETACH_REQUEST(21),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>NOTIFICATION_TYPE_INVALID = 0;</code>
     */
    public static final int NOTIFICATION_TYPE_INVALID_VALUE = 0;
    /**
     * <code>NOTIFICATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST = 1;</code>
     */
    public static final int NOTIFICATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST_VALUE = 1;
    /**
     * <code>NOTIFICATION_TYPE_WALLET_VALIDATOR_APPROVE_REQUEST = 2;</code>
     */
    public static final int NOTIFICATION_TYPE_WALLET_VALIDATOR_APPROVE_REQUEST_VALUE = 2;
    /**
     * <code>NOTIFICATION_TYPE_WALLET_ACTIVATE_FAILED = 3;</code>
     */
    public static final int NOTIFICATION_TYPE_WALLET_ACTIVATE_FAILED_VALUE = 3;
    /**
     * <code>NOTIFICATION_TYPE_WALLET_CANCELLED = 4;</code>
     */
    public static final int NOTIFICATION_TYPE_WALLET_CANCELLED_VALUE = 4;
    /**
     * <code>NOTIFICATION_TYPE_WALLET_COMPLETED = 5;</code>
     */
    public static final int NOTIFICATION_TYPE_WALLET_COMPLETED_VALUE = 5;
    /**
     * <code>NOTIFICATION_TYPE_WALLET_FAILED = 6;</code>
     */
    public static final int NOTIFICATION_TYPE_WALLET_FAILED_VALUE = 6;
    /**
     * <code>NOTIFICATION_TYPE_WALLET_ADDRESS_APPROVE_REQUEST = 23;</code>
     */
    public static final int NOTIFICATION_TYPE_WALLET_ADDRESS_APPROVE_REQUEST_VALUE = 23;
    /**
     * <code>NOTIFICATION_TYPE_WALLET_XRP_ACTIVATE_REQUEST = 24;</code>
     */
    public static final int NOTIFICATION_TYPE_WALLET_XRP_ACTIVATE_REQUEST_VALUE = 24;
    /**
     * <code>NOTIFICATION_TYPE_WALLET_MULTISIG_CONFIG_REQUEST = 25;</code>
     */
    public static final int NOTIFICATION_TYPE_WALLET_MULTISIG_CONFIG_REQUEST_VALUE = 25;
    /**
     * <code>NOTIFICATION_TYPE_WALLET_MANAGER_TRANSACTION_REQUEST = 26;</code>
     */
    public static final int NOTIFICATION_TYPE_WALLET_MANAGER_TRANSACTION_REQUEST_VALUE = 26;
    /**
     * <code>NOTIFICATION_TYPE_WALLET_VALIDATOR_CHANGE_REQUEST = 27;</code>
     */
    public static final int NOTIFICATION_TYPE_WALLET_VALIDATOR_CHANGE_REQUEST_VALUE = 27;
    /**
     * <code>NOTIFICATION_TYPE_TRANSACTION_SIGNER_APPROVE_REQUEST = 7;</code>
     */
    public static final int NOTIFICATION_TYPE_TRANSACTION_SIGNER_APPROVE_REQUEST_VALUE = 7;
    /**
     * <code>NOTIFICATION_TYPE_TRANSACTION_VALIDATOR_APPROVE_REQUEST = 8;</code>
     */
    public static final int NOTIFICATION_TYPE_TRANSACTION_VALIDATOR_APPROVE_REQUEST_VALUE = 8;
    /**
     * <code>NOTIFICATION_TYPE_TRANSACTION_READY = 22;</code>
     */
    public static final int NOTIFICATION_TYPE_TRANSACTION_READY_VALUE = 22;
    /**
     * <code>NOTIFICATION_TYPE_TRANSACTION_SUBMITTED = 9;</code>
     */
    public static final int NOTIFICATION_TYPE_TRANSACTION_SUBMITTED_VALUE = 9;
    /**
     * <code>NOTIFICATION_TYPE_TRANSACTION_CANCELLED = 10;</code>
     */
    public static final int NOTIFICATION_TYPE_TRANSACTION_CANCELLED_VALUE = 10;
    /**
     * <code>NOTIFICATION_TYPE_TRANSACTION_RESENT = 28;</code>
     */
    public static final int NOTIFICATION_TYPE_TRANSACTION_RESENT_VALUE = 28;
    /**
     * <code>NOTIFICATION_TYPE_TRANSFER_SEND_COMPLETED = 11;</code>
     */
    public static final int NOTIFICATION_TYPE_TRANSFER_SEND_COMPLETED_VALUE = 11;
    /**
     * <code>NOTIFICATION_TYPE_TRANSFER_SEND_FAILED = 12;</code>
     */
    public static final int NOTIFICATION_TYPE_TRANSFER_SEND_FAILED_VALUE = 12;
    /**
     * <code>NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPLETED = 13;</code>
     */
    public static final int NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPLETED_VALUE = 13;
    /**
     * <code>NOTIFICATION_TYPE_TRANSFER_RECEIVE_FAILED = 14;</code>
     */
    public static final int NOTIFICATION_TYPE_TRANSFER_RECEIVE_FAILED_VALUE = 14;
    /**
     * <code>NOTIFICATION_TYPE_ADDRESS_APPROVE_REQUEST = 15;</code>
     */
    public static final int NOTIFICATION_TYPE_ADDRESS_APPROVE_REQUEST_VALUE = 15;
    /**
     * <code>NOTIFICATION_TYPE_ADDRESS_COMPLETED = 16;</code>
     */
    public static final int NOTIFICATION_TYPE_ADDRESS_COMPLETED_VALUE = 16;
    /**
     * <code>NOTIFICATION_TYPE_ADDRESS_CANCELLED = 17;</code>
     */
    public static final int NOTIFICATION_TYPE_ADDRESS_CANCELLED_VALUE = 17;
    /**
     * <code>NOTIFICATION_TYPE_TRANSFERLIMIT_APPROVE_REQUEST = 18;</code>
     */
    public static final int NOTIFICATION_TYPE_TRANSFERLIMIT_APPROVE_REQUEST_VALUE = 18;
    /**
     * <code>NOTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED = 19;</code>
     */
    public static final int NOTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED_VALUE = 19;
    /**
     * <code>NOTIFICATION_TYPE_TRANSFERLIMIT_CANCELLED = 20;</code>
     */
    public static final int NOTIFICATION_TYPE_TRANSFERLIMIT_CANCELLED_VALUE = 20;
    /**
     * <code>NOTIFICATION_TYPE_WHITELIST_DETACH_REQUEST = 21;</code>
     */
    public static final int NOTIFICATION_TYPE_WHITELIST_DETACH_REQUEST_VALUE = 21;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static NotificationType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static NotificationType forNumber(int value) {
      switch (value) {
        case 0: return NOTIFICATION_TYPE_INVALID;
        case 1: return NOTIFICATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST;
        case 2: return NOTIFICATION_TYPE_WALLET_VALIDATOR_APPROVE_REQUEST;
        case 3: return NOTIFICATION_TYPE_WALLET_ACTIVATE_FAILED;
        case 4: return NOTIFICATION_TYPE_WALLET_CANCELLED;
        case 5: return NOTIFICATION_TYPE_WALLET_COMPLETED;
        case 6: return NOTIFICATION_TYPE_WALLET_FAILED;
        case 23: return NOTIFICATION_TYPE_WALLET_ADDRESS_APPROVE_REQUEST;
        case 24: return NOTIFICATION_TYPE_WALLET_XRP_ACTIVATE_REQUEST;
        case 25: return NOTIFICATION_TYPE_WALLET_MULTISIG_CONFIG_REQUEST;
        case 26: return NOTIFICATION_TYPE_WALLET_MANAGER_TRANSACTION_REQUEST;
        case 27: return NOTIFICATION_TYPE_WALLET_VALIDATOR_CHANGE_REQUEST;
        case 7: return NOTIFICATION_TYPE_TRANSACTION_SIGNER_APPROVE_REQUEST;
        case 8: return NOTIFICATION_TYPE_TRANSACTION_VALIDATOR_APPROVE_REQUEST;
        case 22: return NOTIFICATION_TYPE_TRANSACTION_READY;
        case 9: return NOTIFICATION_TYPE_TRANSACTION_SUBMITTED;
        case 10: return NOTIFICATION_TYPE_TRANSACTION_CANCELLED;
        case 28: return NOTIFICATION_TYPE_TRANSACTION_RESENT;
        case 11: return NOTIFICATION_TYPE_TRANSFER_SEND_COMPLETED;
        case 12: return NOTIFICATION_TYPE_TRANSFER_SEND_FAILED;
        case 13: return NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPLETED;
        case 14: return NOTIFICATION_TYPE_TRANSFER_RECEIVE_FAILED;
        case 15: return NOTIFICATION_TYPE_ADDRESS_APPROVE_REQUEST;
        case 16: return NOTIFICATION_TYPE_ADDRESS_COMPLETED;
        case 17: return NOTIFICATION_TYPE_ADDRESS_CANCELLED;
        case 18: return NOTIFICATION_TYPE_TRANSFERLIMIT_APPROVE_REQUEST;
        case 19: return NOTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED;
        case 20: return NOTIFICATION_TYPE_TRANSFERLIMIT_CANCELLED;
        case 21: return NOTIFICATION_TYPE_WHITELIST_DETACH_REQUEST;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<NotificationType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        NotificationType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<NotificationType>() {
            public NotificationType findValueByNumber(int number) {
              return NotificationType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(14);
    }

    private static final NotificationType[] VALUES = values();

    public static NotificationType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private NotificationType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.NotificationType)
  }

  /**
   * <pre>
   * AuditLogGroup is a enum of AuditLogGroup
   * </pre>
   *
   * Protobuf enum {@code adamant.global.v1.AuditLogGroup}
   */
  public enum AuditLogGroup
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>AUDIT_LOG_GROUP_INVALID = 0;</code>
     */
    AUDIT_LOG_GROUP_INVALID(0),
    /**
     * <code>AUDIT_LOG_GROUP_LOGIN = 1;</code>
     */
    AUDIT_LOG_GROUP_LOGIN(1),
    /**
     * <code>AUDIT_LOG_GROUP_ACCOUNT = 2;</code>
     */
    AUDIT_LOG_GROUP_ACCOUNT(2),
    /**
     * <code>AUDIT_LOG_GROUP_SERVICE_ACCOUNT = 3;</code>
     */
    AUDIT_LOG_GROUP_SERVICE_ACCOUNT(3),
    /**
     * <code>AUDIT_LOG_GROUP_WALLET = 4;</code>
     */
    AUDIT_LOG_GROUP_WALLET(4),
    /**
     * <code>AUDIT_LOG_GROUP_PRE_TRANSACTION = 11;</code>
     */
    AUDIT_LOG_GROUP_PRE_TRANSACTION(11),
    /**
     * <code>AUDIT_LOG_GROUP_TRANSACTION = 5;</code>
     */
    AUDIT_LOG_GROUP_TRANSACTION(5),
    /**
     * <code>AUDIT_LOG_GROUP_POLICY = 6;</code>
     */
    AUDIT_LOG_GROUP_POLICY(6),
    /**
     * <code>AUDIT_LOG_GROUP_WALLET_GROUP = 7;</code>
     */
    AUDIT_LOG_GROUP_WALLET_GROUP(7),
    /**
     * <code>AUDIT_LOG_GROUP_MAIL = 8;</code>
     */
    AUDIT_LOG_GROUP_MAIL(8),
    /**
     * <code>AUDIT_LOG_GROUP_PRE_TRANSACTION_THRESHOLD = 9;</code>
     */
    AUDIT_LOG_GROUP_PRE_TRANSACTION_THRESHOLD(9),
    /**
     * <code>AUDIT_LOG_GROUP_BLACKLIST_ADDRESS = 10;</code>
     */
    AUDIT_LOG_GROUP_BLACKLIST_ADDRESS(10),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>AUDIT_LOG_GROUP_INVALID = 0;</code>
     */
    public static final int AUDIT_LOG_GROUP_INVALID_VALUE = 0;
    /**
     * <code>AUDIT_LOG_GROUP_LOGIN = 1;</code>
     */
    public static final int AUDIT_LOG_GROUP_LOGIN_VALUE = 1;
    /**
     * <code>AUDIT_LOG_GROUP_ACCOUNT = 2;</code>
     */
    public static final int AUDIT_LOG_GROUP_ACCOUNT_VALUE = 2;
    /**
     * <code>AUDIT_LOG_GROUP_SERVICE_ACCOUNT = 3;</code>
     */
    public static final int AUDIT_LOG_GROUP_SERVICE_ACCOUNT_VALUE = 3;
    /**
     * <code>AUDIT_LOG_GROUP_WALLET = 4;</code>
     */
    public static final int AUDIT_LOG_GROUP_WALLET_VALUE = 4;
    /**
     * <code>AUDIT_LOG_GROUP_PRE_TRANSACTION = 11;</code>
     */
    public static final int AUDIT_LOG_GROUP_PRE_TRANSACTION_VALUE = 11;
    /**
     * <code>AUDIT_LOG_GROUP_TRANSACTION = 5;</code>
     */
    public static final int AUDIT_LOG_GROUP_TRANSACTION_VALUE = 5;
    /**
     * <code>AUDIT_LOG_GROUP_POLICY = 6;</code>
     */
    public static final int AUDIT_LOG_GROUP_POLICY_VALUE = 6;
    /**
     * <code>AUDIT_LOG_GROUP_WALLET_GROUP = 7;</code>
     */
    public static final int AUDIT_LOG_GROUP_WALLET_GROUP_VALUE = 7;
    /**
     * <code>AUDIT_LOG_GROUP_MAIL = 8;</code>
     */
    public static final int AUDIT_LOG_GROUP_MAIL_VALUE = 8;
    /**
     * <code>AUDIT_LOG_GROUP_PRE_TRANSACTION_THRESHOLD = 9;</code>
     */
    public static final int AUDIT_LOG_GROUP_PRE_TRANSACTION_THRESHOLD_VALUE = 9;
    /**
     * <code>AUDIT_LOG_GROUP_BLACKLIST_ADDRESS = 10;</code>
     */
    public static final int AUDIT_LOG_GROUP_BLACKLIST_ADDRESS_VALUE = 10;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AuditLogGroup valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static AuditLogGroup forNumber(int value) {
      switch (value) {
        case 0: return AUDIT_LOG_GROUP_INVALID;
        case 1: return AUDIT_LOG_GROUP_LOGIN;
        case 2: return AUDIT_LOG_GROUP_ACCOUNT;
        case 3: return AUDIT_LOG_GROUP_SERVICE_ACCOUNT;
        case 4: return AUDIT_LOG_GROUP_WALLET;
        case 11: return AUDIT_LOG_GROUP_PRE_TRANSACTION;
        case 5: return AUDIT_LOG_GROUP_TRANSACTION;
        case 6: return AUDIT_LOG_GROUP_POLICY;
        case 7: return AUDIT_LOG_GROUP_WALLET_GROUP;
        case 8: return AUDIT_LOG_GROUP_MAIL;
        case 9: return AUDIT_LOG_GROUP_PRE_TRANSACTION_THRESHOLD;
        case 10: return AUDIT_LOG_GROUP_BLACKLIST_ADDRESS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AuditLogGroup>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        AuditLogGroup> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AuditLogGroup>() {
            public AuditLogGroup findValueByNumber(int number) {
              return AuditLogGroup.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(15);
    }

    private static final AuditLogGroup[] VALUES = values();

    public static AuditLogGroup valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private AuditLogGroup(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.AuditLogGroup)
  }

  /**
   * <pre>
   * AuditLogType is a type of AuditLog
   * </pre>
   *
   * Protobuf enum {@code adamant.global.v1.AuditLogType}
   */
  public enum AuditLogType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>AUDIT_LOG_TYPE_INVALID = 0;</code>
     */
    AUDIT_LOG_TYPE_INVALID(0),
    /**
     * <code>AUDIT_LOG_TYPE_LOGIN = 1;</code>
     */
    AUDIT_LOG_TYPE_LOGIN(1),
    /**
     * <code>AUDIT_LOG_TYPE_LOGIN_FAIL = 2;</code>
     */
    AUDIT_LOG_TYPE_LOGIN_FAIL(2),
    /**
     * <code>AUDIT_LOG_TYPE_2FA_FAIL = 50;</code>
     */
    AUDIT_LOG_TYPE_2FA_FAIL(50),
    /**
     * <code>AUDIT_LOG_TYPE_LOGOUT = 3;</code>
     */
    AUDIT_LOG_TYPE_LOGOUT(3),
    /**
     * <code>AUDIT_LOG_TYPE_MAIL_SETTINGS_CHANGE = 80;</code>
     */
    AUDIT_LOG_TYPE_MAIL_SETTINGS_CHANGE(80),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_CREATE = 4;</code>
     */
    AUDIT_LOG_TYPE_WALLET_CREATE(4),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_APPROVE = 5;</code>
     */
    AUDIT_LOG_TYPE_WALLET_APPROVE(5),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_CANCEL = 6;</code>
     */
    AUDIT_LOG_TYPE_WALLET_CANCEL(6),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_REGISTER_PUBKEY = 7;</code>
     */
    AUDIT_LOG_TYPE_WALLET_REGISTER_PUBKEY(7),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_ARCHIVE = 8;</code>
     */
    AUDIT_LOG_TYPE_WALLET_ARCHIVE(8),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_UNARCHIVE = 9;</code>
     */
    AUDIT_LOG_TYPE_WALLET_UNARCHIVE(9),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_NAME_CHANGE = 10;</code>
     */
    AUDIT_LOG_TYPE_WALLET_NAME_CHANGE(10),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_POLICY_CHANGE = 11;</code>
     */
    AUDIT_LOG_TYPE_WALLET_POLICY_CHANGE(11),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_REQUEST = 12;</code>
     */
    AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_REQUEST(12),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_APPROVE = 13;</code>
     */
    AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_APPROVE(13),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_CANCEL = 14;</code>
     */
    AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_CANCEL(14),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_ADDRESS_UPLOAD = 51;</code>
     */
    AUDIT_LOG_TYPE_WALLET_ADDRESS_UPLOAD(51),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_ADDRESS_DOWNLOAD = 52;</code>
     */
    AUDIT_LOG_TYPE_WALLET_ADDRESS_DOWNLOAD(52),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_ADDRESS_DELETE = 53;</code>
     */
    AUDIT_LOG_TYPE_WALLET_ADDRESS_DELETE(53),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_VALIDATOR_CHANGE = 60;</code>
     */
    AUDIT_LOG_TYPE_WALLET_VALIDATOR_CHANGE(60),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_VALIDATOR_APPROVE = 61;</code>
     */
    AUDIT_LOG_TYPE_WALLET_VALIDATOR_APPROVE(61),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_VALIDATOR_CANCEL = 62;</code>
     */
    AUDIT_LOG_TYPE_WALLET_VALIDATOR_CANCEL(62),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_DESTINATION_WALLET_CHANGE = 63;</code>
     */
    AUDIT_LOG_TYPE_WALLET_DESTINATION_WALLET_CHANGE(63),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_GROUP_CREATE = 54;</code>
     */
    AUDIT_LOG_TYPE_WALLET_GROUP_CREATE(54),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_GROUP_NAME_CHANGE = 55;</code>
     */
    AUDIT_LOG_TYPE_WALLET_GROUP_NAME_CHANGE(55),
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_GROUP_CHANGE = 56;</code>
     */
    AUDIT_LOG_TYPE_WALLET_GROUP_CHANGE(56),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_CREATE = 15;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_CREATE(15),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_APPROVE = 16;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_APPROVE(16),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_CANCEL = 17;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_CANCEL(17),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_REGISTER_SIGNATURE = 18;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_REGISTER_SIGNATURE(18),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_SUBMIT = 19;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_SUBMIT(19),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_RESEND = 79;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_RESEND(79),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_REPLACE = 98;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_REPLACE(98),
    /**
     * <code>AUDIT_LOG_TYPE_ACCOUNT_PASSWORD_CHANGE = 20;</code>
     */
    AUDIT_LOG_TYPE_ACCOUNT_PASSWORD_CHANGE(20),
    /**
     * <code>AUDIT_LOG_TYPE_ACCOUNT_EMAIL_CHANGE = 21;</code>
     */
    AUDIT_LOG_TYPE_ACCOUNT_EMAIL_CHANGE(21),
    /**
     * <code>AUDIT_LOG_TYPE_ACCOUNT_INVITE = 22;</code>
     */
    AUDIT_LOG_TYPE_ACCOUNT_INVITE(22),
    /**
     * <code>AUDIT_LOG_TYPE_ACCOUNT_ARCHIVE = 23;</code>
     */
    AUDIT_LOG_TYPE_ACCOUNT_ARCHIVE(23),
    /**
     * <code>AUDIT_LOG_TYPE_ACCOUNT_UNARCHIVE = 24;</code>
     */
    AUDIT_LOG_TYPE_ACCOUNT_UNARCHIVE(24),
    /**
     * <code>AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CREATE = 25;</code>
     */
    AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CREATE(25),
    /**
     * <code>AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CHANGE_PERMISSION = 26;</code>
     */
    AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CHANGE_PERMISSION(26),
    /**
     * <code>AUDIT_LOG_TYPE_SERVICE_ACCOUNT_ACTIVATE = 27;</code>
     */
    AUDIT_LOG_TYPE_SERVICE_ACCOUNT_ACTIVATE(27),
    /**
     * <code>AUDIT_LOG_TYPE_SERVICE_ACCOUNT_INACTIVE = 28;</code>
     */
    AUDIT_LOG_TYPE_SERVICE_ACCOUNT_INACTIVE(28),
    /**
     * <code>AUDIT_LOG_TYPE_SERVICE_ACCOUNT_DELETE = 29;</code>
     */
    AUDIT_LOG_TYPE_SERVICE_ACCOUNT_DELETE(29),
    /**
     * <code>AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_CREATE = 30;</code>
     */
    AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_CREATE(30),
    /**
     * <code>AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_DELETE = 31;</code>
     */
    AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_DELETE(31),
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_ADDRESS_CREATE = 32;</code>
     */
    AUDIT_LOG_TYPE_POLICY_ADDRESS_CREATE(32),
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_ADDRESS_DELETE = 33;</code>
     */
    AUDIT_LOG_TYPE_POLICY_ADDRESS_DELETE(33),
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_ADDRESS_APPROVE = 34;</code>
     */
    AUDIT_LOG_TYPE_POLICY_ADDRESS_APPROVE(34),
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_ADDRESS_CANCEL = 35;</code>
     */
    AUDIT_LOG_TYPE_POLICY_ADDRESS_CANCEL(35),
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CREATE = 36;</code>
     */
    AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CREATE(36),
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CHANGE = 37;</code>
     */
    AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CHANGE(37),
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_DELETE = 38;</code>
     */
    AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_DELETE(38),
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_APPROVE = 39;</code>
     */
    AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_APPROVE(39),
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CANCEL = 40;</code>
     */
    AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CANCEL(40),
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_WHITELIST_CREATE = 41;</code>
     */
    AUDIT_LOG_TYPE_POLICY_WHITELIST_CREATE(41),
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_WHITELIST_CHANGE = 42;</code>
     */
    AUDIT_LOG_TYPE_POLICY_WHITELIST_CHANGE(42),
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_WHITELIST_DELETE = 43;</code>
     */
    AUDIT_LOG_TYPE_POLICY_WHITELIST_DELETE(43),
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_POLICY_CREATE = 44;</code>
     */
    AUDIT_LOG_TYPE_POLICY_POLICY_CREATE(44),
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_POLICY_CHANGE = 45;</code>
     */
    AUDIT_LOG_TYPE_POLICY_POLICY_CHANGE(45),
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_POLICY_DELETE = 46;</code>
     */
    AUDIT_LOG_TYPE_POLICY_POLICY_DELETE(46),
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_REQUEST_NO_WHITELIST = 47;</code>
     */
    AUDIT_LOG_TYPE_POLICY_REQUEST_NO_WHITELIST(47),
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_APPROVE_NO_WHITELIST = 48;</code>
     */
    AUDIT_LOG_TYPE_POLICY_APPROVE_NO_WHITELIST(48),
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_CANCEL_NO_WHITELIST = 49;</code>
     */
    AUDIT_LOG_TYPE_POLICY_CANCEL_NO_WHITELIST(49),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_CREATE = 64;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_CREATE(64),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_APPROVE = 65;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_APPROVE(65),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_CANCEL = 66;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_CANCEL(66),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_REGISTER_SIGNATURE = 67;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_REGISTER_SIGNATURE(67),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_SUBMIT = 68;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_SUBMIT(68),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_CREATE = 69;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_CREATE(69),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_APPROVE = 70;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_APPROVE(70),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_CANCEL = 71;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_CANCEL(71),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_REGISTER_SIGNATURE = 72;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_REGISTER_SIGNATURE(72),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_SUBMIT = 73;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_SUBMIT(73),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_CREATE = 74;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_CREATE(74),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_APPROVE = 75;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_APPROVE(75),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_CANCEL = 76;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_CANCEL(76),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_REGISTER_SIGNATURE = 77;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_REGISTER_SIGNATURE(77),
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_SUBMIT = 78;</code>
     */
    AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_SUBMIT(78),
    /**
     * <code>AUDIT_LOG_TYPE_PRE_TRANSACTION_APPROVE = 96;</code>
     */
    AUDIT_LOG_TYPE_PRE_TRANSACTION_APPROVE(96),
    /**
     * <code>AUDIT_LOG_TYPE_PRE_TRANSACTION_REJECT = 97;</code>
     */
    AUDIT_LOG_TYPE_PRE_TRANSACTION_REJECT(97),
    /**
     * <code>AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REQUESTED = 81;</code>
     */
    AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REQUESTED(81),
    /**
     * <code>AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_APPROVED = 82;</code>
     */
    AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_APPROVED(82),
    /**
     * <code>AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REJECTED = 83;</code>
     */
    AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REJECTED(83),
    /**
     * <code>AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REQUESTED = 84;</code>
     */
    AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REQUESTED(84),
    /**
     * <code>AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_APPROVED = 85;</code>
     */
    AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_APPROVED(85),
    /**
     * <code>AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REJECTED = 86;</code>
     */
    AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REJECTED(86),
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CREATION_REQUESTED = 87;</code>
     */
    AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CREATION_REQUESTED(87),
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CREATION_APPROVED = 88;</code>
     */
    AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CREATION_APPROVED(88),
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CREATION_REJECTED = 89;</code>
     */
    AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CREATION_REJECTED(89),
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_REQUESTED = 90;</code>
     */
    AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_REQUESTED(90),
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_FAILED = 99;</code>
     */
    AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_FAILED(99),
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_APPROVED = 91;</code>
     */
    AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_APPROVED(91),
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_REJECTED = 92;</code>
     */
    AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_REJECTED(92),
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CHANGE_REQUESTED = 93;</code>
     */
    AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CHANGE_REQUESTED(93),
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CHANGE_APPROVED = 94;</code>
     */
    AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CHANGE_APPROVED(94),
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CHANGE_REJECTED = 95;</code>
     */
    AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CHANGE_REJECTED(95),
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_EXPORT_REQUESTED = 100;</code>
     */
    AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_EXPORT_REQUESTED(100),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>AUDIT_LOG_TYPE_INVALID = 0;</code>
     */
    public static final int AUDIT_LOG_TYPE_INVALID_VALUE = 0;
    /**
     * <code>AUDIT_LOG_TYPE_LOGIN = 1;</code>
     */
    public static final int AUDIT_LOG_TYPE_LOGIN_VALUE = 1;
    /**
     * <code>AUDIT_LOG_TYPE_LOGIN_FAIL = 2;</code>
     */
    public static final int AUDIT_LOG_TYPE_LOGIN_FAIL_VALUE = 2;
    /**
     * <code>AUDIT_LOG_TYPE_2FA_FAIL = 50;</code>
     */
    public static final int AUDIT_LOG_TYPE_2FA_FAIL_VALUE = 50;
    /**
     * <code>AUDIT_LOG_TYPE_LOGOUT = 3;</code>
     */
    public static final int AUDIT_LOG_TYPE_LOGOUT_VALUE = 3;
    /**
     * <code>AUDIT_LOG_TYPE_MAIL_SETTINGS_CHANGE = 80;</code>
     */
    public static final int AUDIT_LOG_TYPE_MAIL_SETTINGS_CHANGE_VALUE = 80;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_CREATE = 4;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_CREATE_VALUE = 4;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_APPROVE = 5;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_APPROVE_VALUE = 5;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_CANCEL = 6;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_CANCEL_VALUE = 6;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_REGISTER_PUBKEY = 7;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_REGISTER_PUBKEY_VALUE = 7;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_ARCHIVE = 8;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_ARCHIVE_VALUE = 8;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_UNARCHIVE = 9;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_UNARCHIVE_VALUE = 9;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_NAME_CHANGE = 10;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_NAME_CHANGE_VALUE = 10;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_POLICY_CHANGE = 11;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_POLICY_CHANGE_VALUE = 11;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_REQUEST = 12;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_REQUEST_VALUE = 12;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_APPROVE = 13;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_APPROVE_VALUE = 13;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_CANCEL = 14;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_CANCEL_VALUE = 14;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_ADDRESS_UPLOAD = 51;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_ADDRESS_UPLOAD_VALUE = 51;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_ADDRESS_DOWNLOAD = 52;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_ADDRESS_DOWNLOAD_VALUE = 52;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_ADDRESS_DELETE = 53;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_ADDRESS_DELETE_VALUE = 53;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_VALIDATOR_CHANGE = 60;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_VALIDATOR_CHANGE_VALUE = 60;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_VALIDATOR_APPROVE = 61;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_VALIDATOR_APPROVE_VALUE = 61;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_VALIDATOR_CANCEL = 62;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_VALIDATOR_CANCEL_VALUE = 62;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_DESTINATION_WALLET_CHANGE = 63;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_DESTINATION_WALLET_CHANGE_VALUE = 63;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_GROUP_CREATE = 54;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_GROUP_CREATE_VALUE = 54;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_GROUP_NAME_CHANGE = 55;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_GROUP_NAME_CHANGE_VALUE = 55;
    /**
     * <code>AUDIT_LOG_TYPE_WALLET_GROUP_CHANGE = 56;</code>
     */
    public static final int AUDIT_LOG_TYPE_WALLET_GROUP_CHANGE_VALUE = 56;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_CREATE = 15;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_CREATE_VALUE = 15;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_APPROVE = 16;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_APPROVE_VALUE = 16;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_CANCEL = 17;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_CANCEL_VALUE = 17;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_REGISTER_SIGNATURE = 18;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_REGISTER_SIGNATURE_VALUE = 18;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_SUBMIT = 19;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_SUBMIT_VALUE = 19;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_RESEND = 79;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_RESEND_VALUE = 79;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_REPLACE = 98;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_REPLACE_VALUE = 98;
    /**
     * <code>AUDIT_LOG_TYPE_ACCOUNT_PASSWORD_CHANGE = 20;</code>
     */
    public static final int AUDIT_LOG_TYPE_ACCOUNT_PASSWORD_CHANGE_VALUE = 20;
    /**
     * <code>AUDIT_LOG_TYPE_ACCOUNT_EMAIL_CHANGE = 21;</code>
     */
    public static final int AUDIT_LOG_TYPE_ACCOUNT_EMAIL_CHANGE_VALUE = 21;
    /**
     * <code>AUDIT_LOG_TYPE_ACCOUNT_INVITE = 22;</code>
     */
    public static final int AUDIT_LOG_TYPE_ACCOUNT_INVITE_VALUE = 22;
    /**
     * <code>AUDIT_LOG_TYPE_ACCOUNT_ARCHIVE = 23;</code>
     */
    public static final int AUDIT_LOG_TYPE_ACCOUNT_ARCHIVE_VALUE = 23;
    /**
     * <code>AUDIT_LOG_TYPE_ACCOUNT_UNARCHIVE = 24;</code>
     */
    public static final int AUDIT_LOG_TYPE_ACCOUNT_UNARCHIVE_VALUE = 24;
    /**
     * <code>AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CREATE = 25;</code>
     */
    public static final int AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CREATE_VALUE = 25;
    /**
     * <code>AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CHANGE_PERMISSION = 26;</code>
     */
    public static final int AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CHANGE_PERMISSION_VALUE = 26;
    /**
     * <code>AUDIT_LOG_TYPE_SERVICE_ACCOUNT_ACTIVATE = 27;</code>
     */
    public static final int AUDIT_LOG_TYPE_SERVICE_ACCOUNT_ACTIVATE_VALUE = 27;
    /**
     * <code>AUDIT_LOG_TYPE_SERVICE_ACCOUNT_INACTIVE = 28;</code>
     */
    public static final int AUDIT_LOG_TYPE_SERVICE_ACCOUNT_INACTIVE_VALUE = 28;
    /**
     * <code>AUDIT_LOG_TYPE_SERVICE_ACCOUNT_DELETE = 29;</code>
     */
    public static final int AUDIT_LOG_TYPE_SERVICE_ACCOUNT_DELETE_VALUE = 29;
    /**
     * <code>AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_CREATE = 30;</code>
     */
    public static final int AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_CREATE_VALUE = 30;
    /**
     * <code>AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_DELETE = 31;</code>
     */
    public static final int AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_DELETE_VALUE = 31;
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_ADDRESS_CREATE = 32;</code>
     */
    public static final int AUDIT_LOG_TYPE_POLICY_ADDRESS_CREATE_VALUE = 32;
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_ADDRESS_DELETE = 33;</code>
     */
    public static final int AUDIT_LOG_TYPE_POLICY_ADDRESS_DELETE_VALUE = 33;
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_ADDRESS_APPROVE = 34;</code>
     */
    public static final int AUDIT_LOG_TYPE_POLICY_ADDRESS_APPROVE_VALUE = 34;
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_ADDRESS_CANCEL = 35;</code>
     */
    public static final int AUDIT_LOG_TYPE_POLICY_ADDRESS_CANCEL_VALUE = 35;
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CREATE = 36;</code>
     */
    public static final int AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CREATE_VALUE = 36;
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CHANGE = 37;</code>
     */
    public static final int AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CHANGE_VALUE = 37;
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_DELETE = 38;</code>
     */
    public static final int AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_DELETE_VALUE = 38;
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_APPROVE = 39;</code>
     */
    public static final int AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_APPROVE_VALUE = 39;
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CANCEL = 40;</code>
     */
    public static final int AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CANCEL_VALUE = 40;
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_WHITELIST_CREATE = 41;</code>
     */
    public static final int AUDIT_LOG_TYPE_POLICY_WHITELIST_CREATE_VALUE = 41;
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_WHITELIST_CHANGE = 42;</code>
     */
    public static final int AUDIT_LOG_TYPE_POLICY_WHITELIST_CHANGE_VALUE = 42;
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_WHITELIST_DELETE = 43;</code>
     */
    public static final int AUDIT_LOG_TYPE_POLICY_WHITELIST_DELETE_VALUE = 43;
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_POLICY_CREATE = 44;</code>
     */
    public static final int AUDIT_LOG_TYPE_POLICY_POLICY_CREATE_VALUE = 44;
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_POLICY_CHANGE = 45;</code>
     */
    public static final int AUDIT_LOG_TYPE_POLICY_POLICY_CHANGE_VALUE = 45;
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_POLICY_DELETE = 46;</code>
     */
    public static final int AUDIT_LOG_TYPE_POLICY_POLICY_DELETE_VALUE = 46;
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_REQUEST_NO_WHITELIST = 47;</code>
     */
    public static final int AUDIT_LOG_TYPE_POLICY_REQUEST_NO_WHITELIST_VALUE = 47;
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_APPROVE_NO_WHITELIST = 48;</code>
     */
    public static final int AUDIT_LOG_TYPE_POLICY_APPROVE_NO_WHITELIST_VALUE = 48;
    /**
     * <code>AUDIT_LOG_TYPE_POLICY_CANCEL_NO_WHITELIST = 49;</code>
     */
    public static final int AUDIT_LOG_TYPE_POLICY_CANCEL_NO_WHITELIST_VALUE = 49;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_CREATE = 64;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_CREATE_VALUE = 64;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_APPROVE = 65;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_APPROVE_VALUE = 65;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_CANCEL = 66;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_CANCEL_VALUE = 66;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_REGISTER_SIGNATURE = 67;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_REGISTER_SIGNATURE_VALUE = 67;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_SUBMIT = 68;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_SUBMIT_VALUE = 68;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_CREATE = 69;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_CREATE_VALUE = 69;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_APPROVE = 70;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_APPROVE_VALUE = 70;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_CANCEL = 71;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_CANCEL_VALUE = 71;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_REGISTER_SIGNATURE = 72;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_REGISTER_SIGNATURE_VALUE = 72;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_SUBMIT = 73;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_SUBMIT_VALUE = 73;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_CREATE = 74;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_CREATE_VALUE = 74;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_APPROVE = 75;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_APPROVE_VALUE = 75;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_CANCEL = 76;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_CANCEL_VALUE = 76;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_REGISTER_SIGNATURE = 77;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_REGISTER_SIGNATURE_VALUE = 77;
    /**
     * <code>AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_SUBMIT = 78;</code>
     */
    public static final int AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_SUBMIT_VALUE = 78;
    /**
     * <code>AUDIT_LOG_TYPE_PRE_TRANSACTION_APPROVE = 96;</code>
     */
    public static final int AUDIT_LOG_TYPE_PRE_TRANSACTION_APPROVE_VALUE = 96;
    /**
     * <code>AUDIT_LOG_TYPE_PRE_TRANSACTION_REJECT = 97;</code>
     */
    public static final int AUDIT_LOG_TYPE_PRE_TRANSACTION_REJECT_VALUE = 97;
    /**
     * <code>AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REQUESTED = 81;</code>
     */
    public static final int AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REQUESTED_VALUE = 81;
    /**
     * <code>AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_APPROVED = 82;</code>
     */
    public static final int AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_APPROVED_VALUE = 82;
    /**
     * <code>AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REJECTED = 83;</code>
     */
    public static final int AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REJECTED_VALUE = 83;
    /**
     * <code>AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REQUESTED = 84;</code>
     */
    public static final int AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REQUESTED_VALUE = 84;
    /**
     * <code>AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_APPROVED = 85;</code>
     */
    public static final int AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_APPROVED_VALUE = 85;
    /**
     * <code>AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REJECTED = 86;</code>
     */
    public static final int AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REJECTED_VALUE = 86;
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CREATION_REQUESTED = 87;</code>
     */
    public static final int AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CREATION_REQUESTED_VALUE = 87;
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CREATION_APPROVED = 88;</code>
     */
    public static final int AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CREATION_APPROVED_VALUE = 88;
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CREATION_REJECTED = 89;</code>
     */
    public static final int AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CREATION_REJECTED_VALUE = 89;
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_REQUESTED = 90;</code>
     */
    public static final int AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_REQUESTED_VALUE = 90;
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_FAILED = 99;</code>
     */
    public static final int AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_FAILED_VALUE = 99;
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_APPROVED = 91;</code>
     */
    public static final int AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_APPROVED_VALUE = 91;
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_REJECTED = 92;</code>
     */
    public static final int AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_REJECTED_VALUE = 92;
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CHANGE_REQUESTED = 93;</code>
     */
    public static final int AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CHANGE_REQUESTED_VALUE = 93;
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CHANGE_APPROVED = 94;</code>
     */
    public static final int AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CHANGE_APPROVED_VALUE = 94;
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CHANGE_REJECTED = 95;</code>
     */
    public static final int AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CHANGE_REJECTED_VALUE = 95;
    /**
     * <code>AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_EXPORT_REQUESTED = 100;</code>
     */
    public static final int AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_EXPORT_REQUESTED_VALUE = 100;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AuditLogType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static AuditLogType forNumber(int value) {
      switch (value) {
        case 0: return AUDIT_LOG_TYPE_INVALID;
        case 1: return AUDIT_LOG_TYPE_LOGIN;
        case 2: return AUDIT_LOG_TYPE_LOGIN_FAIL;
        case 50: return AUDIT_LOG_TYPE_2FA_FAIL;
        case 3: return AUDIT_LOG_TYPE_LOGOUT;
        case 80: return AUDIT_LOG_TYPE_MAIL_SETTINGS_CHANGE;
        case 4: return AUDIT_LOG_TYPE_WALLET_CREATE;
        case 5: return AUDIT_LOG_TYPE_WALLET_APPROVE;
        case 6: return AUDIT_LOG_TYPE_WALLET_CANCEL;
        case 7: return AUDIT_LOG_TYPE_WALLET_REGISTER_PUBKEY;
        case 8: return AUDIT_LOG_TYPE_WALLET_ARCHIVE;
        case 9: return AUDIT_LOG_TYPE_WALLET_UNARCHIVE;
        case 10: return AUDIT_LOG_TYPE_WALLET_NAME_CHANGE;
        case 11: return AUDIT_LOG_TYPE_WALLET_POLICY_CHANGE;
        case 12: return AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_REQUEST;
        case 13: return AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_APPROVE;
        case 14: return AUDIT_LOG_TYPE_WALLET_NO_WHITELIST_CANCEL;
        case 51: return AUDIT_LOG_TYPE_WALLET_ADDRESS_UPLOAD;
        case 52: return AUDIT_LOG_TYPE_WALLET_ADDRESS_DOWNLOAD;
        case 53: return AUDIT_LOG_TYPE_WALLET_ADDRESS_DELETE;
        case 60: return AUDIT_LOG_TYPE_WALLET_VALIDATOR_CHANGE;
        case 61: return AUDIT_LOG_TYPE_WALLET_VALIDATOR_APPROVE;
        case 62: return AUDIT_LOG_TYPE_WALLET_VALIDATOR_CANCEL;
        case 63: return AUDIT_LOG_TYPE_WALLET_DESTINATION_WALLET_CHANGE;
        case 54: return AUDIT_LOG_TYPE_WALLET_GROUP_CREATE;
        case 55: return AUDIT_LOG_TYPE_WALLET_GROUP_NAME_CHANGE;
        case 56: return AUDIT_LOG_TYPE_WALLET_GROUP_CHANGE;
        case 15: return AUDIT_LOG_TYPE_TRANSACTION_CREATE;
        case 16: return AUDIT_LOG_TYPE_TRANSACTION_APPROVE;
        case 17: return AUDIT_LOG_TYPE_TRANSACTION_CANCEL;
        case 18: return AUDIT_LOG_TYPE_TRANSACTION_REGISTER_SIGNATURE;
        case 19: return AUDIT_LOG_TYPE_TRANSACTION_SUBMIT;
        case 79: return AUDIT_LOG_TYPE_TRANSACTION_RESEND;
        case 98: return AUDIT_LOG_TYPE_TRANSACTION_REPLACE;
        case 20: return AUDIT_LOG_TYPE_ACCOUNT_PASSWORD_CHANGE;
        case 21: return AUDIT_LOG_TYPE_ACCOUNT_EMAIL_CHANGE;
        case 22: return AUDIT_LOG_TYPE_ACCOUNT_INVITE;
        case 23: return AUDIT_LOG_TYPE_ACCOUNT_ARCHIVE;
        case 24: return AUDIT_LOG_TYPE_ACCOUNT_UNARCHIVE;
        case 25: return AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CREATE;
        case 26: return AUDIT_LOG_TYPE_SERVICE_ACCOUNT_CHANGE_PERMISSION;
        case 27: return AUDIT_LOG_TYPE_SERVICE_ACCOUNT_ACTIVATE;
        case 28: return AUDIT_LOG_TYPE_SERVICE_ACCOUNT_INACTIVE;
        case 29: return AUDIT_LOG_TYPE_SERVICE_ACCOUNT_DELETE;
        case 30: return AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_CREATE;
        case 31: return AUDIT_LOG_TYPE_SERVICE_ACCOUNT_KEY_DELETE;
        case 32: return AUDIT_LOG_TYPE_POLICY_ADDRESS_CREATE;
        case 33: return AUDIT_LOG_TYPE_POLICY_ADDRESS_DELETE;
        case 34: return AUDIT_LOG_TYPE_POLICY_ADDRESS_APPROVE;
        case 35: return AUDIT_LOG_TYPE_POLICY_ADDRESS_CANCEL;
        case 36: return AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CREATE;
        case 37: return AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CHANGE;
        case 38: return AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_DELETE;
        case 39: return AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_APPROVE;
        case 40: return AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_CANCEL;
        case 41: return AUDIT_LOG_TYPE_POLICY_WHITELIST_CREATE;
        case 42: return AUDIT_LOG_TYPE_POLICY_WHITELIST_CHANGE;
        case 43: return AUDIT_LOG_TYPE_POLICY_WHITELIST_DELETE;
        case 44: return AUDIT_LOG_TYPE_POLICY_POLICY_CREATE;
        case 45: return AUDIT_LOG_TYPE_POLICY_POLICY_CHANGE;
        case 46: return AUDIT_LOG_TYPE_POLICY_POLICY_DELETE;
        case 47: return AUDIT_LOG_TYPE_POLICY_REQUEST_NO_WHITELIST;
        case 48: return AUDIT_LOG_TYPE_POLICY_APPROVE_NO_WHITELIST;
        case 49: return AUDIT_LOG_TYPE_POLICY_CANCEL_NO_WHITELIST;
        case 64: return AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_CREATE;
        case 65: return AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_APPROVE;
        case 66: return AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_CANCEL;
        case 67: return AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_REGISTER_SIGNATURE;
        case 68: return AUDIT_LOG_TYPE_TRANSACTION_DELEGATE_SUBMIT;
        case 69: return AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_CREATE;
        case 70: return AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_APPROVE;
        case 71: return AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_CANCEL;
        case 72: return AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_REGISTER_SIGNATURE;
        case 73: return AUDIT_LOG_TYPE_TRANSACTION_UNDELEGATE_SUBMIT;
        case 74: return AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_CREATE;
        case 75: return AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_APPROVE;
        case 76: return AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_CANCEL;
        case 77: return AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_REGISTER_SIGNATURE;
        case 78: return AUDIT_LOG_TYPE_TRANSACTION_WITHDRAW_SUBMIT;
        case 96: return AUDIT_LOG_TYPE_PRE_TRANSACTION_APPROVE;
        case 97: return AUDIT_LOG_TYPE_PRE_TRANSACTION_REJECT;
        case 81: return AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REQUESTED;
        case 82: return AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_APPROVED;
        case 83: return AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REJECTED;
        case 84: return AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REQUESTED;
        case 85: return AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_APPROVED;
        case 86: return AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REJECTED;
        case 87: return AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CREATION_REQUESTED;
        case 88: return AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CREATION_APPROVED;
        case 89: return AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CREATION_REJECTED;
        case 90: return AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_REQUESTED;
        case 99: return AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_FAILED;
        case 91: return AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_APPROVED;
        case 92: return AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_REJECTED;
        case 93: return AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CHANGE_REQUESTED;
        case 94: return AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CHANGE_APPROVED;
        case 95: return AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_CHANGE_REJECTED;
        case 100: return AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_STATE_EXPORT_REQUESTED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AuditLogType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        AuditLogType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AuditLogType>() {
            public AuditLogType findValueByNumber(int number) {
              return AuditLogType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(16);
    }

    private static final AuditLogType[] VALUES = values();

    public static AuditLogType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private AuditLogType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.AuditLogType)
  }

  /**
   * <pre>
   * ErrDetailViolationType define violation type of
   * errdetails.PreconditionFailure of grpc
   * </pre>
   *
   * Protobuf enum {@code adamant.global.v1.PreconditionFailureType}
   */
  public enum PreconditionFailureType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PRECONDITION_FAILURE_TYPE_INVALID = 0;</code>
     */
    PRECONDITION_FAILURE_TYPE_INVALID(0),
    /**
     * <pre>
     * authenticator
     * </pre>
     *
     * <code>PRECONDITION_FAILURE_TYPE_MFA_REQUIRED = 1;</code>
     */
    PRECONDITION_FAILURE_TYPE_MFA_REQUIRED(1),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_MFA_NOT_REGISTERED = 2;</code>
     */
    PRECONDITION_FAILURE_TYPE_MFA_NOT_REGISTERED(2),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_USER_NOT_ACTIVE = 3;</code>
     */
    PRECONDITION_FAILURE_TYPE_USER_NOT_ACTIVE(3),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_USER_IS_ARCHIVED = 4;</code>
     */
    PRECONDITION_FAILURE_TYPE_USER_IS_ARCHIVED(4),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_EMAIL_IS_ALREADY_USED = 5;</code>
     */
    PRECONDITION_FAILURE_TYPE_EMAIL_IS_ALREADY_USED(5),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_INVITATION_TOKEN_IS_INVALID = 27;</code>
     */
    PRECONDITION_FAILURE_TYPE_INVITATION_TOKEN_IS_INVALID(27),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_INVITATION_TOKEN_IS_EXPIRED = 28;</code>
     */
    PRECONDITION_FAILURE_TYPE_INVITATION_TOKEN_IS_EXPIRED(28),
    /**
     * <pre>
     * treasurer/gatekeeper
     * </pre>
     *
     * <code>PRECONDITION_FAILURE_TYPE_INSUFFICIENT_SPENDABLE_BALANCE = 6;</code>
     */
    PRECONDITION_FAILURE_TYPE_INSUFFICIENT_SPENDABLE_BALANCE(6),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_HOURLY_LIMIT_EXCEEDED = 7;</code>
     */
    PRECONDITION_FAILURE_TYPE_HOURLY_LIMIT_EXCEEDED(7),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_DAILY_LIMIT_EXCEEDED = 8;</code>
     */
    PRECONDITION_FAILURE_TYPE_DAILY_LIMIT_EXCEEDED(8),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_ONETIME_LIMIT_EXCEEDED = 9;</code>
     */
    PRECONDITION_FAILURE_TYPE_ONETIME_LIMIT_EXCEEDED(9),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_WALLET_NAME_IS_ALREADY_USED = 10;</code>
     */
    PRECONDITION_FAILURE_TYPE_WALLET_NAME_IS_ALREADY_USED(10),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_WALLET_IS_CANCELED = 11;</code>
     */
    PRECONDITION_FAILURE_TYPE_WALLET_IS_CANCELED(11),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_WALLET_IS_ARCHIVED = 12;</code>
     */
    PRECONDITION_FAILURE_TYPE_WALLET_IS_ARCHIVED(12),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_TRANSACTION_IS_CANCELED = 13;</code>
     */
    PRECONDITION_FAILURE_TYPE_TRANSACTION_IS_CANCELED(13),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_PROPOSAL_ALREADY_EXISTS = 14;</code>
     */
    PRECONDITION_FAILURE_TYPE_PROPOSAL_ALREADY_EXISTS(14),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_NO_RATE = 15;</code>
     */
    PRECONDITION_FAILURE_TYPE_NO_RATE(15),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_WHITELIST_OF_BASEPOLICY = 16;</code>
     */
    PRECONDITION_FAILURE_TYPE_WHITELIST_OF_BASEPOLICY(16),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_CANNOT_ARCHIVE_WALLET_WITH_BALANCE = 17;</code>
     */
    PRECONDITION_FAILURE_TYPE_CANNOT_ARCHIVE_WALLET_WITH_BALANCE(17),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_TEMPORARY_INCREASE_IN_FEERATE = 18;</code>
     */
    PRECONDITION_FAILURE_TYPE_TEMPORARY_INCREASE_IN_FEERATE(18),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_INSUFFICIENT_FEE_ACCOUNT_BALANCE = 20;</code>
     */
    PRECONDITION_FAILURE_TYPE_INSUFFICIENT_FEE_ACCOUNT_BALANCE(20),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_CANNOT_FLUSH_BALANCE_DUE_TO_EXISTING_UNCONFIRMED_TRANSFERS = 21;</code>
     */
    PRECONDITION_FAILURE_TYPE_CANNOT_FLUSH_BALANCE_DUE_TO_EXISTING_UNCONFIRMED_TRANSFERS(21),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_WALLET_STATE_IS_FLUSHING = 22;</code>
     */
    PRECONDITION_FAILURE_TYPE_WALLET_STATE_IS_FLUSHING(22),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_WALLET_FLUSH_SETTING_DOES_NOT_EXIST = 23;</code>
     */
    PRECONDITION_FAILURE_TYPE_WALLET_FLUSH_SETTING_DOES_NOT_EXIST(23),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_TRANSACTION_ALREADY_CANCELED = 24;</code>
     */
    PRECONDITION_FAILURE_TYPE_TRANSACTION_ALREADY_CANCELED(24),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_TRANSACTION_ALREADY_SUBMITTED = 25;</code>
     */
    PRECONDITION_FAILURE_TYPE_TRANSACTION_ALREADY_SUBMITTED(25),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_CANNOT_OPERATE_TRANSACTION_DUE_TO_WALLET_STATE_IS_CREATING = 26;</code>
     */
    PRECONDITION_FAILURE_TYPE_CANNOT_OPERATE_TRANSACTION_DUE_TO_WALLET_STATE_IS_CREATING(26),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_TRANSACTION_INCLUDE_SELF_ADDRESS = 29;</code>
     */
    PRECONDITION_FAILURE_TYPE_TRANSACTION_INCLUDE_SELF_ADDRESS(29),
    /**
     * <code>PRECONDITION_FAILURE_TYPE_WALLET_FLUSH_SETTING_DESTINATION_WALLET_ID_DOES_NOT_EXIST = 30;</code>
     */
    PRECONDITION_FAILURE_TYPE_WALLET_FLUSH_SETTING_DESTINATION_WALLET_ID_DOES_NOT_EXIST(30),
    /**
     * <pre>
     * subscription
     * </pre>
     *
     * <code>PRECONDITION_FAILURE_TYPE_PROHIBITED_BY_SUBSCRIPTION = 19;</code>
     */
    PRECONDITION_FAILURE_TYPE_PROHIBITED_BY_SUBSCRIPTION(19),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>PRECONDITION_FAILURE_TYPE_INVALID = 0;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_INVALID_VALUE = 0;
    /**
     * <pre>
     * authenticator
     * </pre>
     *
     * <code>PRECONDITION_FAILURE_TYPE_MFA_REQUIRED = 1;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_MFA_REQUIRED_VALUE = 1;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_MFA_NOT_REGISTERED = 2;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_MFA_NOT_REGISTERED_VALUE = 2;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_USER_NOT_ACTIVE = 3;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_USER_NOT_ACTIVE_VALUE = 3;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_USER_IS_ARCHIVED = 4;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_USER_IS_ARCHIVED_VALUE = 4;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_EMAIL_IS_ALREADY_USED = 5;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_EMAIL_IS_ALREADY_USED_VALUE = 5;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_INVITATION_TOKEN_IS_INVALID = 27;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_INVITATION_TOKEN_IS_INVALID_VALUE = 27;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_INVITATION_TOKEN_IS_EXPIRED = 28;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_INVITATION_TOKEN_IS_EXPIRED_VALUE = 28;
    /**
     * <pre>
     * treasurer/gatekeeper
     * </pre>
     *
     * <code>PRECONDITION_FAILURE_TYPE_INSUFFICIENT_SPENDABLE_BALANCE = 6;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_INSUFFICIENT_SPENDABLE_BALANCE_VALUE = 6;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_HOURLY_LIMIT_EXCEEDED = 7;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_HOURLY_LIMIT_EXCEEDED_VALUE = 7;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_DAILY_LIMIT_EXCEEDED = 8;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_DAILY_LIMIT_EXCEEDED_VALUE = 8;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_ONETIME_LIMIT_EXCEEDED = 9;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_ONETIME_LIMIT_EXCEEDED_VALUE = 9;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_WALLET_NAME_IS_ALREADY_USED = 10;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_WALLET_NAME_IS_ALREADY_USED_VALUE = 10;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_WALLET_IS_CANCELED = 11;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_WALLET_IS_CANCELED_VALUE = 11;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_WALLET_IS_ARCHIVED = 12;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_WALLET_IS_ARCHIVED_VALUE = 12;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_TRANSACTION_IS_CANCELED = 13;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_TRANSACTION_IS_CANCELED_VALUE = 13;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_PROPOSAL_ALREADY_EXISTS = 14;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_PROPOSAL_ALREADY_EXISTS_VALUE = 14;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_NO_RATE = 15;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_NO_RATE_VALUE = 15;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_WHITELIST_OF_BASEPOLICY = 16;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_WHITELIST_OF_BASEPOLICY_VALUE = 16;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_CANNOT_ARCHIVE_WALLET_WITH_BALANCE = 17;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_CANNOT_ARCHIVE_WALLET_WITH_BALANCE_VALUE = 17;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_TEMPORARY_INCREASE_IN_FEERATE = 18;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_TEMPORARY_INCREASE_IN_FEERATE_VALUE = 18;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_INSUFFICIENT_FEE_ACCOUNT_BALANCE = 20;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_INSUFFICIENT_FEE_ACCOUNT_BALANCE_VALUE = 20;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_CANNOT_FLUSH_BALANCE_DUE_TO_EXISTING_UNCONFIRMED_TRANSFERS = 21;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_CANNOT_FLUSH_BALANCE_DUE_TO_EXISTING_UNCONFIRMED_TRANSFERS_VALUE = 21;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_WALLET_STATE_IS_FLUSHING = 22;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_WALLET_STATE_IS_FLUSHING_VALUE = 22;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_WALLET_FLUSH_SETTING_DOES_NOT_EXIST = 23;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_WALLET_FLUSH_SETTING_DOES_NOT_EXIST_VALUE = 23;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_TRANSACTION_ALREADY_CANCELED = 24;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_TRANSACTION_ALREADY_CANCELED_VALUE = 24;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_TRANSACTION_ALREADY_SUBMITTED = 25;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_TRANSACTION_ALREADY_SUBMITTED_VALUE = 25;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_CANNOT_OPERATE_TRANSACTION_DUE_TO_WALLET_STATE_IS_CREATING = 26;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_CANNOT_OPERATE_TRANSACTION_DUE_TO_WALLET_STATE_IS_CREATING_VALUE = 26;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_TRANSACTION_INCLUDE_SELF_ADDRESS = 29;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_TRANSACTION_INCLUDE_SELF_ADDRESS_VALUE = 29;
    /**
     * <code>PRECONDITION_FAILURE_TYPE_WALLET_FLUSH_SETTING_DESTINATION_WALLET_ID_DOES_NOT_EXIST = 30;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_WALLET_FLUSH_SETTING_DESTINATION_WALLET_ID_DOES_NOT_EXIST_VALUE = 30;
    /**
     * <pre>
     * subscription
     * </pre>
     *
     * <code>PRECONDITION_FAILURE_TYPE_PROHIBITED_BY_SUBSCRIPTION = 19;</code>
     */
    public static final int PRECONDITION_FAILURE_TYPE_PROHIBITED_BY_SUBSCRIPTION_VALUE = 19;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PreconditionFailureType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PreconditionFailureType forNumber(int value) {
      switch (value) {
        case 0: return PRECONDITION_FAILURE_TYPE_INVALID;
        case 1: return PRECONDITION_FAILURE_TYPE_MFA_REQUIRED;
        case 2: return PRECONDITION_FAILURE_TYPE_MFA_NOT_REGISTERED;
        case 3: return PRECONDITION_FAILURE_TYPE_USER_NOT_ACTIVE;
        case 4: return PRECONDITION_FAILURE_TYPE_USER_IS_ARCHIVED;
        case 5: return PRECONDITION_FAILURE_TYPE_EMAIL_IS_ALREADY_USED;
        case 27: return PRECONDITION_FAILURE_TYPE_INVITATION_TOKEN_IS_INVALID;
        case 28: return PRECONDITION_FAILURE_TYPE_INVITATION_TOKEN_IS_EXPIRED;
        case 6: return PRECONDITION_FAILURE_TYPE_INSUFFICIENT_SPENDABLE_BALANCE;
        case 7: return PRECONDITION_FAILURE_TYPE_HOURLY_LIMIT_EXCEEDED;
        case 8: return PRECONDITION_FAILURE_TYPE_DAILY_LIMIT_EXCEEDED;
        case 9: return PRECONDITION_FAILURE_TYPE_ONETIME_LIMIT_EXCEEDED;
        case 10: return PRECONDITION_FAILURE_TYPE_WALLET_NAME_IS_ALREADY_USED;
        case 11: return PRECONDITION_FAILURE_TYPE_WALLET_IS_CANCELED;
        case 12: return PRECONDITION_FAILURE_TYPE_WALLET_IS_ARCHIVED;
        case 13: return PRECONDITION_FAILURE_TYPE_TRANSACTION_IS_CANCELED;
        case 14: return PRECONDITION_FAILURE_TYPE_PROPOSAL_ALREADY_EXISTS;
        case 15: return PRECONDITION_FAILURE_TYPE_NO_RATE;
        case 16: return PRECONDITION_FAILURE_TYPE_WHITELIST_OF_BASEPOLICY;
        case 17: return PRECONDITION_FAILURE_TYPE_CANNOT_ARCHIVE_WALLET_WITH_BALANCE;
        case 18: return PRECONDITION_FAILURE_TYPE_TEMPORARY_INCREASE_IN_FEERATE;
        case 20: return PRECONDITION_FAILURE_TYPE_INSUFFICIENT_FEE_ACCOUNT_BALANCE;
        case 21: return PRECONDITION_FAILURE_TYPE_CANNOT_FLUSH_BALANCE_DUE_TO_EXISTING_UNCONFIRMED_TRANSFERS;
        case 22: return PRECONDITION_FAILURE_TYPE_WALLET_STATE_IS_FLUSHING;
        case 23: return PRECONDITION_FAILURE_TYPE_WALLET_FLUSH_SETTING_DOES_NOT_EXIST;
        case 24: return PRECONDITION_FAILURE_TYPE_TRANSACTION_ALREADY_CANCELED;
        case 25: return PRECONDITION_FAILURE_TYPE_TRANSACTION_ALREADY_SUBMITTED;
        case 26: return PRECONDITION_FAILURE_TYPE_CANNOT_OPERATE_TRANSACTION_DUE_TO_WALLET_STATE_IS_CREATING;
        case 29: return PRECONDITION_FAILURE_TYPE_TRANSACTION_INCLUDE_SELF_ADDRESS;
        case 30: return PRECONDITION_FAILURE_TYPE_WALLET_FLUSH_SETTING_DESTINATION_WALLET_ID_DOES_NOT_EXIST;
        case 19: return PRECONDITION_FAILURE_TYPE_PROHIBITED_BY_SUBSCRIPTION;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PreconditionFailureType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PreconditionFailureType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PreconditionFailureType>() {
            public PreconditionFailureType findValueByNumber(int number) {
              return PreconditionFailureType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(17);
    }

    private static final PreconditionFailureType[] VALUES = values();

    public static PreconditionFailureType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PreconditionFailureType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.PreconditionFailureType)
  }

  /**
   * Protobuf enum {@code adamant.global.v1.ListFilterType}
   */
  public enum ListFilterType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>LIST_FILTER_TYPE_INVALID = 0;</code>
     */
    LIST_FILTER_TYPE_INVALID(0),
    /**
     * <code>LIST_FILTER_TYPE_WALLET_ID = 1;</code>
     */
    LIST_FILTER_TYPE_WALLET_ID(1),
    /**
     * <code>LIST_FILTER_TYPE_WALLET_NAME = 2;</code>
     */
    LIST_FILTER_TYPE_WALLET_NAME(2),
    /**
     * <code>LIST_FILTER_TYPE_WALLET_ADDRESS = 3;</code>
     */
    LIST_FILTER_TYPE_WALLET_ADDRESS(3),
    /**
     * <code>LIST_FILTER_TYPE_TRANSACTION_ID = 4;</code>
     */
    LIST_FILTER_TYPE_TRANSACTION_ID(4),
    /**
     * <code>LIST_FILTER_TYPE_TRANSFER_ID = 5;</code>
     */
    LIST_FILTER_TYPE_TRANSFER_ID(5),
    /**
     * <code>LIST_FILTER_TYPE_ADDRESS_NAME = 6;</code>
     */
    LIST_FILTER_TYPE_ADDRESS_NAME(6),
    /**
     * <code>LIST_FILTER_TYPE_ADDRESS = 7;</code>
     */
    LIST_FILTER_TYPE_ADDRESS(7),
    /**
     * <code>LIST_FILTER_TYPE_TXID = 8;</code>
     */
    LIST_FILTER_TYPE_TXID(8),
    /**
     * <code>LIST_FILTER_TYPE_OWNER_ID = 9;</code>
     */
    LIST_FILTER_TYPE_OWNER_ID(9),
    /**
     * <code>LIST_FILTER_TYPE_WALLET_ID_CREATE_TIME = 10;</code>
     */
    LIST_FILTER_TYPE_WALLET_ID_CREATE_TIME(10),
    /**
     * <code>LIST_FILTER_TYPE_POLICY_ID = 11;</code>
     */
    LIST_FILTER_TYPE_POLICY_ID(11),
    /**
     * <code>LIST_FILTER_TYPE_POLICY_NAME = 12;</code>
     */
    LIST_FILTER_TYPE_POLICY_NAME(12),
    /**
     * <code>LIST_FILTER_TYPE_ADDRESS_ID = 13;</code>
     */
    LIST_FILTER_TYPE_ADDRESS_ID(13),
    /**
     * <code>LIST_FILTER_TYPE_WHITELIST_ID = 14;</code>
     */
    LIST_FILTER_TYPE_WHITELIST_ID(14),
    /**
     * <code>LIST_FILTER_TYPE_WHITELIST_NAME = 15;</code>
     */
    LIST_FILTER_TYPE_WHITELIST_NAME(15),
    /**
     * <code>LIST_FILTER_TYPE_TRANSFER_LIMIT_ID = 16;</code>
     */
    LIST_FILTER_TYPE_TRANSFER_LIMIT_ID(16),
    /**
     * <code>LIST_FILTER_TYPE_TRANSFER_LIMIT_NAME = 17;</code>
     */
    LIST_FILTER_TYPE_TRANSFER_LIMIT_NAME(17),
    /**
     * <pre>
     * 例: validatorのpublic key
     * </pre>
     *
     * <code>LIST_FILTER_TYPE_VALIDATOR_ID = 18;</code>
     */
    LIST_FILTER_TYPE_VALIDATOR_ID(18),
    /**
     * <code>LIST_FILTER_TYPE_BLOCK_HASH = 19;</code>
     */
    LIST_FILTER_TYPE_BLOCK_HASH(19),
    /**
     * <pre>
     * db上のstaking_validator_id
     * </pre>
     *
     * <code>LIST_FILTER_TYPE_STAKING_VALIDATOR_ID = 20;</code>
     */
    LIST_FILTER_TYPE_STAKING_VALIDATOR_ID(20),
    /**
     * <pre>
     * db上のstaking_history_id
     * </pre>
     *
     * <code>LIST_FILTER_TYPE_STAKING_HISTORY_ID = 21;</code>
     */
    LIST_FILTER_TYPE_STAKING_HISTORY_ID(21),
    /**
     * <code>LIST_FILTER_TYPE_PRE_TRANSACTION_THRESHOLD_ID = 22;</code>
     */
    LIST_FILTER_TYPE_PRE_TRANSACTION_THRESHOLD_ID(22),
    /**
     * <code>LIST_FILTER_TYPE_BLACKLIST_ADDRESS_ID = 23;</code>
     */
    LIST_FILTER_TYPE_BLACKLIST_ADDRESS_ID(23),
    /**
     * <code>LIST_FILTER_TYPE_PRE_TRANSACTION_ID = 24;</code>
     */
    LIST_FILTER_TYPE_PRE_TRANSACTION_ID(24),
    /**
     * <code>LIST_FILTER_TYPE_EXTERNAL_ID = 25;</code>
     */
    LIST_FILTER_TYPE_EXTERNAL_ID(25),
    /**
     * <code>LIST_FILTER_TYPE_FILE_ID = 26;</code>
     */
    LIST_FILTER_TYPE_FILE_ID(26),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>LIST_FILTER_TYPE_INVALID = 0;</code>
     */
    public static final int LIST_FILTER_TYPE_INVALID_VALUE = 0;
    /**
     * <code>LIST_FILTER_TYPE_WALLET_ID = 1;</code>
     */
    public static final int LIST_FILTER_TYPE_WALLET_ID_VALUE = 1;
    /**
     * <code>LIST_FILTER_TYPE_WALLET_NAME = 2;</code>
     */
    public static final int LIST_FILTER_TYPE_WALLET_NAME_VALUE = 2;
    /**
     * <code>LIST_FILTER_TYPE_WALLET_ADDRESS = 3;</code>
     */
    public static final int LIST_FILTER_TYPE_WALLET_ADDRESS_VALUE = 3;
    /**
     * <code>LIST_FILTER_TYPE_TRANSACTION_ID = 4;</code>
     */
    public static final int LIST_FILTER_TYPE_TRANSACTION_ID_VALUE = 4;
    /**
     * <code>LIST_FILTER_TYPE_TRANSFER_ID = 5;</code>
     */
    public static final int LIST_FILTER_TYPE_TRANSFER_ID_VALUE = 5;
    /**
     * <code>LIST_FILTER_TYPE_ADDRESS_NAME = 6;</code>
     */
    public static final int LIST_FILTER_TYPE_ADDRESS_NAME_VALUE = 6;
    /**
     * <code>LIST_FILTER_TYPE_ADDRESS = 7;</code>
     */
    public static final int LIST_FILTER_TYPE_ADDRESS_VALUE = 7;
    /**
     * <code>LIST_FILTER_TYPE_TXID = 8;</code>
     */
    public static final int LIST_FILTER_TYPE_TXID_VALUE = 8;
    /**
     * <code>LIST_FILTER_TYPE_OWNER_ID = 9;</code>
     */
    public static final int LIST_FILTER_TYPE_OWNER_ID_VALUE = 9;
    /**
     * <code>LIST_FILTER_TYPE_WALLET_ID_CREATE_TIME = 10;</code>
     */
    public static final int LIST_FILTER_TYPE_WALLET_ID_CREATE_TIME_VALUE = 10;
    /**
     * <code>LIST_FILTER_TYPE_POLICY_ID = 11;</code>
     */
    public static final int LIST_FILTER_TYPE_POLICY_ID_VALUE = 11;
    /**
     * <code>LIST_FILTER_TYPE_POLICY_NAME = 12;</code>
     */
    public static final int LIST_FILTER_TYPE_POLICY_NAME_VALUE = 12;
    /**
     * <code>LIST_FILTER_TYPE_ADDRESS_ID = 13;</code>
     */
    public static final int LIST_FILTER_TYPE_ADDRESS_ID_VALUE = 13;
    /**
     * <code>LIST_FILTER_TYPE_WHITELIST_ID = 14;</code>
     */
    public static final int LIST_FILTER_TYPE_WHITELIST_ID_VALUE = 14;
    /**
     * <code>LIST_FILTER_TYPE_WHITELIST_NAME = 15;</code>
     */
    public static final int LIST_FILTER_TYPE_WHITELIST_NAME_VALUE = 15;
    /**
     * <code>LIST_FILTER_TYPE_TRANSFER_LIMIT_ID = 16;</code>
     */
    public static final int LIST_FILTER_TYPE_TRANSFER_LIMIT_ID_VALUE = 16;
    /**
     * <code>LIST_FILTER_TYPE_TRANSFER_LIMIT_NAME = 17;</code>
     */
    public static final int LIST_FILTER_TYPE_TRANSFER_LIMIT_NAME_VALUE = 17;
    /**
     * <pre>
     * 例: validatorのpublic key
     * </pre>
     *
     * <code>LIST_FILTER_TYPE_VALIDATOR_ID = 18;</code>
     */
    public static final int LIST_FILTER_TYPE_VALIDATOR_ID_VALUE = 18;
    /**
     * <code>LIST_FILTER_TYPE_BLOCK_HASH = 19;</code>
     */
    public static final int LIST_FILTER_TYPE_BLOCK_HASH_VALUE = 19;
    /**
     * <pre>
     * db上のstaking_validator_id
     * </pre>
     *
     * <code>LIST_FILTER_TYPE_STAKING_VALIDATOR_ID = 20;</code>
     */
    public static final int LIST_FILTER_TYPE_STAKING_VALIDATOR_ID_VALUE = 20;
    /**
     * <pre>
     * db上のstaking_history_id
     * </pre>
     *
     * <code>LIST_FILTER_TYPE_STAKING_HISTORY_ID = 21;</code>
     */
    public static final int LIST_FILTER_TYPE_STAKING_HISTORY_ID_VALUE = 21;
    /**
     * <code>LIST_FILTER_TYPE_PRE_TRANSACTION_THRESHOLD_ID = 22;</code>
     */
    public static final int LIST_FILTER_TYPE_PRE_TRANSACTION_THRESHOLD_ID_VALUE = 22;
    /**
     * <code>LIST_FILTER_TYPE_BLACKLIST_ADDRESS_ID = 23;</code>
     */
    public static final int LIST_FILTER_TYPE_BLACKLIST_ADDRESS_ID_VALUE = 23;
    /**
     * <code>LIST_FILTER_TYPE_PRE_TRANSACTION_ID = 24;</code>
     */
    public static final int LIST_FILTER_TYPE_PRE_TRANSACTION_ID_VALUE = 24;
    /**
     * <code>LIST_FILTER_TYPE_EXTERNAL_ID = 25;</code>
     */
    public static final int LIST_FILTER_TYPE_EXTERNAL_ID_VALUE = 25;
    /**
     * <code>LIST_FILTER_TYPE_FILE_ID = 26;</code>
     */
    public static final int LIST_FILTER_TYPE_FILE_ID_VALUE = 26;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ListFilterType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ListFilterType forNumber(int value) {
      switch (value) {
        case 0: return LIST_FILTER_TYPE_INVALID;
        case 1: return LIST_FILTER_TYPE_WALLET_ID;
        case 2: return LIST_FILTER_TYPE_WALLET_NAME;
        case 3: return LIST_FILTER_TYPE_WALLET_ADDRESS;
        case 4: return LIST_FILTER_TYPE_TRANSACTION_ID;
        case 5: return LIST_FILTER_TYPE_TRANSFER_ID;
        case 6: return LIST_FILTER_TYPE_ADDRESS_NAME;
        case 7: return LIST_FILTER_TYPE_ADDRESS;
        case 8: return LIST_FILTER_TYPE_TXID;
        case 9: return LIST_FILTER_TYPE_OWNER_ID;
        case 10: return LIST_FILTER_TYPE_WALLET_ID_CREATE_TIME;
        case 11: return LIST_FILTER_TYPE_POLICY_ID;
        case 12: return LIST_FILTER_TYPE_POLICY_NAME;
        case 13: return LIST_FILTER_TYPE_ADDRESS_ID;
        case 14: return LIST_FILTER_TYPE_WHITELIST_ID;
        case 15: return LIST_FILTER_TYPE_WHITELIST_NAME;
        case 16: return LIST_FILTER_TYPE_TRANSFER_LIMIT_ID;
        case 17: return LIST_FILTER_TYPE_TRANSFER_LIMIT_NAME;
        case 18: return LIST_FILTER_TYPE_VALIDATOR_ID;
        case 19: return LIST_FILTER_TYPE_BLOCK_HASH;
        case 20: return LIST_FILTER_TYPE_STAKING_VALIDATOR_ID;
        case 21: return LIST_FILTER_TYPE_STAKING_HISTORY_ID;
        case 22: return LIST_FILTER_TYPE_PRE_TRANSACTION_THRESHOLD_ID;
        case 23: return LIST_FILTER_TYPE_BLACKLIST_ADDRESS_ID;
        case 24: return LIST_FILTER_TYPE_PRE_TRANSACTION_ID;
        case 25: return LIST_FILTER_TYPE_EXTERNAL_ID;
        case 26: return LIST_FILTER_TYPE_FILE_ID;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ListFilterType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ListFilterType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ListFilterType>() {
            public ListFilterType findValueByNumber(int number) {
              return ListFilterType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(18);
    }

    private static final ListFilterType[] VALUES = values();

    public static ListFilterType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ListFilterType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.ListFilterType)
  }

  /**
   * Protobuf enum {@code adamant.global.v1.MailType}
   */
  public enum MailType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MAIL_TYPE_INVALID = 0;</code>
     */
    MAIL_TYPE_INVALID(0),
    /**
     * <code>MAIL_TYPE_USER_INVITED = 1;</code>
     */
    MAIL_TYPE_USER_INVITED(1),
    /**
     * <code>MAIL_TYPE_PASSWORD_RESET_REQUEST = 2;</code>
     */
    MAIL_TYPE_PASSWORD_RESET_REQUEST(2),
    /**
     * <code>MAIL_TYPE_PASSWORD_UPDATED = 3;</code>
     */
    MAIL_TYPE_PASSWORD_UPDATED(3),
    /**
     * <code>MAIL_TYPE_EMAIL_UPDATE_REQUEST = 4;</code>
     */
    MAIL_TYPE_EMAIL_UPDATE_REQUEST(4),
    /**
     * <code>MAIL_TYPE_EMAIL_UPDATED = 5;</code>
     */
    MAIL_TYPE_EMAIL_UPDATED(5),
    /**
     * <code>MAIL_TYPE_FRAUD_TRANSACTION_SUBMITTED = 6;</code>
     */
    MAIL_TYPE_FRAUD_TRANSACTION_SUBMITTED(6),
    /**
     * <code>MAIL_TYPE_IMPORT_ADDRESS_COMPLETED = 7;</code>
     */
    MAIL_TYPE_IMPORT_ADDRESS_COMPLETED(7),
    /**
     * <code>MAIL_TYPE_VALIDATOR_CHANGE_REQUESTED = 8;</code>
     */
    MAIL_TYPE_VALIDATOR_CHANGE_REQUESTED(8),
    /**
     * <code>MAIL_TYPE_UNCHECKED_TRANSFER_EXISTS = 9;</code>
     */
    MAIL_TYPE_UNCHECKED_TRANSFER_EXISTS(9),
    /**
     * <code>MAIL_TYPE_DOWNLOAD_RESOURCE = 10;</code>
     */
    MAIL_TYPE_DOWNLOAD_RESOURCE(10),
    /**
     * <code>MAIL_TYPE_TRANSFER_RECEIVED = 11;</code>
     */
    MAIL_TYPE_TRANSFER_RECEIVED(11),
    /**
     * <code>MAIL_TYPE_PRE_TRANSACTION_APPROVED = 29;</code>
     */
    MAIL_TYPE_PRE_TRANSACTION_APPROVED(29),
    /**
     * <code>MAIL_TYPE_PRE_TRANSACTION_REJECTED = 30;</code>
     */
    MAIL_TYPE_PRE_TRANSACTION_REJECTED(30),
    /**
     * <code>MAIL_TYPE_TRANSACTION_CREATED = 12;</code>
     */
    MAIL_TYPE_TRANSACTION_CREATED(12),
    /**
     * <code>MAIL_TYPE_TRANSACTION_SUBMITTED = 13;</code>
     */
    MAIL_TYPE_TRANSACTION_SUBMITTED(13),
    /**
     * <code>MAIL_TYPE_TRANSACTION_RESENT = 20;</code>
     */
    MAIL_TYPE_TRANSACTION_RESENT(20),
    /**
     * <code>MAIL_TYPE_VALIDATOR_APPROVED = 14;</code>
     */
    MAIL_TYPE_VALIDATOR_APPROVED(14),
    /**
     * <code>MAIL_TYPE_VALIDATOR_CANCELED = 15;</code>
     */
    MAIL_TYPE_VALIDATOR_CANCELED(15),
    /**
     * <code>MAIL_TYPE_WALLET_POLICY_CHANGED = 16;</code>
     */
    MAIL_TYPE_WALLET_POLICY_CHANGED(16),
    /**
     * <code>MAIL_TYPE_WALLET_NO_WHITELIST_REQUESTED = 17;</code>
     */
    MAIL_TYPE_WALLET_NO_WHITELIST_REQUESTED(17),
    /**
     * <code>MAIL_TYPE_WALLET_NO_WHITELIST_APPROVED = 18;</code>
     */
    MAIL_TYPE_WALLET_NO_WHITELIST_APPROVED(18),
    /**
     * <code>MAIL_TYPE_WALLET_NO_WHITELIST_CANCELED = 19;</code>
     */
    MAIL_TYPE_WALLET_NO_WHITELIST_CANCELED(19),
    /**
     * <code>MAIL_TYPE_MAIL_SETTINGS_UPDATED = 21;</code>
     */
    MAIL_TYPE_MAIL_SETTINGS_UPDATED(21),
    /**
     * <code>MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REQUESTED = 22;</code>
     */
    MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REQUESTED(22),
    /**
     * <code>MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_APPROVED = 23;</code>
     */
    MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_APPROVED(23),
    /**
     * <code>MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REJECTED = 24;</code>
     */
    MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REJECTED(24),
    /**
     * <code>MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REQUESTED = 25;</code>
     */
    MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REQUESTED(25),
    /**
     * <code>MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_APPROVED = 26;</code>
     */
    MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_APPROVED(26),
    /**
     * <code>MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REJECTED = 27;</code>
     */
    MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REJECTED(27),
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_CREATION_REQUESTED = 31;</code>
     */
    MAIL_TYPE_BLACKLIST_ADDRESS_CREATION_REQUESTED(31),
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_CREATION_APPROVED = 32;</code>
     */
    MAIL_TYPE_BLACKLIST_ADDRESS_CREATION_APPROVED(32),
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_CREATION_REJECTED = 33;</code>
     */
    MAIL_TYPE_BLACKLIST_ADDRESS_CREATION_REJECTED(33),
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_REQUESTED = 34;</code>
     */
    MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_REQUESTED(34),
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_FAILED = 35;</code>
     */
    MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_FAILED(35),
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_APPROVED = 36;</code>
     */
    MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_APPROVED(36),
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_REJECTED = 37;</code>
     */
    MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_REJECTED(37),
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_CHANGE_REQUESTED = 38;</code>
     */
    MAIL_TYPE_BLACKLIST_ADDRESS_CHANGE_REQUESTED(38),
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_CHANGE_APPROVED = 39;</code>
     */
    MAIL_TYPE_BLACKLIST_ADDRESS_CHANGE_APPROVED(39),
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_CHANGE_REJECTED = 40;</code>
     */
    MAIL_TYPE_BLACKLIST_ADDRESS_CHANGE_REJECTED(40),
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_EXPORT_REQUESTED = 41;</code>
     */
    MAIL_TYPE_BLACKLIST_ADDRESS_EXPORT_REQUESTED(41),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>MAIL_TYPE_INVALID = 0;</code>
     */
    public static final int MAIL_TYPE_INVALID_VALUE = 0;
    /**
     * <code>MAIL_TYPE_USER_INVITED = 1;</code>
     */
    public static final int MAIL_TYPE_USER_INVITED_VALUE = 1;
    /**
     * <code>MAIL_TYPE_PASSWORD_RESET_REQUEST = 2;</code>
     */
    public static final int MAIL_TYPE_PASSWORD_RESET_REQUEST_VALUE = 2;
    /**
     * <code>MAIL_TYPE_PASSWORD_UPDATED = 3;</code>
     */
    public static final int MAIL_TYPE_PASSWORD_UPDATED_VALUE = 3;
    /**
     * <code>MAIL_TYPE_EMAIL_UPDATE_REQUEST = 4;</code>
     */
    public static final int MAIL_TYPE_EMAIL_UPDATE_REQUEST_VALUE = 4;
    /**
     * <code>MAIL_TYPE_EMAIL_UPDATED = 5;</code>
     */
    public static final int MAIL_TYPE_EMAIL_UPDATED_VALUE = 5;
    /**
     * <code>MAIL_TYPE_FRAUD_TRANSACTION_SUBMITTED = 6;</code>
     */
    public static final int MAIL_TYPE_FRAUD_TRANSACTION_SUBMITTED_VALUE = 6;
    /**
     * <code>MAIL_TYPE_IMPORT_ADDRESS_COMPLETED = 7;</code>
     */
    public static final int MAIL_TYPE_IMPORT_ADDRESS_COMPLETED_VALUE = 7;
    /**
     * <code>MAIL_TYPE_VALIDATOR_CHANGE_REQUESTED = 8;</code>
     */
    public static final int MAIL_TYPE_VALIDATOR_CHANGE_REQUESTED_VALUE = 8;
    /**
     * <code>MAIL_TYPE_UNCHECKED_TRANSFER_EXISTS = 9;</code>
     */
    public static final int MAIL_TYPE_UNCHECKED_TRANSFER_EXISTS_VALUE = 9;
    /**
     * <code>MAIL_TYPE_DOWNLOAD_RESOURCE = 10;</code>
     */
    public static final int MAIL_TYPE_DOWNLOAD_RESOURCE_VALUE = 10;
    /**
     * <code>MAIL_TYPE_TRANSFER_RECEIVED = 11;</code>
     */
    public static final int MAIL_TYPE_TRANSFER_RECEIVED_VALUE = 11;
    /**
     * <code>MAIL_TYPE_PRE_TRANSACTION_APPROVED = 29;</code>
     */
    public static final int MAIL_TYPE_PRE_TRANSACTION_APPROVED_VALUE = 29;
    /**
     * <code>MAIL_TYPE_PRE_TRANSACTION_REJECTED = 30;</code>
     */
    public static final int MAIL_TYPE_PRE_TRANSACTION_REJECTED_VALUE = 30;
    /**
     * <code>MAIL_TYPE_TRANSACTION_CREATED = 12;</code>
     */
    public static final int MAIL_TYPE_TRANSACTION_CREATED_VALUE = 12;
    /**
     * <code>MAIL_TYPE_TRANSACTION_SUBMITTED = 13;</code>
     */
    public static final int MAIL_TYPE_TRANSACTION_SUBMITTED_VALUE = 13;
    /**
     * <code>MAIL_TYPE_TRANSACTION_RESENT = 20;</code>
     */
    public static final int MAIL_TYPE_TRANSACTION_RESENT_VALUE = 20;
    /**
     * <code>MAIL_TYPE_VALIDATOR_APPROVED = 14;</code>
     */
    public static final int MAIL_TYPE_VALIDATOR_APPROVED_VALUE = 14;
    /**
     * <code>MAIL_TYPE_VALIDATOR_CANCELED = 15;</code>
     */
    public static final int MAIL_TYPE_VALIDATOR_CANCELED_VALUE = 15;
    /**
     * <code>MAIL_TYPE_WALLET_POLICY_CHANGED = 16;</code>
     */
    public static final int MAIL_TYPE_WALLET_POLICY_CHANGED_VALUE = 16;
    /**
     * <code>MAIL_TYPE_WALLET_NO_WHITELIST_REQUESTED = 17;</code>
     */
    public static final int MAIL_TYPE_WALLET_NO_WHITELIST_REQUESTED_VALUE = 17;
    /**
     * <code>MAIL_TYPE_WALLET_NO_WHITELIST_APPROVED = 18;</code>
     */
    public static final int MAIL_TYPE_WALLET_NO_WHITELIST_APPROVED_VALUE = 18;
    /**
     * <code>MAIL_TYPE_WALLET_NO_WHITELIST_CANCELED = 19;</code>
     */
    public static final int MAIL_TYPE_WALLET_NO_WHITELIST_CANCELED_VALUE = 19;
    /**
     * <code>MAIL_TYPE_MAIL_SETTINGS_UPDATED = 21;</code>
     */
    public static final int MAIL_TYPE_MAIL_SETTINGS_UPDATED_VALUE = 21;
    /**
     * <code>MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REQUESTED = 22;</code>
     */
    public static final int MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REQUESTED_VALUE = 22;
    /**
     * <code>MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_APPROVED = 23;</code>
     */
    public static final int MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_APPROVED_VALUE = 23;
    /**
     * <code>MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REJECTED = 24;</code>
     */
    public static final int MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REJECTED_VALUE = 24;
    /**
     * <code>MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REQUESTED = 25;</code>
     */
    public static final int MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REQUESTED_VALUE = 25;
    /**
     * <code>MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_APPROVED = 26;</code>
     */
    public static final int MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_APPROVED_VALUE = 26;
    /**
     * <code>MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REJECTED = 27;</code>
     */
    public static final int MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REJECTED_VALUE = 27;
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_CREATION_REQUESTED = 31;</code>
     */
    public static final int MAIL_TYPE_BLACKLIST_ADDRESS_CREATION_REQUESTED_VALUE = 31;
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_CREATION_APPROVED = 32;</code>
     */
    public static final int MAIL_TYPE_BLACKLIST_ADDRESS_CREATION_APPROVED_VALUE = 32;
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_CREATION_REJECTED = 33;</code>
     */
    public static final int MAIL_TYPE_BLACKLIST_ADDRESS_CREATION_REJECTED_VALUE = 33;
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_REQUESTED = 34;</code>
     */
    public static final int MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_REQUESTED_VALUE = 34;
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_FAILED = 35;</code>
     */
    public static final int MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_FAILED_VALUE = 35;
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_APPROVED = 36;</code>
     */
    public static final int MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_APPROVED_VALUE = 36;
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_REJECTED = 37;</code>
     */
    public static final int MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_REJECTED_VALUE = 37;
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_CHANGE_REQUESTED = 38;</code>
     */
    public static final int MAIL_TYPE_BLACKLIST_ADDRESS_CHANGE_REQUESTED_VALUE = 38;
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_CHANGE_APPROVED = 39;</code>
     */
    public static final int MAIL_TYPE_BLACKLIST_ADDRESS_CHANGE_APPROVED_VALUE = 39;
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_CHANGE_REJECTED = 40;</code>
     */
    public static final int MAIL_TYPE_BLACKLIST_ADDRESS_CHANGE_REJECTED_VALUE = 40;
    /**
     * <code>MAIL_TYPE_BLACKLIST_ADDRESS_EXPORT_REQUESTED = 41;</code>
     */
    public static final int MAIL_TYPE_BLACKLIST_ADDRESS_EXPORT_REQUESTED_VALUE = 41;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MailType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static MailType forNumber(int value) {
      switch (value) {
        case 0: return MAIL_TYPE_INVALID;
        case 1: return MAIL_TYPE_USER_INVITED;
        case 2: return MAIL_TYPE_PASSWORD_RESET_REQUEST;
        case 3: return MAIL_TYPE_PASSWORD_UPDATED;
        case 4: return MAIL_TYPE_EMAIL_UPDATE_REQUEST;
        case 5: return MAIL_TYPE_EMAIL_UPDATED;
        case 6: return MAIL_TYPE_FRAUD_TRANSACTION_SUBMITTED;
        case 7: return MAIL_TYPE_IMPORT_ADDRESS_COMPLETED;
        case 8: return MAIL_TYPE_VALIDATOR_CHANGE_REQUESTED;
        case 9: return MAIL_TYPE_UNCHECKED_TRANSFER_EXISTS;
        case 10: return MAIL_TYPE_DOWNLOAD_RESOURCE;
        case 11: return MAIL_TYPE_TRANSFER_RECEIVED;
        case 29: return MAIL_TYPE_PRE_TRANSACTION_APPROVED;
        case 30: return MAIL_TYPE_PRE_TRANSACTION_REJECTED;
        case 12: return MAIL_TYPE_TRANSACTION_CREATED;
        case 13: return MAIL_TYPE_TRANSACTION_SUBMITTED;
        case 20: return MAIL_TYPE_TRANSACTION_RESENT;
        case 14: return MAIL_TYPE_VALIDATOR_APPROVED;
        case 15: return MAIL_TYPE_VALIDATOR_CANCELED;
        case 16: return MAIL_TYPE_WALLET_POLICY_CHANGED;
        case 17: return MAIL_TYPE_WALLET_NO_WHITELIST_REQUESTED;
        case 18: return MAIL_TYPE_WALLET_NO_WHITELIST_APPROVED;
        case 19: return MAIL_TYPE_WALLET_NO_WHITELIST_CANCELED;
        case 21: return MAIL_TYPE_MAIL_SETTINGS_UPDATED;
        case 22: return MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REQUESTED;
        case 23: return MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_APPROVED;
        case 24: return MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION_REJECTED;
        case 25: return MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REQUESTED;
        case 26: return MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_APPROVED;
        case 27: return MAIL_TYPE_PRE_TRANSACTION_THRESHOLD_CHANGE_REJECTED;
        case 31: return MAIL_TYPE_BLACKLIST_ADDRESS_CREATION_REQUESTED;
        case 32: return MAIL_TYPE_BLACKLIST_ADDRESS_CREATION_APPROVED;
        case 33: return MAIL_TYPE_BLACKLIST_ADDRESS_CREATION_REJECTED;
        case 34: return MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_REQUESTED;
        case 35: return MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_FAILED;
        case 36: return MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_APPROVED;
        case 37: return MAIL_TYPE_BLACKLIST_ADDRESS_IMPORT_REJECTED;
        case 38: return MAIL_TYPE_BLACKLIST_ADDRESS_CHANGE_REQUESTED;
        case 39: return MAIL_TYPE_BLACKLIST_ADDRESS_CHANGE_APPROVED;
        case 40: return MAIL_TYPE_BLACKLIST_ADDRESS_CHANGE_REJECTED;
        case 41: return MAIL_TYPE_BLACKLIST_ADDRESS_EXPORT_REQUESTED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MailType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        MailType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MailType>() {
            public MailType findValueByNumber(int number) {
              return MailType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(19);
    }

    private static final MailType[] VALUES = values();

    public static MailType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private MailType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.MailType)
  }

  /**
   * Protobuf enum {@code adamant.global.v1.WatchOnlyAddressState}
   */
  public enum WatchOnlyAddressState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>WATCH_ONLY_ADDRESS_STATE_INVALID = 0;</code>
     */
    WATCH_ONLY_ADDRESS_STATE_INVALID(0),
    /**
     * <code>WATCH_ONLY_ADDRESS_STATE_ADDRESS_IMPORTING = 1;</code>
     */
    WATCH_ONLY_ADDRESS_STATE_ADDRESS_IMPORTING(1),
    /**
     * <code>WATCH_ONLY_ADDRESS_STATE_ADDRESS_IMPORTED = 2;</code>
     */
    WATCH_ONLY_ADDRESS_STATE_ADDRESS_IMPORTED(2),
    /**
     * <code>WATCH_ONLY_ADDRESS_STATE_IMPORT_FAILED = 3;</code>
     */
    WATCH_ONLY_ADDRESS_STATE_IMPORT_FAILED(3),
    /**
     * <code>WATCH_ONLY_ADDRESS_STATE_ADDRESS_DELETING = 4;</code>
     */
    WATCH_ONLY_ADDRESS_STATE_ADDRESS_DELETING(4),
    /**
     * <code>WATCH_ONLY_ADDRESS_STATE_ADDRESS_DELETED = 5;</code>
     */
    WATCH_ONLY_ADDRESS_STATE_ADDRESS_DELETED(5),
    /**
     * <code>WATCH_ONLY_ADDRESS_STATE_DELETE_FAILED = 6;</code>
     */
    WATCH_ONLY_ADDRESS_STATE_DELETE_FAILED(6),
    /**
     * <code>WATCH_ONLY_ADDRESS_STATE_DOWNLOAD = 7;</code>
     */
    WATCH_ONLY_ADDRESS_STATE_DOWNLOAD(7),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>WATCH_ONLY_ADDRESS_STATE_INVALID = 0;</code>
     */
    public static final int WATCH_ONLY_ADDRESS_STATE_INVALID_VALUE = 0;
    /**
     * <code>WATCH_ONLY_ADDRESS_STATE_ADDRESS_IMPORTING = 1;</code>
     */
    public static final int WATCH_ONLY_ADDRESS_STATE_ADDRESS_IMPORTING_VALUE = 1;
    /**
     * <code>WATCH_ONLY_ADDRESS_STATE_ADDRESS_IMPORTED = 2;</code>
     */
    public static final int WATCH_ONLY_ADDRESS_STATE_ADDRESS_IMPORTED_VALUE = 2;
    /**
     * <code>WATCH_ONLY_ADDRESS_STATE_IMPORT_FAILED = 3;</code>
     */
    public static final int WATCH_ONLY_ADDRESS_STATE_IMPORT_FAILED_VALUE = 3;
    /**
     * <code>WATCH_ONLY_ADDRESS_STATE_ADDRESS_DELETING = 4;</code>
     */
    public static final int WATCH_ONLY_ADDRESS_STATE_ADDRESS_DELETING_VALUE = 4;
    /**
     * <code>WATCH_ONLY_ADDRESS_STATE_ADDRESS_DELETED = 5;</code>
     */
    public static final int WATCH_ONLY_ADDRESS_STATE_ADDRESS_DELETED_VALUE = 5;
    /**
     * <code>WATCH_ONLY_ADDRESS_STATE_DELETE_FAILED = 6;</code>
     */
    public static final int WATCH_ONLY_ADDRESS_STATE_DELETE_FAILED_VALUE = 6;
    /**
     * <code>WATCH_ONLY_ADDRESS_STATE_DOWNLOAD = 7;</code>
     */
    public static final int WATCH_ONLY_ADDRESS_STATE_DOWNLOAD_VALUE = 7;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static WatchOnlyAddressState valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static WatchOnlyAddressState forNumber(int value) {
      switch (value) {
        case 0: return WATCH_ONLY_ADDRESS_STATE_INVALID;
        case 1: return WATCH_ONLY_ADDRESS_STATE_ADDRESS_IMPORTING;
        case 2: return WATCH_ONLY_ADDRESS_STATE_ADDRESS_IMPORTED;
        case 3: return WATCH_ONLY_ADDRESS_STATE_IMPORT_FAILED;
        case 4: return WATCH_ONLY_ADDRESS_STATE_ADDRESS_DELETING;
        case 5: return WATCH_ONLY_ADDRESS_STATE_ADDRESS_DELETED;
        case 6: return WATCH_ONLY_ADDRESS_STATE_DELETE_FAILED;
        case 7: return WATCH_ONLY_ADDRESS_STATE_DOWNLOAD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<WatchOnlyAddressState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        WatchOnlyAddressState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<WatchOnlyAddressState>() {
            public WatchOnlyAddressState findValueByNumber(int number) {
              return WatchOnlyAddressState.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(20);
    }

    private static final WatchOnlyAddressState[] VALUES = values();

    public static WatchOnlyAddressState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private WatchOnlyAddressState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.WatchOnlyAddressState)
  }

  /**
   * Protobuf enum {@code adamant.global.v1.SubstrateCallType}
   */
  public enum SubstrateCallType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SUBSTRATE_CALL_TYPE_INVALID = 0;</code>
     */
    SUBSTRATE_CALL_TYPE_INVALID(0),
    /**
     * <code>SUBSTRATE_CALL_TYPE_TRANSFER = 1;</code>
     */
    SUBSTRATE_CALL_TYPE_TRANSFER(1),
    /**
     * <code>SUBSTRATE_CALL_TYPE_TRANSFER_ALL = 2;</code>
     */
    SUBSTRATE_CALL_TYPE_TRANSFER_ALL(2),
    /**
     * <code>SUBSTRATE_CALL_TYPE_TRANSFER_KEEP_ALIVE = 3;</code>
     */
    SUBSTRATE_CALL_TYPE_TRANSFER_KEEP_ALIVE(3),
    /**
     * <code>SUBSTRATE_CALL_TYPE_APPROVE_AS_MULTI = 4;</code>
     */
    SUBSTRATE_CALL_TYPE_APPROVE_AS_MULTI(4),
    /**
     * <code>SUBSTRATE_CALL_TYPE_AS_MULTI = 5;</code>
     */
    SUBSTRATE_CALL_TYPE_AS_MULTI(5),
    /**
     * <code>SUBSTRATE_CALL_TYPE_AS_MULTI_THRESHOLD1 = 6;</code>
     */
    SUBSTRATE_CALL_TYPE_AS_MULTI_THRESHOLD1(6),
    /**
     * <code>SUBSTRATE_CALL_TYPE_CANCEL_AS_MULTI = 7;</code>
     */
    SUBSTRATE_CALL_TYPE_CANCEL_AS_MULTI(7),
    /**
     * <code>SUBSTRATE_CALL_TYPE_TRANSFER_ALLOW_DEATH = 8;</code>
     */
    SUBSTRATE_CALL_TYPE_TRANSFER_ALLOW_DEATH(8),
    /**
     * <code>SUBSTRATE_CALL_TYPE_JOIN = 9;</code>
     */
    SUBSTRATE_CALL_TYPE_JOIN(9),
    /**
     * <code>SUBSTRATE_CALL_TYPE_BOND_EXTRA_FREE_BALANCE = 10;</code>
     */
    SUBSTRATE_CALL_TYPE_BOND_EXTRA_FREE_BALANCE(10),
    /**
     * <code>SUBSTRATE_CALL_TYPE_BOND_EXTRA_REWARDS = 11;</code>
     */
    SUBSTRATE_CALL_TYPE_BOND_EXTRA_REWARDS(11),
    /**
     * <code>SUBSTRATE_CALL_TYPE_UNBOND = 12;</code>
     */
    SUBSTRATE_CALL_TYPE_UNBOND(12),
    /**
     * <code>SUBSTRATE_CALL_TYPE_WITHDRAW_UNBONDED = 13;</code>
     */
    SUBSTRATE_CALL_TYPE_WITHDRAW_UNBONDED(13),
    /**
     * <code>SUBSTRATE_CALL_TYPE_CLAIM_PAYOUT = 14;</code>
     */
    SUBSTRATE_CALL_TYPE_CLAIM_PAYOUT(14),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>SUBSTRATE_CALL_TYPE_INVALID = 0;</code>
     */
    public static final int SUBSTRATE_CALL_TYPE_INVALID_VALUE = 0;
    /**
     * <code>SUBSTRATE_CALL_TYPE_TRANSFER = 1;</code>
     */
    public static final int SUBSTRATE_CALL_TYPE_TRANSFER_VALUE = 1;
    /**
     * <code>SUBSTRATE_CALL_TYPE_TRANSFER_ALL = 2;</code>
     */
    public static final int SUBSTRATE_CALL_TYPE_TRANSFER_ALL_VALUE = 2;
    /**
     * <code>SUBSTRATE_CALL_TYPE_TRANSFER_KEEP_ALIVE = 3;</code>
     */
    public static final int SUBSTRATE_CALL_TYPE_TRANSFER_KEEP_ALIVE_VALUE = 3;
    /**
     * <code>SUBSTRATE_CALL_TYPE_APPROVE_AS_MULTI = 4;</code>
     */
    public static final int SUBSTRATE_CALL_TYPE_APPROVE_AS_MULTI_VALUE = 4;
    /**
     * <code>SUBSTRATE_CALL_TYPE_AS_MULTI = 5;</code>
     */
    public static final int SUBSTRATE_CALL_TYPE_AS_MULTI_VALUE = 5;
    /**
     * <code>SUBSTRATE_CALL_TYPE_AS_MULTI_THRESHOLD1 = 6;</code>
     */
    public static final int SUBSTRATE_CALL_TYPE_AS_MULTI_THRESHOLD1_VALUE = 6;
    /**
     * <code>SUBSTRATE_CALL_TYPE_CANCEL_AS_MULTI = 7;</code>
     */
    public static final int SUBSTRATE_CALL_TYPE_CANCEL_AS_MULTI_VALUE = 7;
    /**
     * <code>SUBSTRATE_CALL_TYPE_TRANSFER_ALLOW_DEATH = 8;</code>
     */
    public static final int SUBSTRATE_CALL_TYPE_TRANSFER_ALLOW_DEATH_VALUE = 8;
    /**
     * <code>SUBSTRATE_CALL_TYPE_JOIN = 9;</code>
     */
    public static final int SUBSTRATE_CALL_TYPE_JOIN_VALUE = 9;
    /**
     * <code>SUBSTRATE_CALL_TYPE_BOND_EXTRA_FREE_BALANCE = 10;</code>
     */
    public static final int SUBSTRATE_CALL_TYPE_BOND_EXTRA_FREE_BALANCE_VALUE = 10;
    /**
     * <code>SUBSTRATE_CALL_TYPE_BOND_EXTRA_REWARDS = 11;</code>
     */
    public static final int SUBSTRATE_CALL_TYPE_BOND_EXTRA_REWARDS_VALUE = 11;
    /**
     * <code>SUBSTRATE_CALL_TYPE_UNBOND = 12;</code>
     */
    public static final int SUBSTRATE_CALL_TYPE_UNBOND_VALUE = 12;
    /**
     * <code>SUBSTRATE_CALL_TYPE_WITHDRAW_UNBONDED = 13;</code>
     */
    public static final int SUBSTRATE_CALL_TYPE_WITHDRAW_UNBONDED_VALUE = 13;
    /**
     * <code>SUBSTRATE_CALL_TYPE_CLAIM_PAYOUT = 14;</code>
     */
    public static final int SUBSTRATE_CALL_TYPE_CLAIM_PAYOUT_VALUE = 14;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SubstrateCallType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SubstrateCallType forNumber(int value) {
      switch (value) {
        case 0: return SUBSTRATE_CALL_TYPE_INVALID;
        case 1: return SUBSTRATE_CALL_TYPE_TRANSFER;
        case 2: return SUBSTRATE_CALL_TYPE_TRANSFER_ALL;
        case 3: return SUBSTRATE_CALL_TYPE_TRANSFER_KEEP_ALIVE;
        case 4: return SUBSTRATE_CALL_TYPE_APPROVE_AS_MULTI;
        case 5: return SUBSTRATE_CALL_TYPE_AS_MULTI;
        case 6: return SUBSTRATE_CALL_TYPE_AS_MULTI_THRESHOLD1;
        case 7: return SUBSTRATE_CALL_TYPE_CANCEL_AS_MULTI;
        case 8: return SUBSTRATE_CALL_TYPE_TRANSFER_ALLOW_DEATH;
        case 9: return SUBSTRATE_CALL_TYPE_JOIN;
        case 10: return SUBSTRATE_CALL_TYPE_BOND_EXTRA_FREE_BALANCE;
        case 11: return SUBSTRATE_CALL_TYPE_BOND_EXTRA_REWARDS;
        case 12: return SUBSTRATE_CALL_TYPE_UNBOND;
        case 13: return SUBSTRATE_CALL_TYPE_WITHDRAW_UNBONDED;
        case 14: return SUBSTRATE_CALL_TYPE_CLAIM_PAYOUT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SubstrateCallType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SubstrateCallType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SubstrateCallType>() {
            public SubstrateCallType findValueByNumber(int number) {
              return SubstrateCallType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(21);
    }

    private static final SubstrateCallType[] VALUES = values();

    public static SubstrateCallType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SubstrateCallType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.SubstrateCallType)
  }

  /**
   * Protobuf enum {@code adamant.global.v1.DownloadResourceType}
   */
  public enum DownloadResourceType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>DOWNLOAD_RESOURCE_TYPE_INVALID = 0;</code>
     */
    DOWNLOAD_RESOURCE_TYPE_INVALID(0),
    /**
     * <code>DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_BALANCE_SNAPSHOT_EOD = 1;</code>
     */
    DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_BALANCE_SNAPSHOT_EOD(1),
    /**
     * <code>DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_GROUP_BALANCE_SNAPSHOT_EOD = 2;</code>
     */
    DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_GROUP_BALANCE_SNAPSHOT_EOD(2),
    /**
     * <code>DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_BALANCE_SNAPSHOT_ON_DEMAND = 3;</code>
     */
    DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_BALANCE_SNAPSHOT_ON_DEMAND(3),
    /**
     * <code>DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_GROUP_BALANCE_SNAPSHOT_ON_DEMAND = 4;</code>
     */
    DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_GROUP_BALANCE_SNAPSHOT_ON_DEMAND(4),
    /**
     * <code>DOWNLOAD_RESOURCE_TYPE_WALLET_TRANSFER = 5;</code>
     */
    DOWNLOAD_RESOURCE_TYPE_WALLET_TRANSFER(5),
    /**
     * <code>DOWNLOAD_RESOURCE_TYPE_WALLET_ADDRESS = 6;</code>
     */
    DOWNLOAD_RESOURCE_TYPE_WALLET_ADDRESS(6),
    /**
     * <code>DOWNLOAD_RESOURCE_TYPE_WALLET_ADDRESS_WITH_BALANCE = 7;</code>
     */
    DOWNLOAD_RESOURCE_TYPE_WALLET_ADDRESS_WITH_BALANCE(7),
    /**
     * <code>DOWNLOAD_RESOURCE_TYPE_BLACKLIST_ADDRESS = 8;</code>
     */
    DOWNLOAD_RESOURCE_TYPE_BLACKLIST_ADDRESS(8),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>DOWNLOAD_RESOURCE_TYPE_INVALID = 0;</code>
     */
    public static final int DOWNLOAD_RESOURCE_TYPE_INVALID_VALUE = 0;
    /**
     * <code>DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_BALANCE_SNAPSHOT_EOD = 1;</code>
     */
    public static final int DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_BALANCE_SNAPSHOT_EOD_VALUE = 1;
    /**
     * <code>DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_GROUP_BALANCE_SNAPSHOT_EOD = 2;</code>
     */
    public static final int DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_GROUP_BALANCE_SNAPSHOT_EOD_VALUE = 2;
    /**
     * <code>DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_BALANCE_SNAPSHOT_ON_DEMAND = 3;</code>
     */
    public static final int DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_BALANCE_SNAPSHOT_ON_DEMAND_VALUE = 3;
    /**
     * <code>DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_GROUP_BALANCE_SNAPSHOT_ON_DEMAND = 4;</code>
     */
    public static final int DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_GROUP_BALANCE_SNAPSHOT_ON_DEMAND_VALUE = 4;
    /**
     * <code>DOWNLOAD_RESOURCE_TYPE_WALLET_TRANSFER = 5;</code>
     */
    public static final int DOWNLOAD_RESOURCE_TYPE_WALLET_TRANSFER_VALUE = 5;
    /**
     * <code>DOWNLOAD_RESOURCE_TYPE_WALLET_ADDRESS = 6;</code>
     */
    public static final int DOWNLOAD_RESOURCE_TYPE_WALLET_ADDRESS_VALUE = 6;
    /**
     * <code>DOWNLOAD_RESOURCE_TYPE_WALLET_ADDRESS_WITH_BALANCE = 7;</code>
     */
    public static final int DOWNLOAD_RESOURCE_TYPE_WALLET_ADDRESS_WITH_BALANCE_VALUE = 7;
    /**
     * <code>DOWNLOAD_RESOURCE_TYPE_BLACKLIST_ADDRESS = 8;</code>
     */
    public static final int DOWNLOAD_RESOURCE_TYPE_BLACKLIST_ADDRESS_VALUE = 8;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DownloadResourceType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static DownloadResourceType forNumber(int value) {
      switch (value) {
        case 0: return DOWNLOAD_RESOURCE_TYPE_INVALID;
        case 1: return DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_BALANCE_SNAPSHOT_EOD;
        case 2: return DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_GROUP_BALANCE_SNAPSHOT_EOD;
        case 3: return DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_BALANCE_SNAPSHOT_ON_DEMAND;
        case 4: return DOWNLOAD_RESOURCE_TYPE_ALL_WALLET_GROUP_BALANCE_SNAPSHOT_ON_DEMAND;
        case 5: return DOWNLOAD_RESOURCE_TYPE_WALLET_TRANSFER;
        case 6: return DOWNLOAD_RESOURCE_TYPE_WALLET_ADDRESS;
        case 7: return DOWNLOAD_RESOURCE_TYPE_WALLET_ADDRESS_WITH_BALANCE;
        case 8: return DOWNLOAD_RESOURCE_TYPE_BLACKLIST_ADDRESS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DownloadResourceType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DownloadResourceType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DownloadResourceType>() {
            public DownloadResourceType findValueByNumber(int number) {
              return DownloadResourceType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(22);
    }

    private static final DownloadResourceType[] VALUES = values();

    public static DownloadResourceType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DownloadResourceType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.DownloadResourceType)
  }

  /**
   * Protobuf enum {@code adamant.global.v1.EventTriggeredMessageType}
   */
  public enum EventTriggeredMessageType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EVENT_TRIGGERED_MESSAGE_TYPE_INVALID = 0;</code>
     */
    EVENT_TRIGGERED_MESSAGE_TYPE_INVALID(0),
    /**
     * <code>EVENT_TRIGGERED_MESSAGE_TYPE_UNCHECKED_TRANSFER_ALERT = 1;</code>
     */
    EVENT_TRIGGERED_MESSAGE_TYPE_UNCHECKED_TRANSFER_ALERT(1),
    /**
     * <code>EVENT_TRIGGERED_MESSAGE_TYPE_FRAUDULENT_TRANSFER_ALERT = 2;</code>
     */
    EVENT_TRIGGERED_MESSAGE_TYPE_FRAUDULENT_TRANSFER_ALERT(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>EVENT_TRIGGERED_MESSAGE_TYPE_INVALID = 0;</code>
     */
    public static final int EVENT_TRIGGERED_MESSAGE_TYPE_INVALID_VALUE = 0;
    /**
     * <code>EVENT_TRIGGERED_MESSAGE_TYPE_UNCHECKED_TRANSFER_ALERT = 1;</code>
     */
    public static final int EVENT_TRIGGERED_MESSAGE_TYPE_UNCHECKED_TRANSFER_ALERT_VALUE = 1;
    /**
     * <code>EVENT_TRIGGERED_MESSAGE_TYPE_FRAUDULENT_TRANSFER_ALERT = 2;</code>
     */
    public static final int EVENT_TRIGGERED_MESSAGE_TYPE_FRAUDULENT_TRANSFER_ALERT_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EventTriggeredMessageType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static EventTriggeredMessageType forNumber(int value) {
      switch (value) {
        case 0: return EVENT_TRIGGERED_MESSAGE_TYPE_INVALID;
        case 1: return EVENT_TRIGGERED_MESSAGE_TYPE_UNCHECKED_TRANSFER_ALERT;
        case 2: return EVENT_TRIGGERED_MESSAGE_TYPE_FRAUDULENT_TRANSFER_ALERT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EventTriggeredMessageType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EventTriggeredMessageType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EventTriggeredMessageType>() {
            public EventTriggeredMessageType findValueByNumber(int number) {
              return EventTriggeredMessageType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(23);
    }

    private static final EventTriggeredMessageType[] VALUES = values();

    public static EventTriggeredMessageType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EventTriggeredMessageType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.EventTriggeredMessageType)
  }

  /**
   * Protobuf enum {@code adamant.global.v1.WalletConnectCallRequestType}
   */
  public enum WalletConnectCallRequestType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>WALLET_CONNECT_CALL_REQUEST_TYPE_INVALID = 0;</code>
     */
    WALLET_CONNECT_CALL_REQUEST_TYPE_INVALID(0),
    /**
     * <code>WALLET_CONNECT_CALL_REQUEST_TYPE_ETH_SEND_TRANSACTION = 1;</code>
     */
    WALLET_CONNECT_CALL_REQUEST_TYPE_ETH_SEND_TRANSACTION(1),
    /**
     * <code>WALLET_CONNECT_CALL_REQUEST_TYPE_ETH_SIGN_TYPED_DATA = 2;</code>
     */
    WALLET_CONNECT_CALL_REQUEST_TYPE_ETH_SIGN_TYPED_DATA(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>WALLET_CONNECT_CALL_REQUEST_TYPE_INVALID = 0;</code>
     */
    public static final int WALLET_CONNECT_CALL_REQUEST_TYPE_INVALID_VALUE = 0;
    /**
     * <code>WALLET_CONNECT_CALL_REQUEST_TYPE_ETH_SEND_TRANSACTION = 1;</code>
     */
    public static final int WALLET_CONNECT_CALL_REQUEST_TYPE_ETH_SEND_TRANSACTION_VALUE = 1;
    /**
     * <code>WALLET_CONNECT_CALL_REQUEST_TYPE_ETH_SIGN_TYPED_DATA = 2;</code>
     */
    public static final int WALLET_CONNECT_CALL_REQUEST_TYPE_ETH_SIGN_TYPED_DATA_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static WalletConnectCallRequestType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static WalletConnectCallRequestType forNumber(int value) {
      switch (value) {
        case 0: return WALLET_CONNECT_CALL_REQUEST_TYPE_INVALID;
        case 1: return WALLET_CONNECT_CALL_REQUEST_TYPE_ETH_SEND_TRANSACTION;
        case 2: return WALLET_CONNECT_CALL_REQUEST_TYPE_ETH_SIGN_TYPED_DATA;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<WalletConnectCallRequestType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        WalletConnectCallRequestType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<WalletConnectCallRequestType>() {
            public WalletConnectCallRequestType findValueByNumber(int number) {
              return WalletConnectCallRequestType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(24);
    }

    private static final WalletConnectCallRequestType[] VALUES = values();

    public static WalletConnectCallRequestType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private WalletConnectCallRequestType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.WalletConnectCallRequestType)
  }

  /**
   * Protobuf enum {@code adamant.global.v1.EthereumContractMethodIDType}
   */
  public enum EthereumContractMethodIDType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_INVALID = 0;</code>
     */
    ETHEREUM_CONTRACT_METHOD_ID_TYPE_INVALID(0),
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_APPROVE = 1;</code>
     */
    ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_APPROVE(1),
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_UNISWAP_MULTICALL = 2;</code>
     */
    ETHEREUM_CONTRACT_METHOD_ID_TYPE_UNISWAP_MULTICALL(2),
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_INITIALIZE = 3;</code>
     */
    ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_INITIALIZE(3),
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_CONFIGURE_MINTER = 4;</code>
     */
    ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_CONFIGURE_MINTER(4),
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_MINT_AND_TRANSFER = 5;</code>
     */
    ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_MINT_AND_TRANSFER(5),
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_MINT = 6;</code>
     */
    ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_MINT(6),
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BURN = 7;</code>
     */
    ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BURN(7),
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BULK_UPDATE_TO_WHITELIST = 8;</code>
     */
    ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BULK_UPDATE_TO_WHITELIST(8),
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BULK_UPDATE_TO_UNSET = 9;</code>
     */
    ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BULK_UPDATE_TO_UNSET(9),
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BULK_UPDATE_TO_BLACKLIST = 10;</code>
     */
    ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BULK_UPDATE_TO_BLACKLIST(10),
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_CONFISCATE = 11;</code>
     */
    ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_CONFISCATE(11),
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_PAUSE = 12;</code>
     */
    ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_PAUSE(12),
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_UNPAUSE = 13;</code>
     */
    ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_UNPAUSE(13),
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_GRANT_WHITE_AND_BLACK_LISTER = 14;</code>
     */
    ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_GRANT_WHITE_AND_BLACK_LISTER(14),
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_CONTRACT_CREATION = 15;</code>
     */
    ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_CONTRACT_CREATION(15),
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_UPGRADE_TO_AND_CALL = 16;</code>
     */
    ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_UPGRADE_TO_AND_CALL(16),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_INVALID = 0;</code>
     */
    public static final int ETHEREUM_CONTRACT_METHOD_ID_TYPE_INVALID_VALUE = 0;
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_APPROVE = 1;</code>
     */
    public static final int ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_APPROVE_VALUE = 1;
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_UNISWAP_MULTICALL = 2;</code>
     */
    public static final int ETHEREUM_CONTRACT_METHOD_ID_TYPE_UNISWAP_MULTICALL_VALUE = 2;
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_INITIALIZE = 3;</code>
     */
    public static final int ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_INITIALIZE_VALUE = 3;
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_CONFIGURE_MINTER = 4;</code>
     */
    public static final int ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_CONFIGURE_MINTER_VALUE = 4;
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_MINT_AND_TRANSFER = 5;</code>
     */
    public static final int ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_MINT_AND_TRANSFER_VALUE = 5;
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_MINT = 6;</code>
     */
    public static final int ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_MINT_VALUE = 6;
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BURN = 7;</code>
     */
    public static final int ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BURN_VALUE = 7;
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BULK_UPDATE_TO_WHITELIST = 8;</code>
     */
    public static final int ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BULK_UPDATE_TO_WHITELIST_VALUE = 8;
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BULK_UPDATE_TO_UNSET = 9;</code>
     */
    public static final int ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BULK_UPDATE_TO_UNSET_VALUE = 9;
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BULK_UPDATE_TO_BLACKLIST = 10;</code>
     */
    public static final int ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BULK_UPDATE_TO_BLACKLIST_VALUE = 10;
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_CONFISCATE = 11;</code>
     */
    public static final int ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_CONFISCATE_VALUE = 11;
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_PAUSE = 12;</code>
     */
    public static final int ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_PAUSE_VALUE = 12;
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_UNPAUSE = 13;</code>
     */
    public static final int ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_UNPAUSE_VALUE = 13;
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_GRANT_WHITE_AND_BLACK_LISTER = 14;</code>
     */
    public static final int ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_GRANT_WHITE_AND_BLACK_LISTER_VALUE = 14;
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_CONTRACT_CREATION = 15;</code>
     */
    public static final int ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_CONTRACT_CREATION_VALUE = 15;
    /**
     * <code>ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_UPGRADE_TO_AND_CALL = 16;</code>
     */
    public static final int ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_UPGRADE_TO_AND_CALL_VALUE = 16;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EthereumContractMethodIDType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static EthereumContractMethodIDType forNumber(int value) {
      switch (value) {
        case 0: return ETHEREUM_CONTRACT_METHOD_ID_TYPE_INVALID;
        case 1: return ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_APPROVE;
        case 2: return ETHEREUM_CONTRACT_METHOD_ID_TYPE_UNISWAP_MULTICALL;
        case 3: return ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_INITIALIZE;
        case 4: return ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_CONFIGURE_MINTER;
        case 5: return ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_MINT_AND_TRANSFER;
        case 6: return ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_MINT;
        case 7: return ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BURN;
        case 8: return ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BULK_UPDATE_TO_WHITELIST;
        case 9: return ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BULK_UPDATE_TO_UNSET;
        case 10: return ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_BULK_UPDATE_TO_BLACKLIST;
        case 11: return ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_CONFISCATE;
        case 12: return ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_PAUSE;
        case 13: return ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_UNPAUSE;
        case 14: return ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_GRANT_WHITE_AND_BLACK_LISTER;
        case 15: return ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_CONTRACT_CREATION;
        case 16: return ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_UPGRADE_TO_AND_CALL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EthereumContractMethodIDType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EthereumContractMethodIDType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EthereumContractMethodIDType>() {
            public EthereumContractMethodIDType findValueByNumber(int number) {
              return EthereumContractMethodIDType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(25);
    }

    private static final EthereumContractMethodIDType[] VALUES = values();

    public static EthereumContractMethodIDType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EthereumContractMethodIDType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.EthereumContractMethodIDType)
  }

  /**
   * Protobuf enum {@code adamant.global.v1.IOSTActionType}
   */
  public enum IOSTActionType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>IOST_ACTION_TYPE_INVALID = 0;</code>
     */
    IOST_ACTION_TYPE_INVALID(0),
    /**
     * <code>IOST_ACTION_TYPE_SIGN_UP = 1;</code>
     */
    IOST_ACTION_TYPE_SIGN_UP(1),
    /**
     * <code>IOST_ACTION_TYPE_ASSIGN_PERMISSION = 2;</code>
     */
    IOST_ACTION_TYPE_ASSIGN_PERMISSION(2),
    /**
     * <code>IOST_ACTION_TYPE_TRANSFER = 3;</code>
     */
    IOST_ACTION_TYPE_TRANSFER(3),
    /**
     * <code>IOST_ACTION_TYPE_BUY_RAM = 4;</code>
     */
    IOST_ACTION_TYPE_BUY_RAM(4),
    /**
     * <code>IOST_ACTION_TYPE_SELL_RAM = 5;</code>
     */
    IOST_ACTION_TYPE_SELL_RAM(5),
    /**
     * <code>IOST_ACTION_TYPE_VOTE = 6;</code>
     */
    IOST_ACTION_TYPE_VOTE(6),
    /**
     * <code>IOST_ACTION_TYPE_UNVOTE = 7;</code>
     */
    IOST_ACTION_TYPE_UNVOTE(7),
    /**
     * <code>IOST_ACTION_TYPE_WITHDRAW_BONUS = 8;</code>
     */
    IOST_ACTION_TYPE_WITHDRAW_BONUS(8),
    /**
     * <code>IOST_ACTION_TYPE_REVOKE_PERMISSION = 9;</code>
     */
    IOST_ACTION_TYPE_REVOKE_PERMISSION(9),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>IOST_ACTION_TYPE_INVALID = 0;</code>
     */
    public static final int IOST_ACTION_TYPE_INVALID_VALUE = 0;
    /**
     * <code>IOST_ACTION_TYPE_SIGN_UP = 1;</code>
     */
    public static final int IOST_ACTION_TYPE_SIGN_UP_VALUE = 1;
    /**
     * <code>IOST_ACTION_TYPE_ASSIGN_PERMISSION = 2;</code>
     */
    public static final int IOST_ACTION_TYPE_ASSIGN_PERMISSION_VALUE = 2;
    /**
     * <code>IOST_ACTION_TYPE_TRANSFER = 3;</code>
     */
    public static final int IOST_ACTION_TYPE_TRANSFER_VALUE = 3;
    /**
     * <code>IOST_ACTION_TYPE_BUY_RAM = 4;</code>
     */
    public static final int IOST_ACTION_TYPE_BUY_RAM_VALUE = 4;
    /**
     * <code>IOST_ACTION_TYPE_SELL_RAM = 5;</code>
     */
    public static final int IOST_ACTION_TYPE_SELL_RAM_VALUE = 5;
    /**
     * <code>IOST_ACTION_TYPE_VOTE = 6;</code>
     */
    public static final int IOST_ACTION_TYPE_VOTE_VALUE = 6;
    /**
     * <code>IOST_ACTION_TYPE_UNVOTE = 7;</code>
     */
    public static final int IOST_ACTION_TYPE_UNVOTE_VALUE = 7;
    /**
     * <code>IOST_ACTION_TYPE_WITHDRAW_BONUS = 8;</code>
     */
    public static final int IOST_ACTION_TYPE_WITHDRAW_BONUS_VALUE = 8;
    /**
     * <code>IOST_ACTION_TYPE_REVOKE_PERMISSION = 9;</code>
     */
    public static final int IOST_ACTION_TYPE_REVOKE_PERMISSION_VALUE = 9;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static IOSTActionType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static IOSTActionType forNumber(int value) {
      switch (value) {
        case 0: return IOST_ACTION_TYPE_INVALID;
        case 1: return IOST_ACTION_TYPE_SIGN_UP;
        case 2: return IOST_ACTION_TYPE_ASSIGN_PERMISSION;
        case 3: return IOST_ACTION_TYPE_TRANSFER;
        case 4: return IOST_ACTION_TYPE_BUY_RAM;
        case 5: return IOST_ACTION_TYPE_SELL_RAM;
        case 6: return IOST_ACTION_TYPE_VOTE;
        case 7: return IOST_ACTION_TYPE_UNVOTE;
        case 8: return IOST_ACTION_TYPE_WITHDRAW_BONUS;
        case 9: return IOST_ACTION_TYPE_REVOKE_PERMISSION;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<IOSTActionType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        IOSTActionType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<IOSTActionType>() {
            public IOSTActionType findValueByNumber(int number) {
              return IOSTActionType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(26);
    }

    private static final IOSTActionType[] VALUES = values();

    public static IOSTActionType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private IOSTActionType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.IOSTActionType)
  }

  /**
   * Protobuf enum {@code adamant.global.v1.BlacklistAddressStatus}
   */
  public enum BlacklistAddressStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>BLACKLIST_ADDRESS_STATUS_INVALID = 0;</code>
     */
    BLACKLIST_ADDRESS_STATUS_INVALID(0),
    /**
     * <code>BLACKLIST_ADDRESS_STATUS_NOT_REVIEWED = 1;</code>
     */
    BLACKLIST_ADDRESS_STATUS_NOT_REVIEWED(1),
    /**
     * <code>BLACKLIST_ADDRESS_STATUS_APPROVED = 2;</code>
     */
    BLACKLIST_ADDRESS_STATUS_APPROVED(2),
    /**
     * <code>BLACKLIST_ADDRESS_STATUS_REJECTED = 3;</code>
     */
    BLACKLIST_ADDRESS_STATUS_REJECTED(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>BLACKLIST_ADDRESS_STATUS_INVALID = 0;</code>
     */
    public static final int BLACKLIST_ADDRESS_STATUS_INVALID_VALUE = 0;
    /**
     * <code>BLACKLIST_ADDRESS_STATUS_NOT_REVIEWED = 1;</code>
     */
    public static final int BLACKLIST_ADDRESS_STATUS_NOT_REVIEWED_VALUE = 1;
    /**
     * <code>BLACKLIST_ADDRESS_STATUS_APPROVED = 2;</code>
     */
    public static final int BLACKLIST_ADDRESS_STATUS_APPROVED_VALUE = 2;
    /**
     * <code>BLACKLIST_ADDRESS_STATUS_REJECTED = 3;</code>
     */
    public static final int BLACKLIST_ADDRESS_STATUS_REJECTED_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static BlacklistAddressStatus valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static BlacklistAddressStatus forNumber(int value) {
      switch (value) {
        case 0: return BLACKLIST_ADDRESS_STATUS_INVALID;
        case 1: return BLACKLIST_ADDRESS_STATUS_NOT_REVIEWED;
        case 2: return BLACKLIST_ADDRESS_STATUS_APPROVED;
        case 3: return BLACKLIST_ADDRESS_STATUS_REJECTED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BlacklistAddressStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        BlacklistAddressStatus> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BlacklistAddressStatus>() {
            public BlacklistAddressStatus findValueByNumber(int number) {
              return BlacklistAddressStatus.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return adamant.global.v1.Enum.getDescriptor().getEnumTypes().get(27);
    }

    private static final BlacklistAddressStatus[] VALUES = values();

    public static BlacklistAddressStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private BlacklistAddressStatus(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:adamant.global.v1.BlacklistAddressStatus)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n5gincoinc/adamant/global/v1/adamantglob" +
      "alv1/enum.proto\022\021adamant.global.v1*\364\001\n\nW" +
      "alletType\022\027\n\023WALLET_TYPE_INVALID\020\000\022 \n\034WA" +
      "LLET_TYPE_SELF_CUSTODY_HOT\020\001\022!\n\035WALLET_T" +
      "YPE_SELF_CUSTODY_COLD\020\002\022+\n\'WALLET_TYPE_S" +
      "ELF_CUSTODY_HOT_SINGLE_SIG\020\003\022-\n)WALLET_T" +
      "YPE_SELF_CUSTODY_HOT_RECEIVE_ONLY\020\004\022,\n(W" +
      "ALLET_TYPE_SELF_CUSTODY_COLD_SINGLE_SIG\020" +
      "\005*\237\006\n\013WalletState\022\030\n\024WALLET_STATE_INVALI" +
      "D\020\000\022\031\n\025WALLET_STATE_PROPOSED\020\001\022 \n\034WALLET" +
      "_STATE_KEY_REGISTERING\020\002\022\037\n\033WALLET_STATE" +
      "_KEY_REGISTERED\020\003\022$\n WALLET_STATE_VALIDA" +
      "TOR_REVIEWING\020\004\022#\n\037WALLET_STATE_VALIDATO" +
      "R_REVIEWED\020\005\022\033\n\027WALLET_STATE_ACTIVATING\020" +
      "\006\022\032\n\026WALLET_STATE_ACTIVATED\020\007\022\030\n\024WALLET_" +
      "STATE_SIGNING\020\010\022\027\n\023WALLET_STATE_SIGNED\020\t" +
      "\022\033\n\027WALLET_STATE_SUBMITTING\020\n\022\032\n\026WALLET_" +
      "STATE_SUBMITTED\020\013\022\032\n\026WALLET_STATE_COMPLE" +
      "TED\020\014\022\032\n\026WALLET_STATE_CANCELLED\020\r\022\031\n\025WAL" +
      "LET_STATE_ARCHIVED\020\016\022\'\n#WALLET_STATE_ADD" +
      "RESS_IMPORT_WAITING\020\017\022\"\n\036WALLET_STATE_AD" +
      "DRESS_IMPORTING\020\020\022&\n\"WALLET_STATE_ADDRES" +
      "S_IMPORT_FAILED\020\021\022!\n\035WALLET_STATE_ADDRES" +
      "S_DELETING\020\022\022&\n\"WALLET_STATE_ADDRESS_DEL" +
      "ETE_FAILED\020\023\022\031\n\025WALLET_STATE_FLUSHING\020\024\022" +
      "!\n\035WALLET_STATE_ACCOUNT_CREATING\020\025\022 \n\034WA" +
      "LLET_STATE_ACCOUNT_CREATED\020\026\0225\n1WALLET_S" +
      "TATE_MANAGER_APPROVED_SENDING_TRANSACTIO" +
      "N\020\027*{\n\022WalletProposalType\022 \n\034WALLET_PROP" +
      "OSAL_TYPE_INVALID\020\000\022\037\n\033WALLET_PROPOSAL_T" +
      "YPE_POLICY\020\001\022\"\n\036WALLET_PROPOSAL_TYPE_VAL" +
      "IDATOR\020\002*\201\001\n\014AddressState\022\031\n\025ADDRESS_STA" +
      "TE_INVALID\020\000\022\034\n\030ADDRESS_STATE_SUBMITTING" +
      "\020\001\022\033\n\027ADDRESS_STATE_SUBMITTED\020\002\022\033\n\027ADDRE" +
      "SS_STATE_COMPLETED\020\003*\353\001\n\023PreTransactionS" +
      "tate\022!\n\035PRE_TRANSACTION_STATE_INVALID\020\000\022" +
      "#\n\037PRE_TRANSACTION_STATE_APPROVING\020\001\022#\n\037" +
      "PRE_TRANSACTION_STATE_AVAILABLE\020\002\022\"\n\036PRE" +
      "_TRANSACTION_STATE_REJECTED\020\003\022#\n\037PRE_TRA" +
      "NSACTION_STATE_CANCELLED\020\004\022\036\n\032PRE_TRANSA" +
      "CTION_STATE_USED\020\005*\366\002\n\020TransactionState\022" +
      "\035\n\031TRANSACTION_STATE_INVALID\020\000\022\035\n\031TRANSA" +
      "CTION_STATE_SIGNING\020\001\022\034\n\030TRANSACTION_STA" +
      "TE_SIGNED\020\002\022\037\n\033TRANSACTION_STATE_REVIEWI" +
      "NG\020\003\022\036\n\032TRANSACTION_STATE_REVIEWED\020\004\022 \n\034" +
      "TRANSACTION_STATE_SUBMITTING\020\005\022\037\n\033TRANSA" +
      "CTION_STATE_SUBMITTED\020\006\022 \n\034TRANSACTION_S" +
      "TATE_CANCELLING\020\010\022\037\n\033TRANSACTION_STATE_C" +
      "ANCELLED\020\007\022\037\n\033TRANSACTION_STATE_APPROVIN" +
      "G\020\t\022\036\n\032TRANSACTION_STATE_APPROVED\020\n*`\n\013A" +
      "ccountType\022\030\n\024ACCOUNT_TYPE_INVALID\020\000\022\025\n\021" +
      "ACCOUNT_TYPE_USER\020\001\022 \n\034ACCOUNT_TYPE_SERV" +
      "ICE_ACCOUNT\020\002*[\n\014ExecutorType\022\031\n\025EXECUTO" +
      "R_TYPE_INVALID\020\000\022\026\n\022EXECUTOR_TYPE_USER\020\001" +
      "\022\030\n\024EXECUTOR_TYPE_SYSTEM\020\002*u\n\tUserState\022" +
      "\026\n\022USER_STATE_INVALID\020\000\022\032\n\026USER_STATE_UN" +
      "CONFIRMED\020\001\022\030\n\024USER_STATE_CONFIRMED\020\002\022\032\n" +
      "\026USER_STATE_DEACTIVATED\020\003*\277\002\n\010RoleType\022\025" +
      "\n\021ROLE_TYPE_INVALID\020\000\022\031\n\025ROLE_TYPE_ORG_M" +
      "ANAGER\020\001\022\030\n\024ROLE_TYPE_ORG_SIGNER\020\002\022\033\n\027RO" +
      "LE_TYPE_ORG_VALIDATOR\020\003\022\030\n\024ROLE_TYPE_ORG" +
      "_VIEWER\020\004\022\033\n\027ROLE_TYPE_ORG_DEVELOPER\020\005\022\036" +
      "\n\032ROLE_TYPE_HOT_WALLET_ADMIN\020\006\022\037\n\033ROLE_T" +
      "YPE_HOT_WALLET_VIEWER\020\007\022&\n\"ROLE_TYPE_ORG" +
      "_TRANSACTION_OPERATOR\020\010\022*\n&ROLE_TYPE_ORG" +
      "_PRE_TRANSACTION_REVIEWER\020\t*c\n\014ResourceT" +
      "ype\022\031\n\025RESOURCE_TYPE_INVALID\020\000\022\030\n\024RESOUR" +
      "CE_TYPE_WALLET\020\001\022\036\n\032RESOURCE_TYPE_ORGANI" +
      "ZATION\020\002*\340\001\n\tTokenType\022\026\n\022TOKEN_TYPE_INV" +
      "ALID\020\000\022\032\n\026TOKEN_TYPE_LOGIN_TOKEN\020\001\022\031\n\025TO" +
      "KEN_TYPE_MAIL_TOKEN\020\002\022#\n\037TOKEN_TYPE_PASS" +
      "WORD_RESET_TOKEN\020\003\022$\n TOKEN_TYPE_PASSWOR" +
      "D_UPDATE_TOKEN\020\004\022\033\n\027TOKEN_TYPE_SIGNUP_TO" +
      "KEN\020\005\022\034\n\030TOKEN_TYPE_REFRESH_TOKEN\020\006*l\n\nP" +
      "olicyType\022\027\n\023POLICY_TYPE_INVALID\020\000\022!\n\035PO" +
      "LICY_TYPE_HOT_WALLET_POLICY\020\001\022\"\n\036POLICY_" +
      "TYPE_COLD_WALLET_POLICY\020\002*\225\001\n\021TransferLi" +
      "mitType\022\037\n\033TRANSFER_LIMIT_TYPE_INVALID\020\000" +
      "\022\036\n\032TRANSFER_LIMIT_TYPE_HOURLY\020\001\022\035\n\031TRAN" +
      "SFER_LIMIT_TYPE_DAILY\020\002\022 \n\034TRANSFER_LIMI" +
      "T_TYPE_ONE_TIME\020\003*\365\n\n\020NotificationType\022\035" +
      "\n\031NOTIFICATION_TYPE_INVALID\020\000\0223\n/NOTIFIC" +
      "ATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST" +
      "\020\001\0226\n2NOTIFICATION_TYPE_WALLET_VALIDATOR" +
      "_APPROVE_REQUEST\020\002\022,\n(NOTIFICATION_TYPE_" +
      "WALLET_ACTIVATE_FAILED\020\003\022&\n\"NOTIFICATION" +
      "_TYPE_WALLET_CANCELLED\020\004\022&\n\"NOTIFICATION" +
      "_TYPE_WALLET_COMPLETED\020\005\022#\n\037NOTIFICATION" +
      "_TYPE_WALLET_FAILED\020\006\0224\n0NOTIFICATION_TY" +
      "PE_WALLET_ADDRESS_APPROVE_REQUEST\020\027\0221\n-N" +
      "OTIFICATION_TYPE_WALLET_XRP_ACTIVATE_REQ" +
      "UEST\020\030\0224\n0NOTIFICATION_TYPE_WALLET_MULTI" +
      "SIG_CONFIG_REQUEST\020\031\0228\n4NOTIFICATION_TYP" +
      "E_WALLET_MANAGER_TRANSACTION_REQUEST\020\032\0225" +
      "\n1NOTIFICATION_TYPE_WALLET_VALIDATOR_CHA" +
      "NGE_REQUEST\020\033\0228\n4NOTIFICATION_TYPE_TRANS" +
      "ACTION_SIGNER_APPROVE_REQUEST\020\007\022;\n7NOTIF" +
      "ICATION_TYPE_TRANSACTION_VALIDATOR_APPRO" +
      "VE_REQUEST\020\010\022\'\n#NOTIFICATION_TYPE_TRANSA" +
      "CTION_READY\020\026\022+\n\'NOTIFICATION_TYPE_TRANS" +
      "ACTION_SUBMITTED\020\t\022+\n\'NOTIFICATION_TYPE_" +
      "TRANSACTION_CANCELLED\020\n\022(\n$NOTIFICATION_" +
      "TYPE_TRANSACTION_RESENT\020\034\022-\n)NOTIFICATIO" +
      "N_TYPE_TRANSFER_SEND_COMPLETED\020\013\022*\n&NOTI" +
      "FICATION_TYPE_TRANSFER_SEND_FAILED\020\014\0220\n," +
      "NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPL" +
      "ETED\020\r\022-\n)NOTIFICATION_TYPE_TRANSFER_REC" +
      "EIVE_FAILED\020\016\022-\n)NOTIFICATION_TYPE_ADDRE" +
      "SS_APPROVE_REQUEST\020\017\022\'\n#NOTIFICATION_TYP" +
      "E_ADDRESS_COMPLETED\020\020\022\'\n#NOTIFICATION_TY" +
      "PE_ADDRESS_CANCELLED\020\021\0223\n/NOTIFICATION_T" +
      "YPE_TRANSFERLIMIT_APPROVE_REQUEST\020\022\022-\n)N" +
      "OTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED" +
      "\020\023\022-\n)NOTIFICATION_TYPE_TRANSFERLIMIT_CA" +
      "NCELLED\020\024\022.\n*NOTIFICATION_TYPE_WHITELIST" +
      "_DETACH_REQUEST\020\025*\231\003\n\rAuditLogGroup\022\033\n\027A" +
      "UDIT_LOG_GROUP_INVALID\020\000\022\031\n\025AUDIT_LOG_GR" +
      "OUP_LOGIN\020\001\022\033\n\027AUDIT_LOG_GROUP_ACCOUNT\020\002" +
      "\022#\n\037AUDIT_LOG_GROUP_SERVICE_ACCOUNT\020\003\022\032\n" +
      "\026AUDIT_LOG_GROUP_WALLET\020\004\022#\n\037AUDIT_LOG_G" +
      "ROUP_PRE_TRANSACTION\020\013\022\037\n\033AUDIT_LOG_GROU" +
      "P_TRANSACTION\020\005\022\032\n\026AUDIT_LOG_GROUP_POLIC" +
      "Y\020\006\022 \n\034AUDIT_LOG_GROUP_WALLET_GROUP\020\007\022\030\n" +
      "\024AUDIT_LOG_GROUP_MAIL\020\010\022-\n)AUDIT_LOG_GRO" +
      "UP_PRE_TRANSACTION_THRESHOLD\020\t\022%\n!AUDIT_" +
      "LOG_GROUP_BLACKLIST_ADDRESS\020\n*\366#\n\014AuditL" +
      "ogType\022\032\n\026AUDIT_LOG_TYPE_INVALID\020\000\022\030\n\024AU" +
      "DIT_LOG_TYPE_LOGIN\020\001\022\035\n\031AUDIT_LOG_TYPE_L" +
      "OGIN_FAIL\020\002\022\033\n\027AUDIT_LOG_TYPE_2FA_FAIL\0202" +
      "\022\031\n\025AUDIT_LOG_TYPE_LOGOUT\020\003\022\'\n#AUDIT_LOG" +
      "_TYPE_MAIL_SETTINGS_CHANGE\020P\022 \n\034AUDIT_LO" +
      "G_TYPE_WALLET_CREATE\020\004\022!\n\035AUDIT_LOG_TYPE" +
      "_WALLET_APPROVE\020\005\022 \n\034AUDIT_LOG_TYPE_WALL" +
      "ET_CANCEL\020\006\022)\n%AUDIT_LOG_TYPE_WALLET_REG" +
      "ISTER_PUBKEY\020\007\022!\n\035AUDIT_LOG_TYPE_WALLET_" +
      "ARCHIVE\020\010\022#\n\037AUDIT_LOG_TYPE_WALLET_UNARC" +
      "HIVE\020\t\022%\n!AUDIT_LOG_TYPE_WALLET_NAME_CHA" +
      "NGE\020\n\022\'\n#AUDIT_LOG_TYPE_WALLET_POLICY_CH" +
      "ANGE\020\013\022.\n*AUDIT_LOG_TYPE_WALLET_NO_WHITE" +
      "LIST_REQUEST\020\014\022.\n*AUDIT_LOG_TYPE_WALLET_" +
      "NO_WHITELIST_APPROVE\020\r\022-\n)AUDIT_LOG_TYPE" +
      "_WALLET_NO_WHITELIST_CANCEL\020\016\022(\n$AUDIT_L" +
      "OG_TYPE_WALLET_ADDRESS_UPLOAD\0203\022*\n&AUDIT" +
      "_LOG_TYPE_WALLET_ADDRESS_DOWNLOAD\0204\022(\n$A" +
      "UDIT_LOG_TYPE_WALLET_ADDRESS_DELETE\0205\022*\n" +
      "&AUDIT_LOG_TYPE_WALLET_VALIDATOR_CHANGE\020" +
      "<\022+\n\'AUDIT_LOG_TYPE_WALLET_VALIDATOR_APP" +
      "ROVE\020=\022*\n&AUDIT_LOG_TYPE_WALLET_VALIDATO" +
      "R_CANCEL\020>\0223\n/AUDIT_LOG_TYPE_WALLET_DEST" +
      "INATION_WALLET_CHANGE\020?\022&\n\"AUDIT_LOG_TYP" +
      "E_WALLET_GROUP_CREATE\0206\022+\n\'AUDIT_LOG_TYP" +
      "E_WALLET_GROUP_NAME_CHANGE\0207\022&\n\"AUDIT_LO" +
      "G_TYPE_WALLET_GROUP_CHANGE\0208\022%\n!AUDIT_LO" +
      "G_TYPE_TRANSACTION_CREATE\020\017\022&\n\"AUDIT_LOG" +
      "_TYPE_TRANSACTION_APPROVE\020\020\022%\n!AUDIT_LOG" +
      "_TYPE_TRANSACTION_CANCEL\020\021\0221\n-AUDIT_LOG_" +
      "TYPE_TRANSACTION_REGISTER_SIGNATURE\020\022\022%\n" +
      "!AUDIT_LOG_TYPE_TRANSACTION_SUBMIT\020\023\022%\n!" +
      "AUDIT_LOG_TYPE_TRANSACTION_RESEND\020O\022&\n\"A" +
      "UDIT_LOG_TYPE_TRANSACTION_REPLACE\020b\022*\n&A" +
      "UDIT_LOG_TYPE_ACCOUNT_PASSWORD_CHANGE\020\024\022" +
      "\'\n#AUDIT_LOG_TYPE_ACCOUNT_EMAIL_CHANGE\020\025" +
      "\022!\n\035AUDIT_LOG_TYPE_ACCOUNT_INVITE\020\026\022\"\n\036A" +
      "UDIT_LOG_TYPE_ACCOUNT_ARCHIVE\020\027\022$\n AUDIT" +
      "_LOG_TYPE_ACCOUNT_UNARCHIVE\020\030\022)\n%AUDIT_L" +
      "OG_TYPE_SERVICE_ACCOUNT_CREATE\020\031\0224\n0AUDI" +
      "T_LOG_TYPE_SERVICE_ACCOUNT_CHANGE_PERMIS" +
      "SION\020\032\022+\n\'AUDIT_LOG_TYPE_SERVICE_ACCOUNT" +
      "_ACTIVATE\020\033\022+\n\'AUDIT_LOG_TYPE_SERVICE_AC" +
      "COUNT_INACTIVE\020\034\022)\n%AUDIT_LOG_TYPE_SERVI" +
      "CE_ACCOUNT_DELETE\020\035\022-\n)AUDIT_LOG_TYPE_SE" +
      "RVICE_ACCOUNT_KEY_CREATE\020\036\022-\n)AUDIT_LOG_" +
      "TYPE_SERVICE_ACCOUNT_KEY_DELETE\020\037\022(\n$AUD" +
      "IT_LOG_TYPE_POLICY_ADDRESS_CREATE\020 \022(\n$A" +
      "UDIT_LOG_TYPE_POLICY_ADDRESS_DELETE\020!\022)\n" +
      "%AUDIT_LOG_TYPE_POLICY_ADDRESS_APPROVE\020\"" +
      "\022(\n$AUDIT_LOG_TYPE_POLICY_ADDRESS_CANCEL" +
      "\020#\022/\n+AUDIT_LOG_TYPE_POLICY_SPENDING_LIM" +
      "IT_CREATE\020$\022/\n+AUDIT_LOG_TYPE_POLICY_SPE" +
      "NDING_LIMIT_CHANGE\020%\022/\n+AUDIT_LOG_TYPE_P" +
      "OLICY_SPENDING_LIMIT_DELETE\020&\0220\n,AUDIT_L" +
      "OG_TYPE_POLICY_SPENDING_LIMIT_APPROVE\020\'\022" +
      "/\n+AUDIT_LOG_TYPE_POLICY_SPENDING_LIMIT_" +
      "CANCEL\020(\022*\n&AUDIT_LOG_TYPE_POLICY_WHITEL" +
      "IST_CREATE\020)\022*\n&AUDIT_LOG_TYPE_POLICY_WH" +
      "ITELIST_CHANGE\020*\022*\n&AUDIT_LOG_TYPE_POLIC" +
      "Y_WHITELIST_DELETE\020+\022\'\n#AUDIT_LOG_TYPE_P" +
      "OLICY_POLICY_CREATE\020,\022\'\n#AUDIT_LOG_TYPE_" +
      "POLICY_POLICY_CHANGE\020-\022\'\n#AUDIT_LOG_TYPE" +
      "_POLICY_POLICY_DELETE\020.\022.\n*AUDIT_LOG_TYP" +
      "E_POLICY_REQUEST_NO_WHITELIST\020/\022.\n*AUDIT" +
      "_LOG_TYPE_POLICY_APPROVE_NO_WHITELIST\0200\022" +
      "-\n)AUDIT_LOG_TYPE_POLICY_CANCEL_NO_WHITE" +
      "LIST\0201\022.\n*AUDIT_LOG_TYPE_TRANSACTION_DEL" +
      "EGATE_CREATE\020@\022/\n+AUDIT_LOG_TYPE_TRANSAC" +
      "TION_DELEGATE_APPROVE\020A\022.\n*AUDIT_LOG_TYP" +
      "E_TRANSACTION_DELEGATE_CANCEL\020B\022:\n6AUDIT" +
      "_LOG_TYPE_TRANSACTION_DELEGATE_REGISTER_" +
      "SIGNATURE\020C\022.\n*AUDIT_LOG_TYPE_TRANSACTIO" +
      "N_DELEGATE_SUBMIT\020D\0220\n,AUDIT_LOG_TYPE_TR" +
      "ANSACTION_UNDELEGATE_CREATE\020E\0221\n-AUDIT_L" +
      "OG_TYPE_TRANSACTION_UNDELEGATE_APPROVE\020F" +
      "\0220\n,AUDIT_LOG_TYPE_TRANSACTION_UNDELEGAT" +
      "E_CANCEL\020G\022<\n8AUDIT_LOG_TYPE_TRANSACTION" +
      "_UNDELEGATE_REGISTER_SIGNATURE\020H\0220\n,AUDI" +
      "T_LOG_TYPE_TRANSACTION_UNDELEGATE_SUBMIT" +
      "\020I\022.\n*AUDIT_LOG_TYPE_TRANSACTION_WITHDRA" +
      "W_CREATE\020J\022/\n+AUDIT_LOG_TYPE_TRANSACTION" +
      "_WITHDRAW_APPROVE\020K\022.\n*AUDIT_LOG_TYPE_TR" +
      "ANSACTION_WITHDRAW_CANCEL\020L\022:\n6AUDIT_LOG" +
      "_TYPE_TRANSACTION_WITHDRAW_REGISTER_SIGN" +
      "ATURE\020M\022.\n*AUDIT_LOG_TYPE_TRANSACTION_WI" +
      "THDRAW_SUBMIT\020N\022*\n&AUDIT_LOG_TYPE_PRE_TR" +
      "ANSACTION_APPROVE\020`\022)\n%AUDIT_LOG_TYPE_PR" +
      "E_TRANSACTION_REJECT\020a\022?\n;AUDIT_LOG_TYPE" +
      "_PRE_TRANSACTION_THRESHOLD_CREATION_REQU" +
      "ESTED\020Q\022>\n:AUDIT_LOG_TYPE_PRE_TRANSACTIO" +
      "N_THRESHOLD_CREATION_APPROVED\020R\022>\n:AUDIT" +
      "_LOG_TYPE_PRE_TRANSACTION_THRESHOLD_CREA" +
      "TION_REJECTED\020S\022=\n9AUDIT_LOG_TYPE_PRE_TR" +
      "ANSACTION_THRESHOLD_CHANGE_REQUESTED\020T\022<" +
      "\n8AUDIT_LOG_TYPE_PRE_TRANSACTION_THRESHO" +
      "LD_CHANGE_APPROVED\020U\022<\n8AUDIT_LOG_TYPE_P" +
      "RE_TRANSACTION_THRESHOLD_CHANGE_REJECTED" +
      "\020V\022=\n9AUDIT_LOG_TYPE_BLACKLIST_ADDRESS_S" +
      "TATE_CREATION_REQUESTED\020W\022<\n8AUDIT_LOG_T" +
      "YPE_BLACKLIST_ADDRESS_STATE_CREATION_APP" +
      "ROVED\020X\022<\n8AUDIT_LOG_TYPE_BLACKLIST_ADDR" +
      "ESS_STATE_CREATION_REJECTED\020Y\022;\n7AUDIT_L" +
      "OG_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_R" +
      "EQUESTED\020Z\0228\n4AUDIT_LOG_TYPE_BLACKLIST_A" +
      "DDRESS_STATE_IMPORT_FAILED\020c\022:\n6AUDIT_LO" +
      "G_TYPE_BLACKLIST_ADDRESS_STATE_IMPORT_AP" +
      "PROVED\020[\022:\n6AUDIT_LOG_TYPE_BLACKLIST_ADD" +
      "RESS_STATE_IMPORT_REJECTED\020\\\022;\n7AUDIT_LO" +
      "G_TYPE_BLACKLIST_ADDRESS_STATE_CHANGE_RE" +
      "QUESTED\020]\022:\n6AUDIT_LOG_TYPE_BLACKLIST_AD" +
      "DRESS_STATE_CHANGE_APPROVED\020^\022:\n6AUDIT_L" +
      "OG_TYPE_BLACKLIST_ADDRESS_STATE_CHANGE_R" +
      "EJECTED\020_\022;\n7AUDIT_LOG_TYPE_BLACKLIST_AD" +
      "DRESS_STATE_EXPORT_REQUESTED\020d*\252\016\n\027Preco" +
      "nditionFailureType\022%\n!PRECONDITION_FAILU" +
      "RE_TYPE_INVALID\020\000\022*\n&PRECONDITION_FAILUR" +
      "E_TYPE_MFA_REQUIRED\020\001\0220\n,PRECONDITION_FA" +
      "ILURE_TYPE_MFA_NOT_REGISTERED\020\002\022-\n)PRECO" +
      "NDITION_FAILURE_TYPE_USER_NOT_ACTIVE\020\003\022." +
      "\n*PRECONDITION_FAILURE_TYPE_USER_IS_ARCH" +
      "IVED\020\004\0223\n/PRECONDITION_FAILURE_TYPE_EMAI" +
      "L_IS_ALREADY_USED\020\005\0229\n5PRECONDITION_FAIL" +
      "URE_TYPE_INVITATION_TOKEN_IS_INVALID\020\033\0229" +
      "\n5PRECONDITION_FAILURE_TYPE_INVITATION_T" +
      "OKEN_IS_EXPIRED\020\034\022<\n8PRECONDITION_FAILUR" +
      "E_TYPE_INSUFFICIENT_SPENDABLE_BALANCE\020\006\022" +
      "3\n/PRECONDITION_FAILURE_TYPE_HOURLY_LIMI" +
      "T_EXCEEDED\020\007\0222\n.PRECONDITION_FAILURE_TYP" +
      "E_DAILY_LIMIT_EXCEEDED\020\010\0224\n0PRECONDITION" +
      "_FAILURE_TYPE_ONETIME_LIMIT_EXCEEDED\020\t\0229" +
      "\n5PRECONDITION_FAILURE_TYPE_WALLET_NAME_" +
      "IS_ALREADY_USED\020\n\0220\n,PRECONDITION_FAILUR" +
      "E_TYPE_WALLET_IS_CANCELED\020\013\0220\n,PRECONDIT" +
      "ION_FAILURE_TYPE_WALLET_IS_ARCHIVED\020\014\0225\n" +
      "1PRECONDITION_FAILURE_TYPE_TRANSACTION_I" +
      "S_CANCELED\020\r\0225\n1PRECONDITION_FAILURE_TYP" +
      "E_PROPOSAL_ALREADY_EXISTS\020\016\022%\n!PRECONDIT" +
      "ION_FAILURE_TYPE_NO_RATE\020\017\0225\n1PRECONDITI" +
      "ON_FAILURE_TYPE_WHITELIST_OF_BASEPOLICY\020" +
      "\020\022@\n<PRECONDITION_FAILURE_TYPE_CANNOT_AR" +
      "CHIVE_WALLET_WITH_BALANCE\020\021\022;\n7PRECONDIT" +
      "ION_FAILURE_TYPE_TEMPORARY_INCREASE_IN_F" +
      "EERATE\020\022\022>\n:PRECONDITION_FAILURE_TYPE_IN" +
      "SUFFICIENT_FEE_ACCOUNT_BALANCE\020\024\022X\nTPREC" +
      "ONDITION_FAILURE_TYPE_CANNOT_FLUSH_BALAN" +
      "CE_DUE_TO_EXISTING_UNCONFIRMED_TRANSFERS" +
      "\020\025\0226\n2PRECONDITION_FAILURE_TYPE_WALLET_S" +
      "TATE_IS_FLUSHING\020\026\022A\n=PRECONDITION_FAILU" +
      "RE_TYPE_WALLET_FLUSH_SETTING_DOES_NOT_EX" +
      "IST\020\027\022:\n6PRECONDITION_FAILURE_TYPE_TRANS" +
      "ACTION_ALREADY_CANCELED\020\030\022;\n7PRECONDITIO" +
      "N_FAILURE_TYPE_TRANSACTION_ALREADY_SUBMI" +
      "TTED\020\031\022X\nTPRECONDITION_FAILURE_TYPE_CANN" +
      "OT_OPERATE_TRANSACTION_DUE_TO_WALLET_STA" +
      "TE_IS_CREATING\020\032\022>\n:PRECONDITION_FAILURE" +
      "_TYPE_TRANSACTION_INCLUDE_SELF_ADDRESS\020\035" +
      "\022W\nSPRECONDITION_FAILURE_TYPE_WALLET_FLU" +
      "SH_SETTING_DESTINATION_WALLET_ID_DOES_NO" +
      "T_EXIST\020\036\0228\n4PRECONDITION_FAILURE_TYPE_P" +
      "ROHIBITED_BY_SUBSCRIPTION\020\023*\337\007\n\016ListFilt" +
      "erType\022\034\n\030LIST_FILTER_TYPE_INVALID\020\000\022\036\n\032" +
      "LIST_FILTER_TYPE_WALLET_ID\020\001\022 \n\034LIST_FIL" +
      "TER_TYPE_WALLET_NAME\020\002\022#\n\037LIST_FILTER_TY" +
      "PE_WALLET_ADDRESS\020\003\022#\n\037LIST_FILTER_TYPE_" +
      "TRANSACTION_ID\020\004\022 \n\034LIST_FILTER_TYPE_TRA" +
      "NSFER_ID\020\005\022!\n\035LIST_FILTER_TYPE_ADDRESS_N" +
      "AME\020\006\022\034\n\030LIST_FILTER_TYPE_ADDRESS\020\007\022\031\n\025L" +
      "IST_FILTER_TYPE_TXID\020\010\022\035\n\031LIST_FILTER_TY" +
      "PE_OWNER_ID\020\t\022*\n&LIST_FILTER_TYPE_WALLET" +
      "_ID_CREATE_TIME\020\n\022\036\n\032LIST_FILTER_TYPE_PO" +
      "LICY_ID\020\013\022 \n\034LIST_FILTER_TYPE_POLICY_NAM" +
      "E\020\014\022\037\n\033LIST_FILTER_TYPE_ADDRESS_ID\020\r\022!\n\035" +
      "LIST_FILTER_TYPE_WHITELIST_ID\020\016\022#\n\037LIST_" +
      "FILTER_TYPE_WHITELIST_NAME\020\017\022&\n\"LIST_FIL" +
      "TER_TYPE_TRANSFER_LIMIT_ID\020\020\022(\n$LIST_FIL" +
      "TER_TYPE_TRANSFER_LIMIT_NAME\020\021\022!\n\035LIST_F" +
      "ILTER_TYPE_VALIDATOR_ID\020\022\022\037\n\033LIST_FILTER" +
      "_TYPE_BLOCK_HASH\020\023\022)\n%LIST_FILTER_TYPE_S" +
      "TAKING_VALIDATOR_ID\020\024\022\'\n#LIST_FILTER_TYP" +
      "E_STAKING_HISTORY_ID\020\025\0221\n-LIST_FILTER_TY" +
      "PE_PRE_TRANSACTION_THRESHOLD_ID\020\026\022)\n%LIS" +
      "T_FILTER_TYPE_BLACKLIST_ADDRESS_ID\020\027\022\'\n#" +
      "LIST_FILTER_TYPE_PRE_TRANSACTION_ID\020\030\022 \n" +
      "\034LIST_FILTER_TYPE_EXTERNAL_ID\020\031\022\034\n\030LIST_" +
      "FILTER_TYPE_FILE_ID\020\032*\372\r\n\010MailType\022\025\n\021MA" +
      "IL_TYPE_INVALID\020\000\022\032\n\026MAIL_TYPE_USER_INVI" +
      "TED\020\001\022$\n MAIL_TYPE_PASSWORD_RESET_REQUES" +
      "T\020\002\022\036\n\032MAIL_TYPE_PASSWORD_UPDATED\020\003\022\"\n\036M" +
      "AIL_TYPE_EMAIL_UPDATE_REQUEST\020\004\022\033\n\027MAIL_" +
      "TYPE_EMAIL_UPDATED\020\005\022)\n%MAIL_TYPE_FRAUD_" +
      "TRANSACTION_SUBMITTED\020\006\022&\n\"MAIL_TYPE_IMP" +
      "ORT_ADDRESS_COMPLETED\020\007\022(\n$MAIL_TYPE_VAL" +
      "IDATOR_CHANGE_REQUESTED\020\010\022\'\n#MAIL_TYPE_U" +
      "NCHECKED_TRANSFER_EXISTS\020\t\022\037\n\033MAIL_TYPE_" +
      "DOWNLOAD_RESOURCE\020\n\022\037\n\033MAIL_TYPE_TRANSFE" +
      "R_RECEIVED\020\013\022&\n\"MAIL_TYPE_PRE_TRANSACTIO" +
      "N_APPROVED\020\035\022&\n\"MAIL_TYPE_PRE_TRANSACTIO" +
      "N_REJECTED\020\036\022!\n\035MAIL_TYPE_TRANSACTION_CR" +
      "EATED\020\014\022#\n\037MAIL_TYPE_TRANSACTION_SUBMITT" +
      "ED\020\r\022 \n\034MAIL_TYPE_TRANSACTION_RESENT\020\024\022 " +
      "\n\034MAIL_TYPE_VALIDATOR_APPROVED\020\016\022 \n\034MAIL" +
      "_TYPE_VALIDATOR_CANCELED\020\017\022#\n\037MAIL_TYPE_" +
      "WALLET_POLICY_CHANGED\020\020\022+\n\'MAIL_TYPE_WAL" +
      "LET_NO_WHITELIST_REQUESTED\020\021\022*\n&MAIL_TYP" +
      "E_WALLET_NO_WHITELIST_APPROVED\020\022\022*\n&MAIL" +
      "_TYPE_WALLET_NO_WHITELIST_CANCELED\020\023\022#\n\037" +
      "MAIL_TYPE_MAIL_SETTINGS_UPDATED\020\025\022:\n6MAI" +
      "L_TYPE_PRE_TRANSACTION_THRESHOLD_CREATIO" +
      "N_REQUESTED\020\026\0229\n5MAIL_TYPE_PRE_TRANSACTI" +
      "ON_THRESHOLD_CREATION_APPROVED\020\027\0229\n5MAIL" +
      "_TYPE_PRE_TRANSACTION_THRESHOLD_CREATION" +
      "_REJECTED\020\030\0228\n4MAIL_TYPE_PRE_TRANSACTION" +
      "_THRESHOLD_CHANGE_REQUESTED\020\031\0227\n3MAIL_TY" +
      "PE_PRE_TRANSACTION_THRESHOLD_CHANGE_APPR" +
      "OVED\020\032\0227\n3MAIL_TYPE_PRE_TRANSACTION_THRE" +
      "SHOLD_CHANGE_REJECTED\020\033\0222\n.MAIL_TYPE_BLA" +
      "CKLIST_ADDRESS_CREATION_REQUESTED\020\037\0221\n-M" +
      "AIL_TYPE_BLACKLIST_ADDRESS_CREATION_APPR" +
      "OVED\020 \0221\n-MAIL_TYPE_BLACKLIST_ADDRESS_CR" +
      "EATION_REJECTED\020!\0220\n,MAIL_TYPE_BLACKLIST" +
      "_ADDRESS_IMPORT_REQUESTED\020\"\022-\n)MAIL_TYPE" +
      "_BLACKLIST_ADDRESS_IMPORT_FAILED\020#\022/\n+MA" +
      "IL_TYPE_BLACKLIST_ADDRESS_IMPORT_APPROVE" +
      "D\020$\022/\n+MAIL_TYPE_BLACKLIST_ADDRESS_IMPOR" +
      "T_REJECTED\020%\0220\n,MAIL_TYPE_BLACKLIST_ADDR" +
      "ESS_CHANGE_REQUESTED\020&\022/\n+MAIL_TYPE_BLAC" +
      "KLIST_ADDRESS_CHANGE_APPROVED\020\'\022/\n+MAIL_" +
      "TYPE_BLACKLIST_ADDRESS_CHANGE_REJECTED\020(" +
      "\0220\n,MAIL_TYPE_BLACKLIST_ADDRESS_EXPORT_R" +
      "EQUESTED\020)*\370\002\n\025WatchOnlyAddressState\022$\n " +
      "WATCH_ONLY_ADDRESS_STATE_INVALID\020\000\022.\n*WA" +
      "TCH_ONLY_ADDRESS_STATE_ADDRESS_IMPORTING" +
      "\020\001\022-\n)WATCH_ONLY_ADDRESS_STATE_ADDRESS_I" +
      "MPORTED\020\002\022*\n&WATCH_ONLY_ADDRESS_STATE_IM" +
      "PORT_FAILED\020\003\022-\n)WATCH_ONLY_ADDRESS_STAT" +
      "E_ADDRESS_DELETING\020\004\022,\n(WATCH_ONLY_ADDRE" +
      "SS_STATE_ADDRESS_DELETED\020\005\022*\n&WATCH_ONLY" +
      "_ADDRESS_STATE_DELETE_FAILED\020\006\022%\n!WATCH_" +
      "ONLY_ADDRESS_STATE_DOWNLOAD\020\007*\345\004\n\021Substr" +
      "ateCallType\022\037\n\033SUBSTRATE_CALL_TYPE_INVAL" +
      "ID\020\000\022 \n\034SUBSTRATE_CALL_TYPE_TRANSFER\020\001\022$" +
      "\n SUBSTRATE_CALL_TYPE_TRANSFER_ALL\020\002\022+\n\'" +
      "SUBSTRATE_CALL_TYPE_TRANSFER_KEEP_ALIVE\020" +
      "\003\022(\n$SUBSTRATE_CALL_TYPE_APPROVE_AS_MULT" +
      "I\020\004\022 \n\034SUBSTRATE_CALL_TYPE_AS_MULTI\020\005\022+\n" +
      "\'SUBSTRATE_CALL_TYPE_AS_MULTI_THRESHOLD1" +
      "\020\006\022\'\n#SUBSTRATE_CALL_TYPE_CANCEL_AS_MULT" +
      "I\020\007\022,\n(SUBSTRATE_CALL_TYPE_TRANSFER_ALLO" +
      "W_DEATH\020\010\022\034\n\030SUBSTRATE_CALL_TYPE_JOIN\020\t\022" +
      "/\n+SUBSTRATE_CALL_TYPE_BOND_EXTRA_FREE_B" +
      "ALANCE\020\n\022*\n&SUBSTRATE_CALL_TYPE_BOND_EXT" +
      "RA_REWARDS\020\013\022\036\n\032SUBSTRATE_CALL_TYPE_UNBO" +
      "ND\020\014\022)\n%SUBSTRATE_CALL_TYPE_WITHDRAW_UNB" +
      "ONDED\020\r\022$\n SUBSTRATE_CALL_TYPE_CLAIM_PAY" +
      "OUT\020\016*\377\003\n\024DownloadResourceType\022\"\n\036DOWNLO" +
      "AD_RESOURCE_TYPE_INVALID\020\000\022:\n6DOWNLOAD_R" +
      "ESOURCE_TYPE_ALL_WALLET_BALANCE_SNAPSHOT" +
      "_EOD\020\001\022@\n<DOWNLOAD_RESOURCE_TYPE_ALL_WAL" +
      "LET_GROUP_BALANCE_SNAPSHOT_EOD\020\002\022@\n<DOWN" +
      "LOAD_RESOURCE_TYPE_ALL_WALLET_BALANCE_SN" +
      "APSHOT_ON_DEMAND\020\003\022F\nBDOWNLOAD_RESOURCE_" +
      "TYPE_ALL_WALLET_GROUP_BALANCE_SNAPSHOT_O" +
      "N_DEMAND\020\004\022*\n&DOWNLOAD_RESOURCE_TYPE_WAL" +
      "LET_TRANSFER\020\005\022)\n%DOWNLOAD_RESOURCE_TYPE" +
      "_WALLET_ADDRESS\020\006\0226\n2DOWNLOAD_RESOURCE_T" +
      "YPE_WALLET_ADDRESS_WITH_BALANCE\020\007\022,\n(DOW" +
      "NLOAD_RESOURCE_TYPE_BLACKLIST_ADDRESS\020\010*" +
      "\274\001\n\031EventTriggeredMessageType\022(\n$EVENT_T" +
      "RIGGERED_MESSAGE_TYPE_INVALID\020\000\0229\n5EVENT" +
      "_TRIGGERED_MESSAGE_TYPE_UNCHECKED_TRANSF" +
      "ER_ALERT\020\001\022:\n6EVENT_TRIGGERED_MESSAGE_TY" +
      "PE_FRAUDULENT_TRANSFER_ALERT\020\002*\301\001\n\034Walle" +
      "tConnectCallRequestType\022,\n(WALLET_CONNEC",
      "T_CALL_REQUEST_TYPE_INVALID\020\000\0229\n5WALLET_" +
      "CONNECT_CALL_REQUEST_TYPE_ETH_SEND_TRANS" +
      "ACTION\020\001\0228\n4WALLET_CONNECT_CALL_REQUEST_" +
      "TYPE_ETH_SIGN_TYPED_DATA\020\002*\373\007\n\034EthereumC" +
      "ontractMethodIDType\022,\n(ETHEREUM_CONTRACT" +
      "_METHOD_ID_TYPE_INVALID\020\000\0222\n.ETHEREUM_CO" +
      "NTRACT_METHOD_ID_TYPE_ERC20_APPROVE\020\001\0226\n" +
      "2ETHEREUM_CONTRACT_METHOD_ID_TYPE_UNISWA" +
      "P_MULTICALL\020\002\0225\n1ETHEREUM_CONTRACT_METHO" +
      "D_ID_TYPE_ERC20_INITIALIZE\020\003\022;\n7ETHEREUM" +
      "_CONTRACT_METHOD_ID_TYPE_ERC20_CONFIGURE" +
      "_MINTER\020\004\022<\n8ETHEREUM_CONTRACT_METHOD_ID" +
      "_TYPE_ERC20_MINT_AND_TRANSFER\020\005\022/\n+ETHER" +
      "EUM_CONTRACT_METHOD_ID_TYPE_ERC20_MINT\020\006" +
      "\022/\n+ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC" +
      "20_BURN\020\007\022C\n?ETHEREUM_CONTRACT_METHOD_ID" +
      "_TYPE_ERC20_BULK_UPDATE_TO_WHITELIST\020\010\022?" +
      "\n;ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20" +
      "_BULK_UPDATE_TO_UNSET\020\t\022C\n?ETHEREUM_CONT" +
      "RACT_METHOD_ID_TYPE_ERC20_BULK_UPDATE_TO" +
      "_BLACKLIST\020\n\0225\n1ETHEREUM_CONTRACT_METHOD" +
      "_ID_TYPE_ERC20_CONFISCATE\020\013\0220\n,ETHEREUM_" +
      "CONTRACT_METHOD_ID_TYPE_ERC20_PAUSE\020\014\0222\n" +
      ".ETHEREUM_CONTRACT_METHOD_ID_TYPE_ERC20_" +
      "UNPAUSE\020\r\022G\nCETHEREUM_CONTRACT_METHOD_ID" +
      "_TYPE_ERC20_GRANT_WHITE_AND_BLACK_LISTER" +
      "\020\016\022<\n8ETHEREUM_CONTRACT_METHOD_ID_TYPE_E" +
      "RC20_CONTRACT_CREATION\020\017\022>\n:ETHEREUM_CON" +
      "TRACT_METHOD_ID_TYPE_ERC20_UPGRADE_TO_AN" +
      "D_CALL\020\020*\325\002\n\016IOSTActionType\022\034\n\030IOST_ACTI" +
      "ON_TYPE_INVALID\020\000\022\034\n\030IOST_ACTION_TYPE_SI" +
      "GN_UP\020\001\022&\n\"IOST_ACTION_TYPE_ASSIGN_PERMI" +
      "SSION\020\002\022\035\n\031IOST_ACTION_TYPE_TRANSFER\020\003\022\034" +
      "\n\030IOST_ACTION_TYPE_BUY_RAM\020\004\022\035\n\031IOST_ACT" +
      "ION_TYPE_SELL_RAM\020\005\022\031\n\025IOST_ACTION_TYPE_" +
      "VOTE\020\006\022\033\n\027IOST_ACTION_TYPE_UNVOTE\020\007\022#\n\037I" +
      "OST_ACTION_TYPE_WITHDRAW_BONUS\020\010\022&\n\"IOST" +
      "_ACTION_TYPE_REVOKE_PERMISSION\020\t*\267\001\n\026Bla" +
      "cklistAddressStatus\022$\n BLACKLIST_ADDRESS" +
      "_STATUS_INVALID\020\000\022)\n%BLACKLIST_ADDRESS_S" +
      "TATUS_NOT_REVIEWED\020\001\022%\n!BLACKLIST_ADDRES" +
      "S_STATUS_APPROVED\020\002\022%\n!BLACKLIST_ADDRESS" +
      "_STATUS_REJECTED\020\003BLZJgithub.com/GincoIn" +
      "c/gew-kmp/gen/gincoinc/adamant/global/v1" +
      "/adamantglobalv1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
