// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gincoinc/adamant/global/v1/adamantglobalv1/enum.proto

package java.adamant.global.v1;

/**
 * <pre>
 * WalletState is a state of wallet.
 * </pre>
 *
 * Protobuf enum {@code adamant.global.v1.WalletState}
 */
public enum WalletState
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>WALLET_STATE_INVALID = 0;</code>
   */
  WALLET_STATE_INVALID(0),
  /**
   * <code>WALLET_STATE_PROPOSED = 1;</code>
   */
  WALLET_STATE_PROPOSED(1),
  /**
   * <pre>
   * Waiting for key register
   * </pre>
   *
   * <code>WALLET_STATE_KEY_REGISTERING = 2;</code>
   */
  WALLET_STATE_KEY_REGISTERING(2),
  /**
   * <pre>
   * Key was registed to Wallet
   * </pre>
   *
   * <code>WALLET_STATE_KEY_REGISTERED = 3;</code>
   */
  WALLET_STATE_KEY_REGISTERED(3),
  /**
   * <pre>
   * Waiting for review for validator
   * </pre>
   *
   * <code>WALLET_STATE_VALIDATOR_REVIEWING = 4;</code>
   */
  WALLET_STATE_VALIDATOR_REVIEWING(4),
  /**
   * <pre>
   * Validator reviewd
   * </pre>
   *
   * <code>WALLET_STATE_VALIDATOR_REVIEWED = 5;</code>
   */
  WALLET_STATE_VALIDATOR_REVIEWED(5),
  /**
   * <pre>
   * Waiting for activate
   * </pre>
   *
   * <code>WALLET_STATE_ACTIVATING = 6;</code>
   */
  WALLET_STATE_ACTIVATING(6),
  /**
   * <pre>
   * Wallet was activated
   * </pre>
   *
   * <code>WALLET_STATE_ACTIVATED = 7;</code>
   */
  WALLET_STATE_ACTIVATED(7),
  /**
   * <pre>
   * Waiting for sign
   * </pre>
   *
   * <code>WALLET_STATE_SIGNING = 8;</code>
   */
  WALLET_STATE_SIGNING(8),
  /**
   * <pre>
   * was signed
   * </pre>
   *
   * <code>WALLET_STATE_SIGNED = 9;</code>
   */
  WALLET_STATE_SIGNED(9),
  /**
   * <pre>
   * Waiting for submit transaction which regist public key to contract
   * </pre>
   *
   * <code>WALLET_STATE_SUBMITTING = 10;</code>
   */
  WALLET_STATE_SUBMITTING(10),
  /**
   * <pre>
   * Transaction was submitted
   * </pre>
   *
   * <code>WALLET_STATE_SUBMITTED = 11;</code>
   */
  WALLET_STATE_SUBMITTED(11),
  /**
   * <pre>
   * Creating wallet successfuly completed
   * </pre>
   *
   * <code>WALLET_STATE_COMPLETED = 12;</code>
   */
  WALLET_STATE_COMPLETED(12),
  /**
   * <pre>
   * Wallet was cancelled
   * </pre>
   *
   * <code>WALLET_STATE_CANCELLED = 13;</code>
   */
  WALLET_STATE_CANCELLED(13),
  /**
   * <pre>
   * Wallet was archived
   * </pre>
   *
   * <code>WALLET_STATE_ARCHIVED = 14;</code>
   */
  WALLET_STATE_ARCHIVED(14),
  /**
   * <pre>
   * Waiting for import address
   * </pre>
   *
   * <code>WALLET_STATE_ADDRESS_IMPORT_WAITING = 15;</code>
   */
  WALLET_STATE_ADDRESS_IMPORT_WAITING(15),
  /**
   * <pre>
   * Importing address
   * </pre>
   *
   * <code>WALLET_STATE_ADDRESS_IMPORTING = 16;</code>
   */
  WALLET_STATE_ADDRESS_IMPORTING(16),
  /**
   * <pre>
   * Failed import address
   * </pre>
   *
   * <code>WALLET_STATE_ADDRESS_IMPORT_FAILED = 17;</code>
   */
  WALLET_STATE_ADDRESS_IMPORT_FAILED(17),
  /**
   * <pre>
   * Deleting address
   * </pre>
   *
   * <code>WALLET_STATE_ADDRESS_DELETING = 18;</code>
   */
  WALLET_STATE_ADDRESS_DELETING(18),
  /**
   * <pre>
   * Failed delete address
   * </pre>
   *
   * <code>WALLET_STATE_ADDRESS_DELETE_FAILED = 19;</code>
   */
  WALLET_STATE_ADDRESS_DELETE_FAILED(19),
  /**
   * <pre>
   * Balance flushing
   * </pre>
   *
   * <code>WALLET_STATE_FLUSHING = 20;</code>
   */
  WALLET_STATE_FLUSHING(20),
  /**
   * <pre>
   * Waiting for create account
   * </pre>
   *
   * <code>WALLET_STATE_ACCOUNT_CREATING = 21;</code>
   */
  WALLET_STATE_ACCOUNT_CREATING(21),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>WALLET_STATE_INVALID = 0;</code>
   */
  public static final int WALLET_STATE_INVALID_VALUE = 0;
  /**
   * <code>WALLET_STATE_PROPOSED = 1;</code>
   */
  public static final int WALLET_STATE_PROPOSED_VALUE = 1;
  /**
   * <pre>
   * Waiting for key register
   * </pre>
   *
   * <code>WALLET_STATE_KEY_REGISTERING = 2;</code>
   */
  public static final int WALLET_STATE_KEY_REGISTERING_VALUE = 2;
  /**
   * <pre>
   * Key was registed to Wallet
   * </pre>
   *
   * <code>WALLET_STATE_KEY_REGISTERED = 3;</code>
   */
  public static final int WALLET_STATE_KEY_REGISTERED_VALUE = 3;
  /**
   * <pre>
   * Waiting for review for validator
   * </pre>
   *
   * <code>WALLET_STATE_VALIDATOR_REVIEWING = 4;</code>
   */
  public static final int WALLET_STATE_VALIDATOR_REVIEWING_VALUE = 4;
  /**
   * <pre>
   * Validator reviewd
   * </pre>
   *
   * <code>WALLET_STATE_VALIDATOR_REVIEWED = 5;</code>
   */
  public static final int WALLET_STATE_VALIDATOR_REVIEWED_VALUE = 5;
  /**
   * <pre>
   * Waiting for activate
   * </pre>
   *
   * <code>WALLET_STATE_ACTIVATING = 6;</code>
   */
  public static final int WALLET_STATE_ACTIVATING_VALUE = 6;
  /**
   * <pre>
   * Wallet was activated
   * </pre>
   *
   * <code>WALLET_STATE_ACTIVATED = 7;</code>
   */
  public static final int WALLET_STATE_ACTIVATED_VALUE = 7;
  /**
   * <pre>
   * Waiting for sign
   * </pre>
   *
   * <code>WALLET_STATE_SIGNING = 8;</code>
   */
  public static final int WALLET_STATE_SIGNING_VALUE = 8;
  /**
   * <pre>
   * was signed
   * </pre>
   *
   * <code>WALLET_STATE_SIGNED = 9;</code>
   */
  public static final int WALLET_STATE_SIGNED_VALUE = 9;
  /**
   * <pre>
   * Waiting for submit transaction which regist public key to contract
   * </pre>
   *
   * <code>WALLET_STATE_SUBMITTING = 10;</code>
   */
  public static final int WALLET_STATE_SUBMITTING_VALUE = 10;
  /**
   * <pre>
   * Transaction was submitted
   * </pre>
   *
   * <code>WALLET_STATE_SUBMITTED = 11;</code>
   */
  public static final int WALLET_STATE_SUBMITTED_VALUE = 11;
  /**
   * <pre>
   * Creating wallet successfuly completed
   * </pre>
   *
   * <code>WALLET_STATE_COMPLETED = 12;</code>
   */
  public static final int WALLET_STATE_COMPLETED_VALUE = 12;
  /**
   * <pre>
   * Wallet was cancelled
   * </pre>
   *
   * <code>WALLET_STATE_CANCELLED = 13;</code>
   */
  public static final int WALLET_STATE_CANCELLED_VALUE = 13;
  /**
   * <pre>
   * Wallet was archived
   * </pre>
   *
   * <code>WALLET_STATE_ARCHIVED = 14;</code>
   */
  public static final int WALLET_STATE_ARCHIVED_VALUE = 14;
  /**
   * <pre>
   * Waiting for import address
   * </pre>
   *
   * <code>WALLET_STATE_ADDRESS_IMPORT_WAITING = 15;</code>
   */
  public static final int WALLET_STATE_ADDRESS_IMPORT_WAITING_VALUE = 15;
  /**
   * <pre>
   * Importing address
   * </pre>
   *
   * <code>WALLET_STATE_ADDRESS_IMPORTING = 16;</code>
   */
  public static final int WALLET_STATE_ADDRESS_IMPORTING_VALUE = 16;
  /**
   * <pre>
   * Failed import address
   * </pre>
   *
   * <code>WALLET_STATE_ADDRESS_IMPORT_FAILED = 17;</code>
   */
  public static final int WALLET_STATE_ADDRESS_IMPORT_FAILED_VALUE = 17;
  /**
   * <pre>
   * Deleting address
   * </pre>
   *
   * <code>WALLET_STATE_ADDRESS_DELETING = 18;</code>
   */
  public static final int WALLET_STATE_ADDRESS_DELETING_VALUE = 18;
  /**
   * <pre>
   * Failed delete address
   * </pre>
   *
   * <code>WALLET_STATE_ADDRESS_DELETE_FAILED = 19;</code>
   */
  public static final int WALLET_STATE_ADDRESS_DELETE_FAILED_VALUE = 19;
  /**
   * <pre>
   * Balance flushing
   * </pre>
   *
   * <code>WALLET_STATE_FLUSHING = 20;</code>
   */
  public static final int WALLET_STATE_FLUSHING_VALUE = 20;
  /**
   * <pre>
   * Waiting for create account
   * </pre>
   *
   * <code>WALLET_STATE_ACCOUNT_CREATING = 21;</code>
   */
  public static final int WALLET_STATE_ACCOUNT_CREATING_VALUE = 21;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static WalletState valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static WalletState forNumber(int value) {
    switch (value) {
      case 0: return WALLET_STATE_INVALID;
      case 1: return WALLET_STATE_PROPOSED;
      case 2: return WALLET_STATE_KEY_REGISTERING;
      case 3: return WALLET_STATE_KEY_REGISTERED;
      case 4: return WALLET_STATE_VALIDATOR_REVIEWING;
      case 5: return WALLET_STATE_VALIDATOR_REVIEWED;
      case 6: return WALLET_STATE_ACTIVATING;
      case 7: return WALLET_STATE_ACTIVATED;
      case 8: return WALLET_STATE_SIGNING;
      case 9: return WALLET_STATE_SIGNED;
      case 10: return WALLET_STATE_SUBMITTING;
      case 11: return WALLET_STATE_SUBMITTED;
      case 12: return WALLET_STATE_COMPLETED;
      case 13: return WALLET_STATE_CANCELLED;
      case 14: return WALLET_STATE_ARCHIVED;
      case 15: return WALLET_STATE_ADDRESS_IMPORT_WAITING;
      case 16: return WALLET_STATE_ADDRESS_IMPORTING;
      case 17: return WALLET_STATE_ADDRESS_IMPORT_FAILED;
      case 18: return WALLET_STATE_ADDRESS_DELETING;
      case 19: return WALLET_STATE_ADDRESS_DELETE_FAILED;
      case 20: return WALLET_STATE_FLUSHING;
      case 21: return WALLET_STATE_ACCOUNT_CREATING;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<WalletState>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      WalletState> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<WalletState>() {
          public WalletState findValueByNumber(int number) {
            return WalletState.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return java.adamant.global.v1.EnumProto.getDescriptor().getEnumTypes().get(1);
  }

  private static final WalletState[] VALUES = values();

  public static WalletState valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private WalletState(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:adamant.global.v1.WalletState)
}

