// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gincoinc/adamant/global/v1/adamantglobalv1/global_api.proto

package java.adamant.global.v1;

/**
* Validates {@code CreateWhitelistRequest} protobuf objects.
*/
public class CreateWhitelistRequestValidator implements io.envoyproxy.pgv.ValidatorImpl<java.adamant.global.v1.CreateWhitelistRequest>{
	public static io.envoyproxy.pgv.ValidatorImpl validatorFor(Class clazz) {
		if (clazz.equals(java.adamant.global.v1.CreateWhitelistRequest.class)) return new CreateWhitelistRequestValidator();
		
		return null;
	}
		
	
		
		private final java.gincoinc.global.v1.Coin[] COIN__NOT_IN = new java.gincoinc.global.v1.Coin[]{
			java.gincoinc.global.v1.Coin.forNumber(0),
		};
	
		
	
	

	public void assertValid(java.adamant.global.v1.CreateWhitelistRequest proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
			io.envoyproxy.pgv.StringValidation.minLength(".adamant.global.v1.CreateWhitelistRequest.name", proto.getName(), 1);
			io.envoyproxy.pgv.StringValidation.maxLength(".adamant.global.v1.CreateWhitelistRequest.name", proto.getName(), 40);
	
			io.envoyproxy.pgv.EnumValidation.definedOnly(".adamant.global.v1.CreateWhitelistRequest.coin", proto.getCoin());
			io.envoyproxy.pgv.CollectiveValidation.notIn(".adamant.global.v1.CreateWhitelistRequest.coin", proto.getCoin(), COIN__NOT_IN);
	
			io.envoyproxy.pgv.RepeatedValidation.unique(".adamant.global.v1.CreateWhitelistRequest.address_ids", proto.getAddressIdsList());
			io.envoyproxy.pgv.RepeatedValidation.forEach(proto.getAddressIdsList(), item -> {
				// no validation rules for AddressIds

			});

	
	}

}

