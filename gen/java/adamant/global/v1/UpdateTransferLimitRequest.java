// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gincoinc/adamant/global/v1/adamantglobalv1/global_api.proto

package adamant.global.v1;

/**
 * Protobuf type {@code adamant.global.v1.UpdateTransferLimitRequest}
 */
public  final class UpdateTransferLimitRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:adamant.global.v1.UpdateTransferLimitRequest)
    UpdateTransferLimitRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use UpdateTransferLimitRequest.newBuilder() to construct.
  private UpdateTransferLimitRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private UpdateTransferLimitRequest() {
    transferLimitId_ = "";
    transferLimits_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new UpdateTransferLimitRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private UpdateTransferLimitRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            transferLimitId_ = s;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              transferLimits_ = new java.util.ArrayList<adamant.global.v1.Model.RequestTransferLimitEntry>();
              mutable_bitField0_ |= 0x00000001;
            }
            transferLimits_.add(
                input.readMessage(adamant.global.v1.Model.RequestTransferLimitEntry.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        transferLimits_ = java.util.Collections.unmodifiableList(transferLimits_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return adamant.global.v1.GlobalAPIProto.internal_static_adamant_global_v1_UpdateTransferLimitRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return adamant.global.v1.GlobalAPIProto.internal_static_adamant_global_v1_UpdateTransferLimitRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            adamant.global.v1.UpdateTransferLimitRequest.class, adamant.global.v1.UpdateTransferLimitRequest.Builder.class);
  }

  public static final int TRANSFER_LIMIT_ID_FIELD_NUMBER = 1;
  private volatile java.lang.Object transferLimitId_;
  /**
   * <code>string transfer_limit_id = 1 [(.validate.rules) = { ... }</code>
   */
  public java.lang.String getTransferLimitId() {
    java.lang.Object ref = transferLimitId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      transferLimitId_ = s;
      return s;
    }
  }
  /**
   * <code>string transfer_limit_id = 1 [(.validate.rules) = { ... }</code>
   */
  public com.google.protobuf.ByteString
      getTransferLimitIdBytes() {
    java.lang.Object ref = transferLimitId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      transferLimitId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TRANSFER_LIMITS_FIELD_NUMBER = 2;
  private java.util.List<adamant.global.v1.Model.RequestTransferLimitEntry> transferLimits_;
  /**
   * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
   */
  public java.util.List<adamant.global.v1.Model.RequestTransferLimitEntry> getTransferLimitsList() {
    return transferLimits_;
  }
  /**
   * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
   */
  public java.util.List<? extends adamant.global.v1.Model.RequestTransferLimitEntryOrBuilder> 
      getTransferLimitsOrBuilderList() {
    return transferLimits_;
  }
  /**
   * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
   */
  public int getTransferLimitsCount() {
    return transferLimits_.size();
  }
  /**
   * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
   */
  public adamant.global.v1.Model.RequestTransferLimitEntry getTransferLimits(int index) {
    return transferLimits_.get(index);
  }
  /**
   * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
   */
  public adamant.global.v1.Model.RequestTransferLimitEntryOrBuilder getTransferLimitsOrBuilder(
      int index) {
    return transferLimits_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getTransferLimitIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, transferLimitId_);
    }
    for (int i = 0; i < transferLimits_.size(); i++) {
      output.writeMessage(2, transferLimits_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getTransferLimitIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, transferLimitId_);
    }
    for (int i = 0; i < transferLimits_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, transferLimits_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof adamant.global.v1.UpdateTransferLimitRequest)) {
      return super.equals(obj);
    }
    adamant.global.v1.UpdateTransferLimitRequest other = (adamant.global.v1.UpdateTransferLimitRequest) obj;

    if (!getTransferLimitId()
        .equals(other.getTransferLimitId())) return false;
    if (!getTransferLimitsList()
        .equals(other.getTransferLimitsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + TRANSFER_LIMIT_ID_FIELD_NUMBER;
    hash = (53 * hash) + getTransferLimitId().hashCode();
    if (getTransferLimitsCount() > 0) {
      hash = (37 * hash) + TRANSFER_LIMITS_FIELD_NUMBER;
      hash = (53 * hash) + getTransferLimitsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static adamant.global.v1.UpdateTransferLimitRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static adamant.global.v1.UpdateTransferLimitRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static adamant.global.v1.UpdateTransferLimitRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static adamant.global.v1.UpdateTransferLimitRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static adamant.global.v1.UpdateTransferLimitRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static adamant.global.v1.UpdateTransferLimitRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static adamant.global.v1.UpdateTransferLimitRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static adamant.global.v1.UpdateTransferLimitRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static adamant.global.v1.UpdateTransferLimitRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static adamant.global.v1.UpdateTransferLimitRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static adamant.global.v1.UpdateTransferLimitRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static adamant.global.v1.UpdateTransferLimitRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(adamant.global.v1.UpdateTransferLimitRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code adamant.global.v1.UpdateTransferLimitRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:adamant.global.v1.UpdateTransferLimitRequest)
      adamant.global.v1.UpdateTransferLimitRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return adamant.global.v1.GlobalAPIProto.internal_static_adamant_global_v1_UpdateTransferLimitRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return adamant.global.v1.GlobalAPIProto.internal_static_adamant_global_v1_UpdateTransferLimitRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              adamant.global.v1.UpdateTransferLimitRequest.class, adamant.global.v1.UpdateTransferLimitRequest.Builder.class);
    }

    // Construct using adamant.global.v1.UpdateTransferLimitRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getTransferLimitsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      transferLimitId_ = "";

      if (transferLimitsBuilder_ == null) {
        transferLimits_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        transferLimitsBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return adamant.global.v1.GlobalAPIProto.internal_static_adamant_global_v1_UpdateTransferLimitRequest_descriptor;
    }

    @java.lang.Override
    public adamant.global.v1.UpdateTransferLimitRequest getDefaultInstanceForType() {
      return adamant.global.v1.UpdateTransferLimitRequest.getDefaultInstance();
    }

    @java.lang.Override
    public adamant.global.v1.UpdateTransferLimitRequest build() {
      adamant.global.v1.UpdateTransferLimitRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public adamant.global.v1.UpdateTransferLimitRequest buildPartial() {
      adamant.global.v1.UpdateTransferLimitRequest result = new adamant.global.v1.UpdateTransferLimitRequest(this);
      int from_bitField0_ = bitField0_;
      result.transferLimitId_ = transferLimitId_;
      if (transferLimitsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          transferLimits_ = java.util.Collections.unmodifiableList(transferLimits_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.transferLimits_ = transferLimits_;
      } else {
        result.transferLimits_ = transferLimitsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof adamant.global.v1.UpdateTransferLimitRequest) {
        return mergeFrom((adamant.global.v1.UpdateTransferLimitRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(adamant.global.v1.UpdateTransferLimitRequest other) {
      if (other == adamant.global.v1.UpdateTransferLimitRequest.getDefaultInstance()) return this;
      if (!other.getTransferLimitId().isEmpty()) {
        transferLimitId_ = other.transferLimitId_;
        onChanged();
      }
      if (transferLimitsBuilder_ == null) {
        if (!other.transferLimits_.isEmpty()) {
          if (transferLimits_.isEmpty()) {
            transferLimits_ = other.transferLimits_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureTransferLimitsIsMutable();
            transferLimits_.addAll(other.transferLimits_);
          }
          onChanged();
        }
      } else {
        if (!other.transferLimits_.isEmpty()) {
          if (transferLimitsBuilder_.isEmpty()) {
            transferLimitsBuilder_.dispose();
            transferLimitsBuilder_ = null;
            transferLimits_ = other.transferLimits_;
            bitField0_ = (bitField0_ & ~0x00000001);
            transferLimitsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getTransferLimitsFieldBuilder() : null;
          } else {
            transferLimitsBuilder_.addAllMessages(other.transferLimits_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      adamant.global.v1.UpdateTransferLimitRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (adamant.global.v1.UpdateTransferLimitRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object transferLimitId_ = "";
    /**
     * <code>string transfer_limit_id = 1 [(.validate.rules) = { ... }</code>
     */
    public java.lang.String getTransferLimitId() {
      java.lang.Object ref = transferLimitId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        transferLimitId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string transfer_limit_id = 1 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.ByteString
        getTransferLimitIdBytes() {
      java.lang.Object ref = transferLimitId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        transferLimitId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string transfer_limit_id = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setTransferLimitId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      transferLimitId_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string transfer_limit_id = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder clearTransferLimitId() {
      
      transferLimitId_ = getDefaultInstance().getTransferLimitId();
      onChanged();
      return this;
    }
    /**
     * <code>string transfer_limit_id = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setTransferLimitIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      transferLimitId_ = value;
      onChanged();
      return this;
    }

    private java.util.List<adamant.global.v1.Model.RequestTransferLimitEntry> transferLimits_ =
      java.util.Collections.emptyList();
    private void ensureTransferLimitsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        transferLimits_ = new java.util.ArrayList<adamant.global.v1.Model.RequestTransferLimitEntry>(transferLimits_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        adamant.global.v1.Model.RequestTransferLimitEntry, adamant.global.v1.Model.RequestTransferLimitEntry.Builder, adamant.global.v1.Model.RequestTransferLimitEntryOrBuilder> transferLimitsBuilder_;

    /**
     * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<adamant.global.v1.Model.RequestTransferLimitEntry> getTransferLimitsList() {
      if (transferLimitsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(transferLimits_);
      } else {
        return transferLimitsBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
     */
    public int getTransferLimitsCount() {
      if (transferLimitsBuilder_ == null) {
        return transferLimits_.size();
      } else {
        return transferLimitsBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
     */
    public adamant.global.v1.Model.RequestTransferLimitEntry getTransferLimits(int index) {
      if (transferLimitsBuilder_ == null) {
        return transferLimits_.get(index);
      } else {
        return transferLimitsBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setTransferLimits(
        int index, adamant.global.v1.Model.RequestTransferLimitEntry value) {
      if (transferLimitsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTransferLimitsIsMutable();
        transferLimits_.set(index, value);
        onChanged();
      } else {
        transferLimitsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setTransferLimits(
        int index, adamant.global.v1.Model.RequestTransferLimitEntry.Builder builderForValue) {
      if (transferLimitsBuilder_ == null) {
        ensureTransferLimitsIsMutable();
        transferLimits_.set(index, builderForValue.build());
        onChanged();
      } else {
        transferLimitsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder addTransferLimits(adamant.global.v1.Model.RequestTransferLimitEntry value) {
      if (transferLimitsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTransferLimitsIsMutable();
        transferLimits_.add(value);
        onChanged();
      } else {
        transferLimitsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder addTransferLimits(
        int index, adamant.global.v1.Model.RequestTransferLimitEntry value) {
      if (transferLimitsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTransferLimitsIsMutable();
        transferLimits_.add(index, value);
        onChanged();
      } else {
        transferLimitsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder addTransferLimits(
        adamant.global.v1.Model.RequestTransferLimitEntry.Builder builderForValue) {
      if (transferLimitsBuilder_ == null) {
        ensureTransferLimitsIsMutable();
        transferLimits_.add(builderForValue.build());
        onChanged();
      } else {
        transferLimitsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder addTransferLimits(
        int index, adamant.global.v1.Model.RequestTransferLimitEntry.Builder builderForValue) {
      if (transferLimitsBuilder_ == null) {
        ensureTransferLimitsIsMutable();
        transferLimits_.add(index, builderForValue.build());
        onChanged();
      } else {
        transferLimitsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder addAllTransferLimits(
        java.lang.Iterable<? extends adamant.global.v1.Model.RequestTransferLimitEntry> values) {
      if (transferLimitsBuilder_ == null) {
        ensureTransferLimitsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, transferLimits_);
        onChanged();
      } else {
        transferLimitsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder clearTransferLimits() {
      if (transferLimitsBuilder_ == null) {
        transferLimits_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        transferLimitsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder removeTransferLimits(int index) {
      if (transferLimitsBuilder_ == null) {
        ensureTransferLimitsIsMutable();
        transferLimits_.remove(index);
        onChanged();
      } else {
        transferLimitsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
     */
    public adamant.global.v1.Model.RequestTransferLimitEntry.Builder getTransferLimitsBuilder(
        int index) {
      return getTransferLimitsFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
     */
    public adamant.global.v1.Model.RequestTransferLimitEntryOrBuilder getTransferLimitsOrBuilder(
        int index) {
      if (transferLimitsBuilder_ == null) {
        return transferLimits_.get(index);  } else {
        return transferLimitsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<? extends adamant.global.v1.Model.RequestTransferLimitEntryOrBuilder> 
         getTransferLimitsOrBuilderList() {
      if (transferLimitsBuilder_ != null) {
        return transferLimitsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(transferLimits_);
      }
    }
    /**
     * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
     */
    public adamant.global.v1.Model.RequestTransferLimitEntry.Builder addTransferLimitsBuilder() {
      return getTransferLimitsFieldBuilder().addBuilder(
          adamant.global.v1.Model.RequestTransferLimitEntry.getDefaultInstance());
    }
    /**
     * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
     */
    public adamant.global.v1.Model.RequestTransferLimitEntry.Builder addTransferLimitsBuilder(
        int index) {
      return getTransferLimitsFieldBuilder().addBuilder(
          index, adamant.global.v1.Model.RequestTransferLimitEntry.getDefaultInstance());
    }
    /**
     * <code>repeated .adamant.global.v1.RequestTransferLimitEntry transfer_limits = 2 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<adamant.global.v1.Model.RequestTransferLimitEntry.Builder> 
         getTransferLimitsBuilderList() {
      return getTransferLimitsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        adamant.global.v1.Model.RequestTransferLimitEntry, adamant.global.v1.Model.RequestTransferLimitEntry.Builder, adamant.global.v1.Model.RequestTransferLimitEntryOrBuilder> 
        getTransferLimitsFieldBuilder() {
      if (transferLimitsBuilder_ == null) {
        transferLimitsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            adamant.global.v1.Model.RequestTransferLimitEntry, adamant.global.v1.Model.RequestTransferLimitEntry.Builder, adamant.global.v1.Model.RequestTransferLimitEntryOrBuilder>(
                transferLimits_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        transferLimits_ = null;
      }
      return transferLimitsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:adamant.global.v1.UpdateTransferLimitRequest)
  }

  // @@protoc_insertion_point(class_scope:adamant.global.v1.UpdateTransferLimitRequest)
  private static final adamant.global.v1.UpdateTransferLimitRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new adamant.global.v1.UpdateTransferLimitRequest();
  }

  public static adamant.global.v1.UpdateTransferLimitRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<UpdateTransferLimitRequest>
      PARSER = new com.google.protobuf.AbstractParser<UpdateTransferLimitRequest>() {
    @java.lang.Override
    public UpdateTransferLimitRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new UpdateTransferLimitRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<UpdateTransferLimitRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<UpdateTransferLimitRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public adamant.global.v1.UpdateTransferLimitRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

