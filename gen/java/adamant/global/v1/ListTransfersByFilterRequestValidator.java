// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gincoinc/adamant/global/v1/adamantglobalv1/global_api.proto

package java.adamant.global.v1;

/**
* Validates {@code ListTransfersByFilterRequest} protobuf objects.
*/
public class ListTransfersByFilterRequestValidator implements io.envoyproxy.pgv.ValidatorImpl<java.adamant.global.v1.ListTransfersByFilterRequest>{
	public static io.envoyproxy.pgv.ValidatorImpl validatorFor(Class clazz) {
		if (clazz.equals(java.adamant.global.v1.ListTransfersByFilterRequest.class)) return new ListTransfersByFilterRequestValidator();
		
		return null;
	}
		
		private final java.adamant.global.v1.ListFilterType[] FILTER_TYPE__NOT_IN = new java.adamant.global.v1.ListFilterType[]{
			java.adamant.global.v1.ListFilterType.forNumber(0),
		};
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
		private final Integer PAGE_SIZE__LTE = 100;
	
		
		com.google.re2j.Pattern PAGE_TOKEN__PATTERN = com.google.re2j.Pattern.compile("^$|^[ABCDEFGHIJKLMNOPQRSTUVWXYZ234567]{16}$");
	
		
	
		
	
	

	public void assertValid(java.adamant.global.v1.ListTransfersByFilterRequest proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
			io.envoyproxy.pgv.EnumValidation.definedOnly(".adamant.global.v1.ListTransfersByFilterRequest.filter_type", proto.getFilterType());
			io.envoyproxy.pgv.CollectiveValidation.notIn(".adamant.global.v1.ListTransfersByFilterRequest.filter_type", proto.getFilterType(), FILTER_TYPE__NOT_IN);
	// no validation rules for TransferId

	// no validation rules for WalletId

	
			io.envoyproxy.pgv.StringValidation.maxLength(".adamant.global.v1.ListTransfersByFilterRequest.wallet_name", proto.getWalletName(), 40);
	
			io.envoyproxy.pgv.StringValidation.maxLength(".adamant.global.v1.ListTransfersByFilterRequest.address_name", proto.getAddressName(), 40);
	// no validation rules for Address

	// no validation rules for Txid

	// no validation rules for WatchOnly

	
			io.envoyproxy.pgv.EnumValidation.definedOnly(".adamant.global.v1.ListTransfersByFilterRequest.coin", proto.getCoin());
	
			io.envoyproxy.pgv.RepeatedValidation.forEach(proto.getWalletTypeList(), item -> {
				// no validation rules for WalletType

			});

	
			io.envoyproxy.pgv.EnumValidation.definedOnly(".adamant.global.v1.ListTransfersByFilterRequest.transfer_type", proto.getTransferType());
	
			io.envoyproxy.pgv.ComparativeValidation.lessThanOrEqual(".adamant.global.v1.ListTransfersByFilterRequest.page_size", proto.getPageSize(), PAGE_SIZE__LTE, java.util.Comparator.naturalOrder());
	
			io.envoyproxy.pgv.StringValidation.pattern(".adamant.global.v1.ListTransfersByFilterRequest.page_token", proto.getPageToken(), PAGE_TOKEN__PATTERN);
	
			// Validate start_time
			if (proto.hasStartTime()) index.validatorFor(proto.getStartTime()).assertValid(proto.getStartTime());
	
			// Validate end_time
			if (proto.hasEndTime()) index.validatorFor(proto.getEndTime()).assertValid(proto.getEndTime());
	
	}

}

