// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gincoinc/adamant/global/v1/adamantglobalv1/global_api.proto

package adamant.global.v1;


/**
* Validates {@code CalculateFeeRequest} protobuf objects.
*/
@SuppressWarnings("all")
public class CalculateFeeRequestValidator implements io.envoyproxy.pgv.ValidatorImpl<adamant.global.v1.CalculateFeeRequest>{
	public static io.envoyproxy.pgv.ValidatorImpl validatorFor(Class clazz) {
		if (clazz.equals(adamant.global.v1.CalculateFeeRequest.class)) return new CalculateFeeRequestValidator();
		
		return null;
	}
		
		com.google.re2j.Pattern WALLET_ID__PATTERN = com.google.re2j.Pattern.compile("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$");
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
	

	public void assertValid(adamant.global.v1.CalculateFeeRequest proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
			io.envoyproxy.pgv.StringValidation.pattern(".adamant.global.v1.CalculateFeeRequest.wallet_id", proto.getWalletId(), WALLET_ID__PATTERN);
	// no validation rules for FeeRate

	
			io.envoyproxy.pgv.RepeatedValidation.forEach(proto.getTxOutputsList(), item -> {
				
			// Validate tx_outputs
			if (true) index.validatorFor(item).assertValid(item);
			});
	// no validation rules for Address

	// no validation rules for DestinationTag

	// no validation rules for StringValue

	
			// Validate substrate_specific
			if (proto.hasSubstrateSpecific()) index.validatorFor(proto.getSubstrateSpecific()).assertValid(proto.getSubstrateSpecific());
	
			// Validate nem_specific
			if (proto.hasNemSpecific()) index.validatorFor(proto.getNemSpecific()).assertValid(proto.getNemSpecific());
	
			// Validate symbol_specific
			if (proto.hasSymbolSpecific()) index.validatorFor(proto.getSymbolSpecific()).assertValid(proto.getSymbolSpecific());
	
			// Validate ethereum_specific
			if (proto.hasEthereumSpecific()) index.validatorFor(proto.getEthereumSpecific()).assertValid(proto.getEthereumSpecific());
	
			// Validate cosmos_specific
			if (proto.hasCosmosSpecific()) index.validatorFor(proto.getCosmosSpecific()).assertValid(proto.getCosmosSpecific());
	
			// Validate hedera_specific
			if (proto.hasHederaSpecific()) index.validatorFor(proto.getHederaSpecific()).assertValid(proto.getHederaSpecific());
	
			// Validate rbf_specific
			if (proto.hasRbfSpecific()) index.validatorFor(proto.getRbfSpecific()).assertValid(proto.getRbfSpecific());
	
			// Validate utxo_specific
			if (proto.hasUtxoSpecific()) index.validatorFor(proto.getUtxoSpecific()).assertValid(proto.getUtxoSpecific());
	
			// Validate solana_specific
			if (proto.hasSolanaSpecific()) index.validatorFor(proto.getSolanaSpecific()).assertValid(proto.getSolanaSpecific());
	
			// Validate avalanche_specific
			if (proto.hasAvalancheSpecific()) index.validatorFor(proto.getAvalancheSpecific()).assertValid(proto.getAvalancheSpecific());
	
			// Validate sui_specific
			if (proto.hasSuiSpecific()) index.validatorFor(proto.getSuiSpecific()).assertValid(proto.getSuiSpecific());
	
			// Validate ton_specific
			if (proto.hasTonSpecific()) index.validatorFor(proto.getTonSpecific()).assertValid(proto.getTonSpecific());
	
	}

}

