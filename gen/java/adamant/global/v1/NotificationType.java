// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gincoinc/adamant/global/v1/adamantglobalv1/enum.proto

package java.adamant.global.v1;

/**
 * <pre>
 * NotificationType is a type of notification
 * </pre>
 *
 * Protobuf enum {@code adamant.global.v1.NotificationType}
 */
public enum NotificationType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>NOTIFICATION_TYPE_INVALID = 0;</code>
   */
  NOTIFICATION_TYPE_INVALID(0),
  /**
   * <code>NOTIFICATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST = 1;</code>
   */
  NOTIFICATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST(1),
  /**
   * <code>NOTIFICATION_TYPE_WALLET_VALIDATOR_APPROVE_REQUEST = 2;</code>
   */
  NOTIFICATION_TYPE_WALLET_VALIDATOR_APPROVE_REQUEST(2),
  /**
   * <code>NOTIFICATION_TYPE_WALLET_ACTIVATE_FAILED = 3;</code>
   */
  NOTIFICATION_TYPE_WALLET_ACTIVATE_FAILED(3),
  /**
   * <code>NOTIFICATION_TYPE_WALLET_CANCELLED = 4;</code>
   */
  NOTIFICATION_TYPE_WALLET_CANCELLED(4),
  /**
   * <code>NOTIFICATION_TYPE_WALLET_COMPLETED = 5;</code>
   */
  NOTIFICATION_TYPE_WALLET_COMPLETED(5),
  /**
   * <code>NOTIFICATION_TYPE_WALLET_FAILED = 6;</code>
   */
  NOTIFICATION_TYPE_WALLET_FAILED(6),
  /**
   * <code>NOTIFICATION_TYPE_WALLET_ADDRESS_APPROVE_REQUEST = 23;</code>
   */
  NOTIFICATION_TYPE_WALLET_ADDRESS_APPROVE_REQUEST(23),
  /**
   * <code>NOTIFICATION_TYPE_WALLET_XRP_ACTIVATE_REQUEST = 24;</code>
   */
  NOTIFICATION_TYPE_WALLET_XRP_ACTIVATE_REQUEST(24),
  /**
   * <code>NOTIFICATION_TYPE_WALLET_MULTISIG_CONFIG_REQUEST = 25;</code>
   */
  NOTIFICATION_TYPE_WALLET_MULTISIG_CONFIG_REQUEST(25),
  /**
   * <code>NOTIFICATION_TYPE_WALLET_MANAGER_TRANSACTION_REQUEST = 26;</code>
   */
  NOTIFICATION_TYPE_WALLET_MANAGER_TRANSACTION_REQUEST(26),
  /**
   * <code>NOTIFICATION_TYPE_WALLET_VALIDATOR_CHANGE_REQUEST = 27;</code>
   */
  NOTIFICATION_TYPE_WALLET_VALIDATOR_CHANGE_REQUEST(27),
  /**
   * <code>NOTIFICATION_TYPE_TRANSACTION_SIGNER_APPROVE_REQUEST = 7;</code>
   */
  NOTIFICATION_TYPE_TRANSACTION_SIGNER_APPROVE_REQUEST(7),
  /**
   * <code>NOTIFICATION_TYPE_TRANSACTION_VALIDATOR_APPROVE_REQUEST = 8;</code>
   */
  NOTIFICATION_TYPE_TRANSACTION_VALIDATOR_APPROVE_REQUEST(8),
  /**
   * <code>NOTIFICATION_TYPE_TRANSACTION_READY = 22;</code>
   */
  NOTIFICATION_TYPE_TRANSACTION_READY(22),
  /**
   * <code>NOTIFICATION_TYPE_TRANSACTION_SUBMITTED = 9;</code>
   */
  NOTIFICATION_TYPE_TRANSACTION_SUBMITTED(9),
  /**
   * <code>NOTIFICATION_TYPE_TRANSACTION_CANCELLED = 10;</code>
   */
  NOTIFICATION_TYPE_TRANSACTION_CANCELLED(10),
  /**
   * <code>NOTIFICATION_TYPE_TRANSFER_SEND_COMPLETED = 11;</code>
   */
  NOTIFICATION_TYPE_TRANSFER_SEND_COMPLETED(11),
  /**
   * <code>NOTIFICATION_TYPE_TRANSFER_SEND_FAILED = 12;</code>
   */
  NOTIFICATION_TYPE_TRANSFER_SEND_FAILED(12),
  /**
   * <code>NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPLETED = 13;</code>
   */
  NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPLETED(13),
  /**
   * <code>NOTIFICATION_TYPE_TRANSFER_RECEIVE_FAILED = 14;</code>
   */
  NOTIFICATION_TYPE_TRANSFER_RECEIVE_FAILED(14),
  /**
   * <code>NOTIFICATION_TYPE_ADDRESS_APPROVE_REQUEST = 15;</code>
   */
  NOTIFICATION_TYPE_ADDRESS_APPROVE_REQUEST(15),
  /**
   * <code>NOTIFICATION_TYPE_ADDRESS_COMPLETED = 16;</code>
   */
  NOTIFICATION_TYPE_ADDRESS_COMPLETED(16),
  /**
   * <code>NOTIFICATION_TYPE_ADDRESS_CANCELLED = 17;</code>
   */
  NOTIFICATION_TYPE_ADDRESS_CANCELLED(17),
  /**
   * <code>NOTIFICATION_TYPE_TRANSFERLIMIT_APPROVE_REQUEST = 18;</code>
   */
  NOTIFICATION_TYPE_TRANSFERLIMIT_APPROVE_REQUEST(18),
  /**
   * <code>NOTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED = 19;</code>
   */
  NOTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED(19),
  /**
   * <code>NOTIFICATION_TYPE_TRANSFERLIMIT_CANCELLED = 20;</code>
   */
  NOTIFICATION_TYPE_TRANSFERLIMIT_CANCELLED(20),
  /**
   * <code>NOTIFICATION_TYPE_WHITELIST_DETACH_REQUEST = 21;</code>
   */
  NOTIFICATION_TYPE_WHITELIST_DETACH_REQUEST(21),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>NOTIFICATION_TYPE_INVALID = 0;</code>
   */
  public static final int NOTIFICATION_TYPE_INVALID_VALUE = 0;
  /**
   * <code>NOTIFICATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST = 1;</code>
   */
  public static final int NOTIFICATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST_VALUE = 1;
  /**
   * <code>NOTIFICATION_TYPE_WALLET_VALIDATOR_APPROVE_REQUEST = 2;</code>
   */
  public static final int NOTIFICATION_TYPE_WALLET_VALIDATOR_APPROVE_REQUEST_VALUE = 2;
  /**
   * <code>NOTIFICATION_TYPE_WALLET_ACTIVATE_FAILED = 3;</code>
   */
  public static final int NOTIFICATION_TYPE_WALLET_ACTIVATE_FAILED_VALUE = 3;
  /**
   * <code>NOTIFICATION_TYPE_WALLET_CANCELLED = 4;</code>
   */
  public static final int NOTIFICATION_TYPE_WALLET_CANCELLED_VALUE = 4;
  /**
   * <code>NOTIFICATION_TYPE_WALLET_COMPLETED = 5;</code>
   */
  public static final int NOTIFICATION_TYPE_WALLET_COMPLETED_VALUE = 5;
  /**
   * <code>NOTIFICATION_TYPE_WALLET_FAILED = 6;</code>
   */
  public static final int NOTIFICATION_TYPE_WALLET_FAILED_VALUE = 6;
  /**
   * <code>NOTIFICATION_TYPE_WALLET_ADDRESS_APPROVE_REQUEST = 23;</code>
   */
  public static final int NOTIFICATION_TYPE_WALLET_ADDRESS_APPROVE_REQUEST_VALUE = 23;
  /**
   * <code>NOTIFICATION_TYPE_WALLET_XRP_ACTIVATE_REQUEST = 24;</code>
   */
  public static final int NOTIFICATION_TYPE_WALLET_XRP_ACTIVATE_REQUEST_VALUE = 24;
  /**
   * <code>NOTIFICATION_TYPE_WALLET_MULTISIG_CONFIG_REQUEST = 25;</code>
   */
  public static final int NOTIFICATION_TYPE_WALLET_MULTISIG_CONFIG_REQUEST_VALUE = 25;
  /**
   * <code>NOTIFICATION_TYPE_WALLET_MANAGER_TRANSACTION_REQUEST = 26;</code>
   */
  public static final int NOTIFICATION_TYPE_WALLET_MANAGER_TRANSACTION_REQUEST_VALUE = 26;
  /**
   * <code>NOTIFICATION_TYPE_WALLET_VALIDATOR_CHANGE_REQUEST = 27;</code>
   */
  public static final int NOTIFICATION_TYPE_WALLET_VALIDATOR_CHANGE_REQUEST_VALUE = 27;
  /**
   * <code>NOTIFICATION_TYPE_TRANSACTION_SIGNER_APPROVE_REQUEST = 7;</code>
   */
  public static final int NOTIFICATION_TYPE_TRANSACTION_SIGNER_APPROVE_REQUEST_VALUE = 7;
  /**
   * <code>NOTIFICATION_TYPE_TRANSACTION_VALIDATOR_APPROVE_REQUEST = 8;</code>
   */
  public static final int NOTIFICATION_TYPE_TRANSACTION_VALIDATOR_APPROVE_REQUEST_VALUE = 8;
  /**
   * <code>NOTIFICATION_TYPE_TRANSACTION_READY = 22;</code>
   */
  public static final int NOTIFICATION_TYPE_TRANSACTION_READY_VALUE = 22;
  /**
   * <code>NOTIFICATION_TYPE_TRANSACTION_SUBMITTED = 9;</code>
   */
  public static final int NOTIFICATION_TYPE_TRANSACTION_SUBMITTED_VALUE = 9;
  /**
   * <code>NOTIFICATION_TYPE_TRANSACTION_CANCELLED = 10;</code>
   */
  public static final int NOTIFICATION_TYPE_TRANSACTION_CANCELLED_VALUE = 10;
  /**
   * <code>NOTIFICATION_TYPE_TRANSFER_SEND_COMPLETED = 11;</code>
   */
  public static final int NOTIFICATION_TYPE_TRANSFER_SEND_COMPLETED_VALUE = 11;
  /**
   * <code>NOTIFICATION_TYPE_TRANSFER_SEND_FAILED = 12;</code>
   */
  public static final int NOTIFICATION_TYPE_TRANSFER_SEND_FAILED_VALUE = 12;
  /**
   * <code>NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPLETED = 13;</code>
   */
  public static final int NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPLETED_VALUE = 13;
  /**
   * <code>NOTIFICATION_TYPE_TRANSFER_RECEIVE_FAILED = 14;</code>
   */
  public static final int NOTIFICATION_TYPE_TRANSFER_RECEIVE_FAILED_VALUE = 14;
  /**
   * <code>NOTIFICATION_TYPE_ADDRESS_APPROVE_REQUEST = 15;</code>
   */
  public static final int NOTIFICATION_TYPE_ADDRESS_APPROVE_REQUEST_VALUE = 15;
  /**
   * <code>NOTIFICATION_TYPE_ADDRESS_COMPLETED = 16;</code>
   */
  public static final int NOTIFICATION_TYPE_ADDRESS_COMPLETED_VALUE = 16;
  /**
   * <code>NOTIFICATION_TYPE_ADDRESS_CANCELLED = 17;</code>
   */
  public static final int NOTIFICATION_TYPE_ADDRESS_CANCELLED_VALUE = 17;
  /**
   * <code>NOTIFICATION_TYPE_TRANSFERLIMIT_APPROVE_REQUEST = 18;</code>
   */
  public static final int NOTIFICATION_TYPE_TRANSFERLIMIT_APPROVE_REQUEST_VALUE = 18;
  /**
   * <code>NOTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED = 19;</code>
   */
  public static final int NOTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED_VALUE = 19;
  /**
   * <code>NOTIFICATION_TYPE_TRANSFERLIMIT_CANCELLED = 20;</code>
   */
  public static final int NOTIFICATION_TYPE_TRANSFERLIMIT_CANCELLED_VALUE = 20;
  /**
   * <code>NOTIFICATION_TYPE_WHITELIST_DETACH_REQUEST = 21;</code>
   */
  public static final int NOTIFICATION_TYPE_WHITELIST_DETACH_REQUEST_VALUE = 21;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static NotificationType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static NotificationType forNumber(int value) {
    switch (value) {
      case 0: return NOTIFICATION_TYPE_INVALID;
      case 1: return NOTIFICATION_TYPE_WALLET_SIGNER_APPROVE_REQUEST;
      case 2: return NOTIFICATION_TYPE_WALLET_VALIDATOR_APPROVE_REQUEST;
      case 3: return NOTIFICATION_TYPE_WALLET_ACTIVATE_FAILED;
      case 4: return NOTIFICATION_TYPE_WALLET_CANCELLED;
      case 5: return NOTIFICATION_TYPE_WALLET_COMPLETED;
      case 6: return NOTIFICATION_TYPE_WALLET_FAILED;
      case 23: return NOTIFICATION_TYPE_WALLET_ADDRESS_APPROVE_REQUEST;
      case 24: return NOTIFICATION_TYPE_WALLET_XRP_ACTIVATE_REQUEST;
      case 25: return NOTIFICATION_TYPE_WALLET_MULTISIG_CONFIG_REQUEST;
      case 26: return NOTIFICATION_TYPE_WALLET_MANAGER_TRANSACTION_REQUEST;
      case 27: return NOTIFICATION_TYPE_WALLET_VALIDATOR_CHANGE_REQUEST;
      case 7: return NOTIFICATION_TYPE_TRANSACTION_SIGNER_APPROVE_REQUEST;
      case 8: return NOTIFICATION_TYPE_TRANSACTION_VALIDATOR_APPROVE_REQUEST;
      case 22: return NOTIFICATION_TYPE_TRANSACTION_READY;
      case 9: return NOTIFICATION_TYPE_TRANSACTION_SUBMITTED;
      case 10: return NOTIFICATION_TYPE_TRANSACTION_CANCELLED;
      case 11: return NOTIFICATION_TYPE_TRANSFER_SEND_COMPLETED;
      case 12: return NOTIFICATION_TYPE_TRANSFER_SEND_FAILED;
      case 13: return NOTIFICATION_TYPE_TRANSFER_RECEIVE_COMPLETED;
      case 14: return NOTIFICATION_TYPE_TRANSFER_RECEIVE_FAILED;
      case 15: return NOTIFICATION_TYPE_ADDRESS_APPROVE_REQUEST;
      case 16: return NOTIFICATION_TYPE_ADDRESS_COMPLETED;
      case 17: return NOTIFICATION_TYPE_ADDRESS_CANCELLED;
      case 18: return NOTIFICATION_TYPE_TRANSFERLIMIT_APPROVE_REQUEST;
      case 19: return NOTIFICATION_TYPE_TRANSFERLIMIT_COMPLETED;
      case 20: return NOTIFICATION_TYPE_TRANSFERLIMIT_CANCELLED;
      case 21: return NOTIFICATION_TYPE_WHITELIST_DETACH_REQUEST;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<NotificationType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      NotificationType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<NotificationType>() {
          public NotificationType findValueByNumber(int number) {
            return NotificationType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return java.adamant.global.v1.EnumProto.getDescriptor().getEnumTypes().get(12);
  }

  private static final NotificationType[] VALUES = values();

  public static NotificationType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private NotificationType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:adamant.global.v1.NotificationType)
}

