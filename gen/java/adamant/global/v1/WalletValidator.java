// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gincoinc/adamant/global/v1/adamantglobalv1/model.proto

package java.adamant.global.v1;

/**
* Validates {@code Wallet} protobuf objects.
*/
public class WalletValidator implements io.envoyproxy.pgv.ValidatorImpl<java.adamant.global.v1.Wallet>{
	public static io.envoyproxy.pgv.ValidatorImpl validatorFor(Class clazz) {
		if (clazz.equals(java.adamant.global.v1.Wallet.class)) return new WalletValidator();
		
		return null;
	}
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
		
	
	

	public void assertValid(java.adamant.global.v1.Wallet proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for OwnerId

	// no validation rules for WalletId

	// no validation rules for Name

	// no validation rules for Coin

	// no validation rules for HdAccount

	// no validation rules for WalletType

	// no validation rules for AddressType

	// no validation rules for M

	// no validation rules for N

	// no validation rules for State

	
			io.envoyproxy.pgv.RepeatedValidation.forEach(proto.getKeysList(), item -> {
				
			// Validate keys
			if (true) index.validatorFor(item).assertValid(item);
			});

	
			io.envoyproxy.pgv.RepeatedValidation.forEach(proto.getMembersList(), item -> {
				
			// Validate members
			if (true) index.validatorFor(item).assertValid(item);
			});

	// no validation rules for RequiredApprovalCount

	// no validation rules for Balance

	// no validation rules for StringBalance

	// no validation rules for Address

	// no validation rules for PolicyId

	
			// Validate proposal
			if (proto.hasProposal()) index.validatorFor(proto.getProposal()).assertValid(proto.getProposal());
	// no validation rules for DestinationWalletId

	// no validation rules for WatchOnly

	// no validation rules for AddressNumber

	// no validation rules for ShouldCheckRemittance

	// no validation rules for InheritWalletId

	
			// Validate create_time
			if (proto.hasCreateTime()) index.validatorFor(proto.getCreateTime()).assertValid(proto.getCreateTime());
	
			// Validate update_time
			if (proto.hasUpdateTime()) index.validatorFor(proto.getUpdateTime()).assertValid(proto.getUpdateTime());
	
	}

}

