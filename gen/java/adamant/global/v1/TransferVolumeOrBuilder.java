// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gincoinc/adamant/global/v1/adamantglobalv1/model.proto

package java.adamant.global.v1;

public interface TransferVolumeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:adamant.global.v1.TransferVolume)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * coin
   * </pre>
   *
   * <code>.gincoinc.global.v1.Coin coin = 1 [json_name = "coin"];</code>
   * @return The enum numeric value on the wire for coin.
   */
  int getCoinValue();
  /**
   * <pre>
   * coin
   * </pre>
   *
   * <code>.gincoinc.global.v1.Coin coin = 1 [json_name = "coin"];</code>
   * @return The coin.
   */
  java.gincoinc.global.v1.Coin getCoin();

  /**
   * <pre>
   * hot volume
   * </pre>
   *
   * <code>string hot_string_volume = 2 [json_name = "hotStringVolume"];</code>
   * @return The hotStringVolume.
   */
  java.lang.String getHotStringVolume();
  /**
   * <pre>
   * hot volume
   * </pre>
   *
   * <code>string hot_string_volume = 2 [json_name = "hotStringVolume"];</code>
   * @return The bytes for hotStringVolume.
   */
  com.google.protobuf.ByteString
      getHotStringVolumeBytes();

  /**
   * <pre>
   * col volume
   * </pre>
   *
   * <code>string cold_string_volume = 3 [json_name = "coldStringVolume"];</code>
   * @return The coldStringVolume.
   */
  java.lang.String getColdStringVolume();
  /**
   * <pre>
   * col volume
   * </pre>
   *
   * <code>string cold_string_volume = 3 [json_name = "coldStringVolume"];</code>
   * @return The bytes for coldStringVolume.
   */
  com.google.protobuf.ByteString
      getColdStringVolumeBytes();

  /**
   * <pre>
   * hot volume
   * </pre>
   *
   * <code>string hot_string_jpy_volume = 4 [json_name = "hotStringJpyVolume"];</code>
   * @return The hotStringJpyVolume.
   */
  java.lang.String getHotStringJpyVolume();
  /**
   * <pre>
   * hot volume
   * </pre>
   *
   * <code>string hot_string_jpy_volume = 4 [json_name = "hotStringJpyVolume"];</code>
   * @return The bytes for hotStringJpyVolume.
   */
  com.google.protobuf.ByteString
      getHotStringJpyVolumeBytes();

  /**
   * <pre>
   * col volume
   * </pre>
   *
   * <code>string cold_string_jpy_volume = 5 [json_name = "coldStringJpyVolume"];</code>
   * @return The coldStringJpyVolume.
   */
  java.lang.String getColdStringJpyVolume();
  /**
   * <pre>
   * col volume
   * </pre>
   *
   * <code>string cold_string_jpy_volume = 5 [json_name = "coldStringJpyVolume"];</code>
   * @return The bytes for coldStringJpyVolume.
   */
  com.google.protobuf.ByteString
      getColdStringJpyVolumeBytes();

  /**
   * <pre>
   * hot transfer number volume
   * </pre>
   *
   * <code>int64 hot_number = 6 [json_name = "hotNumber"];</code>
   * @return The hotNumber.
   */
  long getHotNumber();

  /**
   * <pre>
   * cold transfer number volume
   * </pre>
   *
   * <code>int64 cold_number = 7 [json_name = "coldNumber"];</code>
   * @return The coldNumber.
   */
  long getColdNumber();

  /**
   * <pre>
   * transfer type
   * </pre>
   *
   * <code>.gincoinc.global.v1.TransferType transfer_type = 8 [json_name = "transferType"];</code>
   * @return The enum numeric value on the wire for transferType.
   */
  int getTransferTypeValue();
  /**
   * <pre>
   * transfer type
   * </pre>
   *
   * <code>.gincoinc.global.v1.TransferType transfer_type = 8 [json_name = "transferType"];</code>
   * @return The transferType.
   */
  java.gincoinc.global.v1.TransferType getTransferType();
}
