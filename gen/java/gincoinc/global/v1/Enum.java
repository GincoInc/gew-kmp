// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gincoinc/global/v1/gincoincglobalv1/enum.proto

package gincoinc.global.v1;

public final class Enum {
  private Enum() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * Coin is a type of crypto asset.
   * </pre>
   *
   * Protobuf enum {@code gincoinc.global.v1.Coin}
   */
  public enum Coin
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>COIN_INVALID = 0;</code>
     */
    COIN_INVALID(0),
    /**
     * <code>COIN_BTC = 1;</code>
     */
    COIN_BTC(1),
    /**
     * <code>COIN_ETH = 2;</code>
     */
    COIN_ETH(2),
    /**
     * <code>COIN_LTC = 3;</code>
     */
    COIN_LTC(3),
    /**
     * <code>COIN_BCH = 4;</code>
     */
    COIN_BCH(4),
    /**
     * <code>COIN_XRP = 5;</code>
     */
    COIN_XRP(5),
    /**
     * <code>COIN_BAT = 6;</code>
     */
    COIN_BAT(6),
    /**
     * <code>COIN_TRX = 7;</code>
     */
    COIN_TRX(7),
    /**
     * <code>COIN_USDT = 8;</code>
     */
    COIN_USDT(8),
    /**
     * <code>COIN_RYO = 9;</code>
     */
    COIN_RYO(9),
    /**
     * <code>COIN_JASMY = 10;</code>
     */
    COIN_JASMY(10),
    /**
     * <code>COIN_ENJ = 11;</code>
     */
    COIN_ENJ(11),
    /**
     * <code>COIN_OMG = 12;</code>
     */
    COIN_OMG(12),
    /**
     * <code>COIN_XLM = 13;</code>
     */
    COIN_XLM(13),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>COIN_INVALID = 0;</code>
     */
    public static final int COIN_INVALID_VALUE = 0;
    /**
     * <code>COIN_BTC = 1;</code>
     */
    public static final int COIN_BTC_VALUE = 1;
    /**
     * <code>COIN_ETH = 2;</code>
     */
    public static final int COIN_ETH_VALUE = 2;
    /**
     * <code>COIN_LTC = 3;</code>
     */
    public static final int COIN_LTC_VALUE = 3;
    /**
     * <code>COIN_BCH = 4;</code>
     */
    public static final int COIN_BCH_VALUE = 4;
    /**
     * <code>COIN_XRP = 5;</code>
     */
    public static final int COIN_XRP_VALUE = 5;
    /**
     * <code>COIN_BAT = 6;</code>
     */
    public static final int COIN_BAT_VALUE = 6;
    /**
     * <code>COIN_TRX = 7;</code>
     */
    public static final int COIN_TRX_VALUE = 7;
    /**
     * <code>COIN_USDT = 8;</code>
     */
    public static final int COIN_USDT_VALUE = 8;
    /**
     * <code>COIN_RYO = 9;</code>
     */
    public static final int COIN_RYO_VALUE = 9;
    /**
     * <code>COIN_JASMY = 10;</code>
     */
    public static final int COIN_JASMY_VALUE = 10;
    /**
     * <code>COIN_ENJ = 11;</code>
     */
    public static final int COIN_ENJ_VALUE = 11;
    /**
     * <code>COIN_OMG = 12;</code>
     */
    public static final int COIN_OMG_VALUE = 12;
    /**
     * <code>COIN_XLM = 13;</code>
     */
    public static final int COIN_XLM_VALUE = 13;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Coin valueOf(int value) {
      return forNumber(value);
    }

    public static Coin forNumber(int value) {
      switch (value) {
        case 0: return COIN_INVALID;
        case 1: return COIN_BTC;
        case 2: return COIN_ETH;
        case 3: return COIN_LTC;
        case 4: return COIN_BCH;
        case 5: return COIN_XRP;
        case 6: return COIN_BAT;
        case 7: return COIN_TRX;
        case 8: return COIN_USDT;
        case 9: return COIN_RYO;
        case 10: return COIN_JASMY;
        case 11: return COIN_ENJ;
        case 12: return COIN_OMG;
        case 13: return COIN_XLM;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Coin>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Coin> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Coin>() {
            public Coin findValueByNumber(int number) {
              return Coin.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(0);
    }

    private static final Coin[] VALUES = values();

    public static Coin valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Coin(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.Coin)
  }

  /**
   * <pre>
   * Network is a type of blockchain network.
   * </pre>
   *
   * Protobuf enum {@code gincoinc.global.v1.Network}
   */
  public enum Network
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NETWORK_INVALID = 0;</code>
     */
    NETWORK_INVALID(0),
    /**
     * <code>NETWORK_BITCOIN_MAINNET = 1;</code>
     */
    NETWORK_BITCOIN_MAINNET(1),
    /**
     * <code>NETWORK_BITCOIN_TESTNET = 2;</code>
     */
    NETWORK_BITCOIN_TESTNET(2),
    /**
     * <code>NETWORK_ETHEREUM_MAINNET = 3;</code>
     */
    NETWORK_ETHEREUM_MAINNET(3),
    /**
     * <code>NETWORK_ETHEREUM_TESTNET = 4;</code>
     */
    NETWORK_ETHEREUM_TESTNET(4),
    /**
     * <code>NETWORK_LITECOIN_MAINNET = 5;</code>
     */
    NETWORK_LITECOIN_MAINNET(5),
    /**
     * <code>NETWORK_LITECOIN_TESTNET = 6;</code>
     */
    NETWORK_LITECOIN_TESTNET(6),
    /**
     * <code>NETWORK_BITCOINCASH_MAINNET = 7;</code>
     */
    NETWORK_BITCOINCASH_MAINNET(7),
    /**
     * <code>NETWORK_BITCOINCASH_TESTNET = 8;</code>
     */
    NETWORK_BITCOINCASH_TESTNET(8),
    /**
     * <code>NETWORK_RIPPLE_MAINNET = 9;</code>
     */
    NETWORK_RIPPLE_MAINNET(9),
    /**
     * <code>NETWORK_RIPPLE_TESTNET = 10;</code>
     */
    NETWORK_RIPPLE_TESTNET(10),
    /**
     * <code>NETWORK_TRON_MAINNET = 11;</code>
     */
    NETWORK_TRON_MAINNET(11),
    /**
     * <code>NETWORK_TRON_TESTNET = 12;</code>
     */
    NETWORK_TRON_TESTNET(12),
    /**
     * <code>NETWORK_C0BAN_MAINNET = 13;</code>
     */
    NETWORK_C0BAN_MAINNET(13),
    /**
     * <code>NETWORK_C0BAN_TESTNET = 14;</code>
     */
    NETWORK_C0BAN_TESTNET(14),
    /**
     * <code>NETWORK_STELLAR_MAINNET = 15;</code>
     */
    NETWORK_STELLAR_MAINNET(15),
    /**
     * <code>NETWORK_STELLAR_TESTNET = 16;</code>
     */
    NETWORK_STELLAR_TESTNET(16),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>NETWORK_INVALID = 0;</code>
     */
    public static final int NETWORK_INVALID_VALUE = 0;
    /**
     * <code>NETWORK_BITCOIN_MAINNET = 1;</code>
     */
    public static final int NETWORK_BITCOIN_MAINNET_VALUE = 1;
    /**
     * <code>NETWORK_BITCOIN_TESTNET = 2;</code>
     */
    public static final int NETWORK_BITCOIN_TESTNET_VALUE = 2;
    /**
     * <code>NETWORK_ETHEREUM_MAINNET = 3;</code>
     */
    public static final int NETWORK_ETHEREUM_MAINNET_VALUE = 3;
    /**
     * <code>NETWORK_ETHEREUM_TESTNET = 4;</code>
     */
    public static final int NETWORK_ETHEREUM_TESTNET_VALUE = 4;
    /**
     * <code>NETWORK_LITECOIN_MAINNET = 5;</code>
     */
    public static final int NETWORK_LITECOIN_MAINNET_VALUE = 5;
    /**
     * <code>NETWORK_LITECOIN_TESTNET = 6;</code>
     */
    public static final int NETWORK_LITECOIN_TESTNET_VALUE = 6;
    /**
     * <code>NETWORK_BITCOINCASH_MAINNET = 7;</code>
     */
    public static final int NETWORK_BITCOINCASH_MAINNET_VALUE = 7;
    /**
     * <code>NETWORK_BITCOINCASH_TESTNET = 8;</code>
     */
    public static final int NETWORK_BITCOINCASH_TESTNET_VALUE = 8;
    /**
     * <code>NETWORK_RIPPLE_MAINNET = 9;</code>
     */
    public static final int NETWORK_RIPPLE_MAINNET_VALUE = 9;
    /**
     * <code>NETWORK_RIPPLE_TESTNET = 10;</code>
     */
    public static final int NETWORK_RIPPLE_TESTNET_VALUE = 10;
    /**
     * <code>NETWORK_TRON_MAINNET = 11;</code>
     */
    public static final int NETWORK_TRON_MAINNET_VALUE = 11;
    /**
     * <code>NETWORK_TRON_TESTNET = 12;</code>
     */
    public static final int NETWORK_TRON_TESTNET_VALUE = 12;
    /**
     * <code>NETWORK_C0BAN_MAINNET = 13;</code>
     */
    public static final int NETWORK_C0BAN_MAINNET_VALUE = 13;
    /**
     * <code>NETWORK_C0BAN_TESTNET = 14;</code>
     */
    public static final int NETWORK_C0BAN_TESTNET_VALUE = 14;
    /**
     * <code>NETWORK_STELLAR_MAINNET = 15;</code>
     */
    public static final int NETWORK_STELLAR_MAINNET_VALUE = 15;
    /**
     * <code>NETWORK_STELLAR_TESTNET = 16;</code>
     */
    public static final int NETWORK_STELLAR_TESTNET_VALUE = 16;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Network valueOf(int value) {
      return forNumber(value);
    }

    public static Network forNumber(int value) {
      switch (value) {
        case 0: return NETWORK_INVALID;
        case 1: return NETWORK_BITCOIN_MAINNET;
        case 2: return NETWORK_BITCOIN_TESTNET;
        case 3: return NETWORK_ETHEREUM_MAINNET;
        case 4: return NETWORK_ETHEREUM_TESTNET;
        case 5: return NETWORK_LITECOIN_MAINNET;
        case 6: return NETWORK_LITECOIN_TESTNET;
        case 7: return NETWORK_BITCOINCASH_MAINNET;
        case 8: return NETWORK_BITCOINCASH_TESTNET;
        case 9: return NETWORK_RIPPLE_MAINNET;
        case 10: return NETWORK_RIPPLE_TESTNET;
        case 11: return NETWORK_TRON_MAINNET;
        case 12: return NETWORK_TRON_TESTNET;
        case 13: return NETWORK_C0BAN_MAINNET;
        case 14: return NETWORK_C0BAN_TESTNET;
        case 15: return NETWORK_STELLAR_MAINNET;
        case 16: return NETWORK_STELLAR_TESTNET;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Network>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Network> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Network>() {
            public Network findValueByNumber(int number) {
              return Network.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(1);
    }

    private static final Network[] VALUES = values();

    public static Network valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Network(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.Network)
  }

  /**
   * <pre>
   * AddressType is a type of address.
   * </pre>
   *
   * Protobuf enum {@code gincoinc.global.v1.AddressType}
   */
  public enum AddressType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ADDRESS_TYPE_INVALID = 0;</code>
     */
    ADDRESS_TYPE_INVALID(0),
    /**
     * <pre>
     *Pay to Script Hash
     * </pre>
     *
     * <code>ADDRESS_TYPE_P2SH = 1;</code>
     */
    ADDRESS_TYPE_P2SH(1),
    /**
     * <pre>
     *Pay to Witness Script Hash nested P2SH
     * </pre>
     *
     * <code>ADDRESS_TYPE_P2SH_P2WSH = 2;</code>
     */
    ADDRESS_TYPE_P2SH_P2WSH(2),
    /**
     * <pre>
     *Pay to Witness Script Hash
     * </pre>
     *
     * <code>ADDRESS_TYPE_P2WSH = 3;</code>
     */
    ADDRESS_TYPE_P2WSH(3),
    /**
     * <pre>
     *For ETH/XRP
     * </pre>
     *
     * <code>ADDRESS_TYPE_NONE = 100;</code>
     */
    ADDRESS_TYPE_NONE(100),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>ADDRESS_TYPE_INVALID = 0;</code>
     */
    public static final int ADDRESS_TYPE_INVALID_VALUE = 0;
    /**
     * <pre>
     *Pay to Script Hash
     * </pre>
     *
     * <code>ADDRESS_TYPE_P2SH = 1;</code>
     */
    public static final int ADDRESS_TYPE_P2SH_VALUE = 1;
    /**
     * <pre>
     *Pay to Witness Script Hash nested P2SH
     * </pre>
     *
     * <code>ADDRESS_TYPE_P2SH_P2WSH = 2;</code>
     */
    public static final int ADDRESS_TYPE_P2SH_P2WSH_VALUE = 2;
    /**
     * <pre>
     *Pay to Witness Script Hash
     * </pre>
     *
     * <code>ADDRESS_TYPE_P2WSH = 3;</code>
     */
    public static final int ADDRESS_TYPE_P2WSH_VALUE = 3;
    /**
     * <pre>
     *For ETH/XRP
     * </pre>
     *
     * <code>ADDRESS_TYPE_NONE = 100;</code>
     */
    public static final int ADDRESS_TYPE_NONE_VALUE = 100;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AddressType valueOf(int value) {
      return forNumber(value);
    }

    public static AddressType forNumber(int value) {
      switch (value) {
        case 0: return ADDRESS_TYPE_INVALID;
        case 1: return ADDRESS_TYPE_P2SH;
        case 2: return ADDRESS_TYPE_P2SH_P2WSH;
        case 3: return ADDRESS_TYPE_P2WSH;
        case 100: return ADDRESS_TYPE_NONE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AddressType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        AddressType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AddressType>() {
            public AddressType findValueByNumber(int number) {
              return AddressType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(2);
    }

    private static final AddressType[] VALUES = values();

    public static AddressType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private AddressType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.AddressType)
  }

  /**
   * <pre>
   * TransactionState is a state of transaction.
   * </pre>
   *
   * Protobuf enum {@code gincoinc.global.v1.TransactionState}
   */
  public enum TransactionState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TRANSACTION_STATE_INVALID = 0;</code>
     */
    TRANSACTION_STATE_INVALID(0),
    /**
     * <pre>
     *Transaction is submitted
     * </pre>
     *
     * <code>TRANSACTION_STATE_SUBMITTED = 1;</code>
     */
    TRANSACTION_STATE_SUBMITTED(1),
    /**
     * <pre>
     *Transaction is included in mempool
     * </pre>
     *
     * <code>TRANSACTION_STATE_PENDING = 2;</code>
     */
    TRANSACTION_STATE_PENDING(2),
    /**
     * <pre>
     *Transaction is included in a block
     * </pre>
     *
     * <code>TRANSACTION_STATE_PROCESSING = 3;</code>
     */
    TRANSACTION_STATE_PROCESSING(3),
    /**
     * <pre>
     *Exceeded number of confirmations specified
     * </pre>
     *
     * <code>TRANSACTION_STATE_CONFIRMED = 4;</code>
     */
    TRANSACTION_STATE_CONFIRMED(4),
    /**
     * <pre>
     *Transaction is dropped
     * </pre>
     *
     * <code>TRANSACTION_STATE_DROPPED = 5;</code>
     */
    TRANSACTION_STATE_DROPPED(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>TRANSACTION_STATE_INVALID = 0;</code>
     */
    public static final int TRANSACTION_STATE_INVALID_VALUE = 0;
    /**
     * <pre>
     *Transaction is submitted
     * </pre>
     *
     * <code>TRANSACTION_STATE_SUBMITTED = 1;</code>
     */
    public static final int TRANSACTION_STATE_SUBMITTED_VALUE = 1;
    /**
     * <pre>
     *Transaction is included in mempool
     * </pre>
     *
     * <code>TRANSACTION_STATE_PENDING = 2;</code>
     */
    public static final int TRANSACTION_STATE_PENDING_VALUE = 2;
    /**
     * <pre>
     *Transaction is included in a block
     * </pre>
     *
     * <code>TRANSACTION_STATE_PROCESSING = 3;</code>
     */
    public static final int TRANSACTION_STATE_PROCESSING_VALUE = 3;
    /**
     * <pre>
     *Exceeded number of confirmations specified
     * </pre>
     *
     * <code>TRANSACTION_STATE_CONFIRMED = 4;</code>
     */
    public static final int TRANSACTION_STATE_CONFIRMED_VALUE = 4;
    /**
     * <pre>
     *Transaction is dropped
     * </pre>
     *
     * <code>TRANSACTION_STATE_DROPPED = 5;</code>
     */
    public static final int TRANSACTION_STATE_DROPPED_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TransactionState valueOf(int value) {
      return forNumber(value);
    }

    public static TransactionState forNumber(int value) {
      switch (value) {
        case 0: return TRANSACTION_STATE_INVALID;
        case 1: return TRANSACTION_STATE_SUBMITTED;
        case 2: return TRANSACTION_STATE_PENDING;
        case 3: return TRANSACTION_STATE_PROCESSING;
        case 4: return TRANSACTION_STATE_CONFIRMED;
        case 5: return TRANSACTION_STATE_DROPPED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TransactionState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TransactionState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TransactionState>() {
            public TransactionState findValueByNumber(int number) {
              return TransactionState.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(3);
    }

    private static final TransactionState[] VALUES = values();

    public static TransactionState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TransactionState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.TransactionState)
  }

  /**
   * <pre>
   * UTXOState is a state of UTXO.
   * </pre>
   *
   * Protobuf enum {@code gincoinc.global.v1.UTXOState}
   */
  public enum UTXOState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UTXO_STATE_INVALID = 0;</code>
     */
    UTXO_STATE_INVALID(0),
    /**
     * <code>UTXO_STATE_PENDING_UNSPENT = 1;</code>
     */
    UTXO_STATE_PENDING_UNSPENT(1),
    /**
     * <code>UTXO_STATE_UNSPENT = 2;</code>
     */
    UTXO_STATE_UNSPENT(2),
    /**
     * <code>UTXO_STATE_PENDING_SPENT = 3;</code>
     */
    UTXO_STATE_PENDING_SPENT(3),
    /**
     * <code>UTXO_STATE_SPENT = 4;</code>
     */
    UTXO_STATE_SPENT(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>UTXO_STATE_INVALID = 0;</code>
     */
    public static final int UTXO_STATE_INVALID_VALUE = 0;
    /**
     * <code>UTXO_STATE_PENDING_UNSPENT = 1;</code>
     */
    public static final int UTXO_STATE_PENDING_UNSPENT_VALUE = 1;
    /**
     * <code>UTXO_STATE_UNSPENT = 2;</code>
     */
    public static final int UTXO_STATE_UNSPENT_VALUE = 2;
    /**
     * <code>UTXO_STATE_PENDING_SPENT = 3;</code>
     */
    public static final int UTXO_STATE_PENDING_SPENT_VALUE = 3;
    /**
     * <code>UTXO_STATE_SPENT = 4;</code>
     */
    public static final int UTXO_STATE_SPENT_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static UTXOState valueOf(int value) {
      return forNumber(value);
    }

    public static UTXOState forNumber(int value) {
      switch (value) {
        case 0: return UTXO_STATE_INVALID;
        case 1: return UTXO_STATE_PENDING_UNSPENT;
        case 2: return UTXO_STATE_UNSPENT;
        case 3: return UTXO_STATE_PENDING_SPENT;
        case 4: return UTXO_STATE_SPENT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<UTXOState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        UTXOState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<UTXOState>() {
            public UTXOState findValueByNumber(int number) {
              return UTXOState.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(4);
    }

    private static final UTXOState[] VALUES = values();

    public static UTXOState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private UTXOState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.UTXOState)
  }

  /**
   * <pre>
   * TransferType is a type of transaction.
   * </pre>
   *
   * Protobuf enum {@code gincoinc.global.v1.TransferType}
   */
  public enum TransferType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TRANSFER_TYPE_INVALID = 0;</code>
     */
    TRANSFER_TYPE_INVALID(0),
    /**
     * <pre>
     *The type of send
     * </pre>
     *
     * <code>TRANSFER_TYPE_SEND = 1;</code>
     */
    TRANSFER_TYPE_SEND(1),
    /**
     * <pre>
     *The type of receive
     * </pre>
     *
     * <code>TRANSFER_TYPE_RECEIVE = 2;</code>
     */
    TRANSFER_TYPE_RECEIVE(2),
    /**
     * <pre>
     *The type of change transaction for BTC/LTC/BCH
     * </pre>
     *
     * <code>TRANSFER_TYPE_CHANGE = 3;</code>
     */
    TRANSFER_TYPE_CHANGE(3),
    /**
     * <pre>
     *The type of fraudulent remittance
     * </pre>
     *
     * <code>TRANSFER_TYPE_FATAL = 4;</code>
     */
    TRANSFER_TYPE_FATAL(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>TRANSFER_TYPE_INVALID = 0;</code>
     */
    public static final int TRANSFER_TYPE_INVALID_VALUE = 0;
    /**
     * <pre>
     *The type of send
     * </pre>
     *
     * <code>TRANSFER_TYPE_SEND = 1;</code>
     */
    public static final int TRANSFER_TYPE_SEND_VALUE = 1;
    /**
     * <pre>
     *The type of receive
     * </pre>
     *
     * <code>TRANSFER_TYPE_RECEIVE = 2;</code>
     */
    public static final int TRANSFER_TYPE_RECEIVE_VALUE = 2;
    /**
     * <pre>
     *The type of change transaction for BTC/LTC/BCH
     * </pre>
     *
     * <code>TRANSFER_TYPE_CHANGE = 3;</code>
     */
    public static final int TRANSFER_TYPE_CHANGE_VALUE = 3;
    /**
     * <pre>
     *The type of fraudulent remittance
     * </pre>
     *
     * <code>TRANSFER_TYPE_FATAL = 4;</code>
     */
    public static final int TRANSFER_TYPE_FATAL_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TransferType valueOf(int value) {
      return forNumber(value);
    }

    public static TransferType forNumber(int value) {
      switch (value) {
        case 0: return TRANSFER_TYPE_INVALID;
        case 1: return TRANSFER_TYPE_SEND;
        case 2: return TRANSFER_TYPE_RECEIVE;
        case 3: return TRANSFER_TYPE_CHANGE;
        case 4: return TRANSFER_TYPE_FATAL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TransferType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TransferType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TransferType>() {
            public TransferType findValueByNumber(int number) {
              return TransferType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(5);
    }

    private static final TransferType[] VALUES = values();

    public static TransferType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TransferType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.TransferType)
  }

  /**
   * <pre>
   * XRPTransactionType is a type of xrp transaction.
   * </pre>
   *
   * Protobuf enum {@code gincoinc.global.v1.XRPTransactionType}
   */
  public enum XRPTransactionType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>XRP_TRANSACTION_TYPE_INVALID = 0;</code>
     */
    XRP_TRANSACTION_TYPE_INVALID(0),
    /**
     * <code>XRP_TRANSACTION_TYPE_PAYMENT = 1;</code>
     */
    XRP_TRANSACTION_TYPE_PAYMENT(1),
    /**
     * <code>XRP_TRANSACTION_TYPE_SET_SIGNER_LIST = 2;</code>
     */
    XRP_TRANSACTION_TYPE_SET_SIGNER_LIST(2),
    /**
     * <code>XRP_TRANSACTION_TYPE_DISABLE_MASTER = 3;</code>
     */
    XRP_TRANSACTION_TYPE_DISABLE_MASTER(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>XRP_TRANSACTION_TYPE_INVALID = 0;</code>
     */
    public static final int XRP_TRANSACTION_TYPE_INVALID_VALUE = 0;
    /**
     * <code>XRP_TRANSACTION_TYPE_PAYMENT = 1;</code>
     */
    public static final int XRP_TRANSACTION_TYPE_PAYMENT_VALUE = 1;
    /**
     * <code>XRP_TRANSACTION_TYPE_SET_SIGNER_LIST = 2;</code>
     */
    public static final int XRP_TRANSACTION_TYPE_SET_SIGNER_LIST_VALUE = 2;
    /**
     * <code>XRP_TRANSACTION_TYPE_DISABLE_MASTER = 3;</code>
     */
    public static final int XRP_TRANSACTION_TYPE_DISABLE_MASTER_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static XRPTransactionType valueOf(int value) {
      return forNumber(value);
    }

    public static XRPTransactionType forNumber(int value) {
      switch (value) {
        case 0: return XRP_TRANSACTION_TYPE_INVALID;
        case 1: return XRP_TRANSACTION_TYPE_PAYMENT;
        case 2: return XRP_TRANSACTION_TYPE_SET_SIGNER_LIST;
        case 3: return XRP_TRANSACTION_TYPE_DISABLE_MASTER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<XRPTransactionType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        XRPTransactionType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<XRPTransactionType>() {
            public XRPTransactionType findValueByNumber(int number) {
              return XRPTransactionType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(6);
    }

    private static final XRPTransactionType[] VALUES = values();

    public static XRPTransactionType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private XRPTransactionType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.XRPTransactionType)
  }

  /**
   * <pre>
   * TransactionResult is a result of transaction.
   * </pre>
   *
   * Protobuf enum {@code gincoinc.global.v1.TransactionResult}
   */
  public enum TransactionResult
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TRANSACTION_RESULT_INVALID = 0;</code>
     */
    TRANSACTION_RESULT_INVALID(0),
    /**
     * <pre>
     * Transaction is pending
     * </pre>
     *
     * <code>TRANSACTION_RESULT_PENDING = 1;</code>
     */
    TRANSACTION_RESULT_PENDING(1),
    /**
     * <pre>
     * Transaction is included in block
     * </pre>
     *
     * <code>TRANSACTION_RESULT_SUCCESS = 2;</code>
     */
    TRANSACTION_RESULT_SUCCESS(2),
    /**
     * <pre>
     * Failed to send transaction
     * </pre>
     *
     * <code>TRANSACTION_RESULT_FAILURE = 3;</code>
     */
    TRANSACTION_RESULT_FAILURE(3),
    /**
     * <code>TRANSACTION_RESULT_NONE = 100;</code>
     */
    TRANSACTION_RESULT_NONE(100),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>TRANSACTION_RESULT_INVALID = 0;</code>
     */
    public static final int TRANSACTION_RESULT_INVALID_VALUE = 0;
    /**
     * <pre>
     * Transaction is pending
     * </pre>
     *
     * <code>TRANSACTION_RESULT_PENDING = 1;</code>
     */
    public static final int TRANSACTION_RESULT_PENDING_VALUE = 1;
    /**
     * <pre>
     * Transaction is included in block
     * </pre>
     *
     * <code>TRANSACTION_RESULT_SUCCESS = 2;</code>
     */
    public static final int TRANSACTION_RESULT_SUCCESS_VALUE = 2;
    /**
     * <pre>
     * Failed to send transaction
     * </pre>
     *
     * <code>TRANSACTION_RESULT_FAILURE = 3;</code>
     */
    public static final int TRANSACTION_RESULT_FAILURE_VALUE = 3;
    /**
     * <code>TRANSACTION_RESULT_NONE = 100;</code>
     */
    public static final int TRANSACTION_RESULT_NONE_VALUE = 100;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TransactionResult valueOf(int value) {
      return forNumber(value);
    }

    public static TransactionResult forNumber(int value) {
      switch (value) {
        case 0: return TRANSACTION_RESULT_INVALID;
        case 1: return TRANSACTION_RESULT_PENDING;
        case 2: return TRANSACTION_RESULT_SUCCESS;
        case 3: return TRANSACTION_RESULT_FAILURE;
        case 100: return TRANSACTION_RESULT_NONE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TransactionResult>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TransactionResult> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TransactionResult>() {
            public TransactionResult findValueByNumber(int number) {
              return TransactionResult.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(7);
    }

    private static final TransactionResult[] VALUES = values();

    public static TransactionResult valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TransactionResult(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.TransactionResult)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n.gincoinc/global/v1/gincoincglobalv1/en" +
      "um.proto\022\022gincoinc.global.v1*\321\001\n\004Coin\022\020\n" +
      "\014COIN_INVALID\020\000\022\014\n\010COIN_BTC\020\001\022\014\n\010COIN_ET" +
      "H\020\002\022\014\n\010COIN_LTC\020\003\022\014\n\010COIN_BCH\020\004\022\014\n\010COIN_" +
      "XRP\020\005\022\014\n\010COIN_BAT\020\006\022\014\n\010COIN_TRX\020\007\022\r\n\tCOI" +
      "N_USDT\020\010\022\014\n\010COIN_RYO\020\t\022\016\n\nCOIN_JASMY\020\n\022\014" +
      "\n\010COIN_ENJ\020\013\022\014\n\010COIN_OMG\020\014\022\014\n\010COIN_XLM\020\r" +
      "*\356\003\n\007Network\022\023\n\017NETWORK_INVALID\020\000\022\033\n\027NET" +
      "WORK_BITCOIN_MAINNET\020\001\022\033\n\027NETWORK_BITCOI" +
      "N_TESTNET\020\002\022\034\n\030NETWORK_ETHEREUM_MAINNET\020" +
      "\003\022\034\n\030NETWORK_ETHEREUM_TESTNET\020\004\022\034\n\030NETWO" +
      "RK_LITECOIN_MAINNET\020\005\022\034\n\030NETWORK_LITECOI" +
      "N_TESTNET\020\006\022\037\n\033NETWORK_BITCOINCASH_MAINN" +
      "ET\020\007\022\037\n\033NETWORK_BITCOINCASH_TESTNET\020\010\022\032\n" +
      "\026NETWORK_RIPPLE_MAINNET\020\t\022\032\n\026NETWORK_RIP" +
      "PLE_TESTNET\020\n\022\030\n\024NETWORK_TRON_MAINNET\020\013\022" +
      "\030\n\024NETWORK_TRON_TESTNET\020\014\022\031\n\025NETWORK_C0B" +
      "AN_MAINNET\020\r\022\031\n\025NETWORK_C0BAN_TESTNET\020\016\022" +
      "\033\n\027NETWORK_STELLAR_MAINNET\020\017\022\033\n\027NETWORK_" +
      "STELLAR_TESTNET\020\020*\212\001\n\013AddressType\022\030\n\024ADD" +
      "RESS_TYPE_INVALID\020\000\022\025\n\021ADDRESS_TYPE_P2SH" +
      "\020\001\022\033\n\027ADDRESS_TYPE_P2SH_P2WSH\020\002\022\026\n\022ADDRE" +
      "SS_TYPE_P2WSH\020\003\022\025\n\021ADDRESS_TYPE_NONE\020d*\323" +
      "\001\n\020TransactionState\022\035\n\031TRANSACTION_STATE" +
      "_INVALID\020\000\022\037\n\033TRANSACTION_STATE_SUBMITTE" +
      "D\020\001\022\035\n\031TRANSACTION_STATE_PENDING\020\002\022 \n\034TR" +
      "ANSACTION_STATE_PROCESSING\020\003\022\037\n\033TRANSACT" +
      "ION_STATE_CONFIRMED\020\004\022\035\n\031TRANSACTION_STA" +
      "TE_DROPPED\020\005*\217\001\n\tUTXOState\022\026\n\022UTXO_STATE" +
      "_INVALID\020\000\022\036\n\032UTXO_STATE_PENDING_UNSPENT" +
      "\020\001\022\026\n\022UTXO_STATE_UNSPENT\020\002\022\034\n\030UTXO_STATE" +
      "_PENDING_SPENT\020\003\022\024\n\020UTXO_STATE_SPENT\020\004*\217" +
      "\001\n\014TransferType\022\031\n\025TRANSFER_TYPE_INVALID" +
      "\020\000\022\026\n\022TRANSFER_TYPE_SEND\020\001\022\031\n\025TRANSFER_T" +
      "YPE_RECEIVE\020\002\022\030\n\024TRANSFER_TYPE_CHANGE\020\003\022" +
      "\027\n\023TRANSFER_TYPE_FATAL\020\004*\253\001\n\022XRPTransact" +
      "ionType\022 \n\034XRP_TRANSACTION_TYPE_INVALID\020" +
      "\000\022 \n\034XRP_TRANSACTION_TYPE_PAYMENT\020\001\022(\n$X" +
      "RP_TRANSACTION_TYPE_SET_SIGNER_LIST\020\002\022\'\n" +
      "#XRP_TRANSACTION_TYPE_DISABLE_MASTER\020\003*\260" +
      "\001\n\021TransactionResult\022\036\n\032TRANSACTION_RESU" +
      "LT_INVALID\020\000\022\036\n\032TRANSACTION_RESULT_PENDI" +
      "NG\020\001\022\036\n\032TRANSACTION_RESULT_SUCCESS\020\002\022\036\n\032" +
      "TRANSACTION_RESULT_FAILURE\020\003\022\033\n\027TRANSACT" +
      "ION_RESULT_NONE\020dB\022Z\020gincoincglobalv1b\006p" +
      "roto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
