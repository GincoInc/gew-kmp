// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gincoinc/global/v1/gincoincglobalv1/enum.proto

package gincoinc.global.v1;

public final class Enum {
  private Enum() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * Coin is a type of crypto asset.
   * </pre>
   *
   * Protobuf enum {@code gincoinc.global.v1.Coin}
   */
  public enum Coin
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>COIN_INVALID = 0;</code>
     */
    COIN_INVALID(0),
    /**
     * <code>COIN_BTC = 1;</code>
     */
    COIN_BTC(1),
    /**
     * <code>COIN_ETH = 2;</code>
     */
    COIN_ETH(2),
    /**
     * <code>COIN_LTC = 3;</code>
     */
    COIN_LTC(3),
    /**
     * <code>COIN_BCH = 4;</code>
     */
    COIN_BCH(4),
    /**
     * <code>COIN_XRP = 5;</code>
     */
    COIN_XRP(5),
    /**
     * <code>COIN_ERC20_BAT = 6;</code>
     */
    COIN_ERC20_BAT(6),
    /**
     * <code>COIN_TRX = 7;</code>
     */
    COIN_TRX(7),
    /**
     * <code>COIN_ERC20_USDT = 8;</code>
     */
    COIN_ERC20_USDT(8),
    /**
     * <code>COIN_RYO = 9;</code>
     */
    COIN_RYO(9),
    /**
     * <code>COIN_ERC20_JASMY = 10;</code>
     */
    COIN_ERC20_JASMY(10),
    /**
     * <code>COIN_ERC20_ENJ = 11;</code>
     */
    COIN_ERC20_ENJ(11),
    /**
     * <code>COIN_ERC20_OMG = 12;</code>
     */
    COIN_ERC20_OMG(12),
    /**
     * <code>COIN_XLM = 13;</code>
     */
    COIN_XLM(13),
    /**
     * <code>COIN_ADA = 14;</code>
     */
    COIN_ADA(14),
    /**
     * <code>COIN_DOT = 15;</code>
     */
    COIN_DOT(15),
    /**
     * <code>COIN_ERC20_LINK = 16;</code>
     */
    COIN_ERC20_LINK(16),
    /**
     * <code>COIN_ERC20_DEP = 17;</code>
     */
    COIN_ERC20_DEP(17),
    /**
     * <code>COIN_ERC20_USDC = 18;</code>
     */
    COIN_ERC20_USDC(18),
    /**
     * <code>COIN_ERC20_GYEN = 19;</code>
     */
    COIN_ERC20_GYEN(19),
    /**
     * <code>COIN_ERC20_ZAIF = 20;</code>
     */
    COIN_ERC20_ZAIF(20),
    /**
     * <code>COIN_ERC20_FSCC = 21;</code>
     */
    COIN_ERC20_FSCC(21),
    /**
     * <code>COIN_ERC20_CMS = 22;</code>
     */
    COIN_ERC20_CMS(22),
    /**
     * <code>COIN_ERC20_CICC = 23;</code>
     */
    COIN_ERC20_CICC(23),
    /**
     * <code>COIN_ERC20_NCXC = 24;</code>
     */
    COIN_ERC20_NCXC(24),
    /**
     * <code>COIN_ERC20_COT = 25;</code>
     */
    COIN_ERC20_COT(25),
    /**
     * <code>COIN_XEM = 26;</code>
     */
    COIN_XEM(26),
    /**
     * <code>COIN_MONA = 27;</code>
     */
    COIN_MONA(27),
    /**
     * <code>COIN_IOST = 28;</code>
     */
    COIN_IOST(28),
    /**
     * <code>COIN_ERC20_SKEB = 29;</code>
     */
    COIN_ERC20_SKEB(29),
    /**
     * <code>COIN_KLAY = 30;</code>
     */
    COIN_KLAY(30),
    /**
     * <code>COIN_MATIC = 31;</code>
     */
    COIN_MATIC(31),
    /**
     * <code>COIN_XYM = 32;</code>
     */
    COIN_XYM(32),
    /**
     * <code>COIN_AVAX = 33;</code>
     */
    COIN_AVAX(33),
    /**
     * <code>COIN_ERC20_MATIC = 34;</code>
     */
    COIN_ERC20_MATIC(34),
    /**
     * <code>COIN_ERC20_ROND = 35;</code>
     */
    COIN_ERC20_ROND(35),
    /**
     * <code>COIN_ERC20_MV = 36;</code>
     */
    COIN_ERC20_MV(36),
    /**
     * <code>COIN_POLYGON_ERC20_ROND = 37;</code>
     */
    COIN_POLYGON_ERC20_ROND(37),
    /**
     * <code>COIN_POLYGON_ERC20_MV = 38;</code>
     */
    COIN_POLYGON_ERC20_MV(38),
    /**
     * <code>COIN_POLYGON_ERC20_TSUGT = 39;</code>
     */
    COIN_POLYGON_ERC20_TSUGT(39),
    /**
     * <code>COIN_ERC20_GXE = 40;</code>
     */
    COIN_ERC20_GXE(40),
    /**
     * <code>COIN_OAS = 41;</code>
     */
    COIN_OAS(41),
    /**
     * <code>COIN_ASTR = 42;</code>
     */
    COIN_ASTR(42),
    /**
     * <code>COIN_XDC = 43;</code>
     */
    COIN_XDC(43),
    /**
     * <code>COIN_ATOM = 44;</code>
     */
    COIN_ATOM(44),
    /**
     * <code>COIN_KLAYTN_KIP7_MBX = 45;</code>
     */
    COIN_KLAYTN_KIP7_MBX(45),
    /**
     * <code>COIN_ETC = 46;</code>
     */
    COIN_ETC(46),
    /**
     * <code>COIN_ERC20_DAI = 47;</code>
     */
    COIN_ERC20_DAI(47),
    /**
     * <code>COIN_ERC20_WETH = 48;</code>
     */
    COIN_ERC20_WETH(48),
    /**
     * <code>COIN_ALGO = 49;</code>
     */
    COIN_ALGO(49),
    /**
     * <code>COIN_ERC20_AXS = 50;</code>
     */
    COIN_ERC20_AXS(50),
    /**
     * <code>COIN_ERC20_SAND = 51;</code>
     */
    COIN_ERC20_SAND(51),
    /**
     * <code>COIN_ERC20_MKR = 52;</code>
     */
    COIN_ERC20_MKR(52),
    /**
     * <code>COIN_ERC20_CHZ = 53;</code>
     */
    COIN_ERC20_CHZ(53),
    /**
     * <code>COIN_ERC20_NIDT = 54;</code>
     */
    COIN_ERC20_NIDT(54),
    /**
     * <code>COIN_ERC20_FNCT = 55;</code>
     */
    COIN_ERC20_FNCT(55),
    /**
     * <code>COIN_ERC20_SHIB = 56;</code>
     */
    COIN_ERC20_SHIB(56),
    /**
     * <code>COIN_ERC20_APE = 57;</code>
     */
    COIN_ERC20_APE(57),
    /**
     * <code>COIN_ERC20_BNB = 58;</code>
     */
    COIN_ERC20_BNB(58),
    /**
     * <code>COIN_ERC20_FCR = 59;</code>
     */
    COIN_ERC20_FCR(59),
    /**
     * <code>COIN_HBAR = 60;</code>
     */
    COIN_HBAR(60),
    /**
     * <code>COIN_JOC = 61;</code>
     */
    COIN_JOC(61),
    /**
     * <code>COIN_SOL = 62;</code>
     */
    COIN_SOL(62),
    /**
     * <code>COIN_BNB = 63;</code>
     */
    COIN_BNB(63),
    /**
     * <code>COIN_FLR = 64;</code>
     */
    COIN_FLR(64),
    /**
     * <code>COIN_POLYGON_ERC20_OSHI = 65;</code>
     */
    COIN_POLYGON_ERC20_OSHI(65),
    /**
     * <code>COIN_SDN = 10002;</code>
     */
    COIN_SDN(10002),
    /**
     * <pre>
     * for stable coin development in dev
     * </pre>
     *
     * <code>COIN_ERC20_SCDEV = 10003;</code>
     */
    COIN_ERC20_SCDEV(10003),
    /**
     * <pre>
     * for stable coin development in qa
     * </pre>
     *
     * <code>COIN_ERC20_SCQA = 10004;</code>
     */
    COIN_ERC20_SCQA(10004),
    /**
     * <pre>
     * for stable coin development in prod
     * </pre>
     *
     * <code>COIN_ERC20_SCPROD = 10005;</code>
     */
    COIN_ERC20_SCPROD(10005),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>COIN_INVALID = 0;</code>
     */
    public static final int COIN_INVALID_VALUE = 0;
    /**
     * <code>COIN_BTC = 1;</code>
     */
    public static final int COIN_BTC_VALUE = 1;
    /**
     * <code>COIN_ETH = 2;</code>
     */
    public static final int COIN_ETH_VALUE = 2;
    /**
     * <code>COIN_LTC = 3;</code>
     */
    public static final int COIN_LTC_VALUE = 3;
    /**
     * <code>COIN_BCH = 4;</code>
     */
    public static final int COIN_BCH_VALUE = 4;
    /**
     * <code>COIN_XRP = 5;</code>
     */
    public static final int COIN_XRP_VALUE = 5;
    /**
     * <code>COIN_ERC20_BAT = 6;</code>
     */
    public static final int COIN_ERC20_BAT_VALUE = 6;
    /**
     * <code>COIN_TRX = 7;</code>
     */
    public static final int COIN_TRX_VALUE = 7;
    /**
     * <code>COIN_ERC20_USDT = 8;</code>
     */
    public static final int COIN_ERC20_USDT_VALUE = 8;
    /**
     * <code>COIN_RYO = 9;</code>
     */
    public static final int COIN_RYO_VALUE = 9;
    /**
     * <code>COIN_ERC20_JASMY = 10;</code>
     */
    public static final int COIN_ERC20_JASMY_VALUE = 10;
    /**
     * <code>COIN_ERC20_ENJ = 11;</code>
     */
    public static final int COIN_ERC20_ENJ_VALUE = 11;
    /**
     * <code>COIN_ERC20_OMG = 12;</code>
     */
    public static final int COIN_ERC20_OMG_VALUE = 12;
    /**
     * <code>COIN_XLM = 13;</code>
     */
    public static final int COIN_XLM_VALUE = 13;
    /**
     * <code>COIN_ADA = 14;</code>
     */
    public static final int COIN_ADA_VALUE = 14;
    /**
     * <code>COIN_DOT = 15;</code>
     */
    public static final int COIN_DOT_VALUE = 15;
    /**
     * <code>COIN_ERC20_LINK = 16;</code>
     */
    public static final int COIN_ERC20_LINK_VALUE = 16;
    /**
     * <code>COIN_ERC20_DEP = 17;</code>
     */
    public static final int COIN_ERC20_DEP_VALUE = 17;
    /**
     * <code>COIN_ERC20_USDC = 18;</code>
     */
    public static final int COIN_ERC20_USDC_VALUE = 18;
    /**
     * <code>COIN_ERC20_GYEN = 19;</code>
     */
    public static final int COIN_ERC20_GYEN_VALUE = 19;
    /**
     * <code>COIN_ERC20_ZAIF = 20;</code>
     */
    public static final int COIN_ERC20_ZAIF_VALUE = 20;
    /**
     * <code>COIN_ERC20_FSCC = 21;</code>
     */
    public static final int COIN_ERC20_FSCC_VALUE = 21;
    /**
     * <code>COIN_ERC20_CMS = 22;</code>
     */
    public static final int COIN_ERC20_CMS_VALUE = 22;
    /**
     * <code>COIN_ERC20_CICC = 23;</code>
     */
    public static final int COIN_ERC20_CICC_VALUE = 23;
    /**
     * <code>COIN_ERC20_NCXC = 24;</code>
     */
    public static final int COIN_ERC20_NCXC_VALUE = 24;
    /**
     * <code>COIN_ERC20_COT = 25;</code>
     */
    public static final int COIN_ERC20_COT_VALUE = 25;
    /**
     * <code>COIN_XEM = 26;</code>
     */
    public static final int COIN_XEM_VALUE = 26;
    /**
     * <code>COIN_MONA = 27;</code>
     */
    public static final int COIN_MONA_VALUE = 27;
    /**
     * <code>COIN_IOST = 28;</code>
     */
    public static final int COIN_IOST_VALUE = 28;
    /**
     * <code>COIN_ERC20_SKEB = 29;</code>
     */
    public static final int COIN_ERC20_SKEB_VALUE = 29;
    /**
     * <code>COIN_KLAY = 30;</code>
     */
    public static final int COIN_KLAY_VALUE = 30;
    /**
     * <code>COIN_MATIC = 31;</code>
     */
    public static final int COIN_MATIC_VALUE = 31;
    /**
     * <code>COIN_XYM = 32;</code>
     */
    public static final int COIN_XYM_VALUE = 32;
    /**
     * <code>COIN_AVAX = 33;</code>
     */
    public static final int COIN_AVAX_VALUE = 33;
    /**
     * <code>COIN_ERC20_MATIC = 34;</code>
     */
    public static final int COIN_ERC20_MATIC_VALUE = 34;
    /**
     * <code>COIN_ERC20_ROND = 35;</code>
     */
    public static final int COIN_ERC20_ROND_VALUE = 35;
    /**
     * <code>COIN_ERC20_MV = 36;</code>
     */
    public static final int COIN_ERC20_MV_VALUE = 36;
    /**
     * <code>COIN_POLYGON_ERC20_ROND = 37;</code>
     */
    public static final int COIN_POLYGON_ERC20_ROND_VALUE = 37;
    /**
     * <code>COIN_POLYGON_ERC20_MV = 38;</code>
     */
    public static final int COIN_POLYGON_ERC20_MV_VALUE = 38;
    /**
     * <code>COIN_POLYGON_ERC20_TSUGT = 39;</code>
     */
    public static final int COIN_POLYGON_ERC20_TSUGT_VALUE = 39;
    /**
     * <code>COIN_ERC20_GXE = 40;</code>
     */
    public static final int COIN_ERC20_GXE_VALUE = 40;
    /**
     * <code>COIN_OAS = 41;</code>
     */
    public static final int COIN_OAS_VALUE = 41;
    /**
     * <code>COIN_ASTR = 42;</code>
     */
    public static final int COIN_ASTR_VALUE = 42;
    /**
     * <code>COIN_XDC = 43;</code>
     */
    public static final int COIN_XDC_VALUE = 43;
    /**
     * <code>COIN_ATOM = 44;</code>
     */
    public static final int COIN_ATOM_VALUE = 44;
    /**
     * <code>COIN_KLAYTN_KIP7_MBX = 45;</code>
     */
    public static final int COIN_KLAYTN_KIP7_MBX_VALUE = 45;
    /**
     * <code>COIN_ETC = 46;</code>
     */
    public static final int COIN_ETC_VALUE = 46;
    /**
     * <code>COIN_ERC20_DAI = 47;</code>
     */
    public static final int COIN_ERC20_DAI_VALUE = 47;
    /**
     * <code>COIN_ERC20_WETH = 48;</code>
     */
    public static final int COIN_ERC20_WETH_VALUE = 48;
    /**
     * <code>COIN_ALGO = 49;</code>
     */
    public static final int COIN_ALGO_VALUE = 49;
    /**
     * <code>COIN_ERC20_AXS = 50;</code>
     */
    public static final int COIN_ERC20_AXS_VALUE = 50;
    /**
     * <code>COIN_ERC20_SAND = 51;</code>
     */
    public static final int COIN_ERC20_SAND_VALUE = 51;
    /**
     * <code>COIN_ERC20_MKR = 52;</code>
     */
    public static final int COIN_ERC20_MKR_VALUE = 52;
    /**
     * <code>COIN_ERC20_CHZ = 53;</code>
     */
    public static final int COIN_ERC20_CHZ_VALUE = 53;
    /**
     * <code>COIN_ERC20_NIDT = 54;</code>
     */
    public static final int COIN_ERC20_NIDT_VALUE = 54;
    /**
     * <code>COIN_ERC20_FNCT = 55;</code>
     */
    public static final int COIN_ERC20_FNCT_VALUE = 55;
    /**
     * <code>COIN_ERC20_SHIB = 56;</code>
     */
    public static final int COIN_ERC20_SHIB_VALUE = 56;
    /**
     * <code>COIN_ERC20_APE = 57;</code>
     */
    public static final int COIN_ERC20_APE_VALUE = 57;
    /**
     * <code>COIN_ERC20_BNB = 58;</code>
     */
    public static final int COIN_ERC20_BNB_VALUE = 58;
    /**
     * <code>COIN_ERC20_FCR = 59;</code>
     */
    public static final int COIN_ERC20_FCR_VALUE = 59;
    /**
     * <code>COIN_HBAR = 60;</code>
     */
    public static final int COIN_HBAR_VALUE = 60;
    /**
     * <code>COIN_JOC = 61;</code>
     */
    public static final int COIN_JOC_VALUE = 61;
    /**
     * <code>COIN_SOL = 62;</code>
     */
    public static final int COIN_SOL_VALUE = 62;
    /**
     * <code>COIN_BNB = 63;</code>
     */
    public static final int COIN_BNB_VALUE = 63;
    /**
     * <code>COIN_FLR = 64;</code>
     */
    public static final int COIN_FLR_VALUE = 64;
    /**
     * <code>COIN_POLYGON_ERC20_OSHI = 65;</code>
     */
    public static final int COIN_POLYGON_ERC20_OSHI_VALUE = 65;
    /**
     * <code>COIN_SDN = 10002;</code>
     */
    public static final int COIN_SDN_VALUE = 10002;
    /**
     * <pre>
     * for stable coin development in dev
     * </pre>
     *
     * <code>COIN_ERC20_SCDEV = 10003;</code>
     */
    public static final int COIN_ERC20_SCDEV_VALUE = 10003;
    /**
     * <pre>
     * for stable coin development in qa
     * </pre>
     *
     * <code>COIN_ERC20_SCQA = 10004;</code>
     */
    public static final int COIN_ERC20_SCQA_VALUE = 10004;
    /**
     * <pre>
     * for stable coin development in prod
     * </pre>
     *
     * <code>COIN_ERC20_SCPROD = 10005;</code>
     */
    public static final int COIN_ERC20_SCPROD_VALUE = 10005;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Coin valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Coin forNumber(int value) {
      switch (value) {
        case 0: return COIN_INVALID;
        case 1: return COIN_BTC;
        case 2: return COIN_ETH;
        case 3: return COIN_LTC;
        case 4: return COIN_BCH;
        case 5: return COIN_XRP;
        case 6: return COIN_ERC20_BAT;
        case 7: return COIN_TRX;
        case 8: return COIN_ERC20_USDT;
        case 9: return COIN_RYO;
        case 10: return COIN_ERC20_JASMY;
        case 11: return COIN_ERC20_ENJ;
        case 12: return COIN_ERC20_OMG;
        case 13: return COIN_XLM;
        case 14: return COIN_ADA;
        case 15: return COIN_DOT;
        case 16: return COIN_ERC20_LINK;
        case 17: return COIN_ERC20_DEP;
        case 18: return COIN_ERC20_USDC;
        case 19: return COIN_ERC20_GYEN;
        case 20: return COIN_ERC20_ZAIF;
        case 21: return COIN_ERC20_FSCC;
        case 22: return COIN_ERC20_CMS;
        case 23: return COIN_ERC20_CICC;
        case 24: return COIN_ERC20_NCXC;
        case 25: return COIN_ERC20_COT;
        case 26: return COIN_XEM;
        case 27: return COIN_MONA;
        case 28: return COIN_IOST;
        case 29: return COIN_ERC20_SKEB;
        case 30: return COIN_KLAY;
        case 31: return COIN_MATIC;
        case 32: return COIN_XYM;
        case 33: return COIN_AVAX;
        case 34: return COIN_ERC20_MATIC;
        case 35: return COIN_ERC20_ROND;
        case 36: return COIN_ERC20_MV;
        case 37: return COIN_POLYGON_ERC20_ROND;
        case 38: return COIN_POLYGON_ERC20_MV;
        case 39: return COIN_POLYGON_ERC20_TSUGT;
        case 40: return COIN_ERC20_GXE;
        case 41: return COIN_OAS;
        case 42: return COIN_ASTR;
        case 43: return COIN_XDC;
        case 44: return COIN_ATOM;
        case 45: return COIN_KLAYTN_KIP7_MBX;
        case 46: return COIN_ETC;
        case 47: return COIN_ERC20_DAI;
        case 48: return COIN_ERC20_WETH;
        case 49: return COIN_ALGO;
        case 50: return COIN_ERC20_AXS;
        case 51: return COIN_ERC20_SAND;
        case 52: return COIN_ERC20_MKR;
        case 53: return COIN_ERC20_CHZ;
        case 54: return COIN_ERC20_NIDT;
        case 55: return COIN_ERC20_FNCT;
        case 56: return COIN_ERC20_SHIB;
        case 57: return COIN_ERC20_APE;
        case 58: return COIN_ERC20_BNB;
        case 59: return COIN_ERC20_FCR;
        case 60: return COIN_HBAR;
        case 61: return COIN_JOC;
        case 62: return COIN_SOL;
        case 63: return COIN_BNB;
        case 64: return COIN_FLR;
        case 65: return COIN_POLYGON_ERC20_OSHI;
        case 10002: return COIN_SDN;
        case 10003: return COIN_ERC20_SCDEV;
        case 10004: return COIN_ERC20_SCQA;
        case 10005: return COIN_ERC20_SCPROD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Coin>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Coin> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Coin>() {
            public Coin findValueByNumber(int number) {
              return Coin.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(0);
    }

    private static final Coin[] VALUES = values();

    public static Coin valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Coin(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.Coin)
  }

  /**
   * <pre>
   * Network is a type of blockchain network.
   * </pre>
   *
   * Protobuf enum {@code gincoinc.global.v1.Network}
   */
  public enum Network
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NETWORK_INVALID = 0;</code>
     */
    NETWORK_INVALID(0),
    /**
     * <code>NETWORK_BITCOIN_MAINNET = 1;</code>
     */
    NETWORK_BITCOIN_MAINNET(1),
    /**
     * <code>NETWORK_BITCOIN_TESTNET = 2;</code>
     */
    NETWORK_BITCOIN_TESTNET(2),
    /**
     * <code>NETWORK_ETHEREUM_MAINNET = 3;</code>
     */
    NETWORK_ETHEREUM_MAINNET(3),
    /**
     * <code>NETWORK_ETHEREUM_TESTNET = 4;</code>
     */
    NETWORK_ETHEREUM_TESTNET(4),
    /**
     * <code>NETWORK_LITECOIN_MAINNET = 5;</code>
     */
    NETWORK_LITECOIN_MAINNET(5),
    /**
     * <code>NETWORK_LITECOIN_TESTNET = 6;</code>
     */
    NETWORK_LITECOIN_TESTNET(6),
    /**
     * <code>NETWORK_BITCOINCASH_MAINNET = 7;</code>
     */
    NETWORK_BITCOINCASH_MAINNET(7),
    /**
     * <code>NETWORK_BITCOINCASH_TESTNET = 8;</code>
     */
    NETWORK_BITCOINCASH_TESTNET(8),
    /**
     * <code>NETWORK_RIPPLE_MAINNET = 9;</code>
     */
    NETWORK_RIPPLE_MAINNET(9),
    /**
     * <code>NETWORK_RIPPLE_TESTNET = 10;</code>
     */
    NETWORK_RIPPLE_TESTNET(10),
    /**
     * <code>NETWORK_TRON_MAINNET = 11;</code>
     */
    NETWORK_TRON_MAINNET(11),
    /**
     * <code>NETWORK_TRON_TESTNET = 12;</code>
     */
    NETWORK_TRON_TESTNET(12),
    /**
     * <code>NETWORK_C0BAN_MAINNET = 13;</code>
     */
    NETWORK_C0BAN_MAINNET(13),
    /**
     * <code>NETWORK_C0BAN_TESTNET = 14;</code>
     */
    NETWORK_C0BAN_TESTNET(14),
    /**
     * <code>NETWORK_STELLAR_MAINNET = 15;</code>
     */
    NETWORK_STELLAR_MAINNET(15),
    /**
     * <code>NETWORK_STELLAR_TESTNET = 16;</code>
     */
    NETWORK_STELLAR_TESTNET(16),
    /**
     * <code>NETWORK_CARDANO_MAINNET = 17;</code>
     */
    NETWORK_CARDANO_MAINNET(17),
    /**
     * <code>NETWORK_CARDANO_TESTNET = 18;</code>
     */
    NETWORK_CARDANO_TESTNET(18),
    /**
     * <code>NETWORK_POLKADOT_MAINNET = 19;</code>
     */
    NETWORK_POLKADOT_MAINNET(19),
    /**
     * <code>NETWORK_POLKADOT_TESTNET = 20;</code>
     */
    NETWORK_POLKADOT_TESTNET(20),
    /**
     * <code>NETWORK_NEM_MAINNET = 21;</code>
     */
    NETWORK_NEM_MAINNET(21),
    /**
     * <code>NETWORK_NEM_TESTNET = 22;</code>
     */
    NETWORK_NEM_TESTNET(22),
    /**
     * <code>NETWORK_MONACOIN_MAINNET = 23;</code>
     */
    NETWORK_MONACOIN_MAINNET(23),
    /**
     * <code>NETWORK_MONACOIN_TESTNET = 24;</code>
     */
    NETWORK_MONACOIN_TESTNET(24),
    /**
     * <code>NETWORK_IOST_MAINNET = 25;</code>
     */
    NETWORK_IOST_MAINNET(25),
    /**
     * <code>NETWORK_IOST_TESTNET = 26;</code>
     */
    NETWORK_IOST_TESTNET(26),
    /**
     * <code>NETWORK_KLAY_MAINNET = 27;</code>
     */
    NETWORK_KLAY_MAINNET(27),
    /**
     * <code>NETWORK_KLAY_TESTNET = 28;</code>
     */
    NETWORK_KLAY_TESTNET(28),
    /**
     * <code>NETWORK_POLYGON_MAINNET = 29;</code>
     */
    NETWORK_POLYGON_MAINNET(29),
    /**
     * <code>NETWORK_POLYGON_TESTNET = 30;</code>
     */
    NETWORK_POLYGON_TESTNET(30),
    /**
     * <code>NETWORK_SYMBOL_MAINNET = 31;</code>
     */
    NETWORK_SYMBOL_MAINNET(31),
    /**
     * <code>NETWORK_SYMBOL_TESTNET = 32;</code>
     */
    NETWORK_SYMBOL_TESTNET(32),
    /**
     * <code>NETWORK_AVALANCHE_MAINNET = 33;</code>
     */
    NETWORK_AVALANCHE_MAINNET(33),
    /**
     * <code>NETWORK_AVALANCHE_TESTNET = 34;</code>
     */
    NETWORK_AVALANCHE_TESTNET(34),
    /**
     * <code>NETWORK_OASYS_MAINNET = 35;</code>
     */
    NETWORK_OASYS_MAINNET(35),
    /**
     * <code>NETWORK_OASYS_TESTNET = 36;</code>
     */
    NETWORK_OASYS_TESTNET(36),
    /**
     * <code>NETWORK_ASTAR_MAINNET = 37;</code>
     */
    NETWORK_ASTAR_MAINNET(37),
    /**
     * <code>NETWORK_SHIBUYA_TESTNET = 38;</code>
     */
    NETWORK_SHIBUYA_TESTNET(38),
    /**
     * <code>NETWORK_XDC_MAINNET = 39;</code>
     */
    NETWORK_XDC_MAINNET(39),
    /**
     * <code>NETWORK_XDC_TESTNET = 40;</code>
     */
    NETWORK_XDC_TESTNET(40),
    /**
     * <code>NETWORK_COSMOS_MAINNET = 41;</code>
     */
    NETWORK_COSMOS_MAINNET(41),
    /**
     * <code>NETWORK_COSMOS_TESTNET = 42;</code>
     */
    NETWORK_COSMOS_TESTNET(42),
    /**
     * <code>NETWORK_ETHEREUM_CLASSIC_MAINNET = 43;</code>
     */
    NETWORK_ETHEREUM_CLASSIC_MAINNET(43),
    /**
     * <code>NETWORK_ETHEREUM_CLASSIC_TESTNET = 44;</code>
     */
    NETWORK_ETHEREUM_CLASSIC_TESTNET(44),
    /**
     * <code>NETWORK_ALGORAND_MAINNET = 45;</code>
     */
    NETWORK_ALGORAND_MAINNET(45),
    /**
     * <code>NETWORK_ALGORAND_TESTNET = 46;</code>
     */
    NETWORK_ALGORAND_TESTNET(46),
    /**
     * <code>NETWORK_HEDERA_MAINNET = 47;</code>
     */
    NETWORK_HEDERA_MAINNET(47),
    /**
     * <code>NETWORK_HEDERA_TESTNET = 48;</code>
     */
    NETWORK_HEDERA_TESTNET(48),
    /**
     * <code>NETWORK_JAPAN_OPEN_CHAIN_MAINNET = 49;</code>
     */
    NETWORK_JAPAN_OPEN_CHAIN_MAINNET(49),
    /**
     * <code>NETWORK_JAPAN_OPEN_CHAIN_TESTNET = 50;</code>
     */
    NETWORK_JAPAN_OPEN_CHAIN_TESTNET(50),
    /**
     * <code>NETWORK_SOLANA_MAINNET = 51;</code>
     */
    NETWORK_SOLANA_MAINNET(51),
    /**
     * <code>NETWORK_SOLANA_TESTNET = 52;</code>
     */
    NETWORK_SOLANA_TESTNET(52),
    /**
     * <code>NETWORK_BNB_SMART_CHAIN_MAINNET = 53;</code>
     */
    NETWORK_BNB_SMART_CHAIN_MAINNET(53),
    /**
     * <code>NETWORK_BNB_SMART_CHAIN_TESTNET = 54;</code>
     */
    NETWORK_BNB_SMART_CHAIN_TESTNET(54),
    /**
     * <code>NETWORK_FLARE_MAINNET = 55;</code>
     */
    NETWORK_FLARE_MAINNET(55),
    /**
     * <code>NETWORK_FLARE_TESTNET = 56;</code>
     */
    NETWORK_FLARE_TESTNET(56),
    /**
     * <code>NETWORK_SHIDEN_MAINNET = 10002;</code>
     */
    NETWORK_SHIDEN_MAINNET(10002),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>NETWORK_INVALID = 0;</code>
     */
    public static final int NETWORK_INVALID_VALUE = 0;
    /**
     * <code>NETWORK_BITCOIN_MAINNET = 1;</code>
     */
    public static final int NETWORK_BITCOIN_MAINNET_VALUE = 1;
    /**
     * <code>NETWORK_BITCOIN_TESTNET = 2;</code>
     */
    public static final int NETWORK_BITCOIN_TESTNET_VALUE = 2;
    /**
     * <code>NETWORK_ETHEREUM_MAINNET = 3;</code>
     */
    public static final int NETWORK_ETHEREUM_MAINNET_VALUE = 3;
    /**
     * <code>NETWORK_ETHEREUM_TESTNET = 4;</code>
     */
    public static final int NETWORK_ETHEREUM_TESTNET_VALUE = 4;
    /**
     * <code>NETWORK_LITECOIN_MAINNET = 5;</code>
     */
    public static final int NETWORK_LITECOIN_MAINNET_VALUE = 5;
    /**
     * <code>NETWORK_LITECOIN_TESTNET = 6;</code>
     */
    public static final int NETWORK_LITECOIN_TESTNET_VALUE = 6;
    /**
     * <code>NETWORK_BITCOINCASH_MAINNET = 7;</code>
     */
    public static final int NETWORK_BITCOINCASH_MAINNET_VALUE = 7;
    /**
     * <code>NETWORK_BITCOINCASH_TESTNET = 8;</code>
     */
    public static final int NETWORK_BITCOINCASH_TESTNET_VALUE = 8;
    /**
     * <code>NETWORK_RIPPLE_MAINNET = 9;</code>
     */
    public static final int NETWORK_RIPPLE_MAINNET_VALUE = 9;
    /**
     * <code>NETWORK_RIPPLE_TESTNET = 10;</code>
     */
    public static final int NETWORK_RIPPLE_TESTNET_VALUE = 10;
    /**
     * <code>NETWORK_TRON_MAINNET = 11;</code>
     */
    public static final int NETWORK_TRON_MAINNET_VALUE = 11;
    /**
     * <code>NETWORK_TRON_TESTNET = 12;</code>
     */
    public static final int NETWORK_TRON_TESTNET_VALUE = 12;
    /**
     * <code>NETWORK_C0BAN_MAINNET = 13;</code>
     */
    public static final int NETWORK_C0BAN_MAINNET_VALUE = 13;
    /**
     * <code>NETWORK_C0BAN_TESTNET = 14;</code>
     */
    public static final int NETWORK_C0BAN_TESTNET_VALUE = 14;
    /**
     * <code>NETWORK_STELLAR_MAINNET = 15;</code>
     */
    public static final int NETWORK_STELLAR_MAINNET_VALUE = 15;
    /**
     * <code>NETWORK_STELLAR_TESTNET = 16;</code>
     */
    public static final int NETWORK_STELLAR_TESTNET_VALUE = 16;
    /**
     * <code>NETWORK_CARDANO_MAINNET = 17;</code>
     */
    public static final int NETWORK_CARDANO_MAINNET_VALUE = 17;
    /**
     * <code>NETWORK_CARDANO_TESTNET = 18;</code>
     */
    public static final int NETWORK_CARDANO_TESTNET_VALUE = 18;
    /**
     * <code>NETWORK_POLKADOT_MAINNET = 19;</code>
     */
    public static final int NETWORK_POLKADOT_MAINNET_VALUE = 19;
    /**
     * <code>NETWORK_POLKADOT_TESTNET = 20;</code>
     */
    public static final int NETWORK_POLKADOT_TESTNET_VALUE = 20;
    /**
     * <code>NETWORK_NEM_MAINNET = 21;</code>
     */
    public static final int NETWORK_NEM_MAINNET_VALUE = 21;
    /**
     * <code>NETWORK_NEM_TESTNET = 22;</code>
     */
    public static final int NETWORK_NEM_TESTNET_VALUE = 22;
    /**
     * <code>NETWORK_MONACOIN_MAINNET = 23;</code>
     */
    public static final int NETWORK_MONACOIN_MAINNET_VALUE = 23;
    /**
     * <code>NETWORK_MONACOIN_TESTNET = 24;</code>
     */
    public static final int NETWORK_MONACOIN_TESTNET_VALUE = 24;
    /**
     * <code>NETWORK_IOST_MAINNET = 25;</code>
     */
    public static final int NETWORK_IOST_MAINNET_VALUE = 25;
    /**
     * <code>NETWORK_IOST_TESTNET = 26;</code>
     */
    public static final int NETWORK_IOST_TESTNET_VALUE = 26;
    /**
     * <code>NETWORK_KLAY_MAINNET = 27;</code>
     */
    public static final int NETWORK_KLAY_MAINNET_VALUE = 27;
    /**
     * <code>NETWORK_KLAY_TESTNET = 28;</code>
     */
    public static final int NETWORK_KLAY_TESTNET_VALUE = 28;
    /**
     * <code>NETWORK_POLYGON_MAINNET = 29;</code>
     */
    public static final int NETWORK_POLYGON_MAINNET_VALUE = 29;
    /**
     * <code>NETWORK_POLYGON_TESTNET = 30;</code>
     */
    public static final int NETWORK_POLYGON_TESTNET_VALUE = 30;
    /**
     * <code>NETWORK_SYMBOL_MAINNET = 31;</code>
     */
    public static final int NETWORK_SYMBOL_MAINNET_VALUE = 31;
    /**
     * <code>NETWORK_SYMBOL_TESTNET = 32;</code>
     */
    public static final int NETWORK_SYMBOL_TESTNET_VALUE = 32;
    /**
     * <code>NETWORK_AVALANCHE_MAINNET = 33;</code>
     */
    public static final int NETWORK_AVALANCHE_MAINNET_VALUE = 33;
    /**
     * <code>NETWORK_AVALANCHE_TESTNET = 34;</code>
     */
    public static final int NETWORK_AVALANCHE_TESTNET_VALUE = 34;
    /**
     * <code>NETWORK_OASYS_MAINNET = 35;</code>
     */
    public static final int NETWORK_OASYS_MAINNET_VALUE = 35;
    /**
     * <code>NETWORK_OASYS_TESTNET = 36;</code>
     */
    public static final int NETWORK_OASYS_TESTNET_VALUE = 36;
    /**
     * <code>NETWORK_ASTAR_MAINNET = 37;</code>
     */
    public static final int NETWORK_ASTAR_MAINNET_VALUE = 37;
    /**
     * <code>NETWORK_SHIBUYA_TESTNET = 38;</code>
     */
    public static final int NETWORK_SHIBUYA_TESTNET_VALUE = 38;
    /**
     * <code>NETWORK_XDC_MAINNET = 39;</code>
     */
    public static final int NETWORK_XDC_MAINNET_VALUE = 39;
    /**
     * <code>NETWORK_XDC_TESTNET = 40;</code>
     */
    public static final int NETWORK_XDC_TESTNET_VALUE = 40;
    /**
     * <code>NETWORK_COSMOS_MAINNET = 41;</code>
     */
    public static final int NETWORK_COSMOS_MAINNET_VALUE = 41;
    /**
     * <code>NETWORK_COSMOS_TESTNET = 42;</code>
     */
    public static final int NETWORK_COSMOS_TESTNET_VALUE = 42;
    /**
     * <code>NETWORK_ETHEREUM_CLASSIC_MAINNET = 43;</code>
     */
    public static final int NETWORK_ETHEREUM_CLASSIC_MAINNET_VALUE = 43;
    /**
     * <code>NETWORK_ETHEREUM_CLASSIC_TESTNET = 44;</code>
     */
    public static final int NETWORK_ETHEREUM_CLASSIC_TESTNET_VALUE = 44;
    /**
     * <code>NETWORK_ALGORAND_MAINNET = 45;</code>
     */
    public static final int NETWORK_ALGORAND_MAINNET_VALUE = 45;
    /**
     * <code>NETWORK_ALGORAND_TESTNET = 46;</code>
     */
    public static final int NETWORK_ALGORAND_TESTNET_VALUE = 46;
    /**
     * <code>NETWORK_HEDERA_MAINNET = 47;</code>
     */
    public static final int NETWORK_HEDERA_MAINNET_VALUE = 47;
    /**
     * <code>NETWORK_HEDERA_TESTNET = 48;</code>
     */
    public static final int NETWORK_HEDERA_TESTNET_VALUE = 48;
    /**
     * <code>NETWORK_JAPAN_OPEN_CHAIN_MAINNET = 49;</code>
     */
    public static final int NETWORK_JAPAN_OPEN_CHAIN_MAINNET_VALUE = 49;
    /**
     * <code>NETWORK_JAPAN_OPEN_CHAIN_TESTNET = 50;</code>
     */
    public static final int NETWORK_JAPAN_OPEN_CHAIN_TESTNET_VALUE = 50;
    /**
     * <code>NETWORK_SOLANA_MAINNET = 51;</code>
     */
    public static final int NETWORK_SOLANA_MAINNET_VALUE = 51;
    /**
     * <code>NETWORK_SOLANA_TESTNET = 52;</code>
     */
    public static final int NETWORK_SOLANA_TESTNET_VALUE = 52;
    /**
     * <code>NETWORK_BNB_SMART_CHAIN_MAINNET = 53;</code>
     */
    public static final int NETWORK_BNB_SMART_CHAIN_MAINNET_VALUE = 53;
    /**
     * <code>NETWORK_BNB_SMART_CHAIN_TESTNET = 54;</code>
     */
    public static final int NETWORK_BNB_SMART_CHAIN_TESTNET_VALUE = 54;
    /**
     * <code>NETWORK_FLARE_MAINNET = 55;</code>
     */
    public static final int NETWORK_FLARE_MAINNET_VALUE = 55;
    /**
     * <code>NETWORK_FLARE_TESTNET = 56;</code>
     */
    public static final int NETWORK_FLARE_TESTNET_VALUE = 56;
    /**
     * <code>NETWORK_SHIDEN_MAINNET = 10002;</code>
     */
    public static final int NETWORK_SHIDEN_MAINNET_VALUE = 10002;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Network valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Network forNumber(int value) {
      switch (value) {
        case 0: return NETWORK_INVALID;
        case 1: return NETWORK_BITCOIN_MAINNET;
        case 2: return NETWORK_BITCOIN_TESTNET;
        case 3: return NETWORK_ETHEREUM_MAINNET;
        case 4: return NETWORK_ETHEREUM_TESTNET;
        case 5: return NETWORK_LITECOIN_MAINNET;
        case 6: return NETWORK_LITECOIN_TESTNET;
        case 7: return NETWORK_BITCOINCASH_MAINNET;
        case 8: return NETWORK_BITCOINCASH_TESTNET;
        case 9: return NETWORK_RIPPLE_MAINNET;
        case 10: return NETWORK_RIPPLE_TESTNET;
        case 11: return NETWORK_TRON_MAINNET;
        case 12: return NETWORK_TRON_TESTNET;
        case 13: return NETWORK_C0BAN_MAINNET;
        case 14: return NETWORK_C0BAN_TESTNET;
        case 15: return NETWORK_STELLAR_MAINNET;
        case 16: return NETWORK_STELLAR_TESTNET;
        case 17: return NETWORK_CARDANO_MAINNET;
        case 18: return NETWORK_CARDANO_TESTNET;
        case 19: return NETWORK_POLKADOT_MAINNET;
        case 20: return NETWORK_POLKADOT_TESTNET;
        case 21: return NETWORK_NEM_MAINNET;
        case 22: return NETWORK_NEM_TESTNET;
        case 23: return NETWORK_MONACOIN_MAINNET;
        case 24: return NETWORK_MONACOIN_TESTNET;
        case 25: return NETWORK_IOST_MAINNET;
        case 26: return NETWORK_IOST_TESTNET;
        case 27: return NETWORK_KLAY_MAINNET;
        case 28: return NETWORK_KLAY_TESTNET;
        case 29: return NETWORK_POLYGON_MAINNET;
        case 30: return NETWORK_POLYGON_TESTNET;
        case 31: return NETWORK_SYMBOL_MAINNET;
        case 32: return NETWORK_SYMBOL_TESTNET;
        case 33: return NETWORK_AVALANCHE_MAINNET;
        case 34: return NETWORK_AVALANCHE_TESTNET;
        case 35: return NETWORK_OASYS_MAINNET;
        case 36: return NETWORK_OASYS_TESTNET;
        case 37: return NETWORK_ASTAR_MAINNET;
        case 38: return NETWORK_SHIBUYA_TESTNET;
        case 39: return NETWORK_XDC_MAINNET;
        case 40: return NETWORK_XDC_TESTNET;
        case 41: return NETWORK_COSMOS_MAINNET;
        case 42: return NETWORK_COSMOS_TESTNET;
        case 43: return NETWORK_ETHEREUM_CLASSIC_MAINNET;
        case 44: return NETWORK_ETHEREUM_CLASSIC_TESTNET;
        case 45: return NETWORK_ALGORAND_MAINNET;
        case 46: return NETWORK_ALGORAND_TESTNET;
        case 47: return NETWORK_HEDERA_MAINNET;
        case 48: return NETWORK_HEDERA_TESTNET;
        case 49: return NETWORK_JAPAN_OPEN_CHAIN_MAINNET;
        case 50: return NETWORK_JAPAN_OPEN_CHAIN_TESTNET;
        case 51: return NETWORK_SOLANA_MAINNET;
        case 52: return NETWORK_SOLANA_TESTNET;
        case 53: return NETWORK_BNB_SMART_CHAIN_MAINNET;
        case 54: return NETWORK_BNB_SMART_CHAIN_TESTNET;
        case 55: return NETWORK_FLARE_MAINNET;
        case 56: return NETWORK_FLARE_TESTNET;
        case 10002: return NETWORK_SHIDEN_MAINNET;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Network>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Network> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Network>() {
            public Network findValueByNumber(int number) {
              return Network.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(1);
    }

    private static final Network[] VALUES = values();

    public static Network valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Network(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.Network)
  }

  /**
   * <pre>
   * AddressType is a type of address.
   * </pre>
   *
   * Protobuf enum {@code gincoinc.global.v1.AddressType}
   */
  public enum AddressType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ADDRESS_TYPE_INVALID = 0;</code>
     */
    ADDRESS_TYPE_INVALID(0),
    /**
     * <pre>
     * Pay to Script Hash
     * </pre>
     *
     * <code>ADDRESS_TYPE_P2SH = 1;</code>
     */
    ADDRESS_TYPE_P2SH(1),
    /**
     * <pre>
     * Pay to Witness Script Hash nested P2SH
     * </pre>
     *
     * <code>ADDRESS_TYPE_P2SH_P2WSH = 2;</code>
     */
    ADDRESS_TYPE_P2SH_P2WSH(2),
    /**
     * <pre>
     * Pay to Witness Script Hash
     * </pre>
     *
     * <code>ADDRESS_TYPE_P2WSH = 3;</code>
     */
    ADDRESS_TYPE_P2WSH(3),
    /**
     * <pre>
     * For ETH/XRP
     * </pre>
     *
     * <code>ADDRESS_TYPE_NONE = 100;</code>
     */
    ADDRESS_TYPE_NONE(100),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>ADDRESS_TYPE_INVALID = 0;</code>
     */
    public static final int ADDRESS_TYPE_INVALID_VALUE = 0;
    /**
     * <pre>
     * Pay to Script Hash
     * </pre>
     *
     * <code>ADDRESS_TYPE_P2SH = 1;</code>
     */
    public static final int ADDRESS_TYPE_P2SH_VALUE = 1;
    /**
     * <pre>
     * Pay to Witness Script Hash nested P2SH
     * </pre>
     *
     * <code>ADDRESS_TYPE_P2SH_P2WSH = 2;</code>
     */
    public static final int ADDRESS_TYPE_P2SH_P2WSH_VALUE = 2;
    /**
     * <pre>
     * Pay to Witness Script Hash
     * </pre>
     *
     * <code>ADDRESS_TYPE_P2WSH = 3;</code>
     */
    public static final int ADDRESS_TYPE_P2WSH_VALUE = 3;
    /**
     * <pre>
     * For ETH/XRP
     * </pre>
     *
     * <code>ADDRESS_TYPE_NONE = 100;</code>
     */
    public static final int ADDRESS_TYPE_NONE_VALUE = 100;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AddressType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static AddressType forNumber(int value) {
      switch (value) {
        case 0: return ADDRESS_TYPE_INVALID;
        case 1: return ADDRESS_TYPE_P2SH;
        case 2: return ADDRESS_TYPE_P2SH_P2WSH;
        case 3: return ADDRESS_TYPE_P2WSH;
        case 100: return ADDRESS_TYPE_NONE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AddressType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        AddressType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AddressType>() {
            public AddressType findValueByNumber(int number) {
              return AddressType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(2);
    }

    private static final AddressType[] VALUES = values();

    public static AddressType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private AddressType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.AddressType)
  }

  /**
   * <pre>
   * TransactionState is a state of transaction.
   * </pre>
   *
   * Protobuf enum {@code gincoinc.global.v1.TransactionState}
   */
  public enum TransactionState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TRANSACTION_STATE_INVALID = 0;</code>
     */
    TRANSACTION_STATE_INVALID(0),
    /**
     * <pre>
     * Transaction is submitted
     * </pre>
     *
     * <code>TRANSACTION_STATE_SUBMITTED = 1;</code>
     */
    TRANSACTION_STATE_SUBMITTED(1),
    /**
     * <pre>
     * Transaction is included in mempool
     * </pre>
     *
     * <code>TRANSACTION_STATE_PENDING = 2;</code>
     */
    TRANSACTION_STATE_PENDING(2),
    /**
     * <pre>
     * Transaction is included in a block
     * </pre>
     *
     * <code>TRANSACTION_STATE_PROCESSING = 3;</code>
     */
    TRANSACTION_STATE_PROCESSING(3),
    /**
     * <pre>
     * Exceeded number of confirmations
     * </pre>
     *
     * <code>TRANSACTION_STATE_CONFIRMED = 4;</code>
     */
    TRANSACTION_STATE_CONFIRMED(4),
    /**
     * <pre>
     * specified
     * </pre>
     *
     * <code>TRANSACTION_STATE_DROPPED = 5;</code>
     */
    TRANSACTION_STATE_DROPPED(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>TRANSACTION_STATE_INVALID = 0;</code>
     */
    public static final int TRANSACTION_STATE_INVALID_VALUE = 0;
    /**
     * <pre>
     * Transaction is submitted
     * </pre>
     *
     * <code>TRANSACTION_STATE_SUBMITTED = 1;</code>
     */
    public static final int TRANSACTION_STATE_SUBMITTED_VALUE = 1;
    /**
     * <pre>
     * Transaction is included in mempool
     * </pre>
     *
     * <code>TRANSACTION_STATE_PENDING = 2;</code>
     */
    public static final int TRANSACTION_STATE_PENDING_VALUE = 2;
    /**
     * <pre>
     * Transaction is included in a block
     * </pre>
     *
     * <code>TRANSACTION_STATE_PROCESSING = 3;</code>
     */
    public static final int TRANSACTION_STATE_PROCESSING_VALUE = 3;
    /**
     * <pre>
     * Exceeded number of confirmations
     * </pre>
     *
     * <code>TRANSACTION_STATE_CONFIRMED = 4;</code>
     */
    public static final int TRANSACTION_STATE_CONFIRMED_VALUE = 4;
    /**
     * <pre>
     * specified
     * </pre>
     *
     * <code>TRANSACTION_STATE_DROPPED = 5;</code>
     */
    public static final int TRANSACTION_STATE_DROPPED_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TransactionState valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TransactionState forNumber(int value) {
      switch (value) {
        case 0: return TRANSACTION_STATE_INVALID;
        case 1: return TRANSACTION_STATE_SUBMITTED;
        case 2: return TRANSACTION_STATE_PENDING;
        case 3: return TRANSACTION_STATE_PROCESSING;
        case 4: return TRANSACTION_STATE_CONFIRMED;
        case 5: return TRANSACTION_STATE_DROPPED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TransactionState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TransactionState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TransactionState>() {
            public TransactionState findValueByNumber(int number) {
              return TransactionState.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(3);
    }

    private static final TransactionState[] VALUES = values();

    public static TransactionState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TransactionState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.TransactionState)
  }

  /**
   * <pre>
   * UTXOState is a state of UTXO.
   * </pre>
   *
   * Protobuf enum {@code gincoinc.global.v1.UTXOState}
   */
  public enum UTXOState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UTXO_STATE_INVALID = 0;</code>
     */
    UTXO_STATE_INVALID(0),
    /**
     * <code>UTXO_STATE_PENDING_UNSPENT = 1;</code>
     */
    UTXO_STATE_PENDING_UNSPENT(1),
    /**
     * <code>UTXO_STATE_UNSPENT = 2;</code>
     */
    UTXO_STATE_UNSPENT(2),
    /**
     * <code>UTXO_STATE_PENDING_SPENT = 3;</code>
     */
    UTXO_STATE_PENDING_SPENT(3),
    /**
     * <code>UTXO_STATE_SPENT = 4;</code>
     */
    UTXO_STATE_SPENT(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>UTXO_STATE_INVALID = 0;</code>
     */
    public static final int UTXO_STATE_INVALID_VALUE = 0;
    /**
     * <code>UTXO_STATE_PENDING_UNSPENT = 1;</code>
     */
    public static final int UTXO_STATE_PENDING_UNSPENT_VALUE = 1;
    /**
     * <code>UTXO_STATE_UNSPENT = 2;</code>
     */
    public static final int UTXO_STATE_UNSPENT_VALUE = 2;
    /**
     * <code>UTXO_STATE_PENDING_SPENT = 3;</code>
     */
    public static final int UTXO_STATE_PENDING_SPENT_VALUE = 3;
    /**
     * <code>UTXO_STATE_SPENT = 4;</code>
     */
    public static final int UTXO_STATE_SPENT_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static UTXOState valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static UTXOState forNumber(int value) {
      switch (value) {
        case 0: return UTXO_STATE_INVALID;
        case 1: return UTXO_STATE_PENDING_UNSPENT;
        case 2: return UTXO_STATE_UNSPENT;
        case 3: return UTXO_STATE_PENDING_SPENT;
        case 4: return UTXO_STATE_SPENT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<UTXOState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        UTXOState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<UTXOState>() {
            public UTXOState findValueByNumber(int number) {
              return UTXOState.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(4);
    }

    private static final UTXOState[] VALUES = values();

    public static UTXOState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private UTXOState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.UTXOState)
  }

  /**
   * <pre>
   * TransferType is a type of transaction.
   * </pre>
   *
   * Protobuf enum {@code gincoinc.global.v1.TransferType}
   */
  public enum TransferType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TRANSFER_TYPE_INVALID = 0;</code>
     */
    TRANSFER_TYPE_INVALID(0),
    /**
     * <pre>
     * The type of send
     * </pre>
     *
     * <code>TRANSFER_TYPE_SEND = 1;</code>
     */
    TRANSFER_TYPE_SEND(1),
    /**
     * <pre>
     * The type of receive
     * </pre>
     *
     * <code>TRANSFER_TYPE_RECEIVE = 2;</code>
     */
    TRANSFER_TYPE_RECEIVE(2),
    /**
     * <pre>
     * The type of change transaction for BTC/LTC/BCH
     * </pre>
     *
     * <code>TRANSFER_TYPE_CHANGE = 3;</code>
     */
    TRANSFER_TYPE_CHANGE(3),
    /**
     * <pre>
     * The type of fraudulent remittance
     * </pre>
     *
     * <code>TRANSFER_TYPE_FATAL = 4;</code>
     */
    TRANSFER_TYPE_FATAL(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>TRANSFER_TYPE_INVALID = 0;</code>
     */
    public static final int TRANSFER_TYPE_INVALID_VALUE = 0;
    /**
     * <pre>
     * The type of send
     * </pre>
     *
     * <code>TRANSFER_TYPE_SEND = 1;</code>
     */
    public static final int TRANSFER_TYPE_SEND_VALUE = 1;
    /**
     * <pre>
     * The type of receive
     * </pre>
     *
     * <code>TRANSFER_TYPE_RECEIVE = 2;</code>
     */
    public static final int TRANSFER_TYPE_RECEIVE_VALUE = 2;
    /**
     * <pre>
     * The type of change transaction for BTC/LTC/BCH
     * </pre>
     *
     * <code>TRANSFER_TYPE_CHANGE = 3;</code>
     */
    public static final int TRANSFER_TYPE_CHANGE_VALUE = 3;
    /**
     * <pre>
     * The type of fraudulent remittance
     * </pre>
     *
     * <code>TRANSFER_TYPE_FATAL = 4;</code>
     */
    public static final int TRANSFER_TYPE_FATAL_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TransferType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TransferType forNumber(int value) {
      switch (value) {
        case 0: return TRANSFER_TYPE_INVALID;
        case 1: return TRANSFER_TYPE_SEND;
        case 2: return TRANSFER_TYPE_RECEIVE;
        case 3: return TRANSFER_TYPE_CHANGE;
        case 4: return TRANSFER_TYPE_FATAL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TransferType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TransferType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TransferType>() {
            public TransferType findValueByNumber(int number) {
              return TransferType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(5);
    }

    private static final TransferType[] VALUES = values();

    public static TransferType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TransferType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.TransferType)
  }

  /**
   * <pre>
   * XRPTransactionType is a type of xrp transaction.
   * </pre>
   *
   * Protobuf enum {@code gincoinc.global.v1.XRPTransactionType}
   */
  public enum XRPTransactionType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>XRP_TRANSACTION_TYPE_INVALID = 0;</code>
     */
    XRP_TRANSACTION_TYPE_INVALID(0),
    /**
     * <code>XRP_TRANSACTION_TYPE_PAYMENT = 1;</code>
     */
    XRP_TRANSACTION_TYPE_PAYMENT(1),
    /**
     * <code>XRP_TRANSACTION_TYPE_SET_SIGNER_LIST = 2;</code>
     */
    XRP_TRANSACTION_TYPE_SET_SIGNER_LIST(2),
    /**
     * <code>XRP_TRANSACTION_TYPE_DISABLE_MASTER = 3;</code>
     */
    XRP_TRANSACTION_TYPE_DISABLE_MASTER(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>XRP_TRANSACTION_TYPE_INVALID = 0;</code>
     */
    public static final int XRP_TRANSACTION_TYPE_INVALID_VALUE = 0;
    /**
     * <code>XRP_TRANSACTION_TYPE_PAYMENT = 1;</code>
     */
    public static final int XRP_TRANSACTION_TYPE_PAYMENT_VALUE = 1;
    /**
     * <code>XRP_TRANSACTION_TYPE_SET_SIGNER_LIST = 2;</code>
     */
    public static final int XRP_TRANSACTION_TYPE_SET_SIGNER_LIST_VALUE = 2;
    /**
     * <code>XRP_TRANSACTION_TYPE_DISABLE_MASTER = 3;</code>
     */
    public static final int XRP_TRANSACTION_TYPE_DISABLE_MASTER_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static XRPTransactionType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static XRPTransactionType forNumber(int value) {
      switch (value) {
        case 0: return XRP_TRANSACTION_TYPE_INVALID;
        case 1: return XRP_TRANSACTION_TYPE_PAYMENT;
        case 2: return XRP_TRANSACTION_TYPE_SET_SIGNER_LIST;
        case 3: return XRP_TRANSACTION_TYPE_DISABLE_MASTER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<XRPTransactionType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        XRPTransactionType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<XRPTransactionType>() {
            public XRPTransactionType findValueByNumber(int number) {
              return XRPTransactionType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(6);
    }

    private static final XRPTransactionType[] VALUES = values();

    public static XRPTransactionType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private XRPTransactionType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.XRPTransactionType)
  }

  /**
   * <pre>
   * TransactionResult is a result of transaction.
   * </pre>
   *
   * Protobuf enum {@code gincoinc.global.v1.TransactionResult}
   */
  public enum TransactionResult
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TRANSACTION_RESULT_INVALID = 0;</code>
     */
    TRANSACTION_RESULT_INVALID(0),
    /**
     * <pre>
     * Transaction is pending
     * </pre>
     *
     * <code>TRANSACTION_RESULT_PENDING = 1;</code>
     */
    TRANSACTION_RESULT_PENDING(1),
    /**
     * <pre>
     * Transaction is included in block
     * </pre>
     *
     * <code>TRANSACTION_RESULT_SUCCESS = 2;</code>
     */
    TRANSACTION_RESULT_SUCCESS(2),
    /**
     * <pre>
     * Failed to send transaction
     * </pre>
     *
     * <code>TRANSACTION_RESULT_FAILURE = 3;</code>
     */
    TRANSACTION_RESULT_FAILURE(3),
    /**
     * <code>TRANSACTION_RESULT_NONE = 100;</code>
     */
    TRANSACTION_RESULT_NONE(100),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>TRANSACTION_RESULT_INVALID = 0;</code>
     */
    public static final int TRANSACTION_RESULT_INVALID_VALUE = 0;
    /**
     * <pre>
     * Transaction is pending
     * </pre>
     *
     * <code>TRANSACTION_RESULT_PENDING = 1;</code>
     */
    public static final int TRANSACTION_RESULT_PENDING_VALUE = 1;
    /**
     * <pre>
     * Transaction is included in block
     * </pre>
     *
     * <code>TRANSACTION_RESULT_SUCCESS = 2;</code>
     */
    public static final int TRANSACTION_RESULT_SUCCESS_VALUE = 2;
    /**
     * <pre>
     * Failed to send transaction
     * </pre>
     *
     * <code>TRANSACTION_RESULT_FAILURE = 3;</code>
     */
    public static final int TRANSACTION_RESULT_FAILURE_VALUE = 3;
    /**
     * <code>TRANSACTION_RESULT_NONE = 100;</code>
     */
    public static final int TRANSACTION_RESULT_NONE_VALUE = 100;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TransactionResult valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TransactionResult forNumber(int value) {
      switch (value) {
        case 0: return TRANSACTION_RESULT_INVALID;
        case 1: return TRANSACTION_RESULT_PENDING;
        case 2: return TRANSACTION_RESULT_SUCCESS;
        case 3: return TRANSACTION_RESULT_FAILURE;
        case 100: return TRANSACTION_RESULT_NONE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TransactionResult>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TransactionResult> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TransactionResult>() {
            public TransactionResult findValueByNumber(int number) {
              return TransactionResult.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(7);
    }

    private static final TransactionResult[] VALUES = values();

    public static TransactionResult valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TransactionResult(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.TransactionResult)
  }

  /**
   * <pre>
   * NemTransactionType is a type of nem transaction.
   * </pre>
   *
   * Protobuf enum {@code gincoinc.global.v1.NemTransactionType}
   */
  public enum NemTransactionType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NEM_TRANSACTION_TYPE_INVALID = 0;</code>
     */
    NEM_TRANSACTION_TYPE_INVALID(0),
    /**
     * <code>NEM_TRANSACTION_TYPE_TRANSFER_TYPE = 1;</code>
     */
    NEM_TRANSACTION_TYPE_TRANSFER_TYPE(1),
    /**
     * <code>NEM_TRANSACTION_TYPE_IMPORTANCE_TRANSFER_TYPE = 2;</code>
     */
    NEM_TRANSACTION_TYPE_IMPORTANCE_TRANSFER_TYPE(2),
    /**
     * <code>NEM_TRANSACTION_TYPE_MULTISIG_MODIFICATION_TYPE = 3;</code>
     */
    NEM_TRANSACTION_TYPE_MULTISIG_MODIFICATION_TYPE(3),
    /**
     * <code>NEM_TRANSACTION_TYPE_MULTISIG_SIGNATURE_TYPE = 4;</code>
     */
    NEM_TRANSACTION_TYPE_MULTISIG_SIGNATURE_TYPE(4),
    /**
     * <code>NEM_TRANSACTION_TYPE_MULTISIG_TRANSACTION_TYPE = 5;</code>
     */
    NEM_TRANSACTION_TYPE_MULTISIG_TRANSACTION_TYPE(5),
    /**
     * <code>NEM_TRANSACTION_TYPE_PROVISION_NAMESPACE_TYPE = 6;</code>
     */
    NEM_TRANSACTION_TYPE_PROVISION_NAMESPACE_TYPE(6),
    /**
     * <code>NEM_TRANSACTION_TYPE_MOSAIC_DEFINITION_TYPE = 7;</code>
     */
    NEM_TRANSACTION_TYPE_MOSAIC_DEFINITION_TYPE(7),
    /**
     * <code>NEM_TRANSACTION_TYPE_MOSAIC_SUPPLY_TYPE = 8;</code>
     */
    NEM_TRANSACTION_TYPE_MOSAIC_SUPPLY_TYPE(8),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>NEM_TRANSACTION_TYPE_INVALID = 0;</code>
     */
    public static final int NEM_TRANSACTION_TYPE_INVALID_VALUE = 0;
    /**
     * <code>NEM_TRANSACTION_TYPE_TRANSFER_TYPE = 1;</code>
     */
    public static final int NEM_TRANSACTION_TYPE_TRANSFER_TYPE_VALUE = 1;
    /**
     * <code>NEM_TRANSACTION_TYPE_IMPORTANCE_TRANSFER_TYPE = 2;</code>
     */
    public static final int NEM_TRANSACTION_TYPE_IMPORTANCE_TRANSFER_TYPE_VALUE = 2;
    /**
     * <code>NEM_TRANSACTION_TYPE_MULTISIG_MODIFICATION_TYPE = 3;</code>
     */
    public static final int NEM_TRANSACTION_TYPE_MULTISIG_MODIFICATION_TYPE_VALUE = 3;
    /**
     * <code>NEM_TRANSACTION_TYPE_MULTISIG_SIGNATURE_TYPE = 4;</code>
     */
    public static final int NEM_TRANSACTION_TYPE_MULTISIG_SIGNATURE_TYPE_VALUE = 4;
    /**
     * <code>NEM_TRANSACTION_TYPE_MULTISIG_TRANSACTION_TYPE = 5;</code>
     */
    public static final int NEM_TRANSACTION_TYPE_MULTISIG_TRANSACTION_TYPE_VALUE = 5;
    /**
     * <code>NEM_TRANSACTION_TYPE_PROVISION_NAMESPACE_TYPE = 6;</code>
     */
    public static final int NEM_TRANSACTION_TYPE_PROVISION_NAMESPACE_TYPE_VALUE = 6;
    /**
     * <code>NEM_TRANSACTION_TYPE_MOSAIC_DEFINITION_TYPE = 7;</code>
     */
    public static final int NEM_TRANSACTION_TYPE_MOSAIC_DEFINITION_TYPE_VALUE = 7;
    /**
     * <code>NEM_TRANSACTION_TYPE_MOSAIC_SUPPLY_TYPE = 8;</code>
     */
    public static final int NEM_TRANSACTION_TYPE_MOSAIC_SUPPLY_TYPE_VALUE = 8;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static NemTransactionType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static NemTransactionType forNumber(int value) {
      switch (value) {
        case 0: return NEM_TRANSACTION_TYPE_INVALID;
        case 1: return NEM_TRANSACTION_TYPE_TRANSFER_TYPE;
        case 2: return NEM_TRANSACTION_TYPE_IMPORTANCE_TRANSFER_TYPE;
        case 3: return NEM_TRANSACTION_TYPE_MULTISIG_MODIFICATION_TYPE;
        case 4: return NEM_TRANSACTION_TYPE_MULTISIG_SIGNATURE_TYPE;
        case 5: return NEM_TRANSACTION_TYPE_MULTISIG_TRANSACTION_TYPE;
        case 6: return NEM_TRANSACTION_TYPE_PROVISION_NAMESPACE_TYPE;
        case 7: return NEM_TRANSACTION_TYPE_MOSAIC_DEFINITION_TYPE;
        case 8: return NEM_TRANSACTION_TYPE_MOSAIC_SUPPLY_TYPE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<NemTransactionType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        NemTransactionType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<NemTransactionType>() {
            public NemTransactionType findValueByNumber(int number) {
              return NemTransactionType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(8);
    }

    private static final NemTransactionType[] VALUES = values();

    public static NemTransactionType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private NemTransactionType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.NemTransactionType)
  }

  /**
   * <pre>
   * SymbolTransactionType is a type of symbol transaction.
   * </pre>
   *
   * Protobuf enum {@code gincoinc.global.v1.SymbolTransactionType}
   */
  public enum SymbolTransactionType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_INVALID = 0;</code>
     */
    SYMBOL_TRANSACTION_TYPE_INVALID(0),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_ACCOUNT_KEY_LINK = 1;</code>
     */
    SYMBOL_TRANSACTION_TYPE_ACCOUNT_KEY_LINK(1),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_NODE_KEY_LINK = 2;</code>
     */
    SYMBOL_TRANSACTION_TYPE_NODE_KEY_LINK(2),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_AGGREGATE_COMPLETE = 3;</code>
     */
    SYMBOL_TRANSACTION_TYPE_AGGREGATE_COMPLETE(3),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_AGGREGATE_BONDED = 4;</code>
     */
    SYMBOL_TRANSACTION_TYPE_AGGREGATE_BONDED(4),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_VOTING_KEY_LINK = 5;</code>
     */
    SYMBOL_TRANSACTION_TYPE_VOTING_KEY_LINK(5),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_VRF_KEY_LINK = 6;</code>
     */
    SYMBOL_TRANSACTION_TYPE_VRF_KEY_LINK(6),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_HASH_LOCK = 7;</code>
     */
    SYMBOL_TRANSACTION_TYPE_HASH_LOCK(7),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_SECRET_LOCK = 8;</code>
     */
    SYMBOL_TRANSACTION_TYPE_SECRET_LOCK(8),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_SECRET_PROOF = 9;</code>
     */
    SYMBOL_TRANSACTION_TYPE_SECRET_PROOF(9),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_ACCOUNT_METADATA = 10;</code>
     */
    SYMBOL_TRANSACTION_TYPE_ACCOUNT_METADATA(10),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_MOSAIC_METADATA = 11;</code>
     */
    SYMBOL_TRANSACTION_TYPE_MOSAIC_METADATA(11),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_NAMESPACE_METADATA = 12;</code>
     */
    SYMBOL_TRANSACTION_TYPE_NAMESPACE_METADATA(12),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_MOSAIC_DEFINITION = 13;</code>
     */
    SYMBOL_TRANSACTION_TYPE_MOSAIC_DEFINITION(13),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_MOSAIC_SUPPLY_CHANGE = 14;</code>
     */
    SYMBOL_TRANSACTION_TYPE_MOSAIC_SUPPLY_CHANGE(14),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_MOSAIC_SUPPLY_REVOCATION = 15;</code>
     */
    SYMBOL_TRANSACTION_TYPE_MOSAIC_SUPPLY_REVOCATION(15),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_MULTISIG_ACCOUNT_MODIFICATION = 16;</code>
     */
    SYMBOL_TRANSACTION_TYPE_MULTISIG_ACCOUNT_MODIFICATION(16),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_ADDRESS_ALIAS = 17;</code>
     */
    SYMBOL_TRANSACTION_TYPE_ADDRESS_ALIAS(17),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_MOSAIC_ALIAS = 18;</code>
     */
    SYMBOL_TRANSACTION_TYPE_MOSAIC_ALIAS(18),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_NAMESPACE_REGISTRATION = 19;</code>
     */
    SYMBOL_TRANSACTION_TYPE_NAMESPACE_REGISTRATION(19),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_ACCOUNT_ADDRESS_RESTRICTION = 20;</code>
     */
    SYMBOL_TRANSACTION_TYPE_ACCOUNT_ADDRESS_RESTRICTION(20),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_ACCOUNT_MOSAIC_RESTRICTION = 21;</code>
     */
    SYMBOL_TRANSACTION_TYPE_ACCOUNT_MOSAIC_RESTRICTION(21),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_ACCOUNT_OPERATION_RESTRICTION = 22;</code>
     */
    SYMBOL_TRANSACTION_TYPE_ACCOUNT_OPERATION_RESTRICTION(22),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_MOSAIC_ADDRESS_RESTRICTION = 23;</code>
     */
    SYMBOL_TRANSACTION_TYPE_MOSAIC_ADDRESS_RESTRICTION(23),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_MOSAIC_GLOBAL_RESTRICTION = 24;</code>
     */
    SYMBOL_TRANSACTION_TYPE_MOSAIC_GLOBAL_RESTRICTION(24),
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_TRANSFER = 25;</code>
     */
    SYMBOL_TRANSACTION_TYPE_TRANSFER(25),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>SYMBOL_TRANSACTION_TYPE_INVALID = 0;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_INVALID_VALUE = 0;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_ACCOUNT_KEY_LINK = 1;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_ACCOUNT_KEY_LINK_VALUE = 1;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_NODE_KEY_LINK = 2;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_NODE_KEY_LINK_VALUE = 2;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_AGGREGATE_COMPLETE = 3;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_AGGREGATE_COMPLETE_VALUE = 3;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_AGGREGATE_BONDED = 4;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_AGGREGATE_BONDED_VALUE = 4;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_VOTING_KEY_LINK = 5;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_VOTING_KEY_LINK_VALUE = 5;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_VRF_KEY_LINK = 6;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_VRF_KEY_LINK_VALUE = 6;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_HASH_LOCK = 7;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_HASH_LOCK_VALUE = 7;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_SECRET_LOCK = 8;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_SECRET_LOCK_VALUE = 8;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_SECRET_PROOF = 9;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_SECRET_PROOF_VALUE = 9;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_ACCOUNT_METADATA = 10;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_ACCOUNT_METADATA_VALUE = 10;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_MOSAIC_METADATA = 11;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_MOSAIC_METADATA_VALUE = 11;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_NAMESPACE_METADATA = 12;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_NAMESPACE_METADATA_VALUE = 12;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_MOSAIC_DEFINITION = 13;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_MOSAIC_DEFINITION_VALUE = 13;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_MOSAIC_SUPPLY_CHANGE = 14;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_MOSAIC_SUPPLY_CHANGE_VALUE = 14;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_MOSAIC_SUPPLY_REVOCATION = 15;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_MOSAIC_SUPPLY_REVOCATION_VALUE = 15;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_MULTISIG_ACCOUNT_MODIFICATION = 16;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_MULTISIG_ACCOUNT_MODIFICATION_VALUE = 16;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_ADDRESS_ALIAS = 17;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_ADDRESS_ALIAS_VALUE = 17;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_MOSAIC_ALIAS = 18;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_MOSAIC_ALIAS_VALUE = 18;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_NAMESPACE_REGISTRATION = 19;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_NAMESPACE_REGISTRATION_VALUE = 19;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_ACCOUNT_ADDRESS_RESTRICTION = 20;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_ACCOUNT_ADDRESS_RESTRICTION_VALUE = 20;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_ACCOUNT_MOSAIC_RESTRICTION = 21;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_ACCOUNT_MOSAIC_RESTRICTION_VALUE = 21;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_ACCOUNT_OPERATION_RESTRICTION = 22;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_ACCOUNT_OPERATION_RESTRICTION_VALUE = 22;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_MOSAIC_ADDRESS_RESTRICTION = 23;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_MOSAIC_ADDRESS_RESTRICTION_VALUE = 23;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_MOSAIC_GLOBAL_RESTRICTION = 24;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_MOSAIC_GLOBAL_RESTRICTION_VALUE = 24;
    /**
     * <code>SYMBOL_TRANSACTION_TYPE_TRANSFER = 25;</code>
     */
    public static final int SYMBOL_TRANSACTION_TYPE_TRANSFER_VALUE = 25;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SymbolTransactionType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SymbolTransactionType forNumber(int value) {
      switch (value) {
        case 0: return SYMBOL_TRANSACTION_TYPE_INVALID;
        case 1: return SYMBOL_TRANSACTION_TYPE_ACCOUNT_KEY_LINK;
        case 2: return SYMBOL_TRANSACTION_TYPE_NODE_KEY_LINK;
        case 3: return SYMBOL_TRANSACTION_TYPE_AGGREGATE_COMPLETE;
        case 4: return SYMBOL_TRANSACTION_TYPE_AGGREGATE_BONDED;
        case 5: return SYMBOL_TRANSACTION_TYPE_VOTING_KEY_LINK;
        case 6: return SYMBOL_TRANSACTION_TYPE_VRF_KEY_LINK;
        case 7: return SYMBOL_TRANSACTION_TYPE_HASH_LOCK;
        case 8: return SYMBOL_TRANSACTION_TYPE_SECRET_LOCK;
        case 9: return SYMBOL_TRANSACTION_TYPE_SECRET_PROOF;
        case 10: return SYMBOL_TRANSACTION_TYPE_ACCOUNT_METADATA;
        case 11: return SYMBOL_TRANSACTION_TYPE_MOSAIC_METADATA;
        case 12: return SYMBOL_TRANSACTION_TYPE_NAMESPACE_METADATA;
        case 13: return SYMBOL_TRANSACTION_TYPE_MOSAIC_DEFINITION;
        case 14: return SYMBOL_TRANSACTION_TYPE_MOSAIC_SUPPLY_CHANGE;
        case 15: return SYMBOL_TRANSACTION_TYPE_MOSAIC_SUPPLY_REVOCATION;
        case 16: return SYMBOL_TRANSACTION_TYPE_MULTISIG_ACCOUNT_MODIFICATION;
        case 17: return SYMBOL_TRANSACTION_TYPE_ADDRESS_ALIAS;
        case 18: return SYMBOL_TRANSACTION_TYPE_MOSAIC_ALIAS;
        case 19: return SYMBOL_TRANSACTION_TYPE_NAMESPACE_REGISTRATION;
        case 20: return SYMBOL_TRANSACTION_TYPE_ACCOUNT_ADDRESS_RESTRICTION;
        case 21: return SYMBOL_TRANSACTION_TYPE_ACCOUNT_MOSAIC_RESTRICTION;
        case 22: return SYMBOL_TRANSACTION_TYPE_ACCOUNT_OPERATION_RESTRICTION;
        case 23: return SYMBOL_TRANSACTION_TYPE_MOSAIC_ADDRESS_RESTRICTION;
        case 24: return SYMBOL_TRANSACTION_TYPE_MOSAIC_GLOBAL_RESTRICTION;
        case 25: return SYMBOL_TRANSACTION_TYPE_TRANSFER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SymbolTransactionType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SymbolTransactionType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SymbolTransactionType>() {
            public SymbolTransactionType findValueByNumber(int number) {
              return SymbolTransactionType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(9);
    }

    private static final SymbolTransactionType[] VALUES = values();

    public static SymbolTransactionType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SymbolTransactionType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.SymbolTransactionType)
  }

  /**
   * Protobuf enum {@code gincoinc.global.v1.EthereumStakingRewardLayerType}
   */
  public enum EthereumStakingRewardLayerType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ETHEREUM_STAKING_REWARD_LAYER_TYPE_INVALID = 0;</code>
     */
    ETHEREUM_STAKING_REWARD_LAYER_TYPE_INVALID(0),
    /**
     * <code>ETHEREUM_STAKING_REWARD_LAYER_TYPE_CONSENSUS = 1;</code>
     */
    ETHEREUM_STAKING_REWARD_LAYER_TYPE_CONSENSUS(1),
    /**
     * <code>ETHEREUM_STAKING_REWARD_LAYER_TYPE_EXECUTION = 2;</code>
     */
    ETHEREUM_STAKING_REWARD_LAYER_TYPE_EXECUTION(2),
    /**
     * <code>ETHEREUM_STAKING_REWARD_LAYER_TYPE_EXECUTION_MEV = 3;</code>
     */
    ETHEREUM_STAKING_REWARD_LAYER_TYPE_EXECUTION_MEV(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>ETHEREUM_STAKING_REWARD_LAYER_TYPE_INVALID = 0;</code>
     */
    public static final int ETHEREUM_STAKING_REWARD_LAYER_TYPE_INVALID_VALUE = 0;
    /**
     * <code>ETHEREUM_STAKING_REWARD_LAYER_TYPE_CONSENSUS = 1;</code>
     */
    public static final int ETHEREUM_STAKING_REWARD_LAYER_TYPE_CONSENSUS_VALUE = 1;
    /**
     * <code>ETHEREUM_STAKING_REWARD_LAYER_TYPE_EXECUTION = 2;</code>
     */
    public static final int ETHEREUM_STAKING_REWARD_LAYER_TYPE_EXECUTION_VALUE = 2;
    /**
     * <code>ETHEREUM_STAKING_REWARD_LAYER_TYPE_EXECUTION_MEV = 3;</code>
     */
    public static final int ETHEREUM_STAKING_REWARD_LAYER_TYPE_EXECUTION_MEV_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EthereumStakingRewardLayerType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static EthereumStakingRewardLayerType forNumber(int value) {
      switch (value) {
        case 0: return ETHEREUM_STAKING_REWARD_LAYER_TYPE_INVALID;
        case 1: return ETHEREUM_STAKING_REWARD_LAYER_TYPE_CONSENSUS;
        case 2: return ETHEREUM_STAKING_REWARD_LAYER_TYPE_EXECUTION;
        case 3: return ETHEREUM_STAKING_REWARD_LAYER_TYPE_EXECUTION_MEV;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EthereumStakingRewardLayerType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EthereumStakingRewardLayerType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EthereumStakingRewardLayerType>() {
            public EthereumStakingRewardLayerType findValueByNumber(int number) {
              return EthereumStakingRewardLayerType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(10);
    }

    private static final EthereumStakingRewardLayerType[] VALUES = values();

    public static EthereumStakingRewardLayerType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EthereumStakingRewardLayerType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.EthereumStakingRewardLayerType)
  }

  /**
   * Protobuf enum {@code gincoinc.global.v1.CosmosMsgType}
   */
  public enum CosmosMsgType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>COSMOS_MSG_TYPE_INVALID = 0;</code>
     */
    COSMOS_MSG_TYPE_INVALID(0),
    /**
     * <code>COSMOS_MSG_TYPE_SEND = 1;</code>
     */
    COSMOS_MSG_TYPE_SEND(1),
    /**
     * <code>COSMOS_MSG_TYPE_DELEGATE = 2;</code>
     */
    COSMOS_MSG_TYPE_DELEGATE(2),
    /**
     * <code>COSMOS_MSG_TYPE_UNDELEGATE = 3;</code>
     */
    COSMOS_MSG_TYPE_UNDELEGATE(3),
    /**
     * <code>COSMOS_MSG_TYPE_UNBONDED = 4;</code>
     */
    COSMOS_MSG_TYPE_UNBONDED(4),
    /**
     * <code>COSMOS_MSG_TYPE_WITHDRAW_DELEGATOR_REWARD = 5;</code>
     */
    COSMOS_MSG_TYPE_WITHDRAW_DELEGATOR_REWARD(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>COSMOS_MSG_TYPE_INVALID = 0;</code>
     */
    public static final int COSMOS_MSG_TYPE_INVALID_VALUE = 0;
    /**
     * <code>COSMOS_MSG_TYPE_SEND = 1;</code>
     */
    public static final int COSMOS_MSG_TYPE_SEND_VALUE = 1;
    /**
     * <code>COSMOS_MSG_TYPE_DELEGATE = 2;</code>
     */
    public static final int COSMOS_MSG_TYPE_DELEGATE_VALUE = 2;
    /**
     * <code>COSMOS_MSG_TYPE_UNDELEGATE = 3;</code>
     */
    public static final int COSMOS_MSG_TYPE_UNDELEGATE_VALUE = 3;
    /**
     * <code>COSMOS_MSG_TYPE_UNBONDED = 4;</code>
     */
    public static final int COSMOS_MSG_TYPE_UNBONDED_VALUE = 4;
    /**
     * <code>COSMOS_MSG_TYPE_WITHDRAW_DELEGATOR_REWARD = 5;</code>
     */
    public static final int COSMOS_MSG_TYPE_WITHDRAW_DELEGATOR_REWARD_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CosmosMsgType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CosmosMsgType forNumber(int value) {
      switch (value) {
        case 0: return COSMOS_MSG_TYPE_INVALID;
        case 1: return COSMOS_MSG_TYPE_SEND;
        case 2: return COSMOS_MSG_TYPE_DELEGATE;
        case 3: return COSMOS_MSG_TYPE_UNDELEGATE;
        case 4: return COSMOS_MSG_TYPE_UNBONDED;
        case 5: return COSMOS_MSG_TYPE_WITHDRAW_DELEGATOR_REWARD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CosmosMsgType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CosmosMsgType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CosmosMsgType>() {
            public CosmosMsgType findValueByNumber(int number) {
              return CosmosMsgType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(11);
    }

    private static final CosmosMsgType[] VALUES = values();

    public static CosmosMsgType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CosmosMsgType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.CosmosMsgType)
  }

  /**
   * Protobuf enum {@code gincoinc.global.v1.StakingValidatorStatus}
   */
  public enum StakingValidatorStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>STAKING_VALIDATOR_STATUS_INVALID = 0;</code>
     */
    STAKING_VALIDATOR_STATUS_INVALID(0),
    /**
     * <pre>
     * 稼働中
     * </pre>
     *
     * <code>STAKING_VALIDATOR_STATUS_ACTIVE = 1;</code>
     */
    STAKING_VALIDATOR_STATUS_ACTIVE(1),
    /**
     * <pre>
     * 停止中
     * </pre>
     *
     * <code>STAKING_VALIDATOR_STATUS_STOP = 2;</code>
     */
    STAKING_VALIDATOR_STATUS_STOP(2),
    /**
     * <pre>
     * 一時停止中
     * </pre>
     *
     * <code>STAKING_VALIDATOR_STATUS_PAUSE = 3;</code>
     */
    STAKING_VALIDATOR_STATUS_PAUSE(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>STAKING_VALIDATOR_STATUS_INVALID = 0;</code>
     */
    public static final int STAKING_VALIDATOR_STATUS_INVALID_VALUE = 0;
    /**
     * <pre>
     * 稼働中
     * </pre>
     *
     * <code>STAKING_VALIDATOR_STATUS_ACTIVE = 1;</code>
     */
    public static final int STAKING_VALIDATOR_STATUS_ACTIVE_VALUE = 1;
    /**
     * <pre>
     * 停止中
     * </pre>
     *
     * <code>STAKING_VALIDATOR_STATUS_STOP = 2;</code>
     */
    public static final int STAKING_VALIDATOR_STATUS_STOP_VALUE = 2;
    /**
     * <pre>
     * 一時停止中
     * </pre>
     *
     * <code>STAKING_VALIDATOR_STATUS_PAUSE = 3;</code>
     */
    public static final int STAKING_VALIDATOR_STATUS_PAUSE_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static StakingValidatorStatus valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static StakingValidatorStatus forNumber(int value) {
      switch (value) {
        case 0: return STAKING_VALIDATOR_STATUS_INVALID;
        case 1: return STAKING_VALIDATOR_STATUS_ACTIVE;
        case 2: return STAKING_VALIDATOR_STATUS_STOP;
        case 3: return STAKING_VALIDATOR_STATUS_PAUSE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<StakingValidatorStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        StakingValidatorStatus> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<StakingValidatorStatus>() {
            public StakingValidatorStatus findValueByNumber(int number) {
              return StakingValidatorStatus.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(12);
    }

    private static final StakingValidatorStatus[] VALUES = values();

    public static StakingValidatorStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private StakingValidatorStatus(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.StakingValidatorStatus)
  }

  /**
   * Protobuf enum {@code gincoinc.global.v1.StakingEventType}
   */
  public enum StakingEventType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>STAKING_EVENT_TYPE_INVALID = 0;</code>
     */
    STAKING_EVENT_TYPE_INVALID(0),
    /**
     * <pre>
     * ステーキング開始
     * </pre>
     *
     * <code>STAKING_EVENT_TYPE_STAKE = 1;</code>
     */
    STAKING_EVENT_TYPE_STAKE(1),
    /**
     * <pre>
     * ステーキング解除
     * </pre>
     *
     * <code>STAKING_EVENT_TYPE_UNSTAKE = 2;</code>
     */
    STAKING_EVENT_TYPE_UNSTAKE(2),
    /**
     * <pre>
     * 報酬受取
     * </pre>
     *
     * <code>STAKING_EVENT_TYPE_REWARD = 3;</code>
     */
    STAKING_EVENT_TYPE_REWARD(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>STAKING_EVENT_TYPE_INVALID = 0;</code>
     */
    public static final int STAKING_EVENT_TYPE_INVALID_VALUE = 0;
    /**
     * <pre>
     * ステーキング開始
     * </pre>
     *
     * <code>STAKING_EVENT_TYPE_STAKE = 1;</code>
     */
    public static final int STAKING_EVENT_TYPE_STAKE_VALUE = 1;
    /**
     * <pre>
     * ステーキング解除
     * </pre>
     *
     * <code>STAKING_EVENT_TYPE_UNSTAKE = 2;</code>
     */
    public static final int STAKING_EVENT_TYPE_UNSTAKE_VALUE = 2;
    /**
     * <pre>
     * 報酬受取
     * </pre>
     *
     * <code>STAKING_EVENT_TYPE_REWARD = 3;</code>
     */
    public static final int STAKING_EVENT_TYPE_REWARD_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static StakingEventType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static StakingEventType forNumber(int value) {
      switch (value) {
        case 0: return STAKING_EVENT_TYPE_INVALID;
        case 1: return STAKING_EVENT_TYPE_STAKE;
        case 2: return STAKING_EVENT_TYPE_UNSTAKE;
        case 3: return STAKING_EVENT_TYPE_REWARD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<StakingEventType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        StakingEventType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<StakingEventType>() {
            public StakingEventType findValueByNumber(int number) {
              return StakingEventType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(13);
    }

    private static final StakingEventType[] VALUES = values();

    public static StakingEventType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private StakingEventType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.StakingEventType)
  }

  /**
   * Protobuf enum {@code gincoinc.global.v1.EthereumStakingHistoryType}
   */
  public enum EthereumStakingHistoryType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ETHEREUM_STAKING_HISTORY_TYPE_INVALID = 0;</code>
     */
    ETHEREUM_STAKING_HISTORY_TYPE_INVALID(0),
    /**
     * <code>ETHEREUM_STAKING_HISTORY_TYPE_REWARD_CONSENSUS = 1;</code>
     */
    ETHEREUM_STAKING_HISTORY_TYPE_REWARD_CONSENSUS(1),
    /**
     * <code>ETHEREUM_STAKING_HISTORY_TYPE_REWARD_EXECUTION = 2;</code>
     */
    ETHEREUM_STAKING_HISTORY_TYPE_REWARD_EXECUTION(2),
    /**
     * <code>ETHEREUM_STAKING_HISTORY_TYPE_REWARD_MEV = 3;</code>
     */
    ETHEREUM_STAKING_HISTORY_TYPE_REWARD_MEV(3),
    /**
     * <code>ETHEREUM_STAKING_HISTORY_TYPE_START = 4;</code>
     */
    ETHEREUM_STAKING_HISTORY_TYPE_START(4),
    /**
     * <code>ETHEREUM_STAKING_HISTORY_TYPE_EXIT = 5;</code>
     */
    ETHEREUM_STAKING_HISTORY_TYPE_EXIT(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>ETHEREUM_STAKING_HISTORY_TYPE_INVALID = 0;</code>
     */
    public static final int ETHEREUM_STAKING_HISTORY_TYPE_INVALID_VALUE = 0;
    /**
     * <code>ETHEREUM_STAKING_HISTORY_TYPE_REWARD_CONSENSUS = 1;</code>
     */
    public static final int ETHEREUM_STAKING_HISTORY_TYPE_REWARD_CONSENSUS_VALUE = 1;
    /**
     * <code>ETHEREUM_STAKING_HISTORY_TYPE_REWARD_EXECUTION = 2;</code>
     */
    public static final int ETHEREUM_STAKING_HISTORY_TYPE_REWARD_EXECUTION_VALUE = 2;
    /**
     * <code>ETHEREUM_STAKING_HISTORY_TYPE_REWARD_MEV = 3;</code>
     */
    public static final int ETHEREUM_STAKING_HISTORY_TYPE_REWARD_MEV_VALUE = 3;
    /**
     * <code>ETHEREUM_STAKING_HISTORY_TYPE_START = 4;</code>
     */
    public static final int ETHEREUM_STAKING_HISTORY_TYPE_START_VALUE = 4;
    /**
     * <code>ETHEREUM_STAKING_HISTORY_TYPE_EXIT = 5;</code>
     */
    public static final int ETHEREUM_STAKING_HISTORY_TYPE_EXIT_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EthereumStakingHistoryType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static EthereumStakingHistoryType forNumber(int value) {
      switch (value) {
        case 0: return ETHEREUM_STAKING_HISTORY_TYPE_INVALID;
        case 1: return ETHEREUM_STAKING_HISTORY_TYPE_REWARD_CONSENSUS;
        case 2: return ETHEREUM_STAKING_HISTORY_TYPE_REWARD_EXECUTION;
        case 3: return ETHEREUM_STAKING_HISTORY_TYPE_REWARD_MEV;
        case 4: return ETHEREUM_STAKING_HISTORY_TYPE_START;
        case 5: return ETHEREUM_STAKING_HISTORY_TYPE_EXIT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EthereumStakingHistoryType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EthereumStakingHistoryType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EthereumStakingHistoryType>() {
            public EthereumStakingHistoryType findValueByNumber(int number) {
              return EthereumStakingHistoryType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(14);
    }

    private static final EthereumStakingHistoryType[] VALUES = values();

    public static EthereumStakingHistoryType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EthereumStakingHistoryType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.EthereumStakingHistoryType)
  }

  /**
   * Protobuf enum {@code gincoinc.global.v1.SolanaRecentBlockhashType}
   */
  public enum SolanaRecentBlockhashType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SOLANA_RECENT_BLOCKHASH_TYPE_INVALID = 0;</code>
     */
    SOLANA_RECENT_BLOCKHASH_TYPE_INVALID(0),
    /**
     * <code>SOLANA_RECENT_BLOCKHASH_TYPE_FINALIZED = 1;</code>
     */
    SOLANA_RECENT_BLOCKHASH_TYPE_FINALIZED(1),
    /**
     * <code>SOLANA_RECENT_BLOCKHASH_TYPE_CONFIRMED = 2;</code>
     */
    SOLANA_RECENT_BLOCKHASH_TYPE_CONFIRMED(2),
    /**
     * <code>SOLANA_RECENT_BLOCKHASH_TYPE_PROCESSED = 3;</code>
     */
    SOLANA_RECENT_BLOCKHASH_TYPE_PROCESSED(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>SOLANA_RECENT_BLOCKHASH_TYPE_INVALID = 0;</code>
     */
    public static final int SOLANA_RECENT_BLOCKHASH_TYPE_INVALID_VALUE = 0;
    /**
     * <code>SOLANA_RECENT_BLOCKHASH_TYPE_FINALIZED = 1;</code>
     */
    public static final int SOLANA_RECENT_BLOCKHASH_TYPE_FINALIZED_VALUE = 1;
    /**
     * <code>SOLANA_RECENT_BLOCKHASH_TYPE_CONFIRMED = 2;</code>
     */
    public static final int SOLANA_RECENT_BLOCKHASH_TYPE_CONFIRMED_VALUE = 2;
    /**
     * <code>SOLANA_RECENT_BLOCKHASH_TYPE_PROCESSED = 3;</code>
     */
    public static final int SOLANA_RECENT_BLOCKHASH_TYPE_PROCESSED_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SolanaRecentBlockhashType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SolanaRecentBlockhashType forNumber(int value) {
      switch (value) {
        case 0: return SOLANA_RECENT_BLOCKHASH_TYPE_INVALID;
        case 1: return SOLANA_RECENT_BLOCKHASH_TYPE_FINALIZED;
        case 2: return SOLANA_RECENT_BLOCKHASH_TYPE_CONFIRMED;
        case 3: return SOLANA_RECENT_BLOCKHASH_TYPE_PROCESSED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SolanaRecentBlockhashType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SolanaRecentBlockhashType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SolanaRecentBlockhashType>() {
            public SolanaRecentBlockhashType findValueByNumber(int number) {
              return SolanaRecentBlockhashType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(15);
    }

    private static final SolanaRecentBlockhashType[] VALUES = values();

    public static SolanaRecentBlockhashType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SolanaRecentBlockhashType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.SolanaRecentBlockhashType)
  }

  /**
   * Protobuf enum {@code gincoinc.global.v1.EthereumCallMethod}
   */
  public enum EthereumCallMethod
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ETHEREUM_CALL_METHOD_INVALID = 0;</code>
     */
    ETHEREUM_CALL_METHOD_INVALID(0),
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_INITIALIZE = 1;</code>
     */
    ETHEREUM_CALL_METHOD_PROGMAT_COIN_INITIALIZE(1),
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_CONFIGURE_MINTER = 2;</code>
     */
    ETHEREUM_CALL_METHOD_PROGMAT_COIN_CONFIGURE_MINTER(2),
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_MINT_AND_TRANSFER = 3;</code>
     */
    ETHEREUM_CALL_METHOD_PROGMAT_COIN_MINT_AND_TRANSFER(3),
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_MINT = 4;</code>
     */
    ETHEREUM_CALL_METHOD_PROGMAT_COIN_MINT(4),
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_TRANSFER = 5;</code>
     */
    ETHEREUM_CALL_METHOD_PROGMAT_COIN_TRANSFER(5),
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_BURN = 6;</code>
     */
    ETHEREUM_CALL_METHOD_PROGMAT_COIN_BURN(6),
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_ADD_TO_WHITELIST = 7;</code>
     */
    ETHEREUM_CALL_METHOD_PROGMAT_COIN_ADD_TO_WHITELIST(7),
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_REMOVE_FROM_WHITELIST = 8;</code>
     */
    ETHEREUM_CALL_METHOD_PROGMAT_COIN_REMOVE_FROM_WHITELIST(8),
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_ADD_TO_BLACKLIST = 9;</code>
     */
    ETHEREUM_CALL_METHOD_PROGMAT_COIN_ADD_TO_BLACKLIST(9),
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_REMOVE_FROM_BLACKLIST = 10;</code>
     */
    ETHEREUM_CALL_METHOD_PROGMAT_COIN_REMOVE_FROM_BLACKLIST(10),
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_CONFISCATE = 11;</code>
     */
    ETHEREUM_CALL_METHOD_PROGMAT_COIN_CONFISCATE(11),
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_PAUSE = 12;</code>
     */
    ETHEREUM_CALL_METHOD_PROGMAT_COIN_PAUSE(12),
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_UNPAUSE = 13;</code>
     */
    ETHEREUM_CALL_METHOD_PROGMAT_COIN_UNPAUSE(13),
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_UPGRADE_TO_AND_CALL = 14;</code>
     */
    ETHEREUM_CALL_METHOD_PROGMAT_COIN_UPGRADE_TO_AND_CALL(14),
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_IS_IN_WHITELIST = 15;</code>
     */
    ETHEREUM_CALL_METHOD_PROGMAT_COIN_IS_IN_WHITELIST(15),
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_IS_IN_BLACKLIST = 16;</code>
     */
    ETHEREUM_CALL_METHOD_PROGMAT_COIN_IS_IN_BLACKLIST(16),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>ETHEREUM_CALL_METHOD_INVALID = 0;</code>
     */
    public static final int ETHEREUM_CALL_METHOD_INVALID_VALUE = 0;
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_INITIALIZE = 1;</code>
     */
    public static final int ETHEREUM_CALL_METHOD_PROGMAT_COIN_INITIALIZE_VALUE = 1;
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_CONFIGURE_MINTER = 2;</code>
     */
    public static final int ETHEREUM_CALL_METHOD_PROGMAT_COIN_CONFIGURE_MINTER_VALUE = 2;
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_MINT_AND_TRANSFER = 3;</code>
     */
    public static final int ETHEREUM_CALL_METHOD_PROGMAT_COIN_MINT_AND_TRANSFER_VALUE = 3;
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_MINT = 4;</code>
     */
    public static final int ETHEREUM_CALL_METHOD_PROGMAT_COIN_MINT_VALUE = 4;
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_TRANSFER = 5;</code>
     */
    public static final int ETHEREUM_CALL_METHOD_PROGMAT_COIN_TRANSFER_VALUE = 5;
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_BURN = 6;</code>
     */
    public static final int ETHEREUM_CALL_METHOD_PROGMAT_COIN_BURN_VALUE = 6;
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_ADD_TO_WHITELIST = 7;</code>
     */
    public static final int ETHEREUM_CALL_METHOD_PROGMAT_COIN_ADD_TO_WHITELIST_VALUE = 7;
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_REMOVE_FROM_WHITELIST = 8;</code>
     */
    public static final int ETHEREUM_CALL_METHOD_PROGMAT_COIN_REMOVE_FROM_WHITELIST_VALUE = 8;
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_ADD_TO_BLACKLIST = 9;</code>
     */
    public static final int ETHEREUM_CALL_METHOD_PROGMAT_COIN_ADD_TO_BLACKLIST_VALUE = 9;
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_REMOVE_FROM_BLACKLIST = 10;</code>
     */
    public static final int ETHEREUM_CALL_METHOD_PROGMAT_COIN_REMOVE_FROM_BLACKLIST_VALUE = 10;
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_CONFISCATE = 11;</code>
     */
    public static final int ETHEREUM_CALL_METHOD_PROGMAT_COIN_CONFISCATE_VALUE = 11;
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_PAUSE = 12;</code>
     */
    public static final int ETHEREUM_CALL_METHOD_PROGMAT_COIN_PAUSE_VALUE = 12;
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_UNPAUSE = 13;</code>
     */
    public static final int ETHEREUM_CALL_METHOD_PROGMAT_COIN_UNPAUSE_VALUE = 13;
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_UPGRADE_TO_AND_CALL = 14;</code>
     */
    public static final int ETHEREUM_CALL_METHOD_PROGMAT_COIN_UPGRADE_TO_AND_CALL_VALUE = 14;
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_IS_IN_WHITELIST = 15;</code>
     */
    public static final int ETHEREUM_CALL_METHOD_PROGMAT_COIN_IS_IN_WHITELIST_VALUE = 15;
    /**
     * <code>ETHEREUM_CALL_METHOD_PROGMAT_COIN_IS_IN_BLACKLIST = 16;</code>
     */
    public static final int ETHEREUM_CALL_METHOD_PROGMAT_COIN_IS_IN_BLACKLIST_VALUE = 16;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EthereumCallMethod valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static EthereumCallMethod forNumber(int value) {
      switch (value) {
        case 0: return ETHEREUM_CALL_METHOD_INVALID;
        case 1: return ETHEREUM_CALL_METHOD_PROGMAT_COIN_INITIALIZE;
        case 2: return ETHEREUM_CALL_METHOD_PROGMAT_COIN_CONFIGURE_MINTER;
        case 3: return ETHEREUM_CALL_METHOD_PROGMAT_COIN_MINT_AND_TRANSFER;
        case 4: return ETHEREUM_CALL_METHOD_PROGMAT_COIN_MINT;
        case 5: return ETHEREUM_CALL_METHOD_PROGMAT_COIN_TRANSFER;
        case 6: return ETHEREUM_CALL_METHOD_PROGMAT_COIN_BURN;
        case 7: return ETHEREUM_CALL_METHOD_PROGMAT_COIN_ADD_TO_WHITELIST;
        case 8: return ETHEREUM_CALL_METHOD_PROGMAT_COIN_REMOVE_FROM_WHITELIST;
        case 9: return ETHEREUM_CALL_METHOD_PROGMAT_COIN_ADD_TO_BLACKLIST;
        case 10: return ETHEREUM_CALL_METHOD_PROGMAT_COIN_REMOVE_FROM_BLACKLIST;
        case 11: return ETHEREUM_CALL_METHOD_PROGMAT_COIN_CONFISCATE;
        case 12: return ETHEREUM_CALL_METHOD_PROGMAT_COIN_PAUSE;
        case 13: return ETHEREUM_CALL_METHOD_PROGMAT_COIN_UNPAUSE;
        case 14: return ETHEREUM_CALL_METHOD_PROGMAT_COIN_UPGRADE_TO_AND_CALL;
        case 15: return ETHEREUM_CALL_METHOD_PROGMAT_COIN_IS_IN_WHITELIST;
        case 16: return ETHEREUM_CALL_METHOD_PROGMAT_COIN_IS_IN_BLACKLIST;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EthereumCallMethod>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EthereumCallMethod> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EthereumCallMethod>() {
            public EthereumCallMethod findValueByNumber(int number) {
              return EthereumCallMethod.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gincoinc.global.v1.Enum.getDescriptor().getEnumTypes().get(16);
    }

    private static final EthereumCallMethod[] VALUES = values();

    public static EthereumCallMethod valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EthereumCallMethod(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.EthereumCallMethod)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n.gincoinc/global/v1/gincoincglobalv1/en" +
      "um.proto\022\022gincoinc.global.v1*\235\n\n\004Coin\022\020\n" +
      "\014COIN_INVALID\020\000\022\014\n\010COIN_BTC\020\001\022\014\n\010COIN_ET" +
      "H\020\002\022\014\n\010COIN_LTC\020\003\022\014\n\010COIN_BCH\020\004\022\014\n\010COIN_" +
      "XRP\020\005\022\022\n\016COIN_ERC20_BAT\020\006\022\014\n\010COIN_TRX\020\007\022" +
      "\023\n\017COIN_ERC20_USDT\020\010\022\014\n\010COIN_RYO\020\t\022\024\n\020CO" +
      "IN_ERC20_JASMY\020\n\022\022\n\016COIN_ERC20_ENJ\020\013\022\022\n\016" +
      "COIN_ERC20_OMG\020\014\022\014\n\010COIN_XLM\020\r\022\014\n\010COIN_A" +
      "DA\020\016\022\014\n\010COIN_DOT\020\017\022\023\n\017COIN_ERC20_LINK\020\020\022" +
      "\022\n\016COIN_ERC20_DEP\020\021\022\023\n\017COIN_ERC20_USDC\020\022" +
      "\022\023\n\017COIN_ERC20_GYEN\020\023\022\023\n\017COIN_ERC20_ZAIF" +
      "\020\024\022\023\n\017COIN_ERC20_FSCC\020\025\022\022\n\016COIN_ERC20_CM" +
      "S\020\026\022\023\n\017COIN_ERC20_CICC\020\027\022\023\n\017COIN_ERC20_N" +
      "CXC\020\030\022\022\n\016COIN_ERC20_COT\020\031\022\014\n\010COIN_XEM\020\032\022" +
      "\r\n\tCOIN_MONA\020\033\022\r\n\tCOIN_IOST\020\034\022\023\n\017COIN_ER" +
      "C20_SKEB\020\035\022\r\n\tCOIN_KLAY\020\036\022\016\n\nCOIN_MATIC\020" +
      "\037\022\014\n\010COIN_XYM\020 \022\r\n\tCOIN_AVAX\020!\022\024\n\020COIN_E" +
      "RC20_MATIC\020\"\022\023\n\017COIN_ERC20_ROND\020#\022\021\n\rCOI" +
      "N_ERC20_MV\020$\022\033\n\027COIN_POLYGON_ERC20_ROND\020" +
      "%\022\031\n\025COIN_POLYGON_ERC20_MV\020&\022\034\n\030COIN_POL" +
      "YGON_ERC20_TSUGT\020\'\022\022\n\016COIN_ERC20_GXE\020(\022\014" +
      "\n\010COIN_OAS\020)\022\r\n\tCOIN_ASTR\020*\022\014\n\010COIN_XDC\020" +
      "+\022\r\n\tCOIN_ATOM\020,\022\030\n\024COIN_KLAYTN_KIP7_MBX" +
      "\020-\022\014\n\010COIN_ETC\020.\022\022\n\016COIN_ERC20_DAI\020/\022\023\n\017" +
      "COIN_ERC20_WETH\0200\022\r\n\tCOIN_ALGO\0201\022\022\n\016COIN" +
      "_ERC20_AXS\0202\022\023\n\017COIN_ERC20_SAND\0203\022\022\n\016COI" +
      "N_ERC20_MKR\0204\022\022\n\016COIN_ERC20_CHZ\0205\022\023\n\017COI" +
      "N_ERC20_NIDT\0206\022\023\n\017COIN_ERC20_FNCT\0207\022\023\n\017C" +
      "OIN_ERC20_SHIB\0208\022\022\n\016COIN_ERC20_APE\0209\022\022\n\016" +
      "COIN_ERC20_BNB\020:\022\022\n\016COIN_ERC20_FCR\020;\022\r\n\t" +
      "COIN_HBAR\020<\022\014\n\010COIN_JOC\020=\022\014\n\010COIN_SOL\020>\022" +
      "\014\n\010COIN_BNB\020?\022\014\n\010COIN_FLR\020@\022\033\n\027COIN_POLY" +
      "GON_ERC20_OSHI\020A\022\r\n\010COIN_SDN\020\222N\022\025\n\020COIN_" +
      "ERC20_SCDEV\020\223N\022\024\n\017COIN_ERC20_SCQA\020\224N\022\026\n\021" +
      "COIN_ERC20_SCPROD\020\225N*\243\r\n\007Network\022\023\n\017NETW" +
      "ORK_INVALID\020\000\022\033\n\027NETWORK_BITCOIN_MAINNET" +
      "\020\001\022\033\n\027NETWORK_BITCOIN_TESTNET\020\002\022\034\n\030NETWO" +
      "RK_ETHEREUM_MAINNET\020\003\022\034\n\030NETWORK_ETHEREU" +
      "M_TESTNET\020\004\022\034\n\030NETWORK_LITECOIN_MAINNET\020" +
      "\005\022\034\n\030NETWORK_LITECOIN_TESTNET\020\006\022\037\n\033NETWO" +
      "RK_BITCOINCASH_MAINNET\020\007\022\037\n\033NETWORK_BITC" +
      "OINCASH_TESTNET\020\010\022\032\n\026NETWORK_RIPPLE_MAIN" +
      "NET\020\t\022\032\n\026NETWORK_RIPPLE_TESTNET\020\n\022\030\n\024NET" +
      "WORK_TRON_MAINNET\020\013\022\030\n\024NETWORK_TRON_TEST" +
      "NET\020\014\022\031\n\025NETWORK_C0BAN_MAINNET\020\r\022\031\n\025NETW" +
      "ORK_C0BAN_TESTNET\020\016\022\033\n\027NETWORK_STELLAR_M" +
      "AINNET\020\017\022\033\n\027NETWORK_STELLAR_TESTNET\020\020\022\033\n" +
      "\027NETWORK_CARDANO_MAINNET\020\021\022\033\n\027NETWORK_CA" +
      "RDANO_TESTNET\020\022\022\034\n\030NETWORK_POLKADOT_MAIN" +
      "NET\020\023\022\034\n\030NETWORK_POLKADOT_TESTNET\020\024\022\027\n\023N" +
      "ETWORK_NEM_MAINNET\020\025\022\027\n\023NETWORK_NEM_TEST" +
      "NET\020\026\022\034\n\030NETWORK_MONACOIN_MAINNET\020\027\022\034\n\030N" +
      "ETWORK_MONACOIN_TESTNET\020\030\022\030\n\024NETWORK_IOS" +
      "T_MAINNET\020\031\022\030\n\024NETWORK_IOST_TESTNET\020\032\022\030\n" +
      "\024NETWORK_KLAY_MAINNET\020\033\022\030\n\024NETWORK_KLAY_" +
      "TESTNET\020\034\022\033\n\027NETWORK_POLYGON_MAINNET\020\035\022\033" +
      "\n\027NETWORK_POLYGON_TESTNET\020\036\022\032\n\026NETWORK_S" +
      "YMBOL_MAINNET\020\037\022\032\n\026NETWORK_SYMBOL_TESTNE" +
      "T\020 \022\035\n\031NETWORK_AVALANCHE_MAINNET\020!\022\035\n\031NE" +
      "TWORK_AVALANCHE_TESTNET\020\"\022\031\n\025NETWORK_OAS" +
      "YS_MAINNET\020#\022\031\n\025NETWORK_OASYS_TESTNET\020$\022" +
      "\031\n\025NETWORK_ASTAR_MAINNET\020%\022\033\n\027NETWORK_SH" +
      "IBUYA_TESTNET\020&\022\027\n\023NETWORK_XDC_MAINNET\020\'" +
      "\022\027\n\023NETWORK_XDC_TESTNET\020(\022\032\n\026NETWORK_COS" +
      "MOS_MAINNET\020)\022\032\n\026NETWORK_COSMOS_TESTNET\020" +
      "*\022$\n NETWORK_ETHEREUM_CLASSIC_MAINNET\020+\022" +
      "$\n NETWORK_ETHEREUM_CLASSIC_TESTNET\020,\022\034\n" +
      "\030NETWORK_ALGORAND_MAINNET\020-\022\034\n\030NETWORK_A" +
      "LGORAND_TESTNET\020.\022\032\n\026NETWORK_HEDERA_MAIN" +
      "NET\020/\022\032\n\026NETWORK_HEDERA_TESTNET\0200\022$\n NET" +
      "WORK_JAPAN_OPEN_CHAIN_MAINNET\0201\022$\n NETWO" +
      "RK_JAPAN_OPEN_CHAIN_TESTNET\0202\022\032\n\026NETWORK" +
      "_SOLANA_MAINNET\0203\022\032\n\026NETWORK_SOLANA_TEST" +
      "NET\0204\022#\n\037NETWORK_BNB_SMART_CHAIN_MAINNET" +
      "\0205\022#\n\037NETWORK_BNB_SMART_CHAIN_TESTNET\0206\022" +
      "\031\n\025NETWORK_FLARE_MAINNET\0207\022\031\n\025NETWORK_FL" +
      "ARE_TESTNET\0208\022\033\n\026NETWORK_SHIDEN_MAINNET\020" +
      "\222N*\212\001\n\013AddressType\022\030\n\024ADDRESS_TYPE_INVAL" +
      "ID\020\000\022\025\n\021ADDRESS_TYPE_P2SH\020\001\022\033\n\027ADDRESS_T" +
      "YPE_P2SH_P2WSH\020\002\022\026\n\022ADDRESS_TYPE_P2WSH\020\003" +
      "\022\025\n\021ADDRESS_TYPE_NONE\020d*\323\001\n\020TransactionS" +
      "tate\022\035\n\031TRANSACTION_STATE_INVALID\020\000\022\037\n\033T" +
      "RANSACTION_STATE_SUBMITTED\020\001\022\035\n\031TRANSACT" +
      "ION_STATE_PENDING\020\002\022 \n\034TRANSACTION_STATE" +
      "_PROCESSING\020\003\022\037\n\033TRANSACTION_STATE_CONFI" +
      "RMED\020\004\022\035\n\031TRANSACTION_STATE_DROPPED\020\005*\217\001" +
      "\n\tUTXOState\022\026\n\022UTXO_STATE_INVALID\020\000\022\036\n\032U" +
      "TXO_STATE_PENDING_UNSPENT\020\001\022\026\n\022UTXO_STAT" +
      "E_UNSPENT\020\002\022\034\n\030UTXO_STATE_PENDING_SPENT\020" +
      "\003\022\024\n\020UTXO_STATE_SPENT\020\004*\217\001\n\014TransferType" +
      "\022\031\n\025TRANSFER_TYPE_INVALID\020\000\022\026\n\022TRANSFER_" +
      "TYPE_SEND\020\001\022\031\n\025TRANSFER_TYPE_RECEIVE\020\002\022\030" +
      "\n\024TRANSFER_TYPE_CHANGE\020\003\022\027\n\023TRANSFER_TYP" +
      "E_FATAL\020\004*\253\001\n\022XRPTransactionType\022 \n\034XRP_" +
      "TRANSACTION_TYPE_INVALID\020\000\022 \n\034XRP_TRANSA" +
      "CTION_TYPE_PAYMENT\020\001\022(\n$XRP_TRANSACTION_" +
      "TYPE_SET_SIGNER_LIST\020\002\022\'\n#XRP_TRANSACTIO" +
      "N_TYPE_DISABLE_MASTER\020\003*\260\001\n\021TransactionR" +
      "esult\022\036\n\032TRANSACTION_RESULT_INVALID\020\000\022\036\n" +
      "\032TRANSACTION_RESULT_PENDING\020\001\022\036\n\032TRANSAC" +
      "TION_RESULT_SUCCESS\020\002\022\036\n\032TRANSACTION_RES" +
      "ULT_FAILURE\020\003\022\033\n\027TRANSACTION_RESULT_NONE" +
      "\020d*\275\003\n\022NemTransactionType\022 \n\034NEM_TRANSAC" +
      "TION_TYPE_INVALID\020\000\022&\n\"NEM_TRANSACTION_T" +
      "YPE_TRANSFER_TYPE\020\001\0221\n-NEM_TRANSACTION_T" +
      "YPE_IMPORTANCE_TRANSFER_TYPE\020\002\0223\n/NEM_TR" +
      "ANSACTION_TYPE_MULTISIG_MODIFICATION_TYP" +
      "E\020\003\0220\n,NEM_TRANSACTION_TYPE_MULTISIG_SIG" +
      "NATURE_TYPE\020\004\0222\n.NEM_TRANSACTION_TYPE_MU" +
      "LTISIG_TRANSACTION_TYPE\020\005\0221\n-NEM_TRANSAC" +
      "TION_TYPE_PROVISION_NAMESPACE_TYPE\020\006\022/\n+" +
      "NEM_TRANSACTION_TYPE_MOSAIC_DEFINITION_T" +
      "YPE\020\007\022+\n\'NEM_TRANSACTION_TYPE_MOSAIC_SUP" +
      "PLY_TYPE\020\010*\353\t\n\025SymbolTransactionType\022#\n\037" +
      "SYMBOL_TRANSACTION_TYPE_INVALID\020\000\022,\n(SYM" +
      "BOL_TRANSACTION_TYPE_ACCOUNT_KEY_LINK\020\001\022" +
      ")\n%SYMBOL_TRANSACTION_TYPE_NODE_KEY_LINK" +
      "\020\002\022.\n*SYMBOL_TRANSACTION_TYPE_AGGREGATE_" +
      "COMPLETE\020\003\022,\n(SYMBOL_TRANSACTION_TYPE_AG" +
      "GREGATE_BONDED\020\004\022+\n\'SYMBOL_TRANSACTION_T" +
      "YPE_VOTING_KEY_LINK\020\005\022(\n$SYMBOL_TRANSACT" +
      "ION_TYPE_VRF_KEY_LINK\020\006\022%\n!SYMBOL_TRANSA" +
      "CTION_TYPE_HASH_LOCK\020\007\022\'\n#SYMBOL_TRANSAC" +
      "TION_TYPE_SECRET_LOCK\020\010\022(\n$SYMBOL_TRANSA" +
      "CTION_TYPE_SECRET_PROOF\020\t\022,\n(SYMBOL_TRAN" +
      "SACTION_TYPE_ACCOUNT_METADATA\020\n\022+\n\'SYMBO" +
      "L_TRANSACTION_TYPE_MOSAIC_METADATA\020\013\022.\n*" +
      "SYMBOL_TRANSACTION_TYPE_NAMESPACE_METADA" +
      "TA\020\014\022-\n)SYMBOL_TRANSACTION_TYPE_MOSAIC_D" +
      "EFINITION\020\r\0220\n,SYMBOL_TRANSACTION_TYPE_M" +
      "OSAIC_SUPPLY_CHANGE\020\016\0224\n0SYMBOL_TRANSACT" +
      "ION_TYPE_MOSAIC_SUPPLY_REVOCATION\020\017\0229\n5S" +
      "YMBOL_TRANSACTION_TYPE_MULTISIG_ACCOUNT_" +
      "MODIFICATION\020\020\022)\n%SYMBOL_TRANSACTION_TYP" +
      "E_ADDRESS_ALIAS\020\021\022(\n$SYMBOL_TRANSACTION_" +
      "TYPE_MOSAIC_ALIAS\020\022\0222\n.SYMBOL_TRANSACTIO" +
      "N_TYPE_NAMESPACE_REGISTRATION\020\023\0227\n3SYMBO" +
      "L_TRANSACTION_TYPE_ACCOUNT_ADDRESS_RESTR" +
      "ICTION\020\024\0226\n2SYMBOL_TRANSACTION_TYPE_ACCO" +
      "UNT_MOSAIC_RESTRICTION\020\025\0229\n5SYMBOL_TRANS" +
      "ACTION_TYPE_ACCOUNT_OPERATION_RESTRICTIO" +
      "N\020\026\0226\n2SYMBOL_TRANSACTION_TYPE_MOSAIC_AD" +
      "DRESS_RESTRICTION\020\027\0225\n1SYMBOL_TRANSACTIO" +
      "N_TYPE_MOSAIC_GLOBAL_RESTRICTION\020\030\022$\n SY" +
      "MBOL_TRANSACTION_TYPE_TRANSFER\020\031*\352\001\n\036Eth" +
      "ereumStakingRewardLayerType\022.\n*ETHEREUM_" +
      "STAKING_REWARD_LAYER_TYPE_INVALID\020\000\0220\n,E" +
      "THEREUM_STAKING_REWARD_LAYER_TYPE_CONSEN" +
      "SUS\020\001\0220\n,ETHEREUM_STAKING_REWARD_LAYER_T" +
      "YPE_EXECUTION\020\002\0224\n0ETHEREUM_STAKING_REWA" +
      "RD_LAYER_TYPE_EXECUTION_MEV\020\003*\321\001\n\rCosmos" +
      "MsgType\022\033\n\027COSMOS_MSG_TYPE_INVALID\020\000\022\030\n\024" +
      "COSMOS_MSG_TYPE_SEND\020\001\022\034\n\030COSMOS_MSG_TYP" +
      "E_DELEGATE\020\002\022\036\n\032COSMOS_MSG_TYPE_UNDELEGA" +
      "TE\020\003\022\034\n\030COSMOS_MSG_TYPE_UNBONDED\020\004\022-\n)CO" +
      "SMOS_MSG_TYPE_WITHDRAW_DELEGATOR_REWARD\020" +
      "\005*\252\001\n\026StakingValidatorStatus\022$\n STAKING_" +
      "VALIDATOR_STATUS_INVALID\020\000\022#\n\037STAKING_VA" +
      "LIDATOR_STATUS_ACTIVE\020\001\022!\n\035STAKING_VALID" +
      "ATOR_STATUS_STOP\020\002\022\"\n\036STAKING_VALIDATOR_" +
      "STATUS_PAUSE\020\003*\217\001\n\020StakingEventType\022\036\n\032S" +
      "TAKING_EVENT_TYPE_INVALID\020\000\022\034\n\030STAKING_E" +
      "VENT_TYPE_STAKE\020\001\022\036\n\032STAKING_EVENT_TYPE_" +
      "UNSTAKE\020\002\022\035\n\031STAKING_EVENT_TYPE_REWARD\020\003" +
      "*\256\002\n\032EthereumStakingHistoryType\022)\n%ETHER" +
      "EUM_STAKING_HISTORY_TYPE_INVALID\020\000\0222\n.ET" +
      "HEREUM_STAKING_HISTORY_TYPE_REWARD_CONSE" +
      "NSUS\020\001\0222\n.ETHEREUM_STAKING_HISTORY_TYPE_" +
      "REWARD_EXECUTION\020\002\022,\n(ETHEREUM_STAKING_H" +
      "ISTORY_TYPE_REWARD_MEV\020\003\022\'\n#ETHEREUM_STA" +
      "KING_HISTORY_TYPE_START\020\004\022&\n\"ETHEREUM_ST" +
      "AKING_HISTORY_TYPE_EXIT\020\005*\311\001\n\031SolanaRece" +
      "ntBlockhashType\022(\n$SOLANA_RECENT_BLOCKHA" +
      "SH_TYPE_INVALID\020\000\022*\n&SOLANA_RECENT_BLOCK" +
      "HASH_TYPE_FINALIZED\020\001\022*\n&SOLANA_RECENT_B" +
      "LOCKHASH_TYPE_CONFIRMED\020\002\022*\n&SOLANA_RECE" +
      "NT_BLOCKHASH_TYPE_PROCESSED\020\003*\202\007\n\022Ethere" +
      "umCallMethod\022 \n\034ETHEREUM_CALL_METHOD_INV" +
      "ALID\020\000\0220\n,ETHEREUM_CALL_METHOD_PROGMAT_C" +
      "OIN_INITIALIZE\020\001\0226\n2ETHEREUM_CALL_METHOD" +
      "_PROGMAT_COIN_CONFIGURE_MINTER\020\002\0227\n3ETHE" +
      "REUM_CALL_METHOD_PROGMAT_COIN_MINT_AND_T" +
      "RANSFER\020\003\022*\n&ETHEREUM_CALL_METHOD_PROGMA" +
      "T_COIN_MINT\020\004\022.\n*ETHEREUM_CALL_METHOD_PR" +
      "OGMAT_COIN_TRANSFER\020\005\022*\n&ETHEREUM_CALL_M" +
      "ETHOD_PROGMAT_COIN_BURN\020\006\0226\n2ETHEREUM_CA" +
      "LL_METHOD_PROGMAT_COIN_ADD_TO_WHITELIST\020" +
      "\007\022;\n7ETHEREUM_CALL_METHOD_PROGMAT_COIN_R" +
      "EMOVE_FROM_WHITELIST\020\010\0226\n2ETHEREUM_CALL_" +
      "METHOD_PROGMAT_COIN_ADD_TO_BLACKLIST\020\t\022;" +
      "\n7ETHEREUM_CALL_METHOD_PROGMAT_COIN_REMO" +
      "VE_FROM_BLACKLIST\020\n\0220\n,ETHEREUM_CALL_MET" +
      "HOD_PROGMAT_COIN_CONFISCATE\020\013\022+\n\'ETHEREU" +
      "M_CALL_METHOD_PROGMAT_COIN_PAUSE\020\014\022-\n)ET" +
      "HEREUM_CALL_METHOD_PROGMAT_COIN_UNPAUSE\020" +
      "\r\0229\n5ETHEREUM_CALL_METHOD_PROGMAT_COIN_U" +
      "PGRADE_TO_AND_CALL\020\016\0225\n1ETHEREUM_CALL_ME" +
      "THOD_PROGMAT_COIN_IS_IN_WHITELIST\020\017\0225\n1E" +
      "THEREUM_CALL_METHOD_PROGMAT_COIN_IS_IN_B" +
      "LACKLIST\020\020BEZCgithub.com/GincoInc/gew-km" +
      "p/gen/gincoinc/global/v1/gincoincglobalv" +
      "1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
