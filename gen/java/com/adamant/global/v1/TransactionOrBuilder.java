// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gincoinc/adamant/global/v1/adamantglobalv1/model.proto

package com.adamant.global.v1;

public interface TransactionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:adamant.global.v1.Transaction)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The id of wallet
   * </pre>
   *
   * <code>string wallet_id = 1 [json_name = "walletId"];</code>
   * @return The walletId.
   */
  java.lang.String getWalletId();
  /**
   * <pre>
   * The id of wallet
   * </pre>
   *
   * <code>string wallet_id = 1 [json_name = "walletId"];</code>
   * @return The bytes for walletId.
   */
  com.google.protobuf.ByteString
      getWalletIdBytes();

  /**
   * <pre>
   * id
   * </pre>
   *
   * <code>string transaction_id = 2 [json_name = "transactionId"];</code>
   * @return The transactionId.
   */
  java.lang.String getTransactionId();
  /**
   * <pre>
   * id
   * </pre>
   *
   * <code>string transaction_id = 2 [json_name = "transactionId"];</code>
   * @return The bytes for transactionId.
   */
  com.google.protobuf.ByteString
      getTransactionIdBytes();

  /**
   * <pre>
   * The type of coin
   * </pre>
   *
   * <code>.gincoinc.global.v1.Coin coin = 3 [json_name = "coin"];</code>
   * @return The enum numeric value on the wire for coin.
   */
  int getCoinValue();
  /**
   * <pre>
   * The type of coin
   * </pre>
   *
   * <code>.gincoinc.global.v1.Coin coin = 3 [json_name = "coin"];</code>
   * @return The coin.
   */
  com.gincoinc.global.v1.Coin getCoin();

  /**
   * <pre>
   * txID
   * </pre>
   *
   * <code>string tx_id = 4 [json_name = "txId"];</code>
   * @return The txId.
   */
  java.lang.String getTxId();
  /**
   * <pre>
   * txID
   * </pre>
   *
   * <code>string tx_id = 4 [json_name = "txId"];</code>
   * @return The bytes for txId.
   */
  com.google.protobuf.ByteString
      getTxIdBytes();

  /**
   * <pre>
   * address
   * </pre>
   *
   * <code>string address = 5 [json_name = "address"];</code>
   * @return The address.
   */
  java.lang.String getAddress();
  /**
   * <pre>
   * address
   * </pre>
   *
   * <code>string address = 5 [json_name = "address"];</code>
   * @return The bytes for address.
   */
  com.google.protobuf.ByteString
      getAddressBytes();

  /**
   * <pre>
   * The number-typed amount of transaction
   * </pre>
   *
   * <code>double value = 6 [json_name = "value"];</code>
   * @return The value.
   */
  double getValue();

  /**
   * <pre>
   * The string-typed amount of transaction
   * </pre>
   *
   * <code>string string_value = 7 [json_name = "stringValue"];</code>
   * @return The stringValue.
   */
  java.lang.String getStringValue();
  /**
   * <pre>
   * The string-typed amount of transaction
   * </pre>
   *
   * <code>string string_value = 7 [json_name = "stringValue"];</code>
   * @return The bytes for stringValue.
   */
  com.google.protobuf.ByteString
      getStringValueBytes();

  /**
   * <pre>
   * The rate of fiat
   * </pre>
   *
   * <code>double jpy_rate = 9 [json_name = "jpyRate"];</code>
   * @return The jpyRate.
   */
  double getJpyRate();

  /**
   * <pre>
   * The number-typed amount of transaction fee
   * </pre>
   *
   * <code>double fee = 10 [json_name = "fee"];</code>
   * @return The fee.
   */
  double getFee();

  /**
   * <pre>
   * The string-typed amount of transaction fee
   * </pre>
   *
   * <code>string string_fee = 11 [json_name = "stringFee"];</code>
   * @return The stringFee.
   */
  java.lang.String getStringFee();
  /**
   * <pre>
   * The string-typed amount of transaction fee
   * </pre>
   *
   * <code>string string_fee = 11 [json_name = "stringFee"];</code>
   * @return The bytes for stringFee.
   */
  com.google.protobuf.ByteString
      getStringFeeBytes();

  /**
   * <pre>
   * The fee rate of transaction (only BTC and its forks.
   * </pre>
   *
   * <code>uint64 fee_rate = 12 [json_name = "feeRate"];</code>
   * @return The feeRate.
   */
  long getFeeRate();

  /**
   * <pre>
   * unit: sat/Byte)
   * </pre>
   *
   * <code>.adamant.global.v1.TransactionState state = 13 [json_name = "state"];</code>
   * @return The enum numeric value on the wire for state.
   */
  int getStateValue();
  /**
   * <pre>
   * unit: sat/Byte)
   * </pre>
   *
   * <code>.adamant.global.v1.TransactionState state = 13 [json_name = "state"];</code>
   * @return The state.
   */
  com.adamant.global.v1.TransactionState getState();

  /**
   * <pre>
   * The list of keys which signed to the transaction
   * </pre>
   *
   * <code>repeated .adamant.global.v1.Key signed_keys = 14 [json_name = "signedKeys"];</code>
   */
  java.util.List<com.adamant.global.v1.Key> 
      getSignedKeysList();
  /**
   * <pre>
   * The list of keys which signed to the transaction
   * </pre>
   *
   * <code>repeated .adamant.global.v1.Key signed_keys = 14 [json_name = "signedKeys"];</code>
   */
  com.adamant.global.v1.Key getSignedKeys(int index);
  /**
   * <pre>
   * The list of keys which signed to the transaction
   * </pre>
   *
   * <code>repeated .adamant.global.v1.Key signed_keys = 14 [json_name = "signedKeys"];</code>
   */
  int getSignedKeysCount();
  /**
   * <pre>
   * The list of keys which signed to the transaction
   * </pre>
   *
   * <code>repeated .adamant.global.v1.Key signed_keys = 14 [json_name = "signedKeys"];</code>
   */
  java.util.List<? extends com.adamant.global.v1.KeyOrBuilder> 
      getSignedKeysOrBuilderList();
  /**
   * <pre>
   * The list of keys which signed to the transaction
   * </pre>
   *
   * <code>repeated .adamant.global.v1.Key signed_keys = 14 [json_name = "signedKeys"];</code>
   */
  com.adamant.global.v1.KeyOrBuilder getSignedKeysOrBuilder(
      int index);

  /**
   * <pre>
   * members
   * </pre>
   *
   * <code>repeated .adamant.global.v1.TransactionMember members = 17 [json_name = "members"];</code>
   */
  java.util.List<com.adamant.global.v1.TransactionMember> 
      getMembersList();
  /**
   * <pre>
   * members
   * </pre>
   *
   * <code>repeated .adamant.global.v1.TransactionMember members = 17 [json_name = "members"];</code>
   */
  com.adamant.global.v1.TransactionMember getMembers(int index);
  /**
   * <pre>
   * members
   * </pre>
   *
   * <code>repeated .adamant.global.v1.TransactionMember members = 17 [json_name = "members"];</code>
   */
  int getMembersCount();
  /**
   * <pre>
   * members
   * </pre>
   *
   * <code>repeated .adamant.global.v1.TransactionMember members = 17 [json_name = "members"];</code>
   */
  java.util.List<? extends com.adamant.global.v1.TransactionMemberOrBuilder> 
      getMembersOrBuilderList();
  /**
   * <pre>
   * members
   * </pre>
   *
   * <code>repeated .adamant.global.v1.TransactionMember members = 17 [json_name = "members"];</code>
   */
  com.adamant.global.v1.TransactionMemberOrBuilder getMembersOrBuilder(
      int index);

  /**
   * <pre>
   * The Bitcoin specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.BitcoinSpecific bitcoin_specific = 22 [json_name = "bitcoinSpecific"];</code>
   * @return Whether the bitcoinSpecific field is set.
   */
  boolean hasBitcoinSpecific();
  /**
   * <pre>
   * The Bitcoin specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.BitcoinSpecific bitcoin_specific = 22 [json_name = "bitcoinSpecific"];</code>
   * @return The bitcoinSpecific.
   */
  com.adamant.global.v1.BitcoinSpecific getBitcoinSpecific();
  /**
   * <pre>
   * The Bitcoin specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.BitcoinSpecific bitcoin_specific = 22 [json_name = "bitcoinSpecific"];</code>
   */
  com.adamant.global.v1.BitcoinSpecificOrBuilder getBitcoinSpecificOrBuilder();

  /**
   * <pre>
   * The Ethereum specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.EthereumSpecific ethereum_specific = 20 [json_name = "ethereumSpecific"];</code>
   * @return Whether the ethereumSpecific field is set.
   */
  boolean hasEthereumSpecific();
  /**
   * <pre>
   * The Ethereum specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.EthereumSpecific ethereum_specific = 20 [json_name = "ethereumSpecific"];</code>
   * @return The ethereumSpecific.
   */
  com.adamant.global.v1.EthereumSpecific getEthereumSpecific();
  /**
   * <pre>
   * The Ethereum specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.EthereumSpecific ethereum_specific = 20 [json_name = "ethereumSpecific"];</code>
   */
  com.adamant.global.v1.EthereumSpecificOrBuilder getEthereumSpecificOrBuilder();

  /**
   * <pre>
   * The Litecoin specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.LitecoinSpecific litecoin_specific = 23 [json_name = "litecoinSpecific"];</code>
   * @return Whether the litecoinSpecific field is set.
   */
  boolean hasLitecoinSpecific();
  /**
   * <pre>
   * The Litecoin specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.LitecoinSpecific litecoin_specific = 23 [json_name = "litecoinSpecific"];</code>
   * @return The litecoinSpecific.
   */
  com.adamant.global.v1.LitecoinSpecific getLitecoinSpecific();
  /**
   * <pre>
   * The Litecoin specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.LitecoinSpecific litecoin_specific = 23 [json_name = "litecoinSpecific"];</code>
   */
  com.adamant.global.v1.LitecoinSpecificOrBuilder getLitecoinSpecificOrBuilder();

  /**
   * <pre>
   * The Bitcoin Cash specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.BitcoincashSpecific bitcoincash_specific = 24 [json_name = "bitcoincashSpecific"];</code>
   * @return Whether the bitcoincashSpecific field is set.
   */
  boolean hasBitcoincashSpecific();
  /**
   * <pre>
   * The Bitcoin Cash specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.BitcoincashSpecific bitcoincash_specific = 24 [json_name = "bitcoincashSpecific"];</code>
   * @return The bitcoincashSpecific.
   */
  com.adamant.global.v1.BitcoincashSpecific getBitcoincashSpecific();
  /**
   * <pre>
   * The Bitcoin Cash specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.BitcoincashSpecific bitcoincash_specific = 24 [json_name = "bitcoincashSpecific"];</code>
   */
  com.adamant.global.v1.BitcoincashSpecificOrBuilder getBitcoincashSpecificOrBuilder();

  /**
   * <pre>
   * The XRP specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.XrpSpecific xrp_specific = 21 [json_name = "xrpSpecific"];</code>
   * @return Whether the xrpSpecific field is set.
   */
  boolean hasXrpSpecific();
  /**
   * <pre>
   * The XRP specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.XrpSpecific xrp_specific = 21 [json_name = "xrpSpecific"];</code>
   * @return The xrpSpecific.
   */
  com.adamant.global.v1.XrpSpecific getXrpSpecific();
  /**
   * <pre>
   * The XRP specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.XrpSpecific xrp_specific = 21 [json_name = "xrpSpecific"];</code>
   */
  com.adamant.global.v1.XrpSpecificOrBuilder getXrpSpecificOrBuilder();

  /**
   * <pre>
   * The Tron specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.TronSpecific tron_specific = 25 [json_name = "tronSpecific"];</code>
   * @return Whether the tronSpecific field is set.
   */
  boolean hasTronSpecific();
  /**
   * <pre>
   * The Tron specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.TronSpecific tron_specific = 25 [json_name = "tronSpecific"];</code>
   * @return The tronSpecific.
   */
  com.adamant.global.v1.TronSpecific getTronSpecific();
  /**
   * <pre>
   * The Tron specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.TronSpecific tron_specific = 25 [json_name = "tronSpecific"];</code>
   */
  com.adamant.global.v1.TronSpecificOrBuilder getTronSpecificOrBuilder();

  /**
   * <pre>
   * The C0ban specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.C0banSpecific c0ban_specific = 26 [json_name = "c0banSpecific"];</code>
   * @return Whether the c0banSpecific field is set.
   */
  boolean hasC0BanSpecific();
  /**
   * <pre>
   * The C0ban specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.C0banSpecific c0ban_specific = 26 [json_name = "c0banSpecific"];</code>
   * @return The c0banSpecific.
   */
  com.adamant.global.v1.C0banSpecific getC0BanSpecific();
  /**
   * <pre>
   * The C0ban specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.C0banSpecific c0ban_specific = 26 [json_name = "c0banSpecific"];</code>
   */
  com.adamant.global.v1.C0banSpecificOrBuilder getC0BanSpecificOrBuilder();

  /**
   * <pre>
   * The Stellar specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.StellarSpecific stellar_specific = 27 [json_name = "stellarSpecific"];</code>
   * @return Whether the stellarSpecific field is set.
   */
  boolean hasStellarSpecific();
  /**
   * <pre>
   * The Stellar specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.StellarSpecific stellar_specific = 27 [json_name = "stellarSpecific"];</code>
   * @return The stellarSpecific.
   */
  com.adamant.global.v1.StellarSpecific getStellarSpecific();
  /**
   * <pre>
   * The Stellar specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.StellarSpecific stellar_specific = 27 [json_name = "stellarSpecific"];</code>
   */
  com.adamant.global.v1.StellarSpecificOrBuilder getStellarSpecificOrBuilder();

  /**
   * <pre>
   * The Cardano specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.CardanoSpecific cardano_specific = 28 [json_name = "cardanoSpecific"];</code>
   * @return Whether the cardanoSpecific field is set.
   */
  boolean hasCardanoSpecific();
  /**
   * <pre>
   * The Cardano specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.CardanoSpecific cardano_specific = 28 [json_name = "cardanoSpecific"];</code>
   * @return The cardanoSpecific.
   */
  com.adamant.global.v1.CardanoSpecific getCardanoSpecific();
  /**
   * <pre>
   * The Cardano specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.CardanoSpecific cardano_specific = 28 [json_name = "cardanoSpecific"];</code>
   */
  com.adamant.global.v1.CardanoSpecificOrBuilder getCardanoSpecificOrBuilder();

  /**
   * <pre>
   * The Substrate specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.SubstrateSpecific substrate_specific = 29 [json_name = "substrateSpecific"];</code>
   * @return Whether the substrateSpecific field is set.
   */
  boolean hasSubstrateSpecific();
  /**
   * <pre>
   * The Substrate specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.SubstrateSpecific substrate_specific = 29 [json_name = "substrateSpecific"];</code>
   * @return The substrateSpecific.
   */
  com.adamant.global.v1.SubstrateSpecific getSubstrateSpecific();
  /**
   * <pre>
   * The Substrate specific fields
   * </pre>
   *
   * <code>.adamant.global.v1.SubstrateSpecific substrate_specific = 29 [json_name = "substrateSpecific"];</code>
   */
  com.adamant.global.v1.SubstrateSpecificOrBuilder getSubstrateSpecificOrBuilder();

  /**
   * <pre>
   * the time at which the transaction was created
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 18 [json_name = "createTime"];</code>
   * @return Whether the createTime field is set.
   */
  boolean hasCreateTime();
  /**
   * <pre>
   * the time at which the transaction was created
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 18 [json_name = "createTime"];</code>
   * @return The createTime.
   */
  com.google.protobuf.Timestamp getCreateTime();
  /**
   * <pre>
   * the time at which the transaction was created
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 18 [json_name = "createTime"];</code>
   */
  com.google.protobuf.TimestampOrBuilder getCreateTimeOrBuilder();

  /**
   * <pre>
   * the time at which the transaction was updated
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 19 [json_name = "updateTime"];</code>
   * @return Whether the updateTime field is set.
   */
  boolean hasUpdateTime();
  /**
   * <pre>
   * the time at which the transaction was updated
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 19 [json_name = "updateTime"];</code>
   * @return The updateTime.
   */
  com.google.protobuf.Timestamp getUpdateTime();
  /**
   * <pre>
   * the time at which the transaction was updated
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 19 [json_name = "updateTime"];</code>
   */
  com.google.protobuf.TimestampOrBuilder getUpdateTimeOrBuilder();
}
