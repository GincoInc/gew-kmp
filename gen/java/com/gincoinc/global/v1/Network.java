// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gincoinc/global/v1/gincoincglobalv1/enum.proto

package com.gincoinc.global.v1;

/**
 * <pre>
 * Network is a type of blockchain network.
 * </pre>
 *
 * Protobuf enum {@code gincoinc.global.v1.Network}
 */
public enum Network
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>NETWORK_INVALID = 0;</code>
   */
  NETWORK_INVALID(0),
  /**
   * <code>NETWORK_BITCOIN_MAINNET = 1;</code>
   */
  NETWORK_BITCOIN_MAINNET(1),
  /**
   * <code>NETWORK_BITCOIN_TESTNET = 2;</code>
   */
  NETWORK_BITCOIN_TESTNET(2),
  /**
   * <code>NETWORK_ETHEREUM_MAINNET = 3;</code>
   */
  NETWORK_ETHEREUM_MAINNET(3),
  /**
   * <code>NETWORK_ETHEREUM_TESTNET = 4;</code>
   */
  NETWORK_ETHEREUM_TESTNET(4),
  /**
   * <code>NETWORK_LITECOIN_MAINNET = 5;</code>
   */
  NETWORK_LITECOIN_MAINNET(5),
  /**
   * <code>NETWORK_LITECOIN_TESTNET = 6;</code>
   */
  NETWORK_LITECOIN_TESTNET(6),
  /**
   * <code>NETWORK_BITCOINCASH_MAINNET = 7;</code>
   */
  NETWORK_BITCOINCASH_MAINNET(7),
  /**
   * <code>NETWORK_BITCOINCASH_TESTNET = 8;</code>
   */
  NETWORK_BITCOINCASH_TESTNET(8),
  /**
   * <code>NETWORK_RIPPLE_MAINNET = 9;</code>
   */
  NETWORK_RIPPLE_MAINNET(9),
  /**
   * <code>NETWORK_RIPPLE_TESTNET = 10;</code>
   */
  NETWORK_RIPPLE_TESTNET(10),
  /**
   * <code>NETWORK_TRON_MAINNET = 11;</code>
   */
  NETWORK_TRON_MAINNET(11),
  /**
   * <code>NETWORK_TRON_TESTNET = 12;</code>
   */
  NETWORK_TRON_TESTNET(12),
  /**
   * <code>NETWORK_C0BAN_MAINNET = 13;</code>
   */
  NETWORK_C0BAN_MAINNET(13),
  /**
   * <code>NETWORK_C0BAN_TESTNET = 14;</code>
   */
  NETWORK_C0BAN_TESTNET(14),
  /**
   * <code>NETWORK_STELLAR_MAINNET = 15;</code>
   */
  NETWORK_STELLAR_MAINNET(15),
  /**
   * <code>NETWORK_STELLAR_TESTNET = 16;</code>
   */
  NETWORK_STELLAR_TESTNET(16),
  /**
   * <code>NETWORK_CARDANO_MAINNET = 17;</code>
   */
  NETWORK_CARDANO_MAINNET(17),
  /**
   * <code>NETWORK_CARDANO_TESTNET = 18;</code>
   */
  NETWORK_CARDANO_TESTNET(18),
  /**
   * <code>NETWORK_POLKADOT_MAINNET = 19;</code>
   */
  NETWORK_POLKADOT_MAINNET(19),
  /**
   * <code>NETWORK_POLKADOT_TESTNET = 20;</code>
   */
  NETWORK_POLKADOT_TESTNET(20),
  /**
   * <code>NETWORK_NEM_MAINNET = 21;</code>
   */
  NETWORK_NEM_MAINNET(21),
  /**
   * <code>NETWORK_NEM_TESTNET = 22;</code>
   */
  NETWORK_NEM_TESTNET(22),
  /**
   * <code>NETWORK_MONACOIN_MAINNET = 23;</code>
   */
  NETWORK_MONACOIN_MAINNET(23),
  /**
   * <code>NETWORK_MONACOIN_TESTNET = 24;</code>
   */
  NETWORK_MONACOIN_TESTNET(24),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>NETWORK_INVALID = 0;</code>
   */
  public static final int NETWORK_INVALID_VALUE = 0;
  /**
   * <code>NETWORK_BITCOIN_MAINNET = 1;</code>
   */
  public static final int NETWORK_BITCOIN_MAINNET_VALUE = 1;
  /**
   * <code>NETWORK_BITCOIN_TESTNET = 2;</code>
   */
  public static final int NETWORK_BITCOIN_TESTNET_VALUE = 2;
  /**
   * <code>NETWORK_ETHEREUM_MAINNET = 3;</code>
   */
  public static final int NETWORK_ETHEREUM_MAINNET_VALUE = 3;
  /**
   * <code>NETWORK_ETHEREUM_TESTNET = 4;</code>
   */
  public static final int NETWORK_ETHEREUM_TESTNET_VALUE = 4;
  /**
   * <code>NETWORK_LITECOIN_MAINNET = 5;</code>
   */
  public static final int NETWORK_LITECOIN_MAINNET_VALUE = 5;
  /**
   * <code>NETWORK_LITECOIN_TESTNET = 6;</code>
   */
  public static final int NETWORK_LITECOIN_TESTNET_VALUE = 6;
  /**
   * <code>NETWORK_BITCOINCASH_MAINNET = 7;</code>
   */
  public static final int NETWORK_BITCOINCASH_MAINNET_VALUE = 7;
  /**
   * <code>NETWORK_BITCOINCASH_TESTNET = 8;</code>
   */
  public static final int NETWORK_BITCOINCASH_TESTNET_VALUE = 8;
  /**
   * <code>NETWORK_RIPPLE_MAINNET = 9;</code>
   */
  public static final int NETWORK_RIPPLE_MAINNET_VALUE = 9;
  /**
   * <code>NETWORK_RIPPLE_TESTNET = 10;</code>
   */
  public static final int NETWORK_RIPPLE_TESTNET_VALUE = 10;
  /**
   * <code>NETWORK_TRON_MAINNET = 11;</code>
   */
  public static final int NETWORK_TRON_MAINNET_VALUE = 11;
  /**
   * <code>NETWORK_TRON_TESTNET = 12;</code>
   */
  public static final int NETWORK_TRON_TESTNET_VALUE = 12;
  /**
   * <code>NETWORK_C0BAN_MAINNET = 13;</code>
   */
  public static final int NETWORK_C0BAN_MAINNET_VALUE = 13;
  /**
   * <code>NETWORK_C0BAN_TESTNET = 14;</code>
   */
  public static final int NETWORK_C0BAN_TESTNET_VALUE = 14;
  /**
   * <code>NETWORK_STELLAR_MAINNET = 15;</code>
   */
  public static final int NETWORK_STELLAR_MAINNET_VALUE = 15;
  /**
   * <code>NETWORK_STELLAR_TESTNET = 16;</code>
   */
  public static final int NETWORK_STELLAR_TESTNET_VALUE = 16;
  /**
   * <code>NETWORK_CARDANO_MAINNET = 17;</code>
   */
  public static final int NETWORK_CARDANO_MAINNET_VALUE = 17;
  /**
   * <code>NETWORK_CARDANO_TESTNET = 18;</code>
   */
  public static final int NETWORK_CARDANO_TESTNET_VALUE = 18;
  /**
   * <code>NETWORK_POLKADOT_MAINNET = 19;</code>
   */
  public static final int NETWORK_POLKADOT_MAINNET_VALUE = 19;
  /**
   * <code>NETWORK_POLKADOT_TESTNET = 20;</code>
   */
  public static final int NETWORK_POLKADOT_TESTNET_VALUE = 20;
  /**
   * <code>NETWORK_NEM_MAINNET = 21;</code>
   */
  public static final int NETWORK_NEM_MAINNET_VALUE = 21;
  /**
   * <code>NETWORK_NEM_TESTNET = 22;</code>
   */
  public static final int NETWORK_NEM_TESTNET_VALUE = 22;
  /**
   * <code>NETWORK_MONACOIN_MAINNET = 23;</code>
   */
  public static final int NETWORK_MONACOIN_MAINNET_VALUE = 23;
  /**
   * <code>NETWORK_MONACOIN_TESTNET = 24;</code>
   */
  public static final int NETWORK_MONACOIN_TESTNET_VALUE = 24;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Network valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Network forNumber(int value) {
    switch (value) {
      case 0: return NETWORK_INVALID;
      case 1: return NETWORK_BITCOIN_MAINNET;
      case 2: return NETWORK_BITCOIN_TESTNET;
      case 3: return NETWORK_ETHEREUM_MAINNET;
      case 4: return NETWORK_ETHEREUM_TESTNET;
      case 5: return NETWORK_LITECOIN_MAINNET;
      case 6: return NETWORK_LITECOIN_TESTNET;
      case 7: return NETWORK_BITCOINCASH_MAINNET;
      case 8: return NETWORK_BITCOINCASH_TESTNET;
      case 9: return NETWORK_RIPPLE_MAINNET;
      case 10: return NETWORK_RIPPLE_TESTNET;
      case 11: return NETWORK_TRON_MAINNET;
      case 12: return NETWORK_TRON_TESTNET;
      case 13: return NETWORK_C0BAN_MAINNET;
      case 14: return NETWORK_C0BAN_TESTNET;
      case 15: return NETWORK_STELLAR_MAINNET;
      case 16: return NETWORK_STELLAR_TESTNET;
      case 17: return NETWORK_CARDANO_MAINNET;
      case 18: return NETWORK_CARDANO_TESTNET;
      case 19: return NETWORK_POLKADOT_MAINNET;
      case 20: return NETWORK_POLKADOT_TESTNET;
      case 21: return NETWORK_NEM_MAINNET;
      case 22: return NETWORK_NEM_TESTNET;
      case 23: return NETWORK_MONACOIN_MAINNET;
      case 24: return NETWORK_MONACOIN_TESTNET;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Network>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Network> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Network>() {
          public Network findValueByNumber(int number) {
            return Network.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.gincoinc.global.v1.EnumProto.getDescriptor().getEnumTypes().get(1);
  }

  private static final Network[] VALUES = values();

  public static Network valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Network(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.Network)
}

