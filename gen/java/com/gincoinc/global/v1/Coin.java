// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gincoinc/global/v1/gincoincglobalv1/enum.proto

package com.gincoinc.global.v1;

/**
 * <pre>
 * Coin is a type of crypto asset.
 * </pre>
 *
 * Protobuf enum {@code gincoinc.global.v1.Coin}
 */
public enum Coin
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>COIN_INVALID = 0;</code>
   */
  COIN_INVALID(0),
  /**
   * <code>COIN_BTC = 1;</code>
   */
  COIN_BTC(1),
  /**
   * <code>COIN_ETH = 2;</code>
   */
  COIN_ETH(2),
  /**
   * <code>COIN_LTC = 3;</code>
   */
  COIN_LTC(3),
  /**
   * <code>COIN_BCH = 4;</code>
   */
  COIN_BCH(4),
  /**
   * <code>COIN_XRP = 5;</code>
   */
  COIN_XRP(5),
  /**
   * <code>COIN_BAT = 6;</code>
   */
  COIN_BAT(6),
  /**
   * <code>COIN_TRX = 7;</code>
   */
  COIN_TRX(7),
  /**
   * <code>COIN_USDT = 8;</code>
   */
  COIN_USDT(8),
  /**
   * <code>COIN_RYO = 9;</code>
   */
  COIN_RYO(9),
  /**
   * <code>COIN_JASMY = 10;</code>
   */
  COIN_JASMY(10),
  /**
   * <code>COIN_ENJ = 11;</code>
   */
  COIN_ENJ(11),
  /**
   * <code>COIN_OMG = 12;</code>
   */
  COIN_OMG(12),
  /**
   * <code>COIN_XLM = 13;</code>
   */
  COIN_XLM(13),
  /**
   * <code>COIN_ADA = 14;</code>
   */
  COIN_ADA(14),
  /**
   * <code>COIN_DOT = 15;</code>
   */
  COIN_DOT(15),
  /**
   * <code>COIN_LINK = 16;</code>
   */
  COIN_LINK(16),
  /**
   * <code>COIN_DEP = 17;</code>
   */
  COIN_DEP(17),
  /**
   * <code>COIN_USDC = 18;</code>
   */
  COIN_USDC(18),
  /**
   * <code>COIN_GYEN = 19;</code>
   */
  COIN_GYEN(19),
  /**
   * <code>COIN_ZAIF = 20;</code>
   */
  COIN_ZAIF(20),
  /**
   * <code>COIN_FSCC = 21;</code>
   */
  COIN_FSCC(21),
  /**
   * <code>COIN_CMS = 22;</code>
   */
  COIN_CMS(22),
  /**
   * <code>COIN_CICC = 23;</code>
   */
  COIN_CICC(23),
  /**
   * <code>COIN_NCXC = 24;</code>
   */
  COIN_NCXC(24),
  /**
   * <code>COIN_COT = 25;</code>
   */
  COIN_COT(25),
  /**
   * <code>COIN_XEM = 26;</code>
   */
  COIN_XEM(26),
  /**
   * <code>COIN_MONA = 27;</code>
   */
  COIN_MONA(27),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>COIN_INVALID = 0;</code>
   */
  public static final int COIN_INVALID_VALUE = 0;
  /**
   * <code>COIN_BTC = 1;</code>
   */
  public static final int COIN_BTC_VALUE = 1;
  /**
   * <code>COIN_ETH = 2;</code>
   */
  public static final int COIN_ETH_VALUE = 2;
  /**
   * <code>COIN_LTC = 3;</code>
   */
  public static final int COIN_LTC_VALUE = 3;
  /**
   * <code>COIN_BCH = 4;</code>
   */
  public static final int COIN_BCH_VALUE = 4;
  /**
   * <code>COIN_XRP = 5;</code>
   */
  public static final int COIN_XRP_VALUE = 5;
  /**
   * <code>COIN_BAT = 6;</code>
   */
  public static final int COIN_BAT_VALUE = 6;
  /**
   * <code>COIN_TRX = 7;</code>
   */
  public static final int COIN_TRX_VALUE = 7;
  /**
   * <code>COIN_USDT = 8;</code>
   */
  public static final int COIN_USDT_VALUE = 8;
  /**
   * <code>COIN_RYO = 9;</code>
   */
  public static final int COIN_RYO_VALUE = 9;
  /**
   * <code>COIN_JASMY = 10;</code>
   */
  public static final int COIN_JASMY_VALUE = 10;
  /**
   * <code>COIN_ENJ = 11;</code>
   */
  public static final int COIN_ENJ_VALUE = 11;
  /**
   * <code>COIN_OMG = 12;</code>
   */
  public static final int COIN_OMG_VALUE = 12;
  /**
   * <code>COIN_XLM = 13;</code>
   */
  public static final int COIN_XLM_VALUE = 13;
  /**
   * <code>COIN_ADA = 14;</code>
   */
  public static final int COIN_ADA_VALUE = 14;
  /**
   * <code>COIN_DOT = 15;</code>
   */
  public static final int COIN_DOT_VALUE = 15;
  /**
   * <code>COIN_LINK = 16;</code>
   */
  public static final int COIN_LINK_VALUE = 16;
  /**
   * <code>COIN_DEP = 17;</code>
   */
  public static final int COIN_DEP_VALUE = 17;
  /**
   * <code>COIN_USDC = 18;</code>
   */
  public static final int COIN_USDC_VALUE = 18;
  /**
   * <code>COIN_GYEN = 19;</code>
   */
  public static final int COIN_GYEN_VALUE = 19;
  /**
   * <code>COIN_ZAIF = 20;</code>
   */
  public static final int COIN_ZAIF_VALUE = 20;
  /**
   * <code>COIN_FSCC = 21;</code>
   */
  public static final int COIN_FSCC_VALUE = 21;
  /**
   * <code>COIN_CMS = 22;</code>
   */
  public static final int COIN_CMS_VALUE = 22;
  /**
   * <code>COIN_CICC = 23;</code>
   */
  public static final int COIN_CICC_VALUE = 23;
  /**
   * <code>COIN_NCXC = 24;</code>
   */
  public static final int COIN_NCXC_VALUE = 24;
  /**
   * <code>COIN_COT = 25;</code>
   */
  public static final int COIN_COT_VALUE = 25;
  /**
   * <code>COIN_XEM = 26;</code>
   */
  public static final int COIN_XEM_VALUE = 26;
  /**
   * <code>COIN_MONA = 27;</code>
   */
  public static final int COIN_MONA_VALUE = 27;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Coin valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Coin forNumber(int value) {
    switch (value) {
      case 0: return COIN_INVALID;
      case 1: return COIN_BTC;
      case 2: return COIN_ETH;
      case 3: return COIN_LTC;
      case 4: return COIN_BCH;
      case 5: return COIN_XRP;
      case 6: return COIN_BAT;
      case 7: return COIN_TRX;
      case 8: return COIN_USDT;
      case 9: return COIN_RYO;
      case 10: return COIN_JASMY;
      case 11: return COIN_ENJ;
      case 12: return COIN_OMG;
      case 13: return COIN_XLM;
      case 14: return COIN_ADA;
      case 15: return COIN_DOT;
      case 16: return COIN_LINK;
      case 17: return COIN_DEP;
      case 18: return COIN_USDC;
      case 19: return COIN_GYEN;
      case 20: return COIN_ZAIF;
      case 21: return COIN_FSCC;
      case 22: return COIN_CMS;
      case 23: return COIN_CICC;
      case 24: return COIN_NCXC;
      case 25: return COIN_COT;
      case 26: return COIN_XEM;
      case 27: return COIN_MONA;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Coin>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Coin> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Coin>() {
          public Coin findValueByNumber(int number) {
            return Coin.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.gincoinc.global.v1.EnumProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final Coin[] VALUES = values();

  public static Coin valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Coin(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:gincoinc.global.v1.Coin)
}

